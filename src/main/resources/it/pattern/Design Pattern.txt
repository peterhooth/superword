This book isn't an introduction to object-oriented technology or design.
This book assumes you are reasonably proficient in at least one object-oriented programming language, and you should have some experience in object-oriented design as well.
You definitely shouldn't have to rush to the nearest dictionary the moment we mention "types" and "polymorphism," or "interface" as opposed to "implementation" inheritance.
On the other hand, this isn't an advanced technical treatise either.
It's a book of design patterns that describes simple and elegant solutions to specific problems in object-oriented software design.
Design patterns capture solutions that have developed and evolved over time.
Hence they aren't the designs people tend to generate initially.
They reflect untold redesign and recoding as developers have struggled for greater reuse and flexibility in their software.
Design patterns capture these solutions in a succinct and easily applied form.
The design patterns require neither unusual language features nor amazing programming tricks with which to astound your friends and managers.
All can be implemented in standard object-oriented languages, though they might take a little more work than ad hoc solutions.
But the extra effort invariably pays dividends in increased flexibility and reusability.
Once you understand the design patterns and have had an "Aha!" (and not just a "Huh?") experience with them, you won't ever think about object-oriented design in the same way.
A word of warning and encouragement: Don't worry if you don't understand this book completely on the first reading.
We didn't understand it all on the first writing! Remember that this isn't a book to read once and put on a shelf.
We hope you'll find yourself referring to it again and again for design insights and for inspiration.
We don't consider this collection of design patterns complete and static; it's more a recording of our current thoughts on design.
We welcome comments on it, whether criticisms of our examples, references and known uses we've missed, or design patterns we should have included.
And now there's a Web page at http://st-www.cs.uiuc.edu/users/patterns/DPBook/DPBook.html for late-breaking information and updates.
Consider the work of a future software archeologist, tracing the history of computing.
The fossil record will likely show clear strata: here is a layer formed of assembly language artifacts, there is a layer populated with the skeletons of high order programming languages (with certain calcified legacy parts probably still showing some signs of life)
Each such layer will be intersected with the imprint of other factors that have shaped the software landscape: components, residue from the great operating system and browser wars, methods, processes, tools.
Each line in this strata marks a definitive event: below that line, computing was this way; above that line, the art of computing had changed.
Design Patterns draws such a line of demarcation; this is a work that represents a change in the practice of computing.
Erich, Richard, Ralph, and John present a compelling case for the importance of patterns in crafting complex systems.
Additionally, they give us a language of common patterns that can be used in a variety of domains.
As I travel about the world working with projects of varying domains and complexities, it is uncommon for me to encounter developers who have not at least heard of the patterns movement.
In the more successful projects, it is quite common to see many of these design patterns actually used.
With this book, the Gang of Four have made a seminal contribution to software engineering.
There is much to learned from them, and much to be actively applied.
It includes a design case study that demonstrates how design patterns apply in practice.
Its chapters divide the design patterns into three types: creational, structural, and behavioral.
You can read the catalog from start to finish, or you can just browse from pattern to pattern.
That will help you see how closely related patterns distinguish themselves.
You can use the references between the patterns as a logical route through the catalog.
This approach will give you insight into how patterns relate to each other, how they can be combined with other patterns, and which patterns work well together.
Yet another way to read the catalog is to use a more problem-directed approach.
Some people read the catalog through first and then use a problem-directed approach to apply the patterns to their projects.
If you aren't an experienced object-oriented designer, then start with the simplest and most common patterns:
It's hard to find an object-oriented system that doesn't use at least a couple of these patterns, and large systems use nearly all of them.
This subset will help you understand design patterns in particular and good object-oriented design in general.
Designing object-oriented software is hard, and designing reusable object-oriented software is even harder.
You must find pertinent objects, factor them into classes at the right granularity, define class interfaces and inheritance hierarchies, and establish key relationships among them.
Your design should be specific to the problem at hand but also general enough to address future problems and requirements.
You also want to avoid redesign, or at least minimize it.
Experienced object-oriented designers will tell you that a reusable and flexible design is difficult if not impossible to get "right" the first time.
Before a design is finished, they usually try to reuse it several times, modifying it each time.
It takes a long time for novices to learn what good object-oriented design is all about.
One thing expert designers know not to do is solve every problem from first principles.
Rather, they reuse solutions that have worked for them in the past.
When they find a good solution, they use it again and again.
Consequently, you'll find recurring patterns of classes and communicating objects in many object-oriented systems.
These patterns solve specific design problems and make object-oriented designs more flexible, elegant, and ultimately reusable.
They help designers reuse successful designs by basing new designs on prior experience.
A designer who is familiar with such patterns can apply them immediately to design problems without having to rediscover them.
In the same way, object-oriented designers follow patterns like "represent states with objects" and "decorate objects so you can easily add/remove features." Once you know the pattern, a lot of design decisions follow automatically.
However, we don't do a good job of recording experience in software design for others to use.
The purpose of this book is to record experience in designing object-oriented software as design patterns.
Each design pattern systematically names, explains, and evaluates an important and recurring design in object-oriented systems.
Our goal is to capture design experience in a form that people can use effectively.
To this end we have documented some of the most important design patterns and present them as a catalog.
Design patterns make it easier to reuse successful designs and architectures.
Expressing proven techniques as design patterns makes them more accessible to developers of new systems.
Design patterns help you choose design alternatives that make a system reusable and avoid alternatives that compromise reusability.
Design patterns can even improve the documentation and maintenance of existing systems by furnishing an explicit specification of class and object interactions and their underlying intent.
Put simply, design patterns help a designer get a design "right" faster.
None of the design patterns in this book describes new or unproven designs.
We have included only designs that have been applied more than once in different systems.
They are either part of the folklore of the object-oriented community or are elements of some successful object-oriented systemsâ€”neither of which is easy for novice designers to learn from.
So although these designs aren't new, we capture them in a new and accessible way: as a catalog of design patterns having a consistent format.
Despite the book's size, the design patterns in it capture only a fraction of what an expert might know.
It doesn't have any patterns dealing with concurrency or distributed programming or real-time programming.
It doesn't tell you how to build user interfaces, how to write device drivers, or how to use an object-oriented database.
Each of these areas has its own patterns, and it would be worthwhile for someone to catalog those too.
Christopher Alexander says, "Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice" [AIS+77, page x]
Even though Alexander was talking about patterns in buildings and towns, what he says is true about object-oriented design patterns.
The pattern name is a handle we can use to describe a design problem, its solutions, and consequences in a word or two.
It lets us design at a higher level of abstraction.
Having a vocabulary for patterns lets us talk about them with our colleagues, in our documentation, and even to ourselves.
It makes it easier to think about designs and to communicate them and their trade-offs to others.
Finding good names has been one of the hardest parts of developing our catalog.
It might describe specific design problems such as how to represent algorithms as objects.
It might describe class or object structures that are symptomatic of an inflexible design.
Sometimes the problem will include a list of conditions that must be met before it makes sense to apply the pattern.
The solution describes the elements that make up the design, their relationships, responsibilities, and collaborations.
The solution doesn't describe a particular concrete design or implementation, because a pattern is like a template that can be applied in many different situations.
Instead, the pattern provides an abstract description of a design problem and how a general arrangement of elements (classes and objects in our case) solves it.
The consequences are the results and trade-offs of applying the pattern.
Though consequences are often unvoiced when we describe design decisions, they are critical for evaluating design alternatives and for understanding the costs and benefits of applying the pattern.
The consequences for software often concern space and time trade-offs.
Since reuse is often a factor in object-oriented design, the consequences of a pattern include its impact on a system's flexibility, extensibility, or portability.
Listing these consequences explicitly helps you understand and evaluate them.
Point of view affects one's interpretation of what is and isn't a pattern.
One person's pattern can be another person's primitive building block.
For this book we have concentrated on patterns at a certain level of abstraction.
Design patterns are not about designs such as linked lists and hash tables that can be encoded in classes and reused as is.
Nor are they complex, domain-specific designs for an entire application or subsystem.
The design patterns in this book are descriptions of communicating objects and classes.
A design pattern names, abstracts, and identifies the key aspects of a common design structure that make it useful for creating a reusable object-oriented design.
The design pattern identifies the participating classes and instances, their roles and collaborations, and the distribution of responsibilities.
Each design pattern focuses on a particular object-oriented design problem or issue.
It describes when it applies, whether it can be applied in view of other design constraints, and the consequences and trade-offs of its use.
Since we must eventually implement our designs, a design pattern also provides sample C++ and (sometimes) Smalltalk code to illustrate an implementation.
Although design patterns describe object-oriented designs, they are based on practical solutions that have been implemented in mainstream object-oriented programming languages like Smalltalk and C++ rather than procedural languages (Pascal, C, Ada) or more dynamic object-oriented languages (CLOS, Dylan, Self)
We chose Smalltalk and C++ for pragmatic reasons: Our day-to-day experience has been in these languages, and they are increasingly popular.
The choice of programming language is important because it influences one's point of view.
If we assumed procedural languages, we might have included design patterns called "Inheritance," "Encapsulation," and "Polymorphism." Similarly, some of our patterns are supported directly by the less common object-oriented languages.
In fact, there are enough differences between Smalltalk and C++ to mean that some patterns can be expressed more easily in one language than the other.
Looking at the design patterns inside MVC should help you see what we mean by the term "pattern."
The Model is the application object, the View is its screen presentation, and the Controller defines the way the user interface reacts to user input.
A view must ensure that its appearance reflects the state of the model.
Whenever the model's data changes, the model notifies views that depend on it.
In response, each view gets an opportunity to update itself.
This approach lets you attach multiple views to a model to provide different presentations.
You can also create new views for a model without rewriting it.
The model contains some data values, and the views defining a spreadsheet, histogram, and pie chart display these data in various ways.
The model communicates with its views when its values change, and the views communicate with the model to access these values.
Taken at face value, this example reflects a design that decouples views from models.
But the design is applicable to a more general problem: decoupling objects so that changes to one can affect any number of others without requiring the changed object to know details of the others.
This more general design is described by the Observer (page 293) design pattern.
Another feature of MVC is that views can be nested.
For example, a control panel of buttons might be implemented as a complex view containing nested button views.
The user interface for an object inspector can consist of nested views that may be reused in a debugger.
CompositeView objects act just like View objects; a composite view can be used wherever a view can be used, but it also contains and manages nested views.
Again, we could think of this as a design that lets us treat a composite view just like we treat one of its components.
But the design is applicable to a more general problem, which occurs whenever we want to group objects and treat the group like an individual object.
This more general design is described by the Composite (163) design pattern.
It lets you create a class hierarchy in which some subclasses define primitive objects (e.g., Button) and other classes define composite objects (CompositeView) that assemble the primitives into more complex objects.
You might want to change the way it responds to the keyboard, for example, or have it use a pop-up menu instead of command keys.
There is a class hierarchy of controllers, making it easy to create a new controller as a variation on an existing one.
A view uses an instance of a Controller subclass to implement a particular response strategy; to implement a different strategy, simply replace the instance with a different kind of controller.
It's even possible to change a view's controller at run-time to let the view change the way it responds to user input.
For example, a view can be disabled so that it doesn't accept input simply by giving it a controller that ignores input events.
The View-Controller relationship is an example of the Strategy (315) design pattern.
It's useful when you want to replace the algorithm either statically or dynamically, when you have a lot of variants of the algorithm, or when the algorithm has complex data structures that you want to encapsulate.
But the main relationships in MVC are given by the Observer, Composite, and Strategy design patterns.
How do we describe design patterns? Graphical notations, while important and useful, aren't sufficient.
They simply capture the end product of the design process as relationships between classes and objects.
To reuse the design, we must also record the decisions, alternatives, and trade-offs that led to it.
Concrete examples are important too, because they help you see the design in action.
Each pattern is divided into sections according to the following template.
The template lends a uniform structure to the information, making design patterns easier to learn, compare, and use.
Pattern Name and Classification The pattern's name conveys the essence of the pattern succinctly.
A good name is vital, because it will become part of your design vocabulary.
The pattern's classification reflects the scheme we introduce in Section 1.5
Intent A short statement that answers the following questions: What does the design pattern do? What is its rationale and intent? What particular design issue or problem does it address?
Also Known As Other well-known names for the pattern, if any.
Motivation A scenario that illustrates a design problem and how the class and object structures in the pattern solve the problem.
The scenario will help you understand the more abstract description of the pattern that follows.
Applicability What are the situations in which the design pattern can be applied? What are examples of poor designs that the pattern can address? How can you recognize these situations?
Structure A graphical representation of the classes in the pattern using a notation based on the Object Modeling Technique (OMT) [RBP+91]
Participants The classes and/or objects participating in the design pattern and their responsibilities.
Collaborations How the participants collaborate to carry out their responsibilities.
How does the pattern support its objectives? What are the trade-offs and results of using the pattern? What aspect of system structure does it let you vary independently?
Implementation What pitfalls, hints, or techniques should you be aware of when implementing the pattern? Are there language-specific issues?
Sample Code Code fragments that illustrate how you might implement the pattern in C++ or Smalltalk.
Known Uses Examples of the pattern found in real systems.
Related Patterns What design patterns are closely related to this one? What are the important differences? With which other patterns should this one be used?
The appendices provide background information that will help you understand the patterns and the discussions surrounding them.
We've already mentioned Appendix B, which presents the various notations.
We'll also describe aspects of the notations as we introduce them in the upcoming discussions.
Finally, Appendix C contains source code for the foundation classes we use in code samples.
Their names and intents are listed next to give you an overview.
The number in parentheses after each pattern name gives the page number for the pattern (a convention we follow throughout the book)
Abstract Factory (87) Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
Adapter (139) Convert the interface of a class into another interface clients expect.
Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.
Bridge (151) Decouple an abstraction from its implementation so that the two can vary independently.
Separate the construction of a complex object from its representation so that the same construction process can create different representations.
Chain of Responsibility (223) Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request.
Chain the receiving objects and pass the request along the chain until an object handles it.
Command (233) Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.
Composite (163) Compose objects into tree structures to represent part-whole hierarchies.
Composite lets clients treat individual objects and compositions of objects uniformly.
Decorators provide a flexible alternative to subclassing for extending functionality.
Facade (185) Provide a unified interface to a set of interfaces in a subsystem.
Facade defines a higher-level interface that makes the subsystem easier to use.
Factory Method (107) Define an interface for creating an object, but let subclasses decide which class to instantiate.
Flyweight (195) Use sharing to support large numbers of fine-grained objects efficiently.
Interpreter (243) Given a language, define a represention for its grammar along with an interpreter that uses the representation to interpret sentences in the language.
Iterator (257) Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.
Mediator (273) Define an object that encapsulates how a set of objects interact.
Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.
Without violating encapsulation, capture and externalize an object's internal state so that the object can be restored to this state later.
Observer (293) Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
Prototype (117) Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.
Proxy (207) Provide a surrogate or placeholder for another object to control access to it.
Singleton (127) Ensure a class only has one instance, and provide a global point of access to it.
State (305) Allow an object to alter its behavior when its internal state changes.
Strategy (315) Define a family of algorithms, encapsulate each one, and make them interchangeable.
Strategy lets the algorithm vary independently from clients that use it.
Template Method (325) Define the skeleton of an algorithm in an operation, deferring some steps to subclasses.
Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.
Visitor (331) Represent an operation to be performed on the elements of an object structure.
Visitor lets you define a new operation without changing the classes of the elements on which it operates.
Design patterns vary in their granularity and level of abstraction.
Because there are many design patterns, we need a way to organize them.
This section classifies design patterns so that we can refer to families of related patterns.
The classification helps you learn the patterns in the catalog faster, and it can direct efforts to find new patterns as well.
The first criterion, called purpose, reflects what a pattern does.
Behavioral patterns characterize the ways in which classes or objects interact and distribute responsibility.
The second criterion, called scope, specifies whether the pattern applies primarily to classes or to objects.
Class patterns deal with relationships between classes and their subclasses.
These relationships are established through inheritance, so they are staticâ€”fixed at compile-time.
Object patterns deal with object relationships, which can be changed at run-time and are more dynamic.
So the only patterns labeled "class patterns" are those that focus on class relationships.
Creational class patterns defer some part of object creation to subclasses, while Creational object patterns defer it to another object.
The Structural class patterns use inheritance to compose classes, while the Structural object patterns describe ways to assemble objects.
The Behavioral class patterns use inheritance to describe algorithms and flow of control, whereas the Behavioral object patterns describe how a group of objects cooperate to perform a task that no single object can carry out alone.
For example, Composite is often used with Iterator or Visitor.
Some patterns are alternatives: Prototype is often an alternative to Abstract Factory.
Some patterns result in similar designs even though the patterns.
For example, the structure diagrams of Composite and Decorator are similar.
Yet another way to organize design patterns is according to how they reference each other in their "Related Patterns" sections.
Having multiple ways of thinking about patterns will deepen your insight into what they do, how they compare, and when to apply them.
Design patterns solve many of the day-to-day problems object-oriented designers face, and in many different ways.
Here are several of these problems and how design patterns solve them.
An object packages both data and the procedures that operate on that data.
An object performs an operation when it receives a request (or message) from a client.
Requests are the only way to get an object to execute an operation.
Operations are the only way to change an object's internal data.
Because of these restrictions, the object's internal state is said to be encapsulated; it cannot be accessed directly, and its representation is invisible from outside the object.
The hard part about object-oriented design is decomposing a system into objects.
The task is difficult because many factors come into play: encapsulation, granularity, dependency, flexibility, performance, evolution, reusability, and on and on.
You can write a problem statement, single out the nouns and verbs, and create corresponding classes and operations.
Or you can focus on the collaborations and responsibilities in your system.
Or you can model the real world and translate the objects found during analysis into design.
There will always be disagreement on which approach is best.
Many objects in a design come from the analysis model.
But object-oriented designs often end up with classes that have no counterparts in the real world.
For example, the Composite (163) pattern introduces an abstraction for treating objects uniformly that doesn't have a physical counterpart.
Strict modeling of the real world leads to a system that reflects today's realities but not necessarily tomorrow's.
The abstractions that emerge during design are key to making a design flexible.
Design patterns help you identify less-obvious abstractions and the objects that can capture them.
The Strategy (315) pattern describes how to implement interchangeable families of algorithms.
The State (305) pattern represents each state of an entity as an object.
These objects are seldom found during analysis or even the early stages of design; they're discovered later in the course of making a design more flexible and reusable.
They can represent everything down to the hardware or all the way up to entire applications.
Other design patterns describe specific ways of decomposing an object into smaller objects.
Every operation declared by an object specifies the operation's name, the objects it takes as parameters, and the operation's return value.
The set of all signatures defined by an object's operations is called the interface to the object.
An object's interface characterizes the complete set of requests that can be sent to the object.
Any request that matches a signature in the object's interface may be sent to the object.
A type is a name used to denote a particular interface.
We speak of an object as having the type "Window" if it accepts all requests for the operations defined in the interface named "Window." An object may have many types, and widely different objects can share a type.
Part of an object's interface may be characterized by one type, and other parts by other types.
Two objects of the same type need only share parts of their interfaces.
We say that a type is a subtype of another if its interface contains the interface of its supertype.
Often we speak of a subtype inheriting the interface of its supertype.
There is no way to know anything about an object or to ask it to do anything without going through its interface.
That means two objects having completely different implementations can have identical interfaces.
When a request is sent to an object, the particular operation that's performed depends on both the request and the receiving object.
Different objects that support identical requests may have different implementations of the operations that fulfill these requests.
The run-time association of a request to an object and one of its operations is known as dynamic binding.
Dynamic binding means that issuing a request doesn't commit you to a particular implementation until run-time.
Consequently, you can write programs that expect an object with a particular interface, knowing that any object that has the correct interface will accept the request.
Moreover, dynamic binding lets you substitute objects that have identical interfaces for each other at run-time.
This substitutability is known as polymorphism, and it's a key concept in object-oriented systems.
It lets a client object make few assumptions about other objects beyond supporting a particular interface.
Polymorphism simplifies the definitions of clients, decouples objects from each other, and lets them vary their relationships to each other at run-time.
Design patterns help you define interfaces by identifying their key elements and the kinds of data that get sent across an interface.
A design pattern might also tell you what not to put in the interface.
It describes how to encapsulate and save the internal state of an object so that the object can be restored to that state later.
The pattern stipulates that Memento objects must define two interfaces: a restricted one that lets clients hold and copy mementos, and a privileged one that only the original object can use to store and retrieve state in the memento.
In particular, they often require some classes to have similar interfaces, or they place constraints on the interfaces of some classes.
In Visitor (331), the Visitor interface must reflect all classes of objects that visitors can visit.
So far we've said little about how we actually define an object.
The class specifies the object's internal data and representation and defines the operations the object can perform.
Our OMT-based notation (summarized in Appendix B) depicts a class as a rectangle with the class name in bold.
Any data that the class defines comes after the operations.
Lines separate the class name from the operations and the operations from the data:
Return types and instance variable types are optional, since we don't assume a statically typed implementation language.
The object is said to be an instance of the class.
The process of instantiating a class allocates storage for the object's internal data (made up of instance variables) and associates the operations with these data.
Many similar instances of an object can be created by instantiating a class.
A dashed arrowhead line indicates a class that instantiates objects of another class.
The arrow points to the class of the instantiated objects.
New classes can be defined in terms of existing classes using class inheritance.
When a subclass inherits from a parent class, it includes the definitions of all the data and operations that the parent class defines.
Objects that are instances of the subclass will contain all data defined by the subclass and its parent classes, and they'll be able to perform all operations defined by this subclass and its parents.
We indicate the subclass relationship with a vertical line and a triangle:
An abstract class is one whose main purpose is to define a common interface for its subclasses.
An abstract class will defer some or all of its implementation to operations defined in subclasses; hence an abstract class cannot be instantiated.
The operations that an abstract class declares but doesn't implement are called abstract operations.
Subclasses can refine and redefine behaviors of their parent classes.
More specifically, a class may override an operation defined by its parent class.
Overriding gives subclasses a chance to handle requests instead of their parent classes.
Class inheritance lets you define classes simply by extending other classes, making it easy to define families of objects having related functionality.
The names of abstract classes appear in slanted type to distinguish them from concrete classes.
A diagram may include pseudocode for an operation's implementation; if so, the code will appear in a dog-eared box connected by a dashed line to the operation it implements.
A mixin class is a class that's intended to provide an optional interface or functionality to other classes.
It's similar to an abstract class in that it's not intended to be instantiated.
It's important to understand the difference between an object's class and its type.
The class defines the object's internal state and the implementation of its operations.
In contrast, an object's type only refers to its interfaceâ€”the set of requests to which it can respond.
An object can have many types, and objects of different classes can have the same type.
Of course, there's a close relationship between class and type.
Because a class defines the operations an object can perform, it also defines the object's type.
When we say that an object is an instance of a class, we imply that the object supports the interface defined by the class.
Languages like C++ and Eiffel use classes to specify both an object's type and its implementation.
Smalltalk programs do not declare the types of variables; consequently, the compiler does not check that the types of objects assigned to a variable are subtypes of the variable's type.
Sending a message requires checking that the class of the receiver implements the message, but it doesn't require checking that the receiver is an instance of a particular class.
It's also important to understand the difference between class inheritance and interface inheritance (or subtyping)
Class inheritance defines an object's implementation in terms of another object's implementation.
In short, it's a mechanism for code and representation sharing.
In contrast, interface inheritance (or subtyping) describes when an object can be used in place of another.
It's easy to confuse these two concepts, because many languages don't make the distinction explicit.
In languages like C++ and Eiffel, inheritance means both interface and implementation inheritance.
The standard way to inherit an interface in C++ is to inherit publicly from a class that has (pure) virtual.
Pure interface inheritance can be approximated in C++ by inheriting publicly from pure abstract classes.
Pure implementation or class inheritance can be approximated with private inheritance.
You can assign instances of any class to a variable as long as those instances support the operation performed on the value of the variable.
For example, objects in a Chain of Responsibility (223) must have a common type, but usually they don't share a common implementation.
In the Composite (163) pattern, Component defines a common interface, but Composite often defines a common implementation.
Class inheritance is basically just a mechanism for extending an application's functionality by reusing functionality in parent classes.
It lets you define a new kind of object rapidly in terms of an old one.
It lets you get new implementations almost for free, inheriting most of what you need from existing classes.
Inheritance's ability to define families of objects with identical interfaces (usually by inheriting from an abstract class) is also important.
When inheritance is used carefully (some will say properly), all classes derived from an abstract class will share its interface.
This implies that a subclass merely adds or overrides operations and does not hide operations of the parent class.
All subclasses can then respond to the requests in the interface of this abstract class, making them all subtypes of the abstract class.
There are two benefits to manipulating objects solely in terms of the interface defined by abstract classes:
Clients remain unaware of the specific types of objects they use, as long as the objects adhere to the interface that clients expect.
Clients remain unaware of the classes that implement these objects.
Clients only know about the abstract class(es) defining the interface.
This so greatly reduces implementation dependencies between subsystems that it leads to the following principle of reusable object-oriented design:
Don't declare variables to be instances of particular concrete classes.
Instead, commit only to an interface defined by an abstract class.
You will find this to be a common theme of the design patterns in this book.
By abstracting the process of object creation, these patterns give you different ways to associate an interface with its implementation transparently at instantiation.
Creational patterns ensure that your system is written in terms of interfaces, not implementations.
Most people can understand concepts like objects, interfaces, classes, and inheritance.
The challenge lies in applying them to build flexible, reusable software, and design patterns can show you how.
The two most common techniques for reusing functionality in object-oriented systems are class inheritance and object composition.
As we've explained, class inheritance lets you define the implementation of one class in terms of another's.
Reuse by subclassing is often referred to as white-box reuse.
The term "white-box" refers to visibility: With inheritance, the internals of parent classes are often visible to subclasses.
Here, new functionality is obtained by assembling or composing objects to get more complex functionality.
Object composition requires that the objects being composed have well-defined interfaces.
This style of reuse is called black-box reuse, because no internal details of objects are visible.
Class inheritance is defined statically at compile-time and is straightforward to use, since it's supported directly by the programming language.
Class inheritance also makes it easier to modify the implementation being reused.
When a subclass overrides some but not all operations, it can affect the operations it inherits as well, assuming they call the overridden operations.
First, you can't change the implementations inherited from parent classes at run-time, because inheritance is defined at compile-time.
Second, and generally worse, parent classes often define at least part of their subclasses' physical representation.
Because inheritance exposes a subclass to details of its parent's implementation, it's often said that "inheritance breaks encapsulation" [Sny86]
The implementation of a subclass becomes so bound up with the implementation of its parent class that any change in the parent's implementation will force the subclass to change.
Implementation dependencies can cause problems when you're trying to reuse a subclass.
Should any aspect of the inherited implementation not be appropriate for new problem domains, the parent class must be rewritten or replaced by something more appropriate.
One cure for this is to inherit only from abstract classes, since they usually provide little or no implementation.
Object composition is defined dynamically at run-time through objects acquiring references to other objects.
Composition requires objects to respect each others' interfaces, which in turn requires carefully designed interfaces that don't stop you from using one object with many others.
Because objects are accessed solely through their interfaces, we don't break encapsulation.
Any object can be replaced at run-time by another as long as it has the same type.
Moreover, because an object's implementation will be written in terms of object interfaces, there are substantially fewer implementation dependencies.
Favoring object composition over class inheritance helps you keep each class encapsulated and focused on one task.
Your classes and class hierarchies will remain small and will be less likely to grow into unmanageable monsters.
On the other hand, a design based on object composition will have more objects (if fewer classes), and the system's behavior will depend on their interrelationships instead of being defined in one class.
That leads us to our second principle of object-oriented design:
Ideally, you shouldn't have to create new components to achieve reuse.
You should be able to get all the functionality you need just by assembling existing components through object composition.
But this is rarely the case, because the set of available components is never quite rich enough in practice.
Reuse by inheritance makes it easier to make new components that can be composed with old ones.
Nevertheless, our experience is that designers overuse inheritance as a reuse technique, and designs are often made more reusable (and simpler) by depending more on object composition.
You'll see object composition applied again and again in the design patterns.
In delegation, two objects are involved in handling a request: a receiving object delegates operations to its delegate.
This is analogous to subclasses deferring requests to parent classes.
But with inheritance, an inherited operation can always refer to the receiving object through the this member variable in C++ and self in Smalltalk.
To achieve the same effect with delegation, the receiver passes itself to the delegate to let the delegated operation refer to the receiver.
For example, instead of making class Window a subclass of Rectangle (because windows happen to be rectangular), the Window class might reuse the behavior of Rectangle by keeping a Rectangle instance variable and delegating Rectangle-specific behavior to it.
In other words, instead of a Window being a Rectangle, it would have a Rectangle.
Window must now forward requests to its Rectangle instance explicitly, whereas before it would have inherited those operations.
The following diagram depicts the Window class delegating its Area operation to a Rectangle instance.
A plain arrowhead line indicates that a class keeps a reference to an instance of another class.
The reference has an optional name, "rectangle" in this case.
The main advantage of delegation is that it makes it easy to compose behaviors at run-time and to change the way they're composed.
Our window can become circular at run-time simply by replacing its Rectangle instance with a Circle instance, assuming Rectangle and Circle have the same type.
Delegation has a disadvantage it shares with other techniques that make software more flexible through object composition: Dynamic, highly parameterized software is harder to understand than more static software.
There are also run-time inefficiencies, but the human inefficiencies are more important in the long run.
Delegation is a good design choice only when it simplifies more than it complicates.
It isn't easy to give rules that tell you exactly when to use delegation, because how effective it will be depends on the context and on how much experience you have with it.
Delegation works best when it's used in highly stylized waysâ€”that is, in standard patterns.
In the State pattern, an object delegates requests to a State object that represents its current state.
In the Strategy pattern, an object delegates a specific request to an object that represents a strategy for carrying out the request.
An object will only have one state, but it can have many strategies for different requests.
The purpose of both patterns is to change the behavior of an object by changing the objects to which it delegates requests.
In Visitor, the operation that gets performed on each element of an object structure is always delegated to the Visitor object.
Mediator (273) introduces an object to mediate communication between other objects.
Sometimes the Mediator object implements operations simply by forwarding them to the other objects; other times it passes along a reference to itself and thus uses true delegation.
Chain of Responsibility (223) handles requests by forwarding them from one object to another along a chain of objects.
Sometimes this request carries with it a reference to the original object receiving the request, in which case the pattern is using delegation.
If the abstraction and a particular implementation are closely matched, then the abstraction may simply delegate operations to that implementation.
It shows that you can always replace inheritance with object composition as a mechanism for code reuse.
Another (not strictly object-oriented) technique for reusing functionality is through parameterized types, also known as generics (Ada, Eiffel) and templates (C++)
This technique lets you define a type without specifying all the other types it uses.
The unspecified types are supplied as parameters at the point of use.
For example, a List class can be parameterized by the type of elements it contains.
To declare a list of integers, you supply the type "integer" as a parameter to the List parameterized type.
To declare a list of String objects, you supply the "String" type as a parameter.
The language implementation will create a customized version of the List class template for each type of element.
Parameterized types give us a third way (in addition to class inheritance and object composition) to compose behavior in object-oriented systems.
Many designs can be implemented using any of these three techniques.
To parameterize a sorting routine by the operation it uses to compare elements, we could make the comparison.
Object composition lets you change the behavior being composed at run-time, but it also requires indirection and can be less efficient.
Inheritance lets you provide default implementations for operations and lets subclasses override them.
Parameterized types let you change the types that a class can use.
But neither inheritance nor parameterized types can change at run-time.
Which approach is best depends on your design and implementation constraints.
None of the patterns in this book concerns parameterized types, though we use them on occasion to customize a pattern's C++ implementation.
Parameterized types aren't needed at all in a language like Smalltalk that doesn't have compile-time type checking.
An object-oriented program's run-time structure often bears little resemblance to its code structure.
The code structure is frozen at compile-time; it consists of classes in fixed inheritance relationships.
Trying to understand one from the other is like trying to understand the dynamism of living ecosystems from the static taxonomy of plants and animals, and vice versa.
Consider the distinction between object aggregation and acquaintance and how differently they manifest themselves at compile- and run-times.
Aggregation implies that one object owns or is responsible for another object.
Generally we speak of an object having or being part of another object.
Aggregation implies that an aggregate object and its owner have identical lifetimes.
Acquaintance implies that an object merely knows of another object.
Acquainted objects may request operations of each other, but they aren't responsible for each other.
Acquaintance is a weaker relationship than aggregation and suggests much looser coupling between objects.
An arrowhead line with a diamond at its base denotes aggregation:
It's easy to confuse aggregation and acquaintance, because they are often implemented in the same way.
There's no distinction in the programming language between aggregation and acquaintance.
In C++, aggregation can be implemented by defining member variables that are real instances, but it's more common to define them as pointers or references to instances.
Ultimately, acquaintance and aggregation are determined more by intent than by explicit language mechanisms.
The distinction may be hard to see in the compile-time structure, but it's significant.
Aggregation relationships tend to be fewer and more permanent than acquaintance.
Acquaintances, in contrast, are made and remade more frequently, sometimes existing only for the duration of an operation.
Acquaintances are more dynamic as well, making them more difficult to discern in the source code.
With such disparity between a program's run-time and compile-time structures, it's clear that code won't reveal everything about how a system will work.
The system's run-time structure must be imposed more by the.
The relationships between objects and their types must be designed with great care, because they determine how good or bad the run-time structure is.
Many design patterns (in particular those that have object scope) capture the distinction between compile-time and run-time structures explicitly.
Observer (293) involves run-time structures that are often hard to understand unless you know the pattern.
Chain of Responsibility (223) also results in communication patterns that inheritance doesn't reveal.
In general, the run-time structures aren't clear from the code until you understand the patterns.
The key to maximizing reuse lies in anticipating new requirements and changes to existing requirements, and in designing your systems so that they can evolve accordingly.
To design the system so that it's robust to such changes, you must consider how the system might need to change over its lifetime.
A design that doesn't take change into account risks major redesign in the future.
Those changes might involve class redefinition and reimplementation, client modification, and retesting.
Redesign affects many parts of the software system, and unanticipated changes are invariably expensive.
Design patterns help you avoid this by ensuring that a system can change in specific ways.
Each design pattern lets some aspect of system structure vary independently of other aspects, thereby making a system more robust to a particular kind of change.
Here are some common causes of redesign along with the design pattern(s) that address them:
Specifying a class name when you create an object commits you to a particular implementation instead of a particular interface.
When you specify a particular operation, you commit to one way of satisfying a request.
External operating system interfaces and application programming interfaces (APIs) are different on different hardware and software platforms.
Software that depends on a particular platform will be harder to port to other platforms.
It may even be difficult to keep it up to date on its native platform.
It's important therefore to design your system to limit its platform dependencies.
Clients that know how an object is represented, stored, located, or implemented might need to be changed when the object changes.
Algorithms are often extended, optimized, and replaced during development and reuse.
Objects that depend on an algorithm will have to change when the algorithm changes.
Therefore algorithms that are likely to change should be isolated.
Classes that are tightly coupled are hard to reuse in isolation, since they depend on each other.
Tight coupling leads to monolithic systems, where you can't change or remove a class without understanding and changing many other classes.
The system becomes a dense mass that's hard to learn, port, and maintain.
Loose coupling increases the probability that a class can be reused by itself and that a system can be learned, ported, modified, and extended more easily.
Design patterns use techniques such as abstract coupling and layering to promote loosely coupled systems.
Defining a subclass also requires an in-depth understanding of the parent class.
An overridden operation might be required to call an inherited operation.
And subclassing can lead to an explosion of classes, because you might have to introduce many new subclasses for even a simple extension.
Object composition in general and delegation in particular provide flexible alternatives to inheritance for combining behavior.
New functionality can be added to an application by composing existing objects in new ways rather than by defining new subclasses of existing classes.
On the other hand, heavy use of object composition can make designs harder to understand.
Many design patterns produce designs in which you can introduce customized functionality just by defining one subclass and composing its instances with existing ones.
Sometimes you have to modify a class that can't be modified conveniently.
Perhaps you need the source code and don't have it (as may be the case with a commercial class library)
Or maybe any change would require modifying lots of existing subclasses.
Design patterns offer ways to modify classes in such circumstances.
These examples reflect the flexibility that design patterns can help you build into your software.
How crucial such flexibility is depends on the kind of software you're building.
Let's look at the role design patterns play in the development of three broad classes of software: application programs, toolkits, and frameworks.
If you're building an application program such as a document editor or spreadsheet, then internal reuse, maintainability, and extension are high priorities.
Internal reuse ensures that you don't design and implement any more than you have to.
Looser coupling boosts the likelihood that one class of object can cooperate with several others.
The same thing can happen when you remove algorithmic and representational dependencies too.
Design patterns also make an application more maintainable when they're used to limit platform dependencies and to layer a system.
They enhance extensibility by showing you how to extend class hierarchies and how to exploit object composition.
Extending a class in isolation is easier if the class doesn't depend on lots of other classes.
Often an application will incorporate classes from one or more libraries of predefined classes called toolkits.
A toolkit is a set of related and reusable classes designed to provide useful, general-purpose functionality.
An example of a toolkit is a set of collection classes for lists, associative tables, stacks, and the like.
Toolkits don't impose a particular design on your application; they just provide functionality that can help your application do its job.
They let you as an implementer avoid recoding common functionality.
Toolkit design is arguably harder than application design, because toolkits have to work in many applications to be useful.
Moreover, the toolkit writer isn't in a position to know what those applications will be or their special needs.
That makes it all the more important to avoid assumptions and dependencies that can limit the toolkit's flexibility and consequently its applicability and effectiveness.
Another framework can help you build compilers for different programming languages and target machines [JML92]
Yet another might help you build financial modeling applications [BE93]
It will define the overall structure, its partitioning into classes and objects, the key.
The framework captures the design decisions that are common to its application domain.
Frameworks thus emphasize design reuse over code reuse, though a framework will usually include concrete subclasses you can put to work immediately.
Reuse on this level leads to an inversion of control between the application and the software on which it's based.
When you use a toolkit (or a conventional subroutine library for that matter), you write the main body of the application and call the code you want to reuse.
When you use a framework, you reuse the main body and write the code it calls.
You'll have to write operations with particular names and calling conventions, but that reduces the design decisions you have to make.
Not only can you build applications faster as a result, but the applications have similar structures.
They are easier to maintain, and they seem more consistent to their users.
On the other hand, you lose some creative freedom, since many design decisions have been made for you.
If applications are hard to design, and toolkits are harder, then frameworks are hardest of all.
A framework designer gambles that one architecture will work for all applications in the domain.
Any substantive change to the framework's design would reduce its benefits considerably, since the framework's main contribution to an application is the architecture it defines.
Therefore it's imperative to design the framework to be as flexible and extensible as possible.
Furthermore, because applications are so dependent on the framework for their design, they are particularly sensitive to changes in framework interfaces.
As a framework evolves, applications have to evolve with it.
That makes loose coupling all the more important; otherwise even a minor change to the framework will have major repercussions.
The design issues just discussed are most critical to framework design.
A framework that addresses them using design patterns is far more likely to achieve high levels of design and code reuse than one that doesn't.
The patterns help make the framework's architecture suitable to many different applications without redesign.
An added benefit comes when the framework is documented with the design patterns it uses [BJ94]
People who know the patterns gain insight into the framework faster.
Even people who don't know the patterns can benefit from.
Enhancing documentation is important for all types of software, but it's particularly important for frameworks.
Frameworks often pose a steep learning curve that must be overcome before they're useful.
While design patterns might not flatten the learning curve entirely, they can make it less steep by making key elements of the framework's design more explicit.
Because patterns and frameworks have some similarities, people often wonder how or even if they differ.
Frameworks can be embodied in code, but only examples of patterns can be embodied in code.
A strength of frameworks is that they can be written down in programming languages and not only studied but executed and reused directly.
In contrast, the design patterns in this book have to be implemented each time they're used.
Design patterns also explain the intent, trade-offs, and consequences of a design.
A typical framework contains several design patterns, but the reverse is never true.
A graphical editor framework might be used in a factory simulation, but it won't be mistaken for a simulation framework.
In contrast, the design patterns in this catalog can be used in nearly any kind of application.
While more specialized design patterns than ours are certainly possible (say, design patterns for distributed systems or concurrent programming), even these wouldn't dictate an application architecture like a framework would.
They are the way that object-oriented systems achieve the most reuse.
Larger object-oriented applications will end up consisting of layers of frameworks that cooperate with each other.
Most of the design and code in the application will come from or be influenced by the frameworks it uses.
With more than 20 design patterns in the catalog to choose from, it might be hard to find the one that addresses a particular design problem, especially if the catalog is new and unfamiliar to you.
Here are several different approaches to finding the design pattern that's right for your problem:
Section 1.6 discusses how design patterns help you find appropriate objects, determine object granularity, specify object interfaces, and several other ways in which design patterns solve design problems.
Referring to these discussions can help guide your search for the right pattern.
Read through each pattern's intent to find one or more that sound relevant to your problem.
Studying these relationships can help direct you to the right pattern or group of patterns.
The catalog (page 79) has three chapters, one for creational patterns, another for structural patterns, and a third for behavioral patterns.
Each chapter starts off with introductory comments on the patterns and concludes with a section that compares and contrasts them.
These sections give you insight into the similarities and differences between patterns of like purpose.
Look at the causes of redesign starting on page 24 to see if your problem involves one or more of them.
Then look at the patterns that help you avoid the causes of redesign.
This approach is the opposite of focusing on the causes of redesign.
Instead of considering what might force a change to a design, consider what you want to be able to change without redesign.
The focus here is on encapsulating the concept that varies, a theme of many design patterns.
Table 1.2 lists the design aspect(s) that design patterns let you vary independently, thereby letting you change them without redesign.
Mediator (273) how and which objects interact with each other.
Memento (283) what private information is stored outside an object, and when.
Observer (293) number of objects that depend on another object; how the dependent objects stay up to date.
Visitor (331) operations that can be applied to object(s) without changing their class(es)
Table 1.2:  Design aspects that design patterns let you vary.
Once you've picked a design pattern, how do you use it? Here's a step-by-step approach to applying a design pattern effectively:
Pay particular attention to the Applicability and Consequences sections to ensure the pattern is right for your problem.
Go back and study the Structure, Participants, and Collaborations sections.
Make sure you understand the classes and objects in the pattern and how they relate to one another.
Look at the Sample Code section to see a concrete example of the pattern in code.
Studying the code helps you learn how to implement the pattern.
Choose names for pattern participants that are meaningful in the application context.
The names for participants in design patterns are usually too abstract to appear directly in an application.
Nevertheless, it's useful to incorporate the participant name into the name that appears in the application.
That helps make the pattern more explicit in the implementation.
Declare their interfaces, establish their inheritance relationships, and define the instance variables that represent data and object references.
Identify existing classes in your application that the pattern will affect, and modify them accordingly.
Use the responsibilities and collaborations associated with each operation as a guide.
For example, you might use the "Create-" prefix consistently to denote a factory method.
Implement the operations to carry out the responsibilities and collaborations in the pattern.
The Implementation section offers hints to guide you in the implementation.
The examples in the Sample Code section can help as well.
Over time you'll develop your own way of working with design patterns.
No discussion of how to use design patterns would be complete without a few words on how not to use them.
Often they achieve flexibility and variability by introducing additional levels of indirection, and that can complicate a design and/or cost you some performance.
A design pattern should only be applied when the flexibility it affords is actually needed.
The Consequences sections are most helpful when evaluating a pattern's benefits and liabilities.
By the end of this chapter you will have gained experience with eight patterns, learning them by example.
A WYSIWYG representation of the document occupies the large rectangular area in the center.
The document can mix text and graphics freely in a variety of formatting styles.
Surrounding the document are the usual pull-down menus and scroll bars, plus a collection of page icons for jumping to a particular page in the document.
The choice of internal representation for the document affects nearly every aspect of Lexi's design.
All editing, formatting, displaying, and textual analysis will require traversing the representation.
The way we organize this information will impact the design of the rest of the application.
How does Lexi actually arrange text and graphics into lines and columns? What objects are responsible for carrying out different formatting policies? How do these policies interact with the document's internal representation?
Lexi's user interface includes scroll bars, borders, and drop shadows that embellish the WYSIWYG document interface.
Such embellishments are likely to change as Lexi's user interface evolves.
Hence it's important to be able to add and remove embellishments easily without affecting the rest of the application.
Lexi should adapt easily to different look-and-feel standards such as Motif and Presentation Manager (PM) without major modification.
Different look-and-feel standards are usually implemented on different window systems.
Lexi's design should be as independent of the window system as possible.
Users control Lexi through various user interfaces, including buttons and pull-down menus.
The functionality behind these interfaces is scattered throughout the objects in the application.
The challenge here is to provide a uniform mechanism both for accessing this scattered functionality and for undoing its effects.
How does Lexi support analytical operations such as checking for misspelled words and determining hyphenation points? How can we minimize the number of classes we have to modify to add a new analytical operation?
We discuss these design problems in the sections that follow.
Each problem has an associated set of goals plus constraints on how we achieve those goals.
We explain the goals and constraints in detail before proposing a specific solution.
The problem and its solution will illustrate one or more design patterns.
The discussion for each problem will culminate in a brief introduction to the relevant patterns.
A document is ultimately just an arrangement of basic graphical elements such as characters, lines, polygons, and other shapes.
These elements capture the total information content of the document.
Yet an author often views these elements not in graphical terms but in terms of the document's physical structureâ€”lines, columns, figures, tables, and other substructures.2 In turn, these substructures have substructures of their own, and so on.
Lexi's user interface should let users manipulate these substructures directly.
For example, a user should be able to treat a diagram as a unit rather than as a collection of individual graphical primitives.
The user should be able to refer to a table as a whole, not as an unstructured mass of text and graphics.
To give Lexi's implementation similar qualities, we'll choose an internal representation that matches the document's physical structure.
Maintaining the document's physical structure, that is, the arrangement of text and graphics into lines, columns, tables, etc.
Mapping positions on the display to elements in the internal representation.
The application's interface lets the user embed text within graphics freely and vice versa.
We should avoid treating graphics as a special case of text or text as a special case of graphics; otherwise we'll end up with redundant formatting and manipulation mechanisms.
One set of mechanisms should suffice for both text and graphics.
Second, our implementation shouldn't have to distinguish between single elements and groups of elements in the internal representation.
Lexi should be able to treat simple and complex elements uniformly, thereby allowing arbitrarily complex documents.
The tenth element in line five of column two, for instance, could be a single character or an intricate diagram with many subelements.
As long as we know this element can draw itself and specify its dimensions, its complexity has no bearing on how and where it should appear on the page.
Opposing the second constraint, however, is the need to analyze the text for such things as spelling errors and potential hyphenation points.
But sometimes an analysis depends on the objects being analyzed.
It makes little sense, for example, to check the spelling of a polygon or to hyphenate it.
The internal representation's design should take this and other potentially conflicting constraints into account.
A common way to represent hierarchically structured information is through a technique called recursive composition, which entails building increasingly complex elements out of simpler ones.
Recursive composition gives us a way to compose a document out of simple graphical elements.
As a first step, we can tile a set of characters and graphics from left to right to form a line in the document.
Then multiple lines can be arranged to form a column, multiple columns can form a page, and so on (see Figure 2.2)
We can represent this physical structure by devoting an object to each important element.
That includes not just the visible elements like the characters and graphics but the invisible, structural elements as wellâ€”the lines and the column.
The result is the object structure shown in Figure 2.3
Figure 2.3:  Object structure for recursive composition of text and graphics.
By using an object for each character and graphical element in the document, we promote flexibility at the finest levels of Lexi's design.
We can treat text and graphics uniformly with respect to how they are drawn, formatted, and embedded within each other.
We can extend Lexi to support new character sets without disturbing other functionality.
The second implication, which may be less obvious, is that these classes must have compatible interfaces, because we want to treat the objects uniformly.
The way to make interfaces compatible in a language like C++ is to relate the classes through inheritance.
We'll define a Glyph abstract class for all objects that can appear in a document structure.3 Its subclasses define both primitive graphical elements (like characters and images) and structural elements (like rows and columns)
Glyph subclasses redefine the Draw operation to render themselves onto a window.
They are passed a reference to a Window object in the call to Draw.
The Window class defines graphics operations for rendering text and basic shapes in a window on the screen.
A Rectangle subclass of Glyph might redefine Draw as follows:
DrawRect is the Window operation that makes the rectangle appear on the screen.
A parent glyph often needs to know how much space a child glyph occupies, for example, to arrange it and other glyphs in a line so that none overlaps (as shown in Figure 2.3)
The Bounds operation returns the rectangular area that the glyph occupies.
It returns the opposite corners of the smallest rectangle that contains the glyph.
Glyph subclasses redefine this operation to return the rectangular area in which they draw.
The Intersects operation returns whether a specified point intersects the glyph.
Whenever the user clicks somewhere in the document, Lexi calls this operation to determine which glyph or glyph structure is under the mouse.
The Rectangle class redefines this operation to compute the intersection of the rectangle and the given point.
Because glyphs can have children, we need a common interface to add, remove, and access those children.
For example, a Row's children are the glyphs it arranges into a row.
The Insert operation inserts a glyph at a position specified by an integer index.5 The Remove operation removes a specified glyph if it is indeed a child.
The Child operation returns the child (if any) at the given index.
Glyphs like Row that can have children should use Child internally instead of accessing the child data structure directly.
That way you won't have to modify operations like Draw that iterate through the children when you change the data structure from, say, an array to a linked list.
Similarly, Parent provides a standard interface to the glyph's parent, if any.
Glyphs in Lexi store a reference to their parent, and their Parent operation simply returns this reference.
We can use it to represent any potentially complex, hierarchical structure.
The Composite (163) pattern captures the essence of recursive composition in object-oriented terms.
Now would be a good time to turn to that pattern and study it, referring back to this scenario as needed.
We've settled on a way to represent the document's physical structure.
Next, we need to figure out how to construct a particular physical structure, one that corresponds to a properly formatted document.
Representation and formatting are distinct: The ability to capture the document's physical structure doesn't tell us how to arrive at a particular structure.
It must break text into lines, lines into columns, and so on, taking into account the user's higher-level desires.
For example, the user might want to vary margin widths, indentation, and tabulation; single or double space; and probably many other formatting constraints.6 Lexi's formatting algorithm must take all of these into account.
By the way, we'll restrict "formatting" to mean breaking a collection of glyphs into lines.
In fact, we'll use the terms "formatting" and "linebreaking" interchangeably.
The techniques we'll discuss apply equally well to breaking lines into columns and to breaking columns into pages.
The formatting process, with all its constraints and details, isn't easy to automate.
There are many approaches to the problem, and people have come up with a variety of formatting algorithms with different strengths and weaknesses.
Because Lexi is a WYSIWYG editor, an important trade-off to consider is the balance between formatting quality and formatting speed.
We want generally good response from the editor without sacrificing how good the document looks.
This trade-off is subject to many factors, not all of which can be ascertained at compile-time.
For example, the user might tolerate slightly slower response in exchange for better formatting.
That trade-off might make an entirely different formatting algorithm more appropriate than the current one.
Because formatting algorithms tend to be complex, it's also desirable to keep them well-contained orâ€”better yetâ€”completely independent of the document structure.
Ideally we could add a new kind of Glyph subclass without regard to the formatting algorithm.
Conversely, adding a new formatting algorithm shouldn't require modifying existing glyphs.
These characteristics suggest we should design Lexi so that it's easy to change the formatting algorithm at least at compile-time, if not at run-time as well.
We can isolate the algorithm and make it easily replaceable at the same time.
More specifically, we'll define a separate class hierarchy for objects that encapsulate formatting algorithms.
The root of the hierarchy will define an interface that supports a wide range of formatting algorithms, and each subclass will implement the interface to carry out a particular algorithm.
Then we can introduce a Glyph subclass that will structure its children automatically using a given algorithm object.
We'll define a Compositor class for objects that can encapsulate a formatting algorithm.
The interface (Table 2.2) lets the compositor know what glyphs to format and when to do the formatting.
The glyphs it formats are the children of a special Glyph subclass called Composition.
A composition gets an instance of a Compositor subclass (specialized for a particular linebreaking algorithm) when it is created, and it tells the compositor to Compose its glyphs when necessary, for example, when the user changes a document.
Figure 2.5 depicts the relationships between the Composition and Compositor classes.
An unformatted Composition object contains only the visible glyphs that make up the document's basic content.
It doesn't contain glyphs that determine the document's physical structure, such as Row and Column.
The composition is in this state just after it's created and initialized with the glyphs it should format.
When the composition needs formatting, it calls its compositor's Compose operation.
Glyphs that the compositor created and inserted into the object structure appear with gray backgrounds in the figure.
For example, a SimpleCompositor might do a quick pass without regard for such esoterica as the document's "color." Good color means having an even distribution of text and whitespace.
A TeXCompositor would implement the full TeX algorithm [Knu84], which takes things like color into account in exchange for longer formatting times.
We can add new Compositor subclasses without touching the glyph classes, and vice versa.
In fact, we can change the linebreaking algorithm at run-time by adding a single SetCompositor operation to Composition's basic glyph interface.
Encapsulating an algorithm in an object is the intent of the Strategy (315) pattern.
The key participants in the pattern are Strategy objects (which encapsulate different algorithms) and the context in which they operate.
The key to applying the Strategy pattern is designing interfaces for the strategy and its context that are general enough to support a range of algorithms.
You shouldn't have to change the strategy or context interface to support a new algorithm.
In our example, the basic Glyph interface's support for child access, insertion, and removal is general enough to let Compositor subclasses change the document's physical structure, regardless of the algorithm they use to do it.
Likewise, the Compositor interface gives compositions whatever they need to initiate formatting.
The first adds a border around the text editing area to demarcate the page of text.
The second adds scroll bars that let the user view different parts of the page.
To make it easy to add and remove these embellishments (especially at run-time), we shouldn't use inheritance to add them to the user interface.
We achieve the most flexibility if other user interface objects don't even know the embellishments are there.
That will let us add and remove the embellishments without changing other classes.
From a programming point of view, embellishing the user interface involves extending existing code.
Using inheritance to do such extension precludes rearranging embellishments at run-time, but an equally serious problem is the explosion of classes that can result from an inheritance-based approach.
In the extreme, we end up with a class for every possible combination of embellishments, a solution that quickly becomes unworkable as the variety of embellishments grows.
Object composition offers a potentially more workable and flexible extension mechanism.
But what objects do we compose? Since we know we're embellishing an existing glyph, we could make the embellishment itself an object (say, an instance of class Border)
That gives us two candidates for composition, the glyph and the border.
We could have the border contain the glyph, which makes sense given that the border will surround the glyph on the screen.
Or we could do the oppositeâ€”put the border into the glyphâ€”but then we must make modifications to the corresponding Glyph subclass to make it aware of the border.
Our first choice, composing the glyph in the border, keeps the border-drawing code entirely in the Border class, leaving other classes alone.
What does the Border class look like? The fact that borders have an appearance suggests they should actually be glyphs; that is, Border should be a subclass of Glyph.
But there's a more compelling reason for doing this: Clients shouldn't care whether glyphs have borders or not.
When clients tell a plain, unbordered glyph to draw itself, it should do so without embellishment.
If that glyph is composed in a border, clients shouldn't have to treat the border containing the glyph any differently; they just tell it to draw itself as they told the plain glyph before.
This implies that the Border interface matches the Glyph interface.
Clients generally can't tell whether they're dealing with the component or its enclosure (i.e., the child's parent), especially if the enclosure simply delegates all its operations to its component.
But the enclosure can also augment the component's behavior by doing work of its own before and/or after delegating an operation.
The enclosure can also effectively add state to the component.
We can apply the concept of transparent enclosure to all glyphs that embellish other glyphs.
To make this concept concrete, we'll define a subclass of Glyph called MonoGlyph to serve as an abstract class for "embellishment glyphs," like Border (see Figure 2.7)
MonoGlyph stores a reference to a component and forwards all requests to it.
MonoGlyph subclasses reimplement at least one of these forwarding operations.
Border::Draw, for instance, first invokes the parent class operation MonoGlyph::Draw on the component to let the component do its partâ€”that is, draw everything but the border.
Then Border::Draw draws the border by calling a private operation called DrawBorder, the details of which we'll omit:
Notice how Border::Draw effectively extends the parent class operation to draw the border.
This is in contrast to merely replacing the parent class operation, which would omit the call to MonoGlyph::Draw.
Scroller is a MonoGlyph that draws its component in different locations based on the positions of two scroll bars, which it adds as embellishments.
When Scroller draws its component, it tells the graphics system to clip to its bounds.
Clipping parts of the component that are scrolled out of view keeps them from appearing on the screen.
Now we have all the pieces we need to add a border and a scrolling interface to Lexi's text editing area.
Scroller instance to add the scrolling interface, and we compose that in a Border instance.
Note that we can reverse the order of composition, putting the bordered composition into the Scroller instance.
In that case the border would be scrolled along with the text, which may or may not be desirable.
The point is, transparent enclosure makes it easy to experiment with different alternatives, and it keeps clients free of embellishment code.
Note also how the border composes one glyph, not two or more.
This is unlike compositions we've defined so far, in which parent objects were allowed to have arbitrarily many children.
Here, putting a border around something implies that "something" is singular.
We could assign a meaning to embellishing more than one object at a time, but then we'd have to mix many kinds of composition in with the notion of embellishment: row embellishment, column embellishment, and so forth.
That won't help us, since we already have classes to do those kinds of compositions.
So it's better to use existing classes for composition and add new classes to embellish the result.
Keeping embellishment independent of other kinds of composition both simplifies the embellishment classes and reduces their number.
The Decorator (175) pattern captures class and object relationships that support embellishment by transparent enclosure.
The term "embellishment" actually has broader meaning than what we've considered here.
In the Decorator pattern, embellishment refers to anything that adds responsibilities to an object.
We can think for example of embellishing an abstract syntax tree with semantic actions, a finite state automaton with new transitions, or a network of persistent objects with attribute tags.
Decorator generalizes the approach we've used in Lexi to make it more widely applicable.
Achieving portability across hardware and software platforms is a major problem in system design.
Retargeting Lexi to a new platform shouldn't require a major overhaul, or it wouldn't be worth retargeting.
One obstacle to portability is the diversity of look-and-feel standards, which are intended to enforce uniformity between applications.
These standards define guidelines for how applications appear and react to the user.
While existing standards aren't that different from each other, people certainly won't confuse one for the otherâ€”Motif applications don't look and feel exactly like their counterparts on other platforms, and vice versa.
An application that runs on more than one platform must conform to the user interface style guide on each platform.
Our design goals are to make Lexi conform to multiple existing look-and-feel standards and to make it easy to add support for new standards as they (invariably) emerge.
We also want our design to support the ultimate in flexibility: changing Lexi's look and feel at run-time.
Everything we see and interact with in Lexi's user interface is a glyph composed in other, invisible glyphs like Row and Column.
The invisible glyphs compose visible ones like Button and Character and lay them out properly.
Style guides have much to say about the look and feel of so-called "widgets," another term for visible glyphs like buttons, scroll bars, and menus that act as controlling elements in a user interface.
Widgets might use simpler glyphs such as characters, circles, rectangles, and polygons to present data.
We'll assume we have two sets of widget glyph classes with which to implement multiple look-and-feel standards:
A set of abstract Glyph subclasses for each category of widget glyph.
For example, an abstract class ScrollBar will augment the basic glyph interface to add general scrolling operations; Button is an abstract class that adds button-oriented operations; and so on.
A set of concrete subclasses for each abstract subclass that implement different look-and-feel standards.
For example, ScrollBar might have MotifScrollBar and PMScrollBar subclasses that implement Motif and Presentation Manager-style scroll bars, respectively.
Lexi must distinguish between widget glyphs for different look-and-feel styles.
It's clear that Lexi's implementation can't do this directly, say, using a constructor call in C++
That would hard-code the button of a particular style, making it impossible to select the style at run-time.
We'd also have to track down and change every such constructor call to port Lexi to another platform.
And buttons are only one of a variety of widgets in Lexi's user interface.
Littering our code with constructor calls to specific look-and-feel classes yields a maintenance nightmareâ€”miss just one, and you could end up with a Motif menu in the middle of your Mac application.
Lexi needs a way to determine the look-and-feel standard that's being targeted in order to create the appropriate widgets.
Not only must we avoid making explicit constructor calls; we must also be able to replace an entire widget set easily.
We can achieve both by abstracting the process of object creation.
Normally we might create an instance of a Motif scroll bar glyph with the following C++ code:
This is the kind of code to avoid if you want to minimize Lexi's look-and-feel dependencies.
CreateScrollBar returns a new instance of the proper ScrollBar subclass for the look and feel desired, Motif in this case.
As far as clients are concerned, the effect is the same as calling the MotifScrollBar constructor directly.
But there's a crucial difference: There's no longer anything in the code that mentions Motif by name.
The guiFactory object abstracts the process of creating not just Motif scroll bars but scroll bars for any look-and-feel standard.
It can manufacture a full range of widget glyphs, including scroll bars, buttons, entry fields, menus, and so forth.
All this is possible because MotifFactory is a subclass of GUIFactory, an abstract class that defines a general interface for creating widget glyphs.
It includes operations like CreateScrollBar and CreateButton for instantiating different kinds of widget glyphs.
Subclasses of GUIFactory implement these operations to return glyphs such as MotifScrollBar and PMButton that implement a particular look and feel.
Figure 2.9 shows the resulting class hierarchy for guiFactory objects.
Moreover, the products that a factory produces are related to one another; in this case, the products are all.
Figure 2.10 shows some of the product classes needed to make factories work for widget glyphs.
The last question we have to answer is, Where does the GUIFactory instance come from? The answer is, Anywhere that's convenient.
The variable guiFactory could be a global, a static member of a well-known class, or even a local variable if the entire user interface is created within one class or function.
There's even a design pattern, Singleton (127), for managing well-known, one-of-a-kind objects like this.
The important thing, though, is to initialize guiFactory at a point in the program before it's ever used to create widgets but after it's clear which look and feel is desired.
If the look and feel is known at compile-time, then guiFactory can be initialized with a simple assignment of a new factory instance at the beginning of the program:
If the user can specify the look and feel with a string name at startup time, then the code to create the factory might be.
There are more sophisticated ways to select the factory at run-time.
For example, you could maintain a registry that maps strings to factory objects.
That lets you register instances of new factory subclasses without modifying existing code, as the preceding approach requires.
And you don't have to link all platform-specific factories into the application.
That's important, because it might not be possible to link a MotifFactory on a platform that doesn't support Motif.
But the point is that once we've configured the application with the right factory object, its look and feel is set from then on.
If we change our minds, we can reinitialize guiFactory with a factory for a different look and feel and then reconstruct the interface.
Regardless of how and when we decide to initialize guiFactory, we know that once we do, the application can create the appropriate look and feel without modification.
Factories and products are the key participants in the Abstract Factory (87) pattern.
This pattern captures how to create families of related product objects without instantiating classes directly.
It's most appropriate when the number and general kinds of product objects stay constant, and there are differences in specific product families.
We choose between families by instantiating a particular concrete factory and using it consistently to create products thereafter.
We can also swap entire families of products by replacing the concrete factory with an instance of a different one.
The Abstract Factory pattern's emphasis on families of products distinguishes it from other creational patterns, which involve only one kind of product object.
Look and feel is just one of many portability issues.
It manages screen space for windows and routes input to them from the keyboard and mouse.
Several important and largely incompatible window systems exist today (e.g., Macintosh, Presentation Manager, Windows, X)
We'd like Lexi to run on as many of them as possible for exactly the same reasons we support multiple look-and-feel standards.
At first glance this may look like another opportunity to apply the Abstract Factory pattern.
But the constraints for window system portability differ significantly from those for look-and-feel independence.
In applying the Abstract Factory pattern, we assumed we would define the concrete widget glyph classes for each look-and-feel standard.
That meant we could derive each concrete product for a particular standard (e.g., MotifScrollBar and MacScrollBar) from an abstract product class (e.g., ScrollBar)
But suppose we already have several class hierarchies from different vendors, one for each look-and-feel standard.
Of course, it's highly unlikely these hierarchies are compatible in any way.
We have to make the different widget hierarchies adhere to a common set of abstract product interfaces.
We solved this problem for widgets by developing our own abstract and concrete product classes.
Now we're faced with a similar problem when we try to make Lexi work on existing window systems; namely, different window systems have incompatible programming interfaces.
Things are a bit tougher this time, though, because we can't afford to implement our own nonstandard window system.
Like look-and-feel standards, window system interfaces aren't radically different from one another, because all window systems do generally the same thing.
We need a uniform set of windowing abstractions that lets us take different window system implementations and slide any one of them under a common interface.
In Section 2.2 we introduced a Window class for displaying a glyph or glyph structure on the display.
The Window class encapsulates the things windows tend to do across window systems:
They can (re)draw their contents on demand, for example, when they are.
The Window class must span the functionality of windows from different window systems.
The Window class interface provides only functionality that's common to all window systems.
The problem with this approach is that our Window interface winds up being only as powerful as the least capable window system.
We can't take advantage of more advanced features even if most (but not all) window systems support them.
Create an interface that incorporates the capabilities of all existing systems.
The trouble here is that the resulting interface may well be huge and incoherent.
Besides, we'll have to change it (and Lexi, which depends on it) anytime a vendor revises its window system interface.
Neither extreme is a viable solution, so our design will fall somewhere between the two.
The Window class will provide a convenient interface that supports the most popular windowing features.
Because Lexi will deal with this class directly, the Window class must also support the things Lexi knows about, namely, glyphs.
That means Window's interface must include a basic set of graphics operations that lets glyphs draw themselves in the window.
Table 2.3 gives a sampling of the operations in the Window class interface.
Concrete subclasses of Window support the different kinds of windows that users deal with.
For example, application windows, icons, and warning dialogs are all windows, but they have somewhat different behaviors.
So we can define subclasses like ApplicationWindow, IconWindow, and DialogWindow to capture these differences.
The resulting class hierarchy gives applications like Lexi a uniform and intuitive windowing abstraction, one that doesn't depend on any particular vendor's window system:
Now that we've defined a window interface for Lexi to work with, where does the real platform-specific window come in? If we're not implementing our own window system, then at some point our window abstraction must be implemented in terms of what the target window system provides.
One approach is to implement multiple versions of the Window class and its subclasses, one version for each windowing platform.
We'd have to choose the version to use when we build Lexi for a given platform.
But imagine the maintenance headaches we'd have keeping track of multiple classes, all named "Window" but each implemented on a different window system.
Both of these alternatives have another drawback: Neither gives us the flexibility to change.
So we'll have to keep several different executables around as well.
Neither alternative is very appealing, but what else can we do? The same thing we did for formatting and embellishment, namely, encapsulate the concept that varies.
What varies in this case is the window system implementation.
If we encapsulate a window system's functionality in an object, then we can implement our Window class and subclasses in terms of that object's interface.
Moreover, if that interface can serve all the window systems we're interested in, then we won't have to change Window or any of its subclasses to support different window systems.
We'll define a separate WindowImp class hierarchy in which to hide different window system implementations.
WindowImp is an abstract class for objects that encapsulate window system-dependent code.
To make Lexi work on a particular window system, we configure each window object with an instance of a WindowImp subclass for that system.
The following diagram shows the relationship between the Window and WindowImp hierarchies:
By hiding the implementations in WindowImp classes, we avoid polluting the Window classes with window system dependencies, which keeps the Window class hierarchy comparatively small and stable.
Meanwhile we can easily extend the implementation hierarchy to support new window systems.
We defined the Rectangle::Draw in terms of the DrawRect operation on the Window instance:
The default implementation of DrawRect uses the abstract operation for drawing rectangles declared by WindowImp:
The window implementation is defined by the instance of the WindowImp subclass that _imp points to.
For an XWindowImp (that is, a WindowImp subclass for the X Window System), the DeviceRect's implementation might look like.
DeviceRect is defined like this because XDrawRectangle (the X interface for drawing a rectangle) defines a rectangle in terms of its lower left corner, its width, and its height.
Why is this so different from the X version? Well, PM doesn't have an operation for drawing rectangles explicitly as X does.
Instead, PM has a more general interface for specifying vertices of multisegment shapes (called a path) and for outlining or filling the area they enclose.
PM's implementation of DeviceRect is obviously quite different from X's, but that doesn't matter.
WindowImp hides variations in window system interfaces behind a potentially large but stable interface.
That lets Window subclass writers focus on the window abstraction and not on window system details.
It also lets us add support for new window systems without disturbing the Window classes.
A key issue we haven't addressed is how a window gets configured with the proper WindowImp subclass in the first place.
There are several possibilities, but we'll focus on one that uses the Abstract Factory (87) pattern.
Now we can define a concrete factory for each window system:
The WindowImp class defines an interface to common window system facilities, but its design is driven by different constraints than Window's interface.
Application programmers won't deal with WindowImp's interface directly; they only deal with Window objects.
So WindowImp's interface needn't match the application programmer's view of the world, as was our concern in the design of the Window class hierarchy and interface.
WindowImp's interface can more closely reflect what window systems actually provide, warts and all.
It can be biased toward either an intersection or a union of functionality approach, whichever suits the target window systems best.
The important thing to realize is that Window's interface caters to the applications programmer, while WindowImp caters to window systems.
Separating windowing functionality into Window and WindowImp hierarchies lets us implement and specialize these interfaces independently.
Objects from these hierarchies cooperate to let Lexi work without modification on multiple window systems.
The relationship between Window and WindowImp is an example of the Bridge (151) pattern.
The intent behind Bridge is to allow separate class hierarchies to work together even as they evolve independently.
Our design criteria led us to create two separate class hierarchies, one that supports the logical notion of windows, and another for capturing different implementations of windows.
The Bridge pattern lets us maintain and enhance our logical windowing abstractions without touching window system-dependent code, and vice versa.
Some of Lexi's functionality is available through the document's WYSIWYG representation.
You enter and delete text, move the insertion point, and select ranges of text by pointing, clicking, and typing directly in the document.
Other functionality is accessed indirectly through user operations in Lexi's pull-down menus, buttons, and keyboard accelerators.
But we don't want to associate a particular user operation with a particular user interface, because we may want multiple user interfaces to the same operation (you can turn the page using either a page button or a menu operation, for example)
We may also want to change the interface in the future.
We as implementors want to access their functionality without creating a lot of dependencies between implementation and user interface classes.
Otherwise we'll end up with a tightly coupled implementation, which will be harder to understand, extend, and maintain.
To further complicate matters, we want Lexi to support undo and redo8 of most but not all its functionality.
Specifically, we want to be able to undo document-modifying operations like delete, with which a user can destroy lots of data inadvertently.
But we shouldn't try to undo an operation like saving a drawing or quitting the application.
These operations should have no effect on the undo process.
We also don't want an arbitrary limit on the number of levels of undo and redo.
It's clear that support for user operations permeates the application.
The challenge is to come up with a simple and extensible mechanism that satisfies all of these needs.
From our perspective as designers, a pull-down menu is just another kind of glyph that contains other glyphs.
What distinguishes pull-down menus from other glyphs that have children is that most glyphs in menus do some work in response to an up-click.
Let's assume that these work-performing glyphs are instances of a Glyph subclass called MenuItem and that they do their work in response to a request from a client.9 Carrying out the request might involve an operation on one object, or many operations on many objects, or something in between.
We could define a subclass of MenuItem for every user operation and then hard-code each subclass to carry out the request.
But that's not really right; we don't need a subclass of MenuItem for each request any more than we need a subclass for each text string in a pull-down menu.
To illustrate, suppose you could advance to the last page in the document both through a MenuItem in a pull-down menu and by pressing a page icon at the bottom of Lexi's interface (which might be more convenient for short documents)
If we associate the request with a MenuItem through inheritance, then we must do the same for the page icon and any other kind of widget that might issue such a request.
That can give rise to a number of classes approaching the product of the number of widget types and the number of requests.
What's missing is a mechanism that lets us parameterize menu items by the request they should fulfill.
That way we avoid a proliferation of subclasses and allow for greater flexibility at run-time.
We could parameterize MenuItem with a function to call, but that's not a complete solution for at least three reasons:
Functions are hard to extend, and it's hard to reuse parts of them.
These reasons suggest that we should parameterize MenuItems with an object, not a function.
Then we can use inheritance to extend and reuse the request's implementation.
We also have a place to store state and implement undo/redo functionality.
Here we have another example of encapsulating the concept that varies, in this case a request.
First we define a Command abstract class to provide an interface for issuing a request.
The basic interface consists of a single abstract operation called "Execute." Subclasses of Command implement Execute in different ways to fulfill different requests.
Some subclasses may delegate part or all of the work to other objects.
Other subclasses may be in a position to fulfill the request entirely on their own (see Figure 2.11)
To the requester, however, a Command object is a Command objectâ€”they are treated uniformly.
Now MenuItem can store a Command object that encapsulates a request (Figure 2.12)
We give each menu item object an instance of the Command subclass that's suitable for that menu item, just as we specify the text to appear in the menu item.
When a user chooses a particular menu item, the MenuItem simply calls Execute on its Command object to carry out the request.
Note that buttons and other widgets can use commands in the same way menu items do.
To undo and redo commands, we add an Unexecute operation to Command's interface.
Unexecute reverses the effects of a preceding Execute operation using whatever undo information Execute stored.
In the case of a FontCommand, for example, the Execute operation would store the range of text affected by the font change along with the original font(s)
FontCommand's Unexecute operation would restore the range of text to its original font(s)
A request to change the font of a selection does nothing if the text already appears in that font.
Suppose the user selects some text and then requests a spurious font change.
What should be the result of a subsequent undo request? Should a meaningless change cause the undo request to do something equally meaningless? Probably not.
If the user repeats the spurious font change several times, he shouldn't have to perform exactly the same number of undo operations to get back to the last meaningful operation.
If the net effect of executing a command was nothing, then there's no need for a corresponding undo request.
So to determine if a command is undoable, we add an abstract Reversible operation to the Command interface.
Subclasses can redefine this operation to return true or false based on run-time criteria.
The final step in supporting arbitrary-level undo and redo is to define a command history, or list of commands that have been executed (or unexecuted, if some commands have been undone)
The leftmost command was issued first, followed by the second-leftmost, and so on until the most recently issued command, which is.
The line marked "present" keeps track of the most recently executed (and unexecuted) command.
To undo the last command, we simply call Unexecute on the most recent command:
After unexecuting the command, we move the "present" line one command to the left.
If the user chooses undo again, the next-most recently issued command will be undone in the same way, and we're left in the state depicted here:
You can see that by simply repeating this procedure we get multiple levels of undo.
The number of levels is limited only by the length of the command history.
To redo a command that's just been undone, we do the same thing in reverse.
Commands to the right of the present line are commands that may be redone in the future.
To redo the last undone command, we call Execute on the command to the right of the present line:
Then we advance the present line so that a subsequent redo will call redo on the following command in the future.
Of course, if the subsequent operation is not another redo but an undo, then the command to the left of the present line will be undone.
Thus the user can effectively go back and forth in time as needed to recover from errors.
Lexi's commands are an application of the Command (233) pattern, which describes how to encapsulate a request.
The Command pattern prescribes a uniform interface for issuing requests that lets you configure clients to handle different requests.
A command may delegate all, part, or none of the request's implementation to other objects.
This is perfect for applications like Lexi that must provide centralized access to functionality scattered throughout the application.
The pattern also discusses undo and redo mechanisms built on the basic Command interface.
The last design problem involves textual analysis, specifically checking for misspellings and introducing hyphenation points where needed for good formatting.
The constraints here are similar to those we had for the formatting design problem in Section 2.3
As was the case for linebreaking strategies, there's more than one way to check spelling and compute hyphenation points.
A diverse set of algorithms can provide a choice of space/time/quality trade-offs.
We should make it easy to add new algorithms as well.
We also want to avoid wiring this functionality into the document structure.
This goal is even more important here than it was in the formatting case, because spelling checking and hyphenation are just two of potentially many kinds of analyses we may want Lexi to support.
Inevitably we'll want to expand Lexi's analytical abilities over time.
We might add searching, word counting, a calculation facility for adding up tabular values, grammar.
But we don't want to change the Glyph class and all its subclasses every time we introduce new functionality of this sort.
Many kinds of analysis require examining the text character by character.
The text we need to analyze is scattered throughout a hierarchical structure of glyph objects.
To examine text in such a structure, we need an access mechanism that has knowledge about the data structures in which objects are stored.
Some glyphs might store their children in linked lists, others might use arrays, and still others might use more esoteric data structures.
Our access mechanism must be able to handle all of these possibilities.
An added complication is that different analyses access information in different ways.
Most analyses will traverse the text from beginning to end.
But some do the oppositeâ€”a reverse search, for example, needs to progress through the text backward rather than forward.
So our access mechanism must accommodate differing data structures, and we must support different kinds of traversals, such as preorder, postorder, and inorder.
Right now our glyph interface uses an integer index to let clients refer to children.
Although that might be reasonable for glyph classes that store their children in an array, it may be inefficient for glyphs that use a linked list.
An important role of the glyph abstraction is to hide the data structure in which children are stored.
That way we can change the data structure a glyph class uses without affecting other classes.
Therefore only the glyph can know the data structure it uses.
A corollary is that the glyph interface shouldn't be biased toward one data structure or another.
It shouldn't be better suited to arrays than to linked lists, for example, as it is now.
We can solve this problem and support several different kinds of traversals at the same time.
We can put multiple access and traversal capabilities directly in the glyph classes and provide a way to choose among them, perhaps by supplying an enumerated constant as a parameter.
The classes pass this parameter around during a traversal to ensure they're all doing the same kind of traversal.
They have to pass around any information they've accumulated during traversal.
We might add the following abstract operations to Glyph's interface to support this approach:
It takes the kind of traversal as a parameter of type Traversal, an enumerated constant with values such as CHILDREN (to traverse the glyph's immediate children only), PREORDER (to traverse the entire structure in preorder), POSTORDER, and INORDER.
Next advances to the next glyph in the traversal, and IsDone reports whether the traversal is over or not.
GetCurrent replaces the Child operation; it accesses the current glyph in the traversal.
Insert replaces the old operation; it inserts the given glyph at the current position.
An analysis would use the following C++ code to do a preorder traversal of a glyph structure rooted at g:
Notice that we've banished the integer index from the glyph interface.
There's no longer anything that biases the interface toward one kind of collection or another.
We've also saved clients from having to implement common kinds of traversals themselves.
For one thing, it can't support new traversals without either extending the set of enumerated values or adding new operations.
Say we wanted to have a variation on preorder traversal that.
We'd have to change the Traversal enumeration to include something like TEXTUAL_PREORDER.
Putting the traversal mechanism entirely in the Glyph class hierarchy makes it hard to modify or extend without changing lots of classes.
It's also difficult to reuse the mechanism to traverse other kinds of object structures.
And we can't have more than one traversal in progress on a structure.
Once again, a better solution is to encapsulate the concept that varies, in this case the access and traversal mechanisms.
We can introduce a class of objects called iterators whose sole purpose is to define different sets of these mechanisms.
We can use inheritance to let us access different data structures uniformly and support new kinds of traversals as well.
And we won't have to change glyph interfaces or disturb existing glyph implementations to do it.
We'll use an abstract class called Iterator to define a general interface for access and traversal.
Concrete subclasses like ArrayIterator and ListIterator implement the interface to provide access to arrays and lists, while PreorderIterator, PostorderIterator, and the like implement different traversals on specific structures.
Each Iterator subclass has a reference to the structure it traverses.
Subclass instances are initialized with this reference when they are created.
Figure 2.13 illustrates the Iterator class along with several subclasses.
Notice that we've added a CreateIterator abstract operation to the Glyph class interface to support iterators.
The Iterator interface provides operations First, Next, and IsDone for controlling the traversal.
The ListIterator class implements First to point to the first element in the list, and Next advances the iterator to the next item in the list.
IsDone returns whether or not the list pointer points beyond the last element in the list.
CurrentItem dereferences the iterator to return the glyph it points to.
An ArrayIterator class would do similar things but on an array of glyphs.
Now we can access the children of a glyph structure without knowing its representation:
A NullIterator is a degenerate iterator for glyphs that have no children, that is, leaf glyphs.
A glyph subclass that has children will override CreateIterator to return an instance of a different Iterator subclass.
Which subclass depends on the structure that stores the children.
If the Row subclass of Glyph stores its children in a list _children, then its CreateIterator operation would look like this:
Iterators for preorder and inorder traversals implement their traversals in terms of glyph-specific iterators.
The iterators for these traversals are supplied the root glyph in the structure they traverse.
They call CreateIterator on the glyphs in the structure and use a stack to keep track of the resulting iterators.
For example, class PreorderIterator gets the iterator from the root glyph, initializes it to point to its first element, and then pushes it onto the stack:
CurrentItem would simply call CurrentItem on the iterator at the top of the stack:
The Next operation gets the top iterator on the stack and asks its current item to create an iterator, in an effort to descend the glyph structure as far as possible (this is a preorder traversal, after all)
Then Next tests the latest iterator; if its IsDone operation returns true, then we've finished traversing the current subtree (or leaf) in the traversal.
In that case, Next pops the top iterator off the stack and repeats this process until it finds the next incomplete traversal, if there is one; if not, then we have finished traversing the structure.
Notice how the Iterator class hierarchy lets us add new kinds of traversals without modifying glyph classesâ€”we simply subclass Iterator and add a new traversal as we have with PreorderIterator.
Glyph subclasses use the same interface to give clients access to their children without revealing the underlying data structure they use to store them.
Because iterators store their own copy of the state of a traversal, we can carry on multiple traversals simultaneously, even on the same structure.
And though our traversals have been over glyph structures in this example, there's no reason we can't parameterize a class like PreorderIterator by the type of object in the structure.
Then we can reuse the machinery in PreorderIterator to traverse other structures.
The Iterator (257) pattern captures these techniques for supporting access and traversal over object structures.
It's applicable not only to composite structures but to collections as well.
It abstracts the traversal algorithm and shields clients from the internal structure of the objects they traverse.
The Iterator pattern illustrates once more how encapsulating the concept that varies helps us gain flexibility and reusability.
Even so, the problem of iteration has surprising depth, and the Iterator pattern covers many more nuances and trade-offs than we've considered here.
Now that we have a way of traversing the glyph structure, we need to check the spelling and do the hyphenation.
First we have to decide where to put the responsibility for analysis.
We could put it in the Iterator classes, thereby making analysis an integral part of traversal.
But we get more flexibility and potential for reuse if we distinguish between the traversal and the actions performed during traversal.
That's because different analyses often require the same kind of traversal.
Hence we can reuse the same set of iterators for different analyses.
For example, preorder traversal is common to many analyses, including spelling checking, hyphenation, forward search, and word count.
Where else can we put the responsibility for analysis? We know there are many kinds of analyses we might want to do.
Each analysis will do different things at different points in the traversal.
Some glyphs are more significant than others depending on the kind of analysis.
If we're checking spelling or hyphenating, we want to consider character glyphs and not graphical ones like lines and bitmapped images.
If we're making color separations, we'd want to consider visible glyphs and not invisible ones.
Therefore a given analysis must be able to distinguish different kinds of glyphs.
An obvious approach is to put the analytical capability into the glyph classes themselves.
For each analysis we can add one or more abstract operations to the Glyph class and have subclasses implement them in accordance with the role they play in the analysis.
But the trouble with that approach is that we'll have to change every glyph class whenever we add a new kind of analysis.
We can ease this problem in some cases: If only a few classes participate in the analysis, or if most classes do the analysis the same way, then we can supply a default implementation for the abstract operation in the Glyph class.
Thus we'd limit changes to just the Glyph class and those subclasses that deviate from the norm.
Yet even if a default implementation reduces the number of changes, an insidious problem remains: Glyph's interface expands with every new analytical capability.
Over time the analytical operations will start to obscure the basic Glyph interface.
It becomes hard to see that a glyph's main purpose.
From all indications, we need to encapsulate the analysis in a separate object, much like we've done many times before.
We could put the machinery for a given analysis into its own class.
We could use an instance of this class in conjunction with an appropriate iterator.
The iterator would "carry" the instance to each glyph in the structure.
The analysis object could then perform a piece of the analysis at each point in the traversal.
The analyzer accumulates information of interest (characters in this case) as the traversal proceeds:
The fundamental question with this approach is how the analysis object distinguishes different kinds of glyphs without resorting to type tests or downcasts.
We don't want a SpellingChecker class to include (pseudo)code like.
We'll have to remember to change the body of this function whenever we change the Glyph class hierarchy.
In fact, this is the kind of code that object-oriented languages were intended to eliminate.
We want to avoid such a brute-force approach, but how? Let's consider what happens when we add the following abstract operation to the Glyph class:
Note that when CheckMe is called, the specific Glyph subclass is knownâ€”after all, we're in one of its operations.
In turn, the SpellingChecker class interface includes an operation like CheckGlyphSubclass for every Glyph subclass10:
SpellingChecker's checking operation for Character glyphs might look something like this:
Notice we've defined a special GetCharCode operation on just the Character class.
The spelling checker can deal with subclass-specific operations without resorting to type tests or castsâ€”it lets us treat objects specially.
When it encounters a nonalphabetic character, such as an underscore, it uses the IsMisspelled operation to check the spelling of the word in _currentWord.11 If the word is misspelled, then CheckCharacter adds the word to the list of misspelled words.
Then it must clear out the _currentWord buffer to ready it for the next word.
When the traversal is over, you can retrieve the list of misspelled words with the GetMisspellings operation.
Now we can traverse the glyph structure, calling CheckMe on each glyph with the spelling checker as an argument.
This effectively identifies each glyph to the SpellingChecker and prompts the checker to do the next increment in the spelling check.
The following interaction diagram illustrates how Character glyphs and the SpellingChecker object work together:
That's true if we insist on an independent class for every analysis.
But there's no reason why we can't give all analysis classes the same interface.
We'll use the term visitor to refer generally to classes of objects that "visit" other objects during a traversal and do something appropriate.12 In this case.
Since CheckMe isn't appropriate for visitors that don't check anything, we'll give it a more general name:
Its argument must also change to take a Visitor&, reflecting the fact that it can accept any visitor.
Now adding a new analysis requires just defining a new subclass.
We support all future analyses by adding this one operation to Glyph and its subclasses.
We use a similar approach in HyphenationVisitor to accumulate text.
Instead of checking the word for misspelling, it applies a hyphenation algorithm to determine the potential hyphenation points in the word, if any.
Then at each hyphenation point, it inserts a discretionary glyph into the composition.
Discretionary glyphs are instances of Discretionary, a subclass of Glyph.
A discretionary glyph has one of two possible appearances depending on whether or not it is the last character on a line.
If it's the last character, then the discretionary looks like a hyphen; if it's not at the end of a line, then the discretionary has no appearance whatsoever.
The discretionary checks its parent (a Row object) to see if it is the last child.
The discretionary makes this check whenever it's called on to draw itself or calculate its boundaries.
The formatting strategy treats discretionaries the same as whitespace, making them candidates for ending a line.
The following diagram shows how an embedded discretionary can appear.
What we've described here is an application of the Visitor (331) pattern.
The Visitor class and its subclasses described earlier are the key participants in the pattern.
The Visitor pattern captures the technique we've used to allow an open-ended number of analyses of glyph structures without having to change the glyph classes themselves.
Another nice feature of visitors is that they can be applied not just to composites like our glyph structures but to any object structure.
Furthermore, the classes that a visitor can visit needn't be related to each other through a common parent class.
An important question to ask yourself before applying the Visitor pattern is, Which class hierarchies change most often? The pattern is most suitable when you want to be able to do a variety of different things to objects that have a stable class structure.
Adding a new kind of visitor requires no change to that class structure, which is especially important when the class structure is large.
But whenever you add a subclass to the structure, you'll also have to update all your visitor interfaces to include a Visit...
In our example that means adding a new Glyph subclass called Foo will require changing Visitor and all its subclasses to include a VisitFoo operation.
But given our design constraints, we're much more likely to add a new kind of analysis to Lexi than a new kind of Glyph.
None of these design issues is limited to document editing applications like Lexi.
Indeed, most nontrivial applications will have occasion to use many of these patterns, though perhaps to do different things.
A financial analysis application might use Composite to define investment portfolios made up of subportfolios and accounts of different sorts.
A compiler might use the Strategy pattern to allow different register allocation schemes for different target machines.
Applications with a graphical user interface will probably apply at least Decorator and Command just as we have here.
While we've covered several major problems in Lexi's design, there are lots of others we haven't discussed.
Then again, this book describes more than just the eight patterns we've used here.
So as you study the remaining patterns, think about how you might use each one in Lexi.
Or better yet, think about using them in your own designs!
Lexi's design is based on Doc, a text editing application developed by Calder [CL92]
Authors often view the document in terms of its logical structure as well, that is, in terms of sentences, paragraphs, sections, subsections, and chapters.
To keep this example simple, our internal representation won't store information about the logical structure explicitly.
But the design solution we describe works equally well for representing such information.
Calder was the first to use the term "glyph" in this context [CL90]
Most contemporary document editors don't use an object for every character, presumably for efficiency reasons.
Calder demonstrated that this approach is feasible in his thesis [Cal93]
Our glyphs are less sophisticated than his in that we have restricted ours to strict hierarchies for simplicity.
Calder's glyphs can be shared to reduce storage costs, thereby forming directed-acyclic graph structures.
We can apply the Flyweight (195) pattern to get the same effect, but we'll leave that as an exercise for the reader.
The interface we describe here is purposely minimal to keep the discussion simple.
A complete interface would include operations for managing graphical attributes such as color, font, and coordinate transformations, plus operations for more sophisticated child management.
An integer index is probably not the best way to specify a glyph's children, depending on the data structure the glyph uses.
If it stores its children in a linked list, then a pointer into the list would be more efficient.
We'll see a better solution to the indexing problem in Section 2.8, when we discuss document analysis.
The user will have even more to say about the document's logical structureâ€”the sentences, paragraphs, sections, chapters, and so forth.
Most people don't care where the linebreaks in a paragraph occur as long as the paragraph is formatted properly.
Thus users end up specifying only high-level constraints on the physical structure, leaving Lexi to do the hard work of satisfying them.
The compositor must get the character codes of Character glyphs in order to compute the linebreaks.
In Section 2.8 we'll see how to get this information polymorphically without adding a character-specific operation to the Glyph interface.
Conceptually, the client is Lexi's user, but in reality it's another object (such as an event dispatcher) that manages inputs from the user.
We could use function overloading to give each of these member functions the same name, since their parameters already differentiate them.
We've given them different names here to emphasize their differences, especially when they're called.
IsMisspelled implements the spelling algorithm, which we won't detail here because we've made it independent of Lexi's design.
They help make a system independent of how its objects are created, composed, and represented.
A class creational pattern uses inheritance to vary the class that's instantiated, whereas an object creational pattern will delegate instantiation to another object.
Creational patterns become important as systems evolve to depend more on object composition than class inheritance.
As that happens, emphasis shifts away from hard-coding a fixed set of behaviors toward defining a smaller set of fundamental behaviors that can be composed into any number of more complex ones.
Thus creating objects with particular behaviors requires more than simply instantiating a class.
First, they all encapsulate knowledge about which concrete classes the system uses.
Second, they hide how instances of these classes are created and put together.
All the system at large knows about the objects is their interfaces as defined by abstract classes.
Consequently, the creational patterns give you a lot of flexibility in what gets created, who creates it, how it gets created, and when.
They let you configure a system with "product" objects that vary widely in structure and functionality.
Configuration can be static (that is, specified at compile-time) or dynamic (at run-time)
At other times they are complementary: Builder (97) can use one of the other patterns to implement which components get built.
Because the creational patterns are closely related, we'll study all five of them together to highlight their similarities and differences.
We'll also use a common exampleâ€”building a maze for a computer gameâ€”to illustrate their implementations.
The maze and the game will vary slightly from pattern to pattern.
Sometimes the game will be simply to find your way out of a maze; in that case the player will probably only have a local view of the maze.
Sometimes mazes contain problems to solve and dangers to overcome, and these games may provide a map of the part of the maze that has been explored.
We'll ignore many details of what can be in a maze and whether a maze game has a single or multiple players.
A room knows its neighbors; possible neighbors are another room, a wall, or a door to another room.
The classes Room, Door, and Wall define the components of the maze used in all our examples.
We define only the parts of these classes that are important for creating a maze.
We'll ignore players, operations for displaying and wandering around in a maze, and other important functionality that isn't relevant to building the maze.
We use an enumeration Direction in C++ implementations to specify the north, south, east, and west sides of a room:
The Smalltalk implementations use corresponding symbols to represent these directions.
The class MapSite is the common abstract class for all the components of a maze.
To simplify the example, MapSite defines only one operation, Enter.
If you try to enter a door, then one of two things happen: If the door is open, you go into the next room.
If the door is closed, then you hurt your nose.
Enter provides a simple basis for more sophisticated game operations.
For example, if you are in a room and say "Go East," the game can simply determine which MapSite is immediately to the east and then call Enter on it.
The subclass-specific Enter operation will figure out whether your location changed or your nose got hurt.
In a real game, Enter could take the player object that's moving about as an argument.
Room is the concrete subclass of MapSite that defines the key relationships between components in the maze.
It maintains references to other MapSite objects and stores a room number.
The following classes represent the wall or door that occurs on each side of a room.
We need to know about more than just the parts of a maze.
We'll also define a Maze class to represent a collection of rooms.
Maze can also find a particular room given a room number using its RoomNo operation.
RoomNo could do a look-up using a linear search, a hash table, or even a simple array.
Instead, we'll focus on how to specify the components of a maze object.
Another class we define is MazeGame, which creates the maze.
One straightforward way to create a maze is with a series of operations that add components to a maze and then interconnect them.
For example, the following member function will create a maze consisting of two rooms with a door between them:
This function is pretty complicated, considering that all it does is create a maze with two rooms.
For example, the Room constructor could initialize the sides with walls ahead of time.
The real problem with this member function isn't its size but its inflexibility.
Changing the layout means changing this member function, either by overriding itâ€”which means reimplementing the whole thingâ€”or by changing parts of itâ€”which is error-prone and doesn't promote reuse.
The creational patterns show how to make this design more flexible, not necessarily smaller.
In particular, they will make it easy to change the classes that define the components of a maze.
Suppose you wanted to reuse an existing maze layout for a new game containing (of all things) enchanted mazes.
The enchanted maze game has new kinds of components, like DoorNeedingSpell, a door that can be locked and opened subsequently only with a spell; and EnchantedRoom, a room that can have unconventional items in it, like magic keys or spells.
How can you change CreateMaze easily so that it creates mazes with these new classes of objects?
In this case, the biggest barrier to change lies in hard-coding the classes that get instantiated.
The creational patterns provide different ways to remove explicit references to concrete classes from code that needs to instantiate them:
If CreateMaze calls virtual functions instead of constructor calls to create the rooms, walls, and doors it requires, then you can change the classes that get instantiated by making a subclass of MazeGame and redefining those virtual functions.
This approach is an example of the Factory Method (107) pattern.
If CreateMaze is passed an object as a parameter to use to create rooms, walls, and doors, then you can change the classes of rooms, walls, and doors by passing a different parameter.
This is an example of the Abstract Factory (87) pattern.
If CreateMaze is passed an object that can create a new maze in its entirety using operations for adding rooms, doors, and walls to the maze it builds, then you can use inheritance to change parts of the maze or the way the maze is built.
If CreateMaze is parameterized by various prototypical room, door, and wall objects, which it then copies and adds to the maze, then you can change the maze's composition by replacing these prototypical objects with different ones.
The remaining creational pattern, Singleton (127), can ensure there's only one maze per game and that all game objects have ready access to itâ€”without resorting to global variables or functions.
Singleton also makes it easy to extend or replace the maze without touching existing code.
Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
Consider a user interface toolkit that supports multiple look-and-feel standards, such as Motif and Presentation Manager.
Different look-and-feels define different appearances and behaviors for user interface "widgets" like scroll bars, windows, and buttons.
To be portable across look-and-feel standards, an application should not hard-code its widgets for a particular look and feel.
We can solve this problem by defining an abstract WidgetFactory class that declares an interface for creating each basic kind of widget.
There's also an abstract class for each kind of widget, and concrete subclasses implement widgets for specific look-and-feel standards.
WidgetFactory's interface has an operation that returns a new widget object for each abstract widget class.
Clients call these operations to obtain widget instances, but clients aren't aware of the concrete classes they're using.
Thus clients stay independent of the prevailing look and feel.
There is a concrete subclass of WidgetFactory for each look-and-feel standard.
Each subclass implements the operations to create the appropriate widget for the look and feel.
For example, the CreateScrollBar operation on the MotifWidgetFactory instantiates and returns a Motif scroll bar, while the corresponding operation on the PMWidgetFactory returns a scroll bar for Presentation Manager.
Clients create widgets solely through the WidgetFactory interface and have no knowledge of the classes that implement widgets for a particular look and feel.
In other words, clients only have to commit to an interface defined by an abstract class, not a particular concrete class.
A WidgetFactory also enforces dependencies between the concrete widget classes.
A Motif scroll bar should be used with a Motif button and a Motif text editor, and that constraint is enforced automatically as a consequence of using a MotifWidgetFactory.
AbstractFactory (WidgetFactory) o declares an interface for operations that create abstract.
Normally a single instance of a ConcreteFactory class is created at run-time.
This concrete factory creates product objects having a particular implementation.
To create different product objects, clients should use a different concrete factory.
AbstractFactory defers creation of product objects to its ConcreteFactory subclass.
The Abstract Factory pattern has the following benefits and liabilities:
The Abstract Factory pattern helps you control the classes of objects that an application creates.
Because a factory encapsulates the responsibility and the process of creating product objects, it isolates clients from implementation classes.
Product class names are isolated in the implementation of the concrete factory; they do not appear in client code.
The class of a concrete factory appears only once in an applicationâ€”that is, where it's instantiated.
This makes it easy to change the concrete factory an application uses.
It can use different product configurations simply by changing the concrete factory.
Because an abstract factory creates a complete family of products, the whole product family changes at once.
In our user interface example, we can switch from Motif widgets to Presentation Manager widgets simply by switching the corresponding factory objects and recreating the interface.
When product objects in a family are designed to work together, it's important that an application use objects from only one family at a time.
Extending abstract factories to produce new kinds of Products isn't easy.
That's because the AbstractFactory interface fixes the set of products that can be created.
Supporting new kinds of products requires extending the factory interface, which involves changing the AbstractFactory class and all of its subclasses.
We discuss one solution to this problem in the Implementation section.
Here are some useful techniques for implementing the Abstract Factory pattern.
An application typically needs only one instance of a ConcreteFactory per product family.
The most common way to do this is to define a factory.
A concrete factory will specify its products by overriding the factory method for each.
While this implementation is simple, it requires a new concrete factory subclass for each product family, even if the product families differ only slightly.
If many product families are possible, the concrete factory can be implemented using the Prototype (117) pattern.
The concrete factory is initialized with a prototypical instance of each product in the family, and it creates a new product by cloning its prototype.
The Prototype-based approach eliminates the need for a new concrete factory class for each new product family.
Here's a way to implement a Prototype-based factory in Smalltalk.
The concrete factory stores the prototypes to be cloned in a dictionary called partCatalog.
The concrete factory has a method for adding parts to the catalog.
Prototypes are added to the factory by identifying them with a symbol:
A variation on the Prototype-based approach is possible in languages that treat classes as first-class objects (Smalltalk and Objective C, for example)
You can think of a class in these languages as a degenerate factory that creates only one kind of product.
You can store classes inside a concrete factory that create the various concrete products in variables, much like prototypes.
These classes create new instances on behalf of the concrete factory.
You define a new factory by initializing an instance of a concrete factory with classes of products rather than by subclassing.
Like the Prototype-based factory in Smalltalk just discussed, the class-based version will have a single instance variable partCatalog, which is a dictionary whose key is the name of the part.
AbstractFactory usually defines a different operation for each kind of product it can produce.
The kinds of products are encoded in the operation signatures.
Adding a new kind of product requires changing the AbstractFactory interface and all the classes that depend on it.
A more flexible but less safe design is to add a parameter to operations that create objects.
This parameter specifies the kind of object to be created.
It could be a class identifier, an integer, a string, or anything else that identifies the kind of product.
In fact with this approach, AbstractFactory only needs a single "Make" operation with a parameter indicating the kind of object to create.
This is the technique used in the Prototype- and the class-based abstract factories discussed earlier.
This variation is easier to use in a dynamically typed language like Smalltalk than in a statically typed language like C++
You can use it in C++ only when all objects have the same abstract base class or when the product objects can be safely coerced to the correct type by the client that requested them.
The implementation section of Factory Method (107) shows how to implement such parameterized operations in C++
But even when no coercion is needed, an inherent problem remains: All products are returned to the client with the same abstract interface as given by the return type.
The client will not be able to differentiate or make safe assumptions about the class of a product.
If clients need to perform subclass-specific operations, they won't be accessible through the abstract interface.
Although the client could perform a downcast (e.g., with dynamic_cast in C++), that's not always feasible or safe, because the downcast can fail.
This is the classic trade-off for a highly flexible and extensible interface.
We'll apply the Abstract Factory pattern to creating the mazes we discussed at the beginning of this chapter.
It might be used by a program that reads plans for mazes from a file and builds the corresponding maze.
Or it might be used by a program that builds mazes randomly.
Programs that build mazes take a MazeFactory as an argument so that the programmer can specify the classes of rooms, walls, and doors to construct.
Recall that the member function CreateMaze (page 84) builds a small maze consisting of two rooms with a door between them.
CreateMaze hard-codes the class names, making it difficult to create mazes with different components.
Here's a version of CreateMaze that remedies that shortcoming by taking a MazeFactory as a parameter:
Now suppose we want to make a maze game in which a room can have a bomb set in it.
If the bomb goes off, it will damage the walls (at least)
We can make a subclass of Room keep track of whether the room has a bomb in it and whether the bomb has gone off.
We'll also need a subclass of Wall to keep track of the damage done to the wall.
The last class we'll define is BombedMazeFactory, a subclass of MazeFactory that ensures walls are of class BombedWall and rooms are of class RoomWithABomb.
To build a simple maze that can contain bombs, we simply call CreateMaze with a BombedMazeFactory.
Notice that the MazeFactory is just a collection of factory methods.
This is the most common way to implement the Abstract Factory pattern.
Also note that MazeFactory is not an abstract class; thus it acts as both the AbstractFactory and the ConcreteFactory.
This is another common implementation for simple applications of the Abstract Factory pattern.
Because the MazeFactory is a concrete class consisting entirely of factory methods, it's easy to make a new MazeFactory by making a subclass and overriding the operations that need to change.
CreateMaze used the SetSide operation on rooms to specify their sides.
If it creates rooms with a BombedMazeFactory, then the maze will be made up of RoomWithABomb objects with BombedWall sides.
This downcasting is safe as long as the argument is in fact a BombedWall, which is guaranteed to be true if walls are built solely with a BombedMazeFactory.
Dynamically typed languages such as Smalltalk don't require downcasting, of course, but they might produce run-time errors if they encounter a Wall where they expect a subclass of Wall.
Using Abstract Factory to build walls helps prevent these run-time errors by ensuring that only certain kinds of walls can be created.
Let's consider a Smalltalk version of MazeFactory, one with a single make operation that takes the kind of object to make as a parameter.
Moreover, the concrete factory stores the classes of the products it creates.
As we discussed in the Implementation section, MazeFactory needs only a single instance variable partCatalog to provide a dictionary whose key is the class of the component.
Now we can create a MazeFactory and use it to implement createMaze.
We'll create the factory using a method createMazeFactory of class MazeGame.
InterViews uses the "Kit" suffix [Lin92] to denote AbstractFactory classes.
InterViews also includes a LayoutKit that generates different composition objects depending on the layout desired.
For example, a layout that is conceptually horizontal may require different composition objects depending on the document's orientation (portrait or landscape)
ET++ [WGM88] uses the Abstract Factory pattern to achieve portability across different window systems (X Windows and SunView, for example)
The WindowSystem abstract base class defines the interface for creating objects that represent window system resources (MakeWindow, MakeFont, MakeColor, for example)
Concrete subclasses implement the interfaces for a specific window system.
At run-time, ET++ creates an instance of a concrete WindowSystem subclass that creates concrete system resource objects.
Separate the construction of a complex object from its representation so that the same construction process can create different representations.
A reader for the RTF (Rich Text Format) document exchange format should be able to convert RTF to many text formats.
The reader might convert RTF documents into plain ASCII text or into a text widget that can be edited interactively.
The problem, however, is that the number of possible conversions is open-ended.
So it should be easy to add a new conversion without modifying the reader.
A solution is to configure the RTFReader class with a TextConverter object that converts RTF to another textual representation.
As the RTFReader parses the RTF document, it uses the TextConverter to perform the conversion.
Whenever the RTFReader recognizes an RTF token (either plain text or an RTF control word), it issues a request to the TextConverter to convert the token.
TextConverter objects are responsible both for performing the data conversion and for representing the token in a particular format.
For example, an ASCIIConverter ignores requests to convert anything except plain text.
A TeXConverter, on the other hand, will implement operations for all requests in order to produce a TeX representation that captures all the stylistic information in the text.
Each kind of converter class takes the mechanism for creating and assembling a complex object and puts it behind an abstract interface.
The converter is separate from the reader, which is responsible for parsing an RTF document.
Each converter class is called a builder in the pattern, and the reader is called the director.
Applied to this example, the Builder pattern separates the algorithm for interpreting a textual format (that is, the parser for RTF documents) from how a converted format gets created and represented.
This lets us reuse the RTFReader's parsing algorithm to create different text representations from RTF documentsâ€”just configure the RTFReader with different subclasses of TextConverter.
Builder (TextConverter) o specifies an abstract interface for creating parts of a Product.
ConcreteBuilder builds the product's internal representation and defines the process by which it's assembled.
The client creates the Director object and configures it with the desired Builder object.
Director notifies the builder whenever a part of the product should be built.
Builder handles requests from the director and adds parts to the product.
The following interaction diagram illustrates how Builder and Director cooperate with a client.
The Builder object provides the director with an abstract interface for constructing the product.
The interface lets the builder hide the representation and internal structure of the product.
Because the product is constructed through an abstract interface, all you have to do to change the product's internal representation is define a new kind of builder.
The Builder pattern improves modularity by encapsulating the way a complex object is constructed and represented.
Clients needn't know anything about the classes that define the product's internal structure; such classes don't appear in Builder's interface.
Each ConcreteBuilder contains all the code to create and assemble a particular kind of product.
The code is written once; then different Directors can reuse it to build Product variants from the same set of parts.
In the earlier RTF example, we could define a reader for a format other than RTF, say, an SGMLReader, and use the same TextConverters to generate ASCIIText, TeXText, and TextWidget renditions of SGML documents.
Unlike creational patterns that construct products in one shot, the Builder pattern constructs the product step by step under the director's control.
Only when the product is finished does the director retrieve it from the builder.
Hence the Builder interface reflects the process of constructing the product more than other creational patterns.
This gives you finer control over the construction process and consequently the internal structure of the resulting product.
Typically there's an abstract Builder class that defines an operation for each component that a director may ask it to create.
A ConcreteBuilder class overrides operations for components it's interested in creating.
Therefore the Builder class interface must be general enough to allow the construction of products for all kinds of concrete builders.
A key design issue concerns the model for the construction and assembly process.
A model where the results of construction requests are simply appended to the product is usually sufficient.
In the RTF example, the builder converts and appends the next token to the text it has converted so far.
But sometimes you might need access to parts of the product constructed earlier.
In the Maze example we present in the Sample Code, the MazeBuilder interface lets you add a door between existing rooms.
Tree structures such as parse trees that are built bottom-up are another example.
In that case, the builder would return child nodes to the director, which then would pass them back to the builder to build the parent nodes.
Why no abstract class for products? In the common case, the products produced by the concrete builders differ so greatly in their representation that there is little to gain from giving different products a common parent class.
In the RTF example, the ASCIIText and the TextWidget objects are unlikely to have a common interface, nor do they need one.
Because the client usually configures the director with the proper concrete builder, the client is in a position to.
In C++, the build methods are intentionally not declared pure virtual member functions.
They're defined as empty methods instead, letting clients override only the operations they're interested in.
We'll define a variant of the CreateMaze member function (page 84) that takes a builder of class MazeBuilder as an argument.
The MazeBuilder class defines the following interface for building mazes:
Subclasses of MazeBuilder will override this operation to return the maze that they build.
All the maze-building operations of MazeBuilder do nothing by default.
They're not declared pure virtual to let derived classes override only those methods in which they're interested.
Given the MazeBuilder interface, we can change the CreateMaze member function to take this builder as a parameter.
Notice how the builder hides the internal representation of the Mazeâ€”that is, the classes that define rooms, doors, and wallsâ€”and how these parts are assembled to complete the final maze.
Someone might guess that there are classes for representing rooms and doors, but there is no hint of one for walls.
This makes it easier to change the way a maze is represented, since none of the clients of MazeBuilder has to be changed.
Like the other creational patterns, the Builder pattern encapsulates how objects get created, in this case through the interface defined by MazeBuilder.
That means we can reuse MazeBuilder to build different kinds of mazes.
Note that MazeBuilder does not create mazes itself; its main purpose is just to define an interface for creating mazes.
It keeps track of the maze it's building in the variable _currentMaze.
CommonWall is a utility operation that determines the direction of the common wall between two rooms.
BuildMaze instantiates a Maze that other operations will assemble and eventually return to the client (with GetMaze)
The BuildRoom operation creates a room and builds the walls around it:
Most importantly, separating the two lets you have a variety of MazeBuilders, each using different classes for rooms, walls, and doors.
This builder doesn't create a maze at all; it just counts the different kinds of components that would have been created.
The constructor initializes the counters, and the overridden MazeBuilder operations increment them accordingly.
Its text building block uses a builder to process text stored in the RTF format.
The Parser class in the compiler subsystem is a Director that takes a ProgramNodeBuilder object as an argument.
A Parser object notifies its ProgramNodeBuilder object each time it recognizes a syntactic construct.
When the parser is done, it asks the builder for the parse tree it built and returns it to the client.
ClassBuilder is a builder that Classes use to create subclasses for themselves.
In this case a Class is both the Director and the Product.
ByteCodeStream is a builder that creates a compiled method as a byte array.
ByteCodeStream is a nonstandard use of the Builder pattern, because the complex object it builds is encoded as a byte array, not as a normal Smalltalk object.
But the interface to ByteCodeStream is typical of a builder, and it would be easy to replace ByteCodeStream.
The Service Configurator framework from the Adaptive Communications Environment uses a builder to construct network service components that are linked into a server at run-time [SS94]
The components are described with a configuration language that's parsed by an LALR(1) parser.
The semantic actions of the parser perform operations on the builder that add information to the service component.
Abstract Factory (87) is similar to Builder in that it too may construct complex objects.
The primary difference is that the Builder pattern focuses on constructing a complex object step by step.
Abstract Factory's emphasis is on families of product objects (either simple or complex)
Builder returns the product as a final step, but as far as the Abstract Factory pattern is concerned, the product gets returned immediately.
Define an interface for creating an object, but let subclasses decide which class to instantiate.
Frameworks use abstract classes to define and maintain relationships between objects.
A framework is often responsible for creating these objects as well.
Consider a framework for applications that can present multiple documents to the user.
To create a drawing application, for example, we define the classes DrawingApplication and DrawingDocument.
The Application class is responsible for managing Documents and will create them as requiredâ€”when the user selects Open or New from a menu, for example.
This creates a dilemma: The framework must instantiate classes, but it only knows about abstract classes, which it cannot instantiate.
It encapsulates the knowledge of which Document subclass to create and moves this knowledge out of the framework.
Application subclasses redefine an abstract CreateDocument operation on Application to return the appropriate Document subclass.
We call CreateDocument a factory method because it's responsible for "manufacturing" an object.
Product (Document) o defines the interface of objects the factory method creates.
Creator (Application) o declares the factory method, which returns an object of type.
Creator may also define a default implementation of the factory method that returns a default ConcreteProduct object.
Creator relies on its subclasses to define the factory method so that it returns an instance of the appropriate ConcreteProduct.
The code only deals with the Product interface; therefore it can work with any user-defined ConcreteProduct classes.
A potential disadvantage of factory methods is that clients might have to subclass the Creator class just to create a particular ConcreteProduct object.
Subclassing is fine when the client has to subclass the Creator class anyway, but otherwise the client now must deal with another point of evolution.
Here are two additional consequences of the Factory Method pattern:
Creating objects inside a class with a factory method is always more flexible than creating an object directly.
Factory Method gives subclasses a hook for providing an extended version of an object.
In the Document example, the Document class could define a factory method called CreateFileDialog that creates a default file dialog object for opening an existing document.
In this case the factory method is not abstract but provides a reasonable default implementation.
In the examples we've considered so far, the factory method is only called by Creators.
But this doesn't have to be the case; clients can find factory methods useful, especially in the case of parallel class hierarchies.
Parallel class hierarchies result when a class delegates some of its responsibilities to a separate class.
Consider graphical figures that can be manipulated interactively; that is, they can be stretched, moved, or rotated using the mouse.
It often requires storing and updating information that records the state of the manipulation at a given time.
This state is needed only during manipulation; therefore it needn't be kept in the figure object.
Moreover, different figures behave differently when the user manipulates them.
For example, stretching a line figure might have the effect of moving an endpoint, whereas stretching a text figure may change its line spacing.
Different figures will use different Manipulator subclasses to handle particular interactions.
The Figure class provides a CreateManipulator factory method that lets clients create a Figure's corresponding Manipulator.
Figure subclasses override this method to return an instance of the Manipulator subclass that's right for them.
Alternatively, the Figure class may implement CreateManipulator to return a default Manipulator instance, and Figure subclasses may simply inherit that default.
The Figure classes that do so need no corresponding Manipulator subclassâ€”hence the hierarchies are only partially parallel.
Notice how the factory method defines the connection between the two class hierarchies.
Consider the following issues when applying the Factory Method pattern:
It's also possible to have an abstract class that defines a default implementation, but this is less common.
The first case requires subclasses to define an implementation, because there's no reasonable default.
It gets around the dilemma of having to instantiate unforeseeable classes.
It's following a rule that says, "Create objects in a separate operation so that subclasses can override the way they're created." This rule ensures that designers of subclasses can change the class of objects their parent class instantiates if necessary.
Another variation on the pattern lets the factory method create multiple kinds of products.
The factory method takes a parameter that identifies the kind of object to create.
All objects the factory method creates will share the Product interface.
In the Document example, Application might support different kinds of Documents.
You pass CreateDocument an extra parameter to specify the kind of document to create.
The Unidraw graphical editing framework [VL90] uses this approach for reconstructing objects saved on disk.
Unidraw defines a Creator class with a factory method Create that takes a class identifier as an argument.
When Unidraw saves an object to disk, it writes out the class identifier first and then its instance variables.
When it reconstructs the object from disk, it reads the class identifier first.
Once the class identifier is read, the framework calls Create, passing the identifier as the parameter.
Create looks up the constructor for the corresponding class and uses it to instantiate the object.
Last, Create calls the object's Read operation, which reads the remaining information on the disk and initializes the object's instance variables.
A parameterized factory method has the following general form, where MyProduct and YourProduct are subclasses of Product:
Overriding a parameterized factory method lets you easily and selectively extend or change the products that a Creator produces.
You can introduce new identifiers for new kinds of products, or you can associate existing identifiers with different products.
For example, a subclass MyCreator could swap MyProduct and YourProduct and support a new TheirProduct subclass:
Notice that the last thing this operation does is call Create on the parent class.
That's because MyCreator::Create handles only YOURS, MINE, and THEIRS differently than the parent class.
Hence MyCreator extends the kinds of products created, and it defers responsibility for creating all but a few products to its parent.
Different languages lend themselves to other interesting variations and caveats.
Smalltalk programs often use a method that returns the class of the object to be instantiated.
A Creator factory method can use this value to create a product, and a ConcreteCreator may store or even compute this value.
The result is an even later binding for the type of ConcreteProduct to be instantiated.
A Smalltalk version of the Document example can define a documentClass method on Application.
The documentClass method returns the proper Document class for instantiating documents.
The implementation of documentClass in MyApplication returns the MyDocument class.
An even more flexible approach akin to parameterized factory methods is to store the class to be created as a class variable of Application.
That way you don't have to subclass Application to vary the product.
Factory methods in C++ are always virtual functions and are often pure virtual.
Just be careful not to call factory methods in the Creator's constructorâ€”the factory method in the ConcreteCreator won't be available yet.
You can avoid this by being careful to access products solely through accessor operations that create the product on demand.
But first it checks to make sure the product exists, and if it doesn't, the accessor creates it.
As we've mentioned, another potential problem with factory methods is that they might force you to subclass just to create the appropriate Product objects.
With this template, the client supplies just the product classâ€”no subclassing of Creator is required.
It's good practice to use naming conventions that make it clear you're using factory methods.
The function CreateMaze (page 84) builds and returns a maze.
One problem with this function is that it hard-codes the classes of maze, rooms, doors, and walls.
We'll introduce factory methods to let subclasses choose these components.
First we'll define factory methods in MazeGame for creating the maze, room, wall, and door objects:
Each factory method returns a maze component of a given type.
MazeGame provides default implementations that return the simplest kinds of maze, rooms, walls, and doors.
Now we can rewrite CreateMaze to use these factory methods:
Different games can subclass MazeGame to specialize parts of the maze.
MazeGame subclasses can redefine some or all of the factory methods to specify variations in products.
For example, a BombedMazeGame can redefine the Room and Wall products to return the bombed varieties:
The preceding document example is a typical use in MacApp and ET++ [WGM88]
A more esoteric example in Smalltalk-80 is the factory method parserClass defined by Behavior (a superclass of all objects representing classes)
This enables a class to use a customized parser for its source code.
For example, a client can define a class SQLParser to analyze the source code of a class with embedded SQL statements.
The Behavior class implements parserClass to return the standard Smalltalk Parser class.
A class that includes embedded SQL statements overrides this method (as a class method) and returns the SQLParser class.
Factory Method makes it easy to replace the default proxy with one that uses client-side caching, for example.
In the document example above, NewDocument is a template method.
However, they often require an Initialize operation on the Product class.
Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.
You could build an editor for music scores by customizing a general framework for graphical editors and adding new objects that represent notes, rests, and staves.
The editor framework may have a palette of tools for adding these music objects to the score.
Users will click on the quarter-note tool and use it to add quarter notes to the score.
Or they can use the move tool to move a note up or down on the staff, thereby changing its pitch.
Let's assume the framework provides an abstract Graphic class for graphical components, like notes and staves.
Moreover, it'll provide an abstract Tool class for defining tools like those in the palette.
The framework also predefines a GraphicTool subclass for tools that create instances of graphical objects and add them to the document.
The classes for notes and staves are specific to our application, but the GraphicTool class belongs to the framework.
GraphicTool doesn't know how to create instances of our music classes to add to the score.
We could subclass GraphicTool for each kind of music object, but that would produce lots of subclasses that differ only in the kind of music object they instantiate.
We know object composition is a flexible alternative to subclassing.
The question is, how can the framework use it to parameterize instances of GraphicTool by the class of Graphic they're supposed to create?
The solution lies in making GraphicTool create a new Graphic by copying or "cloning" an instance of a Graphic subclass.
GraphicTool is parameterized by the prototype it should clone and add to the document.
If all Graphic subclasses support a Clone operation, then the GraphicTool can clone any kind of Graphic.
So in our music editor, each tool for creating a music object is an instance of GraphicTool that's initialized with a different prototype.
Each GraphicTool instance will produce a music object by cloning its prototype and adding the clone to the score.
We can use the Prototype pattern to reduce the number of classes even further.
We have separate classes for whole notes and half notes, but that's probably unnecessary.
Instead they could be instances of the same class initialized with different bitmaps and durations.
A tool for creating whole notes becomes just a GraphicTool whose prototype is a MusicalNote initialized to be a whole note.
This can reduce the number of classes in the system dramatically.
It also makes it easier to add a new kind of note to the music editor.
Use the Prototype pattern when a system should be independent of how its products are created, composed, and represented; and.
It may be more convenient to install a corresponding number of prototypes and clone them rather than instantiating the class manually, each time with the appropriate state.
ConcretePrototype (Staff, WholeNote, HalfNote) o implements an operation for cloning itself.
Client (GraphicTool) o creates a new object by asking a prototype to clone itself.
Prototypes let you incorporate a new concrete product class into a system simply by registering a prototypical instance with the client.
That's a bit more flexible than other creational patterns, because a client can install and remove prototypes at run-time.
Highly dynamic systems let you define new behavior through object compositionâ€”by specifying values for an object's variables, for exampleâ€”and not by defining new classes.
You effectively define new kinds of objects by instantiating existing classes and registering the instances as prototypes of client objects.
A client can exhibit new behavior by delegating responsibility to the prototype.
This kind of design lets users define new "classes" without programming.
In fact, cloning a prototype is similar to instantiating a class.
The Prototype pattern can greatly reduce the number of classes a system needs.
In our music editor, one GraphicTool class can create a limitless variety of music objects.
Editors for circuit design, for example, build circuits out of subcircuits.1 For convenience, such applications often let you instantiate complex, user-defined structures, say, to use a specific subcircuit again and again.
We simply add this subcircuit as a prototype to the palette of available circuit elements.
As long as the composite circuit object implements Clone as a deep copy, circuits with different structures can be prototypes.
Factory Method (107) often produces a hierarchy of Creator classes that parallels the product class hierarchy.
The Prototype pattern lets you clone a prototype instead of asking a factory method to make a new object.
Hence you don't need a Creator class hierarchy at all.
This benefit applies primarily to languages like C++ that don't treat classes as first-class objects.
Languages that do, like Smalltalk and Objective C, derive less benefit, since you can always use a class object as a creator.
Some run-time environments let you load classes into an application dynamically.
The Prototype pattern is the key to exploiting such facilities in a language like C++
An application that wants to create instances of a dynamically loaded class won't be able to reference its constructor statically.
Instead, the run-time environment creates an instance of each class automatically when it's loaded, and it registers the instance with a prototype manager (see the Implementation section)
The ET++ application framework [WGM88] has a run-time system that uses this scheme.
The main liability of the Prototype pattern is that each subclass of Prototype must implement the Clone operation, which may be difficult.
For example, adding Clone is difficult when the classes under consideration already exist.
Implementing Clone can be difficult when their internals include objects that don't support copying or have circular references.
Prototype is particularly useful with static languages like C++, where classes are not objects, and little or no type information is available at run-time.
It's less important in languages like Smalltalk or Objective C that provide what amounts to a prototype (i.e., a class object) for creating instances of each class.
This pattern is built into prototype-based languages like Self [US87], in which all object creation happens by cloning a prototype.
When the number of prototypes in a system isn't fixed (that is, they can be created and destroyed dynamically), keep a registry of available prototypes.
Clients won't manage prototypes themselves but will store and retrieve them from the registry.
A client will ask the registry for a prototype before cloning it.
A prototype manager is an associative store that returns the prototype matching a given key.
It has operations for registering a prototype under a key and for unregistering it.
Clients can change or even browse through the registry at run-time.
This lets clients extend and take inventory on the system without writing code.
The hardest part of the Prototype pattern is implementing the Clone operation correctly.
For example, Smalltalk provides an implementation of copy that's inherited by all subclasses of Object.
But these facilities don't solve the "shallow copy versus deep copy" problem [GR83]
That is, does cloning an object in turn clone its instance variables, or do the clone and original just share the variables?
A shallow copy is simple and often sufficient, and that's what Smalltalk provides by default.
The default copy constructor in C++ does a member-wise copy, which means pointers will be shared between the copy and the original.
But cloning prototypes with complex structures usually requires a deep copy, because the clone and the original must be independent.
Therefore you must ensure that the clone's components are clones of the prototype's components.
Cloning forces you to decide what if anything will be shared.
If objects in the system provide Save and Load operations, then you can use them to provide a default implementation of Clone simply by saving the object and loading it back immediately.
The Save operation saves the object into a memory buffer, and Load creates a duplicate by reconstructing the object from the buffer.
While some clients are perfectly happy with the clone as is, others will want to initialize some or all of its internal state to values of their choosing.
You generally can't pass these values in the Clone operation, because their number will vary between classes of prototypes.
Some prototypes might need multiple initialization parameters; others won't need any.
Passing parameters in the Clone operation precludes a uniform cloning interface.
It might be the case that your prototype classes already define operations for (re)setting key pieces of state.
If so, clients may use these operations immediately after cloning.
If not, then you may have to introduce an Initialize operation (see the Sample Code section) that takes initialization parameters as arguments and sets the clone's internal state accordingly.
Beware of deep-copying Clone operationsâ€”the copies may have to be deleted (either explicitly or within Initialize) before you reinitialize them.
The member functions for creating walls, rooms, and doors are similar: Each clones a prototype and then initializes it.
The following call creates a maze with a BombedDoor and a RoomWithABomb:
An object that can be used as a prototype, such as an instance of Wall, must support the Clone operation.
It may also need a separate operation for reinitializing internal state.
We'll add the Initialize operation to Door to let clients initialize the clone's rooms.
Compare the following definition of Door to the one on page 83:
The BombedWall subclass must override Clone and implement a corresponding copy constructor.
We define Clone like this in the base class to ensure that clients that clone the prototype don't have to know about their concrete subclasses.
Clients should never need to downcast the return value of Clone to the desired type.
In Smalltalk, you can reuse the standard copy method inherited from Object to clone any MapSite.
You can use MazeFactory to produce the prototypes you'll need; for example, you can create a room by supplying the name #room.
The MazeFactory has a dictionary that maps names to prototypes.
Given appropriate methods for initializing the MazeFactory with prototypes, you could create a simple maze with the following code:
Perhaps the first example of the Prototype pattern was in Ivan Sutherland's Sketchpad system [Sut63]
The first widely known application of the pattern in an object-oriented language was in ThingLab, where users could form a composite object and then promote it to a prototype by installing it in a library of reusable objects [Bor81]
He describes idioms related to the Prototype pattern for C++ and gives many examples and variations.
Etgdb is a debugger front-end based on ET++ that provides a point-and-click interface to different line-oriented debuggers.
For example, GdbAdaptor adapts etgdb to the command syntax of GNU gdb, while SunDbxAdaptor adapts etgdb.
Etgdb does not have a set of DebuggerAdaptor classes hard-coded into it.
Instead, it reads the name of the adaptor to use from an environment variable, looks for a prototype with the specified name in a global table, and then clones the prototype.
New debuggers can be added to etgdb by linking it with the DebuggerAdaptor that works for that debugger.
The "interaction technique library" in Mode Composer stores prototypes of objects that support various interaction techniques [Sha90]
Any interaction technique created by the Mode Composer can be used as a prototype by placing it in this library.
The Prototype pattern lets Mode Composer support an unlimited set of interaction techniques.
The music editor example discussed earlier is based on the Unidraw drawing framework [VL90]
Prototype and Abstract Factory (87) are competing patterns in some ways, as we discuss at the end of this chapter.
An Abstract Factory might store a set of prototypes from which to clone and return product objects.
Ensure a class only has one instance, and provide a global point of access to it.
It's important for some classes to have exactly one instance.
Although there can be many printers in a system, there should be only one printer spooler.
There should be only one file system and one window manager.
An accounting system will be dedicated to serving one company.
How do we ensure that a class has only one instance and that the instance is easily accessible? A global variable makes an object accessible, but it doesn't keep you from instantiating multiple objects.
A better solution is to make the class itself responsible for keeping track of its sole instance.
The class can ensure that no other instance can be created (by intercepting requests to create new objects), and it can provide a way to access the instance.
Singleton o defines an Instance operation that lets clients access its unique.
Instance is a class operation (that is, a class method in Smalltalk and a static member function in C++)
Clients access a Singleton instance solely through Singleton's Instance operation.
Because the Singleton class encapsulates its sole instance, it can have strict control over how and when clients access it.
It avoids polluting the name space with global variables that store sole instances.
The Singleton class may be subclassed, and it's easy to configure an application with an instance of this extended class.
You can configure the application with an instance of the class you need at run-time.
The pattern makes it easy to change your mind and allow more than one instance of the Singleton class.
Moreover, you can use the same approach to control the number of instances that the application uses.
Only the operation that grants access to the Singleton instance needs to change.
Another way to package a singleton's functionality is to use class operations (that is, static member functions in C++ or class methods in Smalltalk)
But both of these language techniques make it hard to change a design to allow more than one instance of a class.
Moreover, static member functions in C++ are never virtual, so subclasses can't override them polymorphically.
Here are implementation issues to consider when using the Singleton pattern:
The Singleton pattern makes the sole instance a normal instance of a class, but that class is written so that only one instance can ever be created.
A common way to do this is to hide the operation that creates the instance behind a class operation (that is, either a static member function or a class method) that guarantees only one instance is created.
This operation has access to the variable that holds the unique instance, and it ensures the variable is initialized with the unique instance before returning its value.
You can define the class operation in C++ with a static member function Instance of the Singleton class.
Singleton also defines a static member variable _instance that contains a pointer to its unique instance.
Clients access the singleton exclusively through the Instance member function.
Instance uses lazy initialization; the value it returns isn't created and stored until it's first accessed.
A client that tries to instantiate Singleton directly will get an error at compile-time.
This ensures that only one instance can ever get created.
Moreover, since the _instance is a pointer to a Singleton object, the Instance member function can assign a pointer to a subclass of Singleton to this variable.
We'll give an example of this in the Sample Code.
It isn't enough to define the singleton as a global or static object and then rely on automatic initialization.
We can't guarantee that only one instance of a static object will ever be declared.
We might not have enough information to instantiate every singleton at static initialization time.
A singleton might require values that are computed later in the program's execution.
C++ doesn't define the order in which constructors for global objects are called across translation units [ES90]
This means that no dependencies can exist between singletons; if any do, then errors are inevitable.
An added (albeit small) liability of the global/static object approach is that it forces all singletons to be created whether they are used or not.
Using a static member function avoids all of these problems.
In Smalltalk, the function that returns the unique instance is implemented as a class method on the Singleton class.
To ensure that only one instance is created, override the new operation.
The resulting Singleton class might have the following two class methods, where SoleInstance is a class variable that is not used anywhere else:
The main issue is not so much defining the subclass but installing its unique instance so that clients will be able to use it.
In essence, the variable that refers to the singleton instance must get initialized with an instance of the subclass.
The simplest technique is to determine which singleton you want to use in the Singleton's Instance operation.
An example in the Sample Code shows how to implement this technique with environment variables.
Another way to choose the subclass of Singleton is to take the implementation of Instance out of the parent class (e.g., MazeFactory) and put it in the subclass.
That lets a C++ programmer decide the class of singleton at link-time (e.g., by linking in an object file containing a different implementation) but keeps it hidden from the clients of the singleton.
The link approach fixes the choice of singleton class at link-time, which makes it hard to choose the singleton class at run-time.
Using conditional statements to determine the subclass is more flexible, but it hard-wires the set of possible Singleton classes.
Instead of having Instance define the set of possible Singleton classes, the Singleton classes can register their singleton instance by name in a well-known registry.
When Instance needs a singleton, it consults the registry, asking for the singleton by name.
The registry looks up the corresponding singleton (if it exists) and returns it.
This approach frees Instance from knowing all possible Singleton classes or instances.
All it requires is a common interface for all Singleton classes that includes operations for the registry:
To keep the registry simple, we'll have it store a list of NameSingletonPair objects.
We'll assume that an environment variable specifies the name of the singleton desired.
Where do Singleton classes register themselves? One possibility is in their constructor.
Of course, the constructor won't get called unless someone instantiates the class, which echoes the problem the Singleton pattern is trying to solve! We can get around this problem in C++ by defining a static instance of MySingleton.
No longer is the Singleton class responsible for creating the singleton.
Instead, its primary responsibility is to make the singleton object of choice accessible in the system.
The static object approach still has a potential drawbackâ€”namely that instances of all possible Singleton subclasses must be created, or else they won't get registered.
MazeFactory defines an interface for building different parts of a maze.
Subclasses can redefine the operations to return instances of specialized product classes, like BombedWall objects instead of plain Wall objects.
What's relevant here is that the Maze application needs only one instance of a maze factory, and that instance should be available to code that builds any part of the maze.
By making the MazeFactory a singleton, we make the maze object globally accessible without resorting to global variables.
We make it a Singleton class in C++ by adding a static Instance operation and a static _instance member to hold the one and only instance.
We must also protect the constructor to prevent accidental instantiation, which might lead to more than one instance.
Now let's consider what happens when there are subclasses of MazeFactory, and the application must decide which one to use.
We'll select the kind of maze through an environment variable and add code that instantiates the proper MazeFactory subclass based on the environment variable's value.
The Instance operation is a good place to put this code, because it already instantiates MazeFactory:
Note that Instance must be modified whenever you define a new subclass of MazeFactory.
That might not be a problem in this application, but it might be for abstract factories defined in a framework.
A possible solution would be to use the registry approach described in the Implementation section.
Dynamic linking could be useful here as wellâ€”it would keep the application from having to load all the subclasses that are not used.
A more subtle example is the relationship between classes and their metaclasses.
A metaclass is the class of a class, and each metaclass has one instance.
Metaclasses do not have names (except indirectly through their sole instance), but they keep track of their sole instance and will not normally create another.
The InterViews user interface toolkit [LCI+92] uses the Singleton pattern to access the unique instance of its Session and WidgetKit classes, among others.
Session defines the application's main event dispatch loop, stores the user's database of stylistic preferences, and manages connections to one or more physical displays.
WidgetKit is an Abstract Factory (87) for defining the look and feel of user interface widgets.
A similar operation on Session determines whether monochrome or color displays are supported and configures the singleton Session instance accordingly.
There are two common ways to parameterize a system by the classes of objects it creates.
One way is to subclass the class that creates the objects; this corresponds to using the Factory Method (107) pattern.
For example, when the product creator is itself created by a factory method, then you have to override its creator as well.
The other way to parameterize a system relies more on object composition: Define an object that's responsible for knowing the class of the product objects, and make it a parameter of the system.
All three involve creating a new "factory object" whose responsibility is to create product objects.
Abstract Factory has the factory object producing objects of several classes.
Builder has the factory object building a complex product incrementally using a correspondingly complex protocol.
Prototype has the factory object building a product by copying a prototype object.
In this case, the factory object and the prototype are the same object, because the prototype is responsible for returning the product.
Consider the drawing editor framework described in the Prototype pattern.
There are several ways to parameterize a GraphicTool by the class of product:
By applying the Factory Method pattern, a subclass of GraphicTool will be created for each subclass of Graphic in the palette.
GraphicTool will have a NewGraphic operation that each GraphicTool subclass will redefine.
By applying the Abstract Factory pattern, there will be a class hierarchy of GraphicsFactories, one for each Graphic subclass.
Each factory creates just one product in this case: CircleFactory will create Circles, LineFactory will create Lines, and so on.
A GraphicTool will be parameterized with a factory for creating the appropriate kind of Graphics.
By applying the Prototype pattern, each subclass of Graphics will implement the Clone operation, and a GraphicTool will be parameterized with a prototype of the Graphic it creates.
In our drawing editor framework, the Factory Method pattern is easiest to use at first.
It's easy to define a new subclass of GraphicTool, and the instances of GraphicTool are created only when the palette is defined.
The main disadvantage here is that GraphicTool subclasses proliferate, and none of them does very much.
Abstract Factory doesn't offer much of an improvement, because it requires an equally large GraphicsFactory class hierarchy.
Overall, the Prototype pattern is probably the best for the drawing editor framework, because it only requires implementing a Clone operation on each Graphics class.
That reduces the number of classes, and Clone can be used for purposes other than pure instantiation (e.g., a Duplicate menu operation)
Factory Method makes a design more customizable and only a little more complicated.
Other design patterns require new classes, whereas Factory Method only requires a new operation.
People often use Factory Method as the standard way to create objects, but it isn't necessary when the class that's instantiated never changes or when instantiation takes place in an operation that subclasses can easily override, such as an initialization operation.
Designs that use Abstract Factory, Prototype, or Builder are even more flexible than those that use Factory Method, but they're also more complex.
Often, designs start out using Factory Method and evolve toward the other creational patterns as the designer discovers where more flexibility is needed.
Knowing many design patterns gives you more choices when trading off one design criterion against another.
Structural patterns are concerned with how classes and objects are composed to form larger structures.
Structural class patterns use inheritance to compose interfaces or implementations.
As a simple example, consider how multiple inheritance mixes two or more classes into one.
The result is a class that combines the properties of its parent classes.
This pattern is particularly useful for making independently developed class libraries work together.
Another example is the class form of the Adapter (139) pattern.
In general, an adapter makes one interface (the adaptee's) conform to another, thereby providing a uniform abstraction of different interfaces.
A class adapter accomplishes this by inheriting privately from an adaptee class.
The adapter then expresses its interface in terms of the adaptee's.
Rather than composing interfaces or implementations, structural object patterns describe ways to compose objects to realize new functionality.
The added flexibility of object composition comes from the ability to change the composition at run-time, which is impossible with static class composition.
Composite (163) is an example of a structural object pattern.
It describes how to build a class hierarchy made up of classes for two kinds of objects:
The composite objects let you compose primitive and other composite objects into arbitrarily complex structures.
In the Proxy (207) pattern, a proxy acts as a convenient surrogate or placeholder for another object.
It can act as a local representative for an object in a remote address space.
It can represent a large object that should be loaded on demand.
Proxies provide a level of indirection to specific properties of objects.
The Flyweight (195) pattern defines a structure for sharing objects.
Objects are shared for at least two reasons: efficiency and consistency.
Applications that use lots of objects must pay careful attention to the cost of each object.
Substantial savings can be had by sharing objects instead of replicating them.
But objects can be shared only if they don't define context-dependent state.
Any additional information they need to perform their task is passed to them when needed.
With no context-dependent state, Flyweight objects may be shared freely.
Whereas Flyweight shows how to make lots of little objects, Facade (185) shows how to make a single object represent an entire subsystem.
A facade is a representative for a set of objects.
The facade carries out its responsibilities by forwarding messages to the objects it represents.
The Bridge (151) pattern separates an object's abstraction from its implementation so that you can vary them independently.
Decorator (175) describes how to add responsibilities to objects dynamically.
Decorator is a structural pattern that composes objects recursively to allow an open-ended number of additional responsibilities.
For example, a Decorator object containing a user interface component can add a decoration like a border or shadow to the component, or it can add functionality like scrolling and zooming.
We can add two decorations simply by nesting one Decorator object within another, and so on for additional decorations.
To accomplish this, each Decorator object must conform to the interface of its component and must forward messages to it.
The Decorator can do its job (such as drawing a border around the component) either before or after forwarding a message.
We'll discuss these relationships at the end of the chapter.
Convert the interface of a class into another interface clients expect.
Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.
Sometimes a toolkit class that's designed for reuse isn't reusable only because its interface doesn't match the domain-specific interface an application requires.
The drawing editor's key abstraction is the graphical object, which has an editable shape and can draw itself.
The interface for graphical objects is defined by an abstract class called Shape.
The editor defines a subclass of Shape for each kind of graphical object: a LineShape class for lines, a PolygonShape class for polygons, and so forth.
Classes for elementary geometric shapes like LineShape and PolygonShape are rather easy to implement, because their drawing and editing capabilities are inherently limited.
But a TextShape subclass that can display and edit text is considerably more difficult to implement, since even basic text editing involves complicated screen update and buffer management.
Meanwhile, an off-the-shelf user interface toolkit might already provide a sophisticated TextView class for displaying and editing text.
Ideally we'd like to reuse TextView to implement TextShape, but the toolkit wasn't designed with Shape classes in mind.
How can existing and unrelated classes like TextView work in an application that expects classes with a different and incompatible interface? We could change the TextView class so that it conforms to the Shape interface, but that isn't an option unless we have the toolkit's source code.
Instead, we could define TextShape so that it adapts the TextView interface to Shape's.
These two approaches correspond to the class and object versions of the Adapter pattern.
It shows how BoundingBox requests, declared in class Shape, are converted to GetExtent requests defined in TextView.
Since TextShape adapts TextView to the Shape interface, the drawing editor can reuse the otherwise incompatible TextView class.
Often the adapter is responsible for functionality the adapted class doesn't provide.
The diagram shows how an adapter can fulfill such responsibilities.
The user should be able to "drag" every Shape object to a new location interactively, but TextView isn't designed to do that.
TextShape can add this missing functionality by implementing Shape's CreateManipulator operation, which returns an instance of the appropriate Manipulator subclass.
Manipulator is an abstract class for objects that know how to animate a Shape in response to user input, like dragging the shape to a new location.
There are subclasses of Manipulator for different shapes; TextManipulator, for example, is the corresponding subclass for TextShape.
By returning a TextManipulator instance, TextShape adds the functionality that TextView lacks but Shape requires.
An object adapter can adapt the interface of its parent class.
A class adapter uses multiple inheritance to adapt one interface to another:
Target (Shape) o defines the domain-specific interface that Client uses.
Client (DrawingEditor) o collaborates with objects conforming to the Target interface.
Adaptee (TextView) o defines an existing interface that needs adapting.
Adapter (TextShape) o adapts the interface of Adaptee to the Target interface.
In turn, the adapter calls Adaptee operations that carry out the request.
As a consequence, a class adapter won't work when we want to adapt a class and all its subclasses.
The Adapter can also add functionality to all Adaptees at once.
It will require subclassing Adaptee and making Adapter refer to the subclass rather than the Adaptee itself.
Here are other issues to consider when using the Adapter pattern:
How much adapting does Adapter do? Adapters vary in the amount of work they do to adapt Adaptee to the Target interface.
There is a spectrum of possible work, from simple interface conversionâ€”for example, changing the names of operationsâ€”to supporting an entirely different set of operations.
The amount of work Adapter does depends on how similar the Target interface is to Adaptee's.
A class is more reusable when you minimize the assumptions other classes must make to use it.
Put another way, interface adaptation lets us incorporate our class into existing systems that might expect different interfaces to the class.
Consider a TreeDisplay widget that can display tree structures graphically.
If this were a special-purpose widget for use in just one application, then we might require the objects that it displays to have a specific interface; that is, all must descend from a Tree abstract class.
But if we wanted to make TreeDisplay more reusable (say we wanted to make it part of a toolkit of useful widgets), then that requirement would be unreasonable.
They shouldn't be forced to use our Tree abstract class.
In a directory hierarchy, for example, children might be accessed with a GetSubdirectories operation, whereas in an inheritance hierarchy, the corresponding operation might be called GetSubclasses.
A reusable TreeDisplay widget must be able to display both kinds of hierarchies even if they use different interfaces.
In other words, the TreeDisplay should have interface adaptation built into it.
We'll look at different ways to build interface adaptation into classes in the Implementation section.
A potential problem with adapters is that they aren't transparent to all clients.
An adapted object no longer conforms to the Adaptee interface, so it can't be used as is wherever an Adaptee object can.
Specifically, they're useful when two different clients need to view an object differently.
Both systems have classes that represent variables explicitly: Unidraw has StateVariable, and QOCA has ConstraintVariable.
To make Unidraw work with QOCA, ConstraintVariable must be adapted to StateVariable; to let QOCA propagate solutions to Unidraw, StateVariable must be adapted to ConstraintVariable.
Multiple inheritance is a viable solution in this case because the interfaces of the adapted classes are substantially different.
The two-way class adapter conforms to both of the adapted classes and can work in either system.
Although the implementation of Adapter is usually straightforward, here are some issues to keep in mind:
In a C++ implementation of a class adapter, Adapter would inherit publicly from Target and privately from Adaptee.
Thus Adapter would be a subtype of Target but not of Adaptee.
Let's look at three ways to implement pluggable adapters for the TreeDisplay widget described earlier, which can lay out and display a hierarchical structure automatically.
The first step, which is common to all three of the implementations discussed here, is to find a "narrow" interface for Adaptee, that is, the smallest subset of operations that lets us do the adaptation.
A narrow interface consisting of only a couple of operations is easier to adapt than an interface with dozens of operations.
A minimalist interface might include two operations, one that defines how to present a node in the hierarchical structure graphically, and another that retrieves the node's children.
Define corresponding abstract operations for the narrow Adaptee interface in the TreeDisplay.
Subclasses must implement the abstract operations and adapt the hierarchically structured object.
In this approach, TreeDisplay forwards requests for accessing the hierarchical structure to a delegate object.
TreeDisplay can use a different adaptation strategy by substituting a different delegate.
For example, suppose there exists a DirectoryBrowser that uses a TreeDisplay.
DirectoryBrowser might make a good delegate for adapting TreeDisplay to the hierarchical directory structure.
In dynamically typed languages like Smalltalk or Objective C, this approach only requires an interface for registering the delegate with the adapter.
Statically typed languages like C++ require an explicit interface definition for the delegate.
We use single inheritance if the DirectoryBrowser has no existing parent class, multiple inheritance if it does.
The usual way to support pluggable adapters in Smalltalk is to parameterize an adapter with one or more blocks.
A block can adapt a request, and the adapter can store a block for each individual request.
In our example, this means TreeDisplay stores one block for converting a node into a GraphicNode and another block for accessing a node's children.
For example, to create TreeDisplay on a directory hierarchy, we write.
If you're building interface adaptation into a class, this approach offers a convenient alternative to subclassing.
We'll give a brief sketch of the implementation of class and object adapters for the Motivation example beginning with the classes Shape and TextView.
Shape assumes a bounding box defined by its opposing corners.
In contrast, TextView is defined by an origin, height, and width.
Shape also defines a CreateManipulator operation for creating a Manipulator object, which knows how to animate a shape when the user manipulates it.1 TextView has no equivalent operation.
The class TextShape is an adapter between these different interfaces.
The key to class adapters is to use one inheritance branch to inherit the interface and another branch to inherit the implementation.
The usual way to make this distinction in C++ is to inherit the interface publicly and inherit the implementation privately.
The BoundingBox operation converts TextView's interface to conform to Shape's.
The IsEmpty operation demonstrates the direct forwarding of requests common in adapter implementations:
Finally, we define CreateManipulator (which isn't supported by TextView) from scratch.
Assume we've already implemented a TextManipulator class that supports manipulation of a TextShape.
The object adapter uses object composition to combine classes with different interfaces.
In this approach, the adapter TextShape maintains a pointer to TextView.
TextShape must initialize the pointer to the TextView instance, and it does so in the constructor.
It must also call operations on its TextView object whenever its own operations are called.
In this example, assume that the client creates the TextView object and passes it to the TextShape constructor:
The object adapter requires a little more effort to write, but it's more flexible.
For example, the object adapter version of TextShape will work equally well with subclasses of TextViewâ€”the client simply passes an instance of a TextView subclass to the TextShape constructor.
The Motivation example comes from ET++Draw, a drawing application based on ET++ [WGM88]
ET++Draw reuses the ET++ classes for text editing by using a TextShape adapter class.
It also defines a Graphic abstract class for structured graphic objects such as lines, circles, polygons, and splines.
Both Interactors and Graphics have graphical appearances, but they have different interfaces and implementations (they share no common parent class) and are therefore incompatibleâ€”you can't embed a structured graphic object in, say, a dialog box directly.
Instead, InterViews 2.6 defines an object adapter called GraphicBlock, a subclass of Interactor that contains a Graphic instance.
The GraphicBlock adapts the interface of the Graphic class to that of Interactor.
The GraphicBlock lets a Graphic instance be displayed, scrolled, and zoomed within an Interactor structure.
Standard Smalltalk defines a ValueModel class for views that display a single value.
ValueModel defines a value, value: interface for accessing the value.
A PluggableAdaptor object adapts other objects to the ValueModel interface (value, value:)
It can be parameterized with blocks for getting and setting the desired value.
PluggableAdaptor uses these blocks internally to implement the value, value: interface.
PluggableAdaptor also lets you pass in the selector names (e.g., width, width:) directly for syntactic convenience.
A TableAdaptor can adapt a sequence of objects to a tabular presentation.
The client parameterizes TableAdaptor with the set of messages that a table can use to get the column values from an object.
Some classes in NeXT's AppKit [Add94] use delegate objects to perform interface adaptation.
An example is the NXBrowser class that can display hierarchical lists of data.
NXBrowser uses a delegate object for accessing and adapting the data.
Meyer's "Marriage of Convenience" [Mey88] is a form of class adapter.
Meyer describes how a FixedStack class adapts the implementation of an Array class to the interface of a Stack class.
The result is a stack containing a fixed number of entries.
Bridge (151) has a structure similar to an object adapter, but Bridge has a different intent: It is meant to separate an interface from its implementation so that they can be varied easily and independently.
An adapter is meant to change the interface of an existing object.
A decorator is thus more transparent to the application than an adapter is.
As a consequence, Decorator supports recursive composition, which isn't possible with pure adapters.
Proxy (207) defines a representative or surrogate for another object and does not change its interface.
Decouple an abstraction from its implementation so that the two can vary independently.
When an abstraction can have one of several possible implementations, the usual way to accommodate them is to use inheritance.
An abstract class defines the interface to the abstraction, and concrete subclasses implement it in different ways.
Inheritance binds an implementation to the abstraction permanently, which makes it difficult to modify, extend, and reuse abstractions and implementations independently.
Consider the implementation of a portable Window abstraction in a user interface toolkit.
This abstraction should enable us to write applications that work on both the X Window System and IBM's Presentation Manager (PM), for example.
Using inheritance, we could define an abstract class Window and subclasses XWindow and PMWindow that implement the Window interface for the different platforms.
It's inconvenient to extend the Window abstraction to cover different kinds of windows or new platforms.
Imagine an IconWindow subclass of Window that specializes the Window abstraction for icons.
To support IconWindows for both platforms, we have to implement two new classes, XIconWindow and PMIconWindow.
Worse, we'll have to define two classes for every kind of window.
Supporting a third platform requires yet another new Window subclass for every kind of window.
Whenever a client creates a window, it instantiates a concrete class that has a specific implementation.
For example, creating an XWindow object binds the Window abstraction to the X Window implementation, which makes the client code dependent on the X Window implementation.
This, in turn, makes it harder to port the client code to other platforms.
Clients should be able to create a window without committing to a concrete implementation.
Only the window implementation should depend on the platform on which the application runs.
Therefore client code should instantiate windows without mentioning specific platforms.
The Bridge pattern addresses these problems by putting the Window abstraction and its implementation in separate class hierarchies.
There is one class hierarchy for window interfaces (Window, IconWindow, TransientWindow) and a separate hierarchy for platform-specific window implementations, with WindowImp as its root.
The XWindowImp subclass, for example, provides an implementation based on the X Window System.
All operations on Window subclasses are implemented in terms of abstract operations from the WindowImp interface.
This decouples the window abstractions from the various platform-specific implementations.
We refer to the relationship between Window and WindowImp as a bridge, because it bridges the abstraction and its implementation, letting them vary independently.
This might be the case, for example, when the implementation must be selected or switched at run-time.
In this case, the Bridge pattern lets you combine the different abstractions and implementations and extend them independently.
In C++ the representation of a class is visible in the class interface.
Such a class hierarchy indicates the need for splitting an object into two parts.
Rumbaugh uses the term "nested generalizations" [RBP+91] to refer to such class hierarchies.
A simple example is Coplien's String class [Cop92], in which multiple objects can share the same string representation (StringRep)
Typically the Implementor interface provides only primitive operations, and Abstraction defines higher-level operations based on these primitives.
The implementation of an abstraction can be configured at run-time.
It's even possible for an object to change its implementation at run-time.
Decoupling Abstraction and Implementor also eliminates compile-time dependencies on the implementation.
Changing an implementation class doesn't require recompiling the Abstraction class and its clients.
This property is essential when you must ensure binary compatibility between different versions of a class library.
Furthermore, this decoupling encourages layering that can lead to a better-structured system.
The high-level part of a system only has to know about Abstraction and Implementor.
You can shield clients from implementation details, like the sharing of implementor objects and the accompanying reference count mechanism (if any)
Consider the following implementation issues when applying the Bridge pattern:
In situations where there's only one implementation, creating an abstract Implementor class isn't necessary.
This is a degenerate case of the Bridge pattern; there's a one-to-one relationship between Abstraction and Implementor.
Nevertheless, this separation is still useful when a change in the implementation of a class must not affect its existing clientsâ€”that is, they shouldn't have to be recompiled, just relinked.
Carolan [Car89] uses the term "Cheshire Cat" to describe this separation.
In C++, the class interface of the Implementor class can be defined in a private header file that isn't provided to clients.
This lets you hide an implementation of a class completely from its clients.
How, when, and where do you decide which Implementor class to instantiate when there's more than one?
If, for example, a collection class supports multiple implementations, the decision can be based on the size of the collection.
A linked list implementation can be used for small collections and a hash table for larger ones.
Another approach is to choose a default implementation initially and change it later according to usage.
For example, if the collection grows bigger than a certain threshold, then it switches its implementation to one that's more appropriate for a large number of items.
It's also possible to delegate the decision to another object altogether.
In the Window/WindowImp example, we can introduce a factory object (see Abstract Factory (87)) whose sole duty is to encapsulate platform-specifics.
The factory knows what kind of WindowImp object to create for the platform in use; a Window simply asks it for a WindowImp, and it returns the right kind.
A benefit of this approach is that Abstraction is not coupled directly to any of the Implementor classes.
Coplien illustrates how the Handle/Body idiom in C++ can be used to share implementations among several objects [Cop92]
The Body stores a reference count that the Handle class increments and decrements.
The code for assigning handles with shared bodies has the following general form:
But because this approach relies on static inheritance, it binds an implementation permanently to its interface.
Therefore you can't implement a true Bridge with multiple inheritanceâ€”at least not in C++
The following C++ code implements the Window/WindowImp example from the Motivation section.
The Window class defines the window abstraction for client applications:
Window maintains a reference to a WindowImp, the abstract class that declares an interface to the underlying windowing system.
Subclasses of Window define the different kinds of windows the application might use, such as application windows, icons, transient windows for dialogs, floating palettes of tools, and so on.
For example, ApplicationWindow will implement DrawContents to draw the View instance it stores:
IconWindow stores the name of a bitmap for the icon it displays...
A TransientWindow may need to communicate with the window that created it during the dialog; hence it keeps a reference to that window.
Window operations are defined in terms of the WindowImp interface.
For example, DrawRect extracts four coordinates from its two Point parameters before calling the WindowImp operation that draws the rectangle in the window:
These subclasses implement WindowImp operations in terms of window system primitives.
How does a window obtain an instance of the right WindowImp subclass? We'll assume Window has that responsibility in this example.
Its GetWindowImp operation gets the right instance from an abstract factory (see Abstract Factory (87)) that effectively encapsulates all window system specifics.
For simplicity, we've made it a Singleton (127) and have let the Window class access the factory directly.
In ET++, WindowImp is called "WindowPort" and has subclasses such as XWindowPort and SunWindowPort.
The Window object creates its corresponding Implementor object by requesting it from an abstract factory called "WindowSystem." WindowSystem provides an interface for creating platform-specific objects such as fonts, cursors, bitmaps, and so forth.
The ET++ Window/WindowPort design extends the Bridge pattern in that the WindowPort also keeps a reference back to the Window.
Their examples emphasize memory management issues like sharing string representations and support for variable-sized objects.
Set is an abstract class that defines a set abstraction, while LinkedList and HashTable are concrete implementors for a linked list and a hash table, respectively.
LinkedSet and HashSet are Set implementors that bridge between Set and their concrete counterparts LinkedList and HashTable.
This is an example of a degenerate bridge, because there's no abstract Implementor class.
NeXT's AppKit [Add94] uses the Bridge pattern in the implementation and display of graphical images.
The optimal display of an image depends on the properties of a display device, specifically its color capabilities and its resolution.
Without help from AppKit, developers would have to determine which implementation to use under various circumstances in every application.
To relieve developers of this responsibility, AppKit provides an NXImage/NXImageRep bridge.
The implementation of images is defined in a separate NXImageRep class hierarchy having subclasses such as NXEPSImageRep, NXCachedImageRep, and NXBitMapImageRep.
NXImage maintains a reference to one or more NXImageRep objects.
If there is more than one image implementation, then NXImage selects the most appropriate one for the current display device.
NXImage is even capable of converting one implementation to another if necessary.
The interesting aspect of this Bridge variant is that NXImage can store more than one NXImageRep implementation at a time.
An Abstract Factory (87) can create and configure a particular Bridge.
The Adapter (139) pattern is geared toward making unrelated classes work together.
Bridge, on the other hand, is used up-front in a design to let abstractions and implementations vary independently.
Composite lets clients treat individual objects and compositions of objects uniformly.
Graphics applications like drawing editors and schematic capture systems let users build complex diagrams out of simple components.
The user can group components to form larger components, which in turn can be grouped to form still larger components.
A simple implementation could define classes for graphical primitives such as Text and Lines plus other classes that act as containers for these primitives.
But there's a problem with this approach: Code that uses these classes must treat primitive and container objects differently, even if most of the time the user treats them identically.
Having to distinguish these objects makes the application more complex.
The Composite pattern describes how to use recursive composition so that clients don't have to make this distinction.
The key to the Composite pattern is an abstract class that represents both primitives and their containers.
Graphic declares operations like Draw that are specific to graphical objects.
It also declares operations that all composite objects share, such as operations for accessing and managing its children.
The subclasses Line, Rectangle, and Text (see preceding class diagram) define primitive graphical objects.
These classes implement Draw to draw lines, rectangles, and text, respectively.
Since primitive graphics have no child graphics, none of these subclasses implements child-related operations.
Picture implements Draw to call Draw on its children, and it implements child-related operations accordingly.
Because the Picture interface conforms to the Graphic interface, Picture objects can compose other Pictures recursively.
The following diagram shows a typical composite object structure of recursively composed Graphic objects:
Clients will treat all objects in the composite structure uniformly.
Component (Graphic) o declares the interface for objects in the composition.
Clients use the Component class interface to interact with objects in the composite structure.
If the recipient is a Leaf, then the request is handled directly.
If the recipient is a Composite, then it usually forwards requests to its child components, possibly performing additional operations before and/or after forwarding.
Primitive objects can be composed into more complex objects, which in turn can be composed, and so on recursively.
Wherever client code expects a primitive object, it can also take a composite object.
Clients normally don't know (and shouldn't care) whether they're dealing with a leaf or a composite component.
Newly defined Composite or Leaf subclasses work automatically with existing structures and client code.
Clients don't have to be changed for new Component classes.
The disadvantage of making it easy to add new components is that it makes it harder to restrict the components of a composite.
Sometimes you want a composite to have only certain components.
With Composite, you can't rely on the type system to enforce those constraints for you.
There are many issues to consider when implementing the Composite pattern:
Maintaining references from child components to their parent can simplify the traversal and management of a composite structure.
The parent reference simplifies moving up the structure and deleting a component.
Parent references also help support the Chain of Responsibility (223) pattern.
The usual place to define the parent reference is in the Component class.
Leaf and Composite classes can inherit the reference and the operations that manage it.
With parent references, it's essential to maintain the invariant that all children of a composite have as their parent the composite that in turn has them as children.
The easiest way to ensure this is to change a component's parent only when it's being added or removed from a composite.
If this can be implemented once in the Add and Remove operations of the Composite class, then it can be inherited by all the subclasses, and the invariant will be maintained automatically.
It's often useful to share components, for example, to reduce storage requirements.
But when a component can have no more than one parent, sharing components becomes difficult.
A possible solution is for children to store multiple parents.
But that can lead to ambiguities as a request propagates up the structure.
The Flyweight (195) pattern shows how to rework a design to avoid storing parents altogether.
It works in cases where children can avoid sending parent requests by externalizing some or all of their state.
Composite pattern is to make clients unaware of the specific Leaf or Composite classes they're using.
To attain this goal, the Component class should define as many common operations for Composite and Leaf classes as possible.
The Component class usually provides default implementations for these operations, and Leaf and Composite subclasses will override them.
However, this goal will sometimes conflict with the principle of class hierarchy design that says a class should only define operations that are meaningful to its subclasses.
Component supports that don't seem to make sense for Leaf classes.
Sometimes a little creativity shows how an operation that would appear to make sense only for Composites can be implemented for all Components by moving it to the Component class.
For example, the interface for accessing children is a fundamental part of a Composite class but not necessarily Leaf classes.
But if we view a Leaf as a Component that never has children, then we can define a default operation for child access in the Component class that never returns any children.
Leaf classes can use the default implementation, but Composite classes will reimplement it to return their children.
The child management operations are more troublesome and are discussed in the next item.
Although the Composite class implements the Add and Remove operations for managing children, an important issue in the Composite pattern is which classes declare these operations in the Composite class hierarchy.
Should we declare these operations in the Component and make them meaningful for Leaf classes, or should we declare and define them only in Composite and its subclasses?
It costs you safety, however, because clients may try to do meaningless things like add and remove objects from leaves.
But you lose transparency, because leaves and composites have different interfaces.
If you opt for safety, then at times you may lose type information and have to convert a component into a composite.
How can you do this without resorting to a type-unsafe cast?
One approach is to declare an operation Composite* GetComposite() in the Component class.
The Composite class redefines this operation to return itself through the this pointer:
GetComposite lets you query a component to see if it's a composite.
You can perform Add and Remove safely on the composite it returns.
Similar tests for a Composite can be done using the C++ dynamic_cast construct.
Of course, the problem here is that we don't treat all components uniformly.
We have to revert to testing for different types before taking the appropriate action.
The only way to provide transparency is to define default Add and Remove operations in Component.
That creates a new problem: There's no way to implement Component::Add without introducing the possibility of it failing.
You could make it do nothing, but that ignores an important consideration; that is, an attempt to add something to a leaf probably indicates a bug.
You could make it delete its argument, but that might not be what clients expect.
Usually it's better to make Add and Remove fail by default (perhaps by raising an exception) if the component isn't allowed to have children or if the argument of Remove isn't a child of the component, respectively.
Another alternative is to change the meaning of "remove" slightly.
If the component maintains a parent reference, then we could redefine Component::Remove to remove itself from its parent.
However, there still isn't a meaningful interpretation for a corresponding Add.
Should Component implement a list of Components? You might be tempted to define the set of children as an instance variable in the Component class where the child access and management operations are declared.
But putting the child pointer in the base class incurs a space penalty for every leaf, even though a leaf never has children.
This is worthwhile only if there are relatively few children in the structure.
In the earlier Graphics example, ordering may reflect front-to-back ordering.
If Composites represent parse trees, then compound statements can be instances of a Composite whose children must be ordered to reflect the program.
When child ordering is an issue, you must design child access and management interfaces carefully to manage the sequence of children.
If you need to traverse or search compositions frequently, the Composite class can cache traversal or search information about its children.
The Composite can cache actual results or just information that lets it short-circuit the traversal or search.
During drawing or selection, this cached bounding box lets the Picture avoid drawing or searching when its children aren't visible in the current window.
Changes to a component will require invalidating the caches of its parents.
So if you're using caching, you need to define an interface for telling composites that their caches are invalid.
Who should delete components? In languages without garbage collection, it's usually best to make a Composite responsible for deleting its children when it's destroyed.
An exception to this rule is when Leaf objects are immutable and thus can be shared.
What's the best data structure for storing components? Composites may use a variety of data structures to store their children, including linked lists, trees, arrays, and hash tables.
The choice of data structure depends (as always) on efficiency.
In fact, it isn't even necessary to use a general-purpose data structure at all.
Sometimes composites have a variable for each child, although this requires each subclass of Composite to implement its own management interface.
Equipment such as computers and stereo components are often organized into part-whole or containment hierarchies.
For example, a chassis can contain drives and planar boards, a bus can contain cards, and a cabinet can contain chassis, buses, and so forth.
Such structures can be modeled naturally with the Composite pattern.
Equipment class defines an interface for all equipment in the part-whole hierarchy.
Equipment declares operations that return the attributes of a piece of equipment, like its power consumption and cost.
Equipment also declares a CreateIterator operation that returns an Iterator (see Appendix C) for accessing its parts.
The default implementation for this operation returns a NullIterator, which iterates over the empty set.
Subclasses of Equipment might include Leaf classes that represent disk drives, integrated circuits, and switches:
CompositeEquipment is the base class for equipment that contains other equipment.
The operations Add and Remove insert and delete equipment from the list of equipment stored in the _equipment member.
The operation CreateIterator returns an iterator (specifically, an instance of ListIterator) that will traverse this list.
A default implementation of NetPrice might use CreateIterator to sum the net prices of the subequipment2:
Now we can represent a computer chassis as a subclass of CompositeEquipment called Chassis.
We can define other equipment containers such as Cabinet and Bus in a similar way.
That gives us everything we need to assemble equipment into a (pretty simple) personal computer:
Examples of the Composite pattern can be found in almost all object-oriented systems.
The RTL Smalltalk compiler framework [JML92] uses the Composite pattern extensively.
It has subclasses, such as BinaryExpression, that contain child RTLExpression objects.
RegisterTransfer is the Component class for a program's intermediate Single Static Assignment (SSA) form.
Leaf subclasses of RegisterTransfer define different static assignments such as.
Another example of this pattern occurs in the financial domain, where a portfolio aggregates individual assets.
The Command (233) pattern describes how Command objects can be composed and sequenced with a MacroCommand Composite class.
Often the component-parent link is used for a Chain of Responsibility (223)
When decorators and composites are used together, they will usually have a common parent class.
So decorators will have to support the Component interface with operations like Add, Remove, and GetChild.
Flyweight (195) lets you share components, but they can no longer refer to their parents.
Visitor (331) localizes operations and behavior that would otherwise be distributed across Composite and Leaf classes.
Decorators provide a flexible alternative to subclassing for extending functionality.
Sometimes we want to add responsibilities to individual objects, not to an entire class.
A graphical user interface toolkit, for example, should let you add properties like borders or behaviors like scrolling to any user interface component.
Inheriting a border from another class puts a border around every subclass instance.
This is inflexible, however, because the choice of border is made statically.
A client can't control how and when to decorate the component with a border.
A more flexible approach is to enclose the component in another object that adds the border.
The decorator conforms to the interface of the component it decorates so that its presence is transparent to the component's clients.
The decorator forwards requests to the component and may perform additional actions (such as drawing a border) before or after forwarding.
Transparency lets you nest decorators recursively, thereby allowing an unlimited number of added responsibilities.
For example, suppose we have a TextView object that displays text in a window.
TextView has no scroll bars by default, because we might not always need them.
When we do, we can use a ScrollDecorator to add them.
Suppose we also want to add a thick black border around the TextView.
We can use a BorderDecorator to add this as well.
We simply compose the decorators with the TextView to produce the desired result.
The following object diagram shows how to compose a TextView object with BorderDecorator and ScrollDecorator objects to produce a bordered, scrollable text view:
The ScrollDecorator and BorderDecorator classes are subclasses of Decorator, an abstract class for visual components that decorate other visual components.
Note how the Decorator class simply forwards draw requests to its component, and how Decorator subclasses can extend this operation.
Decorator subclasses are free to add operations for specific functionality.
For example, ScrollDecorator's ScrollTo operation lets other objects scroll the interface if they know there happens to be a ScrollDecorator object in the interface.
The important aspect of this pattern is that it lets decorators appear anywhere a VisualComponent can.
That way clients generally can't tell the difference between a decorated component and an undecorated one, and so they don't depend at all on the decoration.
Or a class definition may be hidden or otherwise unavailable for subclassing.
Component (VisualComponent) o defines the interface for objects that can have responsibilities.
Decorator o maintains a reference to a Component object and defines an.
It may optionally perform additional operations before and after forwarding the request.
The Decorator pattern has at least two key benefits and two liabilities:
The Decorator pattern provides a more flexible way to add responsibilities to objects than can be had with static (multiple) inheritance.
With decorators, responsibilities can be added and removed at run-time simply by attaching and detaching them.
This gives rise to many classes and increases the complexity of a system.
Furthermore, providing different Decorator classes for a specific Component class lets you mix and match responsibilities.
Decorators also make it easy to add a property twice.
For example, to give a TextView a double border, simply attach two BorderDecorators.
Inheriting from a Border class twice is error-prone at best.
Instead of trying to support all foreseeable features in a complex, customizable class, you can define a simple class and add functionality incrementally with Decorator objects.
As a result, an application needn't pay for features it doesn't use.
It's also easy to define new kinds of Decorators independently from the classes of objects they extend, even for unforeseen extensions.
Extending a complex class tends to expose details unrelated to the responsibilities you're adding.
But from an object identity point of view, a decorated component is not identical to the component itself.
Hence you shouldn't rely on object identity when you use decorators.
A design that uses Decorator often results in systems composed of lots of little objects that all look alike.
The objects differ only in the way they are interconnected, not in their class or in the value of their variables.
Several issues should be considered when applying the Decorator pattern:
A decorator object's interface must conform to the interface of the component it decorates.
ConcreteDecorator classes must therefore inherit from a common class (at least in C++)
There's no need to define an abstract Decorator class when you only need to add one responsibility.
That's often the case when you're dealing with an existing class hierarchy rather than designing a new one.
In that case, you can merge Decorator's responsibility for forwarding requests to the component into the ConcreteDecorator.
To ensure a conforming interface, components and decorators must descend from a common Component class.
It's important to keep this common class lightweight; that is, it should focus on defining an interface, not on storing data.
The definition of the data representation should be deferred to subclasses; otherwise the complexity of the Component class might make the decorators too heavyweight to use in quantity.
Putting a lot of functionality into Component also increases the probability that concrete subclasses will pay for features they don't need.
Changing the skin of an object versus changing its guts.
We can think of a decorator as a skin over an object that changes its behavior.
The Strategy (315) pattern is a good example of a pattern for changing the guts.
Strategies are a better choice in situations where the Component class is intrinsically heavyweight, thereby making the Decorator pattern too costly to apply.
In the Strategy pattern, the component forwards some of its behavior to a separate strategy object.
The Strategy pattern lets us alter or extend the component's functionality by replacing the strategy object.
For example, we can support different border styles by having the component defer border-drawing to a separate Border object.
The Border object is a Strategy object that encapsulates a border-drawing strategy.
By extending the number of strategies from just one to an open-ended list, we achieve the same effect as nesting decorators recursively.
If a view has any adorners attached, then it gives them a chance to draw additional embellishments.
MacApp and Bedrock must use this approach because the View class is heavyweight.
It would be too expensive to use a full-fledged View just to add a border.
Since the Decorator pattern only changes a component from the outside, the component doesn't have to know anything about its decorators; that is, the decorators are transparent to the component:
So it has to reference and maintain the corresponding strategies:
The Strategy-based approach might require modifying the component to accommodate new extensions.
On the other hand, a strategy can have its own specialized interface, whereas a decorator's interface must conform to the component's.
MacApp and Bedrock use this approach for more than just adorning views.
They also use it to augment the event-handling behavior of objects.
In both systems, a view maintains a list of "behavior" objects that can modify and intercept events.
The view gives each of the registered behavior objects a chance to handle the event before nonregistered behaviors, effectively overriding them.
The following code shows how to implement user interface decorators in C++
We define a subclass of VisualComponent called Decorator, which we'll subclass to obtain different decorations.
Decorator decorates the VisualComponent referenced by the _component instance variable, which is initialized in the constructor.
For each operation in VisualComponent's interface, Decorator defines a default implementation that passes the request on to _component:
For example, the class BorderDecorator adds a border to its enclosing component.
BorderDecorator is a subclass of Decorator that overrides the Draw operation to draw the border.
BorderDecorator also defines a private DrawBorder helper operation that does the drawing.
Now we can compose instances of these classes to provide different decorations.
The following code illustrates how we can use decorators to create a bordered scrollable TextView.
First, we need a way to put a visual component into a window object.
We'll assume our Window class provides a SetContents operation for this purpose:
Now we can create the text view and a window to put it in:
TextView is a VisualComponent, which lets us put it into the window:
So we decorate it accordingly before putting it in the window.
Because Window accesses its contents through the VisualComponent interface, it's unaware of the decorator's presence.
You, as the client, can still keep track of the text view if you have to interact with it directly, for example, when you need to invoke operations that aren't part of the VisualComponent interface.
Clients that rely on the component's identity should refer to it directly as well.
Many object-oriented user interface toolkits use decorators to add graphical embellishments to widgets.
A DebuggingGlyph prints out debugging information before and after it forwards a layout request to its component.
This trace information can be used to analyze and debug the layout behavior of objects in a complex composition.
The PassivityWrapper can enable or disable user interactions with the component.
But the Decorator pattern is by no means limited to graphical user interfaces, as the following example (based on the ET++ streaming classes [WGM88]) illustrates.
A stream can provide an interface for converting objects into a sequence of bytes or characters.
That lets us transcribe an object to a file or to a string in memory for retrieval later.
A straightforward way to do this is to define an abstract Stream class with subclasses MemoryStream and FileStream.
But suppose we also want to be able to do the following:
Reduce the stream data to 7-bit ASCII characters so that it can be transmitted over an ASCII communication channel.
The Decorator pattern gives us an elegant way to add these responsibilities to streams.
The Stream abstract class maintains an internal buffer and provides operations for storing data onto the stream (PutInt, PutString)
Whenever the buffer is full, Stream calls the abstract operation HandleBufferFull, which does the actual data transfer.
The FileStream version of this operation overrides this operation to transfer the buffer to a file.
The key class here is StreamDecorator, which maintains a reference to a component stream and forwards requests to it.
StreamDecorator subclasses override HandleBufferFull and perform additional actions before calling StreamDecorator's HandleBufferFull operation.
Adapter (139): A decorator is different from an adapter in that a decorator only changes an object's responsibilities, not its interface; an adapter will give an object a completely new interface.
Composite (163): A decorator can be viewed as a degenerate composite with only one component.
Strategy (315): A decorator lets you change the skin of an object; a strategy lets you change the guts.
Provide a unified interface to a set of interfaces in a subsystem.
Facade defines a higher-level interface that makes the subsystem easier to use.
A common design goal is to minimize the communication and dependencies between subsystems.
One way to achieve this goal is to introduce a facade object that provides a single, simplified interface to the more general facilities of a subsystem.
Consider for example a programming environment that gives applications access to its compiler subsystem.
This subsystem contains classes such as Scanner, Parser, ProgramNode, BytecodeStream, and ProgramNodeBuilder that implement the compiler.
Some specialized applications might need to access these classes directly.
But most clients of a compiler generally don't care about details like parsing and code generation; they merely want to compile some code.
For them, the powerful but low-level interfaces in the compiler subsystem only complicate their task.
To provide a higher-level interface that can shield clients from these classes, the compiler subsystem also includes a Compiler class.
This class defines a unified interface to the compiler's functionality.
The Compiler class acts as a facade: It offers clients a single, simple interface to the compiler subsystem.
It glues together the classes that implement compiler functionality without hiding them completely.
The compiler facade makes life easier for most programmers without hiding the lower-level functionality from the few that need it.
This makes the subsystem more reusable and easier to customize, but it also becomes harder to use for clients that don't need to customize it.
A facade can provide a simple default view of the subsystem that is good enough for most clients.
Only clients needing more customizability will need to look beyond the facade.
Introduce a facade to decouple the subsystem from clients and other subsystems, thereby promoting subsystem independence and portability.
Use a facade to define an entry point to each subsystem level.
If subsystems are dependent, then you can simplify the dependencies between them by making them communicate with each other solely through their facades.
Facade (Compiler) o knows which subsystem classes are responsible for a request.
Clients communicate with the subsystem by sending requests to Facade, which forwards them to the appropriate subsystem object(s)
Although the subsystem objects perform the actual work, the facade may have to do work of its own to translate its interface to subsystem interfaces.
Clients that use the facade don't have to access its subsystem objects directly.
It shields clients from subsystem components, thereby reducing the number of objects that clients deal with and making the subsystem easier to use.
It promotes weak coupling between the subsystem and its clients.
Weak coupling lets you vary the components of the subsystem without affecting its clients.
Facades help layer a system and the dependencies between objects.
This can be an important consequence when the client and the subsystem are implemented independently.
You want to save time by minimizing recompilation when subsystem classes change.
Reducing compilation dependencies with facades can limit the recompilation needed for a small change in an important subsystem.
A facade can also simplify porting systems to other platforms, because it's less likely that building one subsystem requires building all others.
It doesn't prevent applications from using subsystem classes if they need to.
Thus you can choose between ease of use and generality.
The coupling between clients and the subsystem can be reduced even further by making Facade an abstract class with concrete subclasses for different implementations of a subsystem.
Then clients can communicate with the subsystem through the interface of the abstract Facade class.
This abstract coupling keeps clients from knowing which implementation of a subsystem is used.
An alternative to subclassing is to configure a Facade object with different subsystem objects.
To customize the facade, simply replace one or more of its subsystem objects.
A subsystem is analogous to a class in that both have interfaces, and both encapsulate somethingâ€”a class encapsulates state and operations, while a subsystem encapsulates classes.
And just as it's useful to think of the public and private interface of a class, we can think of the public and private interface of a subsystem.
The public interface to a subsystem consists of classes that all clients can access; the private interface is just for subsystem extenders.
The Facade class is part of the public interface, of course, but it's not the only part.
For example, the classes Parser and Scanner in the compiler subsystem are part of the public interface.
Making subsystem classes private would be useful, but few object-oriented languages support it.
Both C++ and Smalltalk traditionally have had a global name space for classes.
Recently, however, the C++ standardization committee added name spaces to the language [Str94], which will let you expose just the public subsystem classes.
Let's take a closer look at how to put a facade on a compiler subsystem.
The Scanner class takes a stream of characters and produces a stream of tokens, one token at a time.
The class Parser uses a ProgramNodeBuilder to construct a parse tree from a Scanner's tokens.
Parser calls back on ProgramNodeBuilder to build the parse tree incrementally.
The parse tree is made up of instances of ProgramNode subclasses such as StatementNode, ExpressionNode, and so forth.
The ProgramNode hierarchy is an example of the Composite (163) pattern.
ProgramNode defines an interface for manipulating the program node and its children, if any.
ProgramNode subclasses use this object to generate machine code in the form of Bytecode objects on a BytecodeStream.
Each subclass of ProgramNode implements Traverse to call Traverse on its child ProgramNode objects.
In turn, each child does the same for its children, and so on recursively.
The classes we've discussed so far make up the compiler subsystem.
Now we'll introduce a Compiler class, a facade that puts all these pieces together.
Compiler provides a simple interface for compiling source and generating code for a particular machine.
This implementation hard-codes the type of code generator to use so that programmers aren't required to specify the target architecture.
That might be reasonable if there's only ever one target architecture.
If that's not the case, then we might want to change the Compiler constructor to take a CodeGenerator parameter.
Then programmers can specify the generator to use when they instantiate Compiler.
The compiler facade can parameterize other participants such as Scanner and ProgramNodeBuilder as well, which adds flexibility, but it also detracts from the Facade pattern's mission, which is to simplify the interface for the common case.
In the ET++ application framework [WGM88], an application can have built-in browsing tools for inspecting its objects at run-time.
The application has no knowledge of whether a browsing environment is available or not; there's abstract coupling between the application and the browsing subsystem.
The Choices operating system [CIRM93] uses facades to compose many frameworks into one.
The key abstractions in Choices are processes, storage, and address spaces.
For each of these abstractions there is a corresponding subsystem, implemented as a framework, that supports porting Choices to a variety of different hardware platforms.
For example, the virtual memory framework has Domain as its facade.
It provides a mapping between virtual addresses and offsets into memory objects, files, or backing store.
The main operations on Domain support adding a memory object at a particular address, removing a memory object, and handling a page fault.
As the preceding diagram shows, the virtual memory subsystem uses the following components internally:
MemoryObjectCache is actually a Strategy (315) that localizes the caching policy.
The RepairFault operation is called whenever a page fault interrupt occurs.
The Domain finds the memory object at the address causing the fault and delegates the RepairFault operation to the cache associated with that memory object.
Factory can also be used as an alternative to Facade to hide platform-specific classes.
Mediator (273) is similar to Facade in that it abstracts functionality of existing classes.
However, Mediator's purpose is to abstract arbitrary communication between colleague objects, often centralizing functionality that doesn't belong in any one of them.
A mediator's colleagues are aware of and communicate with the mediator instead of communicating with each other directly.
In contrast, a facade merely abstracts the interface to subsystem objects to make them easier to use; it doesn't define new functionality, and subsystem classes don't know about it.
Use sharing to support large numbers of fine-grained objects efficiently.
Some applications could benefit from using objects throughout their design, but a naive implementation would be prohibitively expensive.
For example, most document editor implementations have text formatting and editing facilities that are modularized to some extent.
Object-oriented document editors typically use objects to represent embedded elements like tables and figures.
However, they usually stop short of using an object for each character in the document, even though doing so would promote flexibility at the finest levels in the application.
Characters and embedded elements could then be treated uniformly with respect to how they are drawn and formatted.
The application could be extended to support new character sets without disturbing other functionality.
The application's object structure could mimic the document's physical structure.
The following diagram shows how a document editor can use objects to represent characters.
Even moderate-sized documents may require hundreds of thousands of character objects, which will consume lots of memory and may incur unacceptable run-time overhead.
The Flyweight pattern describes how to share objects to allow their use at fine granularities without prohibitive cost.
A flyweight is a shared object that can be used in multiple contexts simultaneously.
The flyweight acts as an independent object in each contextâ€”it's indistinguishable from an instance of the object that's not shared.
Flyweights cannot make assumptions about the context in which they operate.
The key concept here is the distinction between intrinsic and extrinsic state.
Intrinsic state is stored in the flyweight; it consists of information that's independent of the flyweight's context, thereby making it sharable.
Extrinsic state depends on and varies with the flyweight's context and therefore can't be shared.
Client objects are responsible for passing extrinsic state to the flyweight when it needs it.
Flyweights model concepts or entities that are normally too plentiful to represent with objects.
For example, a document editor can create a flyweight for each letter of the alphabet.
Each flyweight stores a character code, but its coordinate position in the document and its typographic style can be determined from the text layout algorithms and formatting commands in effect wherever the character appears.
The character code is intrinsic state, while the other information is extrinsic.
Logically there is an object for every occurrence of a given character in the document:
Physically, however, there is one shared flyweight object per character, and it appears in different contexts in the document structure.
Each occurrence of a particular character object refers to the same instance in the shared pool of flyweight objects:
Glyph is the abstract class for graphical objects, some of which may be flyweights.
Operations that may depend on extrinsic state have it passed to them as a parameter.
For example, Draw and Intersects must know which context the glyph is in before they can do their job.
A flyweight representing the letter "a" only stores the corresponding character code; it doesn't need to store its location or font.
Clients supply the context-dependent information that the flyweight needs to draw itself.
For example, a Row glyph knows where its children should draw themselves so that they are tiled horizontally.
Thus it can pass each child its location in the draw request.
Because the number of different character objects is far less than the number of characters in the document, the total number of objects is substantially less than what a naive implementation would use.
A document in which all characters appear in the same font and color will allocate on the order of 100 character objects (roughly the size of the ASCII character set) regardless of the document's length.
And since most documents use no more than 10 different font-color combinations, this number won't grow appreciably in practice.
The Flyweight pattern's effectiveness depends heavily on how and where it's used.
Apply the Flyweight pattern when all of the following are true:
Storage costs are high because of the sheer quantity of objects.
Many groups of objects may be replaced by relatively few shared.
Flyweight o declares an interface through which flyweights can receive and.
Any state it stores must be intrinsic; that is, it must be independent of the ConcreteFlyweight object's context.
State that a flyweight needs to function must be characterized as either intrinsic or extrinsic.
Intrinsic state is stored in the ConcreteFlyweight object; extrinsic state is stored or computed by Client objects.
Clients pass this state to the flyweight when they invoke its operations.
Clients must obtain ConcreteFlyweight objects exclusively from the FlyweightFactory object to ensure they are shared properly.
Flyweights may introduce run-time costs associated with transferring, finding, and/or computing extrinsic state, especially if it was formerly stored as intrinsic state.
However, such costs are offset by space savings, which increase as more flyweights are shared.
The more flyweights are shared, the greater the storage savings.
The greatest savings occur when the objects use substantial quantities of both intrinsic and extrinsic state, and the extrinsic state can be computed rather than stored.
Then you save on storage in two ways: Sharing reduces the cost of intrinsic state, and you trade extrinsic state for computation time.
The Flyweight pattern is often combined with the Composite (163) pattern to represent a hierarchical structure as a graph with shared leaf nodes.
A consequence of sharing is that flyweight leaf nodes cannot store a pointer to their parent.
Rather, the parent pointer is passed to the flyweight as part of its extrinsic state.
This has a major impact on how the objects in the hierarchy communicate with each other.
The pattern's applicability is determined largely by how easy it is to identify extrinsic state and remove it from shared objects.
Removing extrinsic state won't help reduce storage costs if there are as many different kinds of extrinsic state as there are objects before sharing.
Ideally, extrinsic state can be computed from a separate object structure, one with far smaller storage requirements.
In our document editor, for example, we can store a map of typographic information in a separate structure rather than store the font and type style with each character object.
The map keeps track of runs of characters with the same typographic attributes.
When a character draws itself, it receives its typographic attributes as a side-effect of the draw traversal.
Because documents normally use just a few different fonts and styles, storing this information externally to each character object is far more efficient than storing it internally.
FlyweightFactory objects often use an associative store to let clients look up flyweights of interest.
For example, the flyweight factory in the document editor example can keep a table of flyweights indexed by character codes.
The manager returns the proper flyweight given its code, creating the flyweight if it does not already exist.
Sharability also implies some form of reference counting or garbage collection to reclaim a flyweight's storage when it's no longer needed.
However, neither is necessary if the number of flyweights is fixed and small (e.g., flyweights for the ASCII character set)
In that case, the flyweights are worth keeping around permanently.
Returning to our document formatter example, we can define a Glyph base class for flyweight graphical objects.
Logically, glyphs are Composites (see Composite (163)) that have graphical attributes and can draw themselves.
Here we focus on just the font attribute, but the same approach can be used for any other graphical attributes a glyph might have.
To keep from allocating space for a font attribute in every glyph, we'll store the attribute extrinsically in a GlyphContext object.
It maintains a compact mapping between a glyph and its font (and any other graphical attributes it might have) in different contexts.
Any operation that needs to know the glyph's font in a given context will have a GlyphContext instance passed to it as a parameter.
The operation can then query the GlyphContext for the font in that context.
The context depends on the glyph's location in the glyph structure.
Therefore Glyph's child iteration and manipulation operations must update the GlyphContext whenever they're used.
GlyphContext must be kept informed of the current position in the glyph structure during traversal.
Glyph subclasses that have children (e.g., Row and Column) must implement Next so that it calls GlyphContext::Next at each point in the traversal.
Each node in the tree is labeled with the length of the string for which it gives font information.
Leaves in the tree point to a font, while interior nodes break the string into substrings, one for each child.
BTree is updated in response to font changes and whenever glyphs are added to or removed from the glyph structure.
The new BTree structure (with changes shown in black) looks like.
When the GlyphContext is queried for the font of the current glyph, it descends the BTree, adding up indices as it goes until it finds the font for the current index.
Because the frequency of font changes is relatively low, the tree stays small relative to the size of the glyph structure.
This keeps storage costs down without an inordinate increase in look-up time.3
The last object we need is a FlyweightFactory that creates glyphs and ensures they're shared properly.
We only share Character objects; composite glyphs are far less plentiful, and their important state (i.e., their children) is intrinsic anyway.
The _character array contains pointers to Character glyphs indexed by character code.
CreateCharacter looks up a character in the character glyph in the array, and it returns the corresponding glyph if it exists.
If it doesn't, then CreateCharacter creates the glyph, puts it in the array, and returns it:
The other operations simply instantiate a new object each time they're called, since noncharacter glyphs won't be shared:
We could omit these operations and let clients instantiate unshared glyphs directly.
However, if we decide to make these glyphs sharable later, we'll have to change client code that creates them.
Documents are represented by a class Document, which also acts as the FlyweightFactory.
Measurements on Doc have shown that sharing flyweight characters is quite effective.
A widget delegates all its layout and drawing behavior to a separate Layout object.
Changing the Layout object changes the look and feel, even at run-time.
An obvious problem with this approach is that using separate layout objects doubles the number of user interface objects: For each user interface object there is an additional Layout object.
To avoid this overhead, Layout objects are implemented as flyweights.
They make good flyweights because they deal mostly with defining behavior, and it's easy to pass them what little extrinsic state they need to lay out or draw an object.
The Layout objects are created and managed by Look objects.
The Look class is an Abstract Factory (87) that retrieves a specific Layout object with operations like GetButtonLayout, GetMenuBarLayout, and so forth.
For each look-and-feel standard there is a corresponding Look subclass (e.g., MotifLook, OpenLook) that supplies the appropriate Layout objects.
By the way, Layout objects are essentially strategies (see Strategy (315))
They are an example of a strategy object implemented as a flyweight.
The Flyweight pattern is often combined with the Composite (163) pattern to implement a logically hierarchical structure in terms of a directed-acyclic graph with shared leaf nodes.
Look-up time in this scheme is proportional to the font change frequency.
Worst-case performance occurs when a font change occurs on every character, but that's unusual in practice.
In the Sample Code given earlier, style information is made extrinsic, leaving the character code as the only intrinsic state.
See Abstract Factory (87) for another approach to look-and-feel independence.
Provide a surrogate or placeholder for another object to control access to it.
One reason for controlling access to an object is to defer the full cost of its creation and initialization until we actually need to use it.
Consider a document editor that can embed graphical objects in a document.
Some graphical objects, like large raster images, can be expensive to create.
But opening a document should be fast, so we should avoid creating all the expensive objects at once when the document is opened.
This isn't necessary anyway, because not all of these objects will be visible in the document at the same time.
These constraints would suggest creating each expensive object on demand, which in this case occurs when an image becomes visible.
But what do we put in the document in place of the image? And how can we hide the fact that the image is created on demand so that we don't complicate the editor's implementation? This optimization shouldn't impact the rendering and formatting code, for example.
The solution is to use another object, an image proxy, that acts as a stand-in for the real image.
The proxy acts just like the image and takes care of instantiating it when it's required.
The image proxy creates the real image only when the document editor asks it to display itself by invoking its Draw operation.
It must therefore keep a reference to the image after creating it.
In this case we can use the file name as the reference to the real object.
The proxy also stores its extent, that is, its width and height.
The extent lets the proxy respond to requests for its size from the formatter without actually instantiating the image.
The following class diagram illustrates this example in more detail.
The document editor accesses embedded images through the interface defined by the abstract Graphic class.
ImageProxy is a class for images that are created on demand.
ImageProxy maintains the file name as a reference to the image on disk.
The file name is passed as an argument to the ImageProxy constructor.
ImageProxy also stores the bounding box of the image and a reference to the real Image instance.
This reference won't be valid until the proxy instantiates the real image.
GetExtent forwards the request to the image only if it's instantiated; otherwise ImageProxy returns the extent it stores.
Proxy is applicable whenever there is a need for a more versatile or sophisticated reference to an object than a simple pointer.
Here are several common situations in which the Proxy pattern is applicable:
A remote proxy provides a local representative for an object in a different address space.
The ImageProxy described in the Motivation is an example of such a proxy.
Protection proxies are useful when objects should have different access rights.
For example, KernelProxies in the Choices operating system [CIRM93] provide protected access to operating system objects.
A smart reference is a replacement for a bare pointer that performs additional actions when an object is accessed.
Here's a possible object diagram of a proxy structure at run-time:
Proxy (ImageProxy) o maintains a reference that lets the proxy access the real.
Proxy may refer to a Subject if the RealSubject and Subject interfaces are the same.
For example, the ImageProxy from the Motivation caches the real image's extent.
Subject (Graphic) o defines the common interface for RealSubject and Proxy so that.
Proxy forwards requests to RealSubject when appropriate, depending on the kind of proxy.
The Proxy pattern introduces a level of indirection when accessing an object.
The additional indirection has many uses, depending on the kind of proxy:
A remote proxy can hide the fact that an object resides in a different address space.
A virtual proxy can perform optimizations such as creating an object on demand.
Both protection proxies and smart references allow additional housekeeping tasks when an object is accessed.
There's another optimization that the Proxy pattern can hide from the client.
It's called copy-on-write, and it's related to creation on demand.
Copying a large and complicated object can be an expensive operation.
If the copy is never modified, then there's no need to incur this cost.
By using a proxy to postpone the copying process, we ensure that we pay the price of copying the object only if it's modified.
To make copy-on-write work, the subject must be reference counted.
Copying the proxy will do nothing more than increment this reference count.
Only when the client requests an operation that modifies the subject does the proxy actually copy it.
In that case the proxy must also decrement the subject's reference count.
When the reference count goes to zero, the subject gets deleted.
Copy-on-write can reduce the cost of copying heavyweight subjects significantly.
Overloading this operator lets you perform additional work whenever an object is dereferenced.
This can be helpful for implementing some kinds of proxy; the proxy behaves just like a pointer.
The following example illustrates how to use this technique to implement a virtual proxy called ImagePtr.
This approach lets you call Image operations through ImagePtr objects without going to the trouble of making the operations part of the ImagePtr interface:
Notice how the image proxy acts like a pointer, but it's not declared to be a pointer to an Image.
That means you can't use it exactly like a real pointer to an Image.
Hence clients must treat Image and ImagePtr objects differently in this approach.
Overloading the member access operator isn't a good solution for every kind of proxy.
Some proxies need to know precisely which operation is called, and overloading the member access operator doesn't work in those cases.
The image should be loaded at a specific timeâ€”namely when the Draw operation is calledâ€”and not whenever the image is referenced.
In that case we must manually implement each proxy operation that forwards the request to the subject.
These operations are usually very similar to each other, as the Sample Code demonstrates.
Typically all operations verify that the request is legal, that the original object exists, etc., before forwarding the request to the subject.
So it's common to use a preprocessor to generate it automatically.
Smalltalk provides a hook that you can use to support automatic forwarding of requests.
Smalltalk calls doesNotUnderstand: aMessage when a client sends a message to a receiver that has no corresponding method.
The Proxy class can redefine doesNotUnderstand so that the message is forwarded to its subject.
To ensure that a request is forwarded to the subject and not just absorbed by the proxy silently, you can define a Proxy class that doesn't understand any messages.
Smalltalk lets you do this by defining Proxy as a class with no superclass.6
The main disadvantage of doesNotUnderstand: is that most Smalltalk systems have a few special messages that are handled directly by the virtual machine, and these do not cause the usual method look-up.
The only one that's usually implemented in Object (and so can affect proxies) is the identity operation ==
If you're going to use doesNotUnderstand: to implement Proxy, then you must design around this problem.
You can't expect identity on proxies to mean identity on their real subjects.
An added disadvantage is that doesNotUnderstand: was developed for error handling, not for building proxies, and so it's generally not very fast.
Proxy doesn't always have to know the type of real subject.
If a Proxy class can deal with its subject solely through an abstract interface, then there's no need to make a Proxy class for each RealSubject class; the proxy can deal with all RealSubject classes uniformly.
But if Proxies are going to instantiate RealSubjects (such as in a virtual proxy), then they have to know the concrete class.
Another implementation issue involves how to refer to the subject before it's instantiated.
Some proxies have to refer to their subject whether it's on disk or in memory.
That means they must use some form of address space-independent object identifiers.
We used a file name for this purpose in the Motivation.
The Image class implements the Graphic interface to display image files.
Image overrides HandleMouse to let users resize the image interactively.
The implementation of GetExtent returns the cached extent if possible; otherwise the image is loaded from the file.
Draw loads the image, and HandleMouse forwards the event to the real image.
The Save operation saves the cached image extent and the image file name to a stream.
Finally, suppose we have a class TextDocument that can contain Graphic objects:
We can insert an ImageProxy into a text document like this:
Smalltalk by defining classes whose superclass is nil8 and defining the doesNotUnderstand: method to handle messages.
The following method assumes the proxy has a realSubject method that returns its real subject.
In the case of ImageProxy, this method would check to see if the the Image had been created, create it if necessary, and finally return it.
The argument to doesNotUnderstand: is an instance of Message that represents the message not understood by the proxy.
So the proxy responds to all messages by making sure that the real subject exists before forwarding the message to it.
One of the advantages of doesNotUnderstand: is it can perform arbitrary processing.
For example, we could produce a protection proxy by specifying a set legalMessages of messages to accept and then giving the proxy the following method:
This method checks to see that a message is legal before forwarding it to the real subject.
If it isn't legal, then it will send error: to the proxy, which will result in an infinite loop of errors unless the proxy defines error:
Consequently, the definition of error: should be copied from class Object along with any methods it uses.
The virtual proxy example in the Motivation section is from the ET++ text building block classes.
A server creates proxies for remote objects when clients request them.
On receiving a message, the proxy encodes it along with its arguments and then forwards the encoded message to the remote subject.
Similarly, the subject encodes any return results and sends them back to the NXProxy object.
McCullough [McC87] discusses using proxies in Smalltalk to access remote objects.
Pascoe [Pas86] describes how to provide side-effects on method calls and access control with "Encapsulators."
Adapter (139): An adapter provides a different interface to the object it adapts.
In contrast, a proxy provides the same interface as its subject.
However, a proxy used for access protection might refuse to perform an operation that the subject will perform, so its interface may be effectively a subset of the subject's.
Decorator (175): Although decorators can have similar implementations as proxies, decorators have a different purpose.
A decorator adds one or more responsibilities to an object, whereas a proxy controls access to an object.
Proxies vary in the degree to which they are implemented like a decorator.
A protection proxy might be implemented exactly like a decorator.
The implementation of distributed objects in NEXTSTEP [Add94] (specifically, the class NXProxy) uses this technique.
Hence this is the same as saying "defining a class that doesn't have Object as its superclass."
You may have noticed similarities between the structural patterns, especially in their participants and collaborations.
This is so probably because structural patterns rely on the same small set of language mechanisms for structuring code and objects: single and multiple inheritance for class-based patterns, and object composition for object patterns.
But the similarities belie the different intents among these patterns.
In this section we compare and contrast groups of structural patterns to give you a feel for their relative merits.
Both promote flexibility by providing a level of indirection to another object.
Both involve forwarding requests to this object from an interface other than its own.
The key difference between these patterns lies in their intents.
It doesn't focus on how those interfaces are implemented, nor does it consider how they might evolve independently.
It's a way of making two independently designed classes work together without reimplementing one or the other.
Bridge, on the other hand, bridges an abstraction and its (potentially numerous) implementations.
It provides a stable interface to clients even as it lets you vary the classes that implement it.
As a result of these differences, Adapter and Bridge are often used at different points in the software lifecycle.
An adapter often becomes necessary when you discover that two incompatible classes should work together, generally to avoid replicating code.
In contrast, the user of a bridge understands up-front that an abstraction must have several implementations, and both may evolve independently.
The Adapter pattern makes things work after they're designed; Bridge makes them work before they are.
That doesn't mean Adapter is somehow inferior to Bridge; each pattern merely addresses a different problem.
You might think of a facade (see Facade (185)) as an adapter to a set of other objects.
But that interpretation overlooks the fact that a facade defines a new interface, whereas an adapter reuses an old interface.
Remember that an adapter makes two existing interfaces work together as opposed to defining an entirely new one.
This commonality might tempt you to think of a decorator object as a degenerate composite, but that misses the point of the Decorator pattern.
The similarity ends at recursive composition, again because of differing intents.
Decorator is designed to let you add responsibilities to objects without subclassing.
It avoids the explosion of subclasses that can arise from trying to cover every combination of responsibilities statically.
It focuses on structuring classes so that many related objects can be treated uniformly, and multiple objects can be treated as one.
Consequently, the Composite and Decorator patterns are often used in concert.
Both lead to the kind of design in which you can build applications just by plugging objects together without defining any new classes.
There will be an abstract class with some subclasses that are composites, some that are decorators, and some that implement the fundamental building blocks of the system.
In this case, both composites and decorators will have a common interface.
From the point of view of the Decorator pattern, a composite is a ConcreteComponent.
From the point of view of the Composite pattern, a decorator is a Leaf.
Of course, they don't have to be used together and, as we have seen, their intents are quite different.
Another pattern with a structure similar to Decorator's is Proxy (207)
Both patterns describe how to provide a level of indirection to an object, and the implementations of both the proxy and decorator object keep a reference to another object to which they forward requests.
Like Decorator, the Proxy pattern composes an object and provides an identical interface to clients.
Unlike Decorator, the Proxy pattern is not concerned with attaching or detaching properties dynamically, and it's not designed for recursive composition.
Its intent is to provide a stand-in for a subject when it's inconvenient or undesirable to access the subject directly because, for example, it lives on a remote machine, has restricted access, or is persistent.
In the Proxy pattern, the subject defines the key functionality, and the proxy provides (or refuses) access to it.
In Decorator, the component provides only part of the functionality, and one or more decorators furnish the rest.
Decorator addresses the situation where an object's total functionality can't be determined at compile time, at least not conveniently.
That open-endedness makes recursive composition an essential part of Decorator.
These differences are significant because they capture solutions to specific recurring problems in object-oriented design.
You might envision a proxy-decorator that adds functionality to a proxy, or a decorator-proxy that embellishes a remote object.
Although such hybrids might be useful (we don't have real examples handy), they are divisible into patterns that are useful.
Behavioral patterns are concerned with algorithms and the assignment of responsibilities between objects.
Behavioral patterns describe not just patterns of objects or classes but also the patterns of communication between them.
These patterns characterize complex control flow that's difficult to follow at run-time.
They shift your focus away from flow of control to let you concentrate just on the way objects are interconnected.
Behavioral class patterns use inheritance to distribute behavior between classes.
Template Method (325) is the simpler and more common of the two.
A template method is an abstract definition of an algorithm.
A subclass fleshes out the algorithm by defining the abstract operations.
The other behavioral class pattern is Interpreter (243), which represents a grammar as a class hierarchy and implements an interpreter as an operation on instances of these classes.
Some describe how a group of peer objects cooperate to perform a task that no single object can carry out by itself.
An important issue here is how peer objects know about each other.
Peers could maintain explicit references to each other, but that would increase their coupling.
In the extreme, every object would know about every other.
The Mediator (273) pattern avoids this by introducing a mediator object between peers.
It lets you send requests to an object implicitly through a chain of candidate objects.
Any candidate may fulfill the request depending on run-time conditions.
The number of candidates is open-ended, and you can select which candidates participate in the chain at run-time.
The Observer (293) pattern defines and maintains a dependency between objects.
Other behavioral object patterns are concerned with encapsulating behavior in an object and delegating requests to it.
The Strategy (315) pattern encapsulates an algorithm in an object.
Strategy makes it easy to specify and change the algorithm an object uses.
The Command (233) pattern encapsulates a request in an object so that it can be passed as a parameter, stored on a history list, or manipulated in other ways.
The State (305) pattern encapsulates the states of an object so that the object can change its behavior when its state object changes.
Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request.
Chain the receiving objects and pass the request along the chain until an object handles it.
Consider a context-sensitive help facility for a graphical user interface.
The user can obtain help information on any part of the interface just by clicking on it.
The help that's provided depends on the part of the interface that's selected and its context; for example, a button widget in a dialog box might have different help information than a similar button in the main window.
If no specific help information exists for that part of the interface, then the help system should display a more general help message about the immediate contextâ€”the dialog box as a whole, for example.
Hence it's natural to organize help information according to its generalityâ€”from the most specific to the most general.
Furthermore, it's clear that a help request is handled by one of several user interface objects; which one depends on the context and how specific the available help is.
The problem here is that the object that ultimately provides the help isn't known explicitly to the object (e.g., the button) that initiates the help request.
What we need is a way to decouple the button that initiates the help request from the objects that might provide help information.
The idea of this pattern is to decouple senders and receivers by giving multiple objects a chance to handle a request.
The request gets passed along a chain of objects until one of them handles it.
The first object in the chain receives the request and either handles it or forwards it to the next candidate on the chain, which does likewise.
The object that made the request has no explicit knowledge of who will handle itâ€”we say the request has an implicit receiver.
Let's assume the user clicks for help on a button widget marked "Print." The button is contained in an instance of PrintDialog, which knows the application object it belongs to (see preceding object diagram)
The following interaction diagram illustrates how the help request gets forwarded along the chain:
In this case, neither aPrintButton nor aPrintDialog handles the request; it stops at anApplication, which can handle it or ignore it.
The client that issued the request has no direct reference to the object that ultimately fulfills it.
To forward the request along the chain, and to ensure receivers remain implicit, each object on the chain shares a common interface for handling requests and for accessing its successor on the chain.
For example, the help system might define a HelpHandler class with a corresponding HandleHelp operation.
Then classes that want to handle help requests can make HelpHandler a parent:
The Button, Dialog, and Application classes use HelpHandler operations to handle help requests.
HelpHandler's HandleHelp operation forwards the request to the successor by default.
Subclasses can override this operation to provide help under the right circumstances; otherwise they can use the default implementation to forward the request.
ConcreteHandler (PrintButton, PrintDialog) o handles requests it is responsible for.
When a client issues a request, the request propagates along the chain until a ConcreteHandler object takes responsibility for handling it.
The pattern frees an object from knowing which other object handles a request.
An object only has to know that a request will be handled "appropriately." Both the receiver and the sender have no explicit knowledge of each other, and an object in the chain doesn't have to know about the chain's structure.
As a result, Chain of Responsibility can simplify object interconnections.
Instead of objects maintaining references to all candidate receivers, they keep a single reference to their successor.
Responsibility gives you added flexibility in distributing responsibilities among objects.
You can add or change responsibilities for handling a request by adding to or otherwise changing the chain at run-time.
You can combine this with subclassing to specialize handlers statically.
Since a request has no explicit receiver, there's no guarantee it'll be handledâ€”the request can fall off the end of the chain without ever being handled.
A request can also go unhandled when the chain is not configured properly.
Here are implementation issues to consider in Chain of Responsibility:
There are two possible ways to implement the successor chain:
Define new links (usually in the Handler, but ConcreteHandlers could define them instead)
Our examples so far define new links, but often you can use existing object references to form the successor chain.
For example, parent references in a part-whole hierarchy can define a part's successor.
Using existing links works well when the links support the chain you need.
It saves you from defining links explicitly, and it saves space.
If there are no preexisting references for defining a chain, then you'll have to introduce them yourself.
In that case, the Handler not only defines the interface for the requests but usually maintains the successor as well.
That lets the handler provide a default implementation of HandleRequest that forwards the request to the successor (if any)
If a ConcreteHandler subclass isn't interested in the request, it doesn't have to override the forwarding operation, since its default implementation forwards unconditionally.
Here's a HelpHandler base class that maintains a successor link:
In the simplest form, the request is a hard-coded operation invocation, as in the case of HandleHelp.
This is convenient and safe, but you can forward only the fixed set of requests that the Handler class defines.
An alternative is to use a single handler function that takes a request code (e.g., an integer constant or a string) as parameter.
The only requirement is that the sender and receiver agree on how the request should be encoded.
This approach is more flexible, but it requires conditional statements for dispatching the request based on its code.
Moreover, there's no type-safe way to pass parameters, so they must be packed and unpacked manually.
Obviously this is less safe than invoking an operation directly.
To address the parameter-passing problem, we can use separate request objects that bundle request parameters.
A Request class can represent requests explicitly, and new kinds of requests can be defined by subclassing.
Handlers must know the kind of request (that is, which Request subclass they're using) to access these parameters.
To identify the request, Request can define an accessor function that returns an identifier for the class.
Alternatively, the receiver can use run-time type information if the implementation languages supports it.
Here is a sketch of a dispatch function that uses request objects to identify requests.
A GetKind operation defined in the base Request class identifies the kind of request:
The subclass handles only the requests in which it's interested; other requests are forwarded to the parent class.
In this way, subclasses effectively extend (rather than override) the HandleRequest operation.
For example, here's how an ExtendedHandler subclass extends Handler's version of HandleRequest:
You can use the doesNotUnderstand mechanism in Smalltalk to forward requests.
Messages that have no corresponding methods are trapped in the implementation of doesNotUnderstand, which can be overridden to forward the message to an object's successor.
Thus it isn't necessary to implement forwarding manually; the class handles only the request in which it's interested, and it relies on doesNotUnderstand to forward all others.
The following example illustrates how a chain of responsibility can handle requests for an on-line help system like the one described earlier.
We'll use existing parent references in the widget hierarchy to propagate requests between widgets in the chain, and we'll define a reference in the Handler class to propagate help requests between nonwidgets in the chain.
The HelpHandler class defines the interface for handling help requests.
It maintains a help topic (which is empty by default) and keeps a reference to its successor on the chain of help handlers.
HasHelp is a convenience operation for checking whether there is an associated help topic.
Widget is a subclass of HelpHandler, since all user interface elements can have help associated with them.
We could have used a mixin-based implementation just as well.
In our example, a button is the first handler on the chain.
The Button constructor takes two parameters: a reference to its enclosing widget and the help topic.
Button's version of HandleHelp first tests to see if there is a help topic for buttons.
If the developer hasn't defined one, then the request gets forwarded to the successor using the HandleHelp operation in HelpHandler.
If there is a help topic, then the button displays it, and the search ends.
Dialog implements a similar scheme, except that its successor is not a widget but any help handler.
In our application this successor will be an instance of Application.
At the end of the chain is an instance of Application.
The application is not a widget, so Application is subclassed directly from HelpHandler.
When a help request propagates to this level, the application can supply information on the application in general, or it can offer a list of different help topics:
Here the dialog concerns printing, and so the objects have printing-related topics assigned.
We can invoke the help request by calling HandleHelp on any object on the chain.
To start the search at the button object, just call HandleHelp on it:
In this case, the button will handle the request immediately.
Note that any HelpHandler class could be made the successor of Dialog.
So no matter where a dialog is used, you'll get the proper context-dependent help information for it.
Several class libraries use the Chain of Responsibility pattern to handle user events.
They use different names for the Handler class, but the idea is the same: When the user clicks the mouse or presses a key, an event gets generated and passed along the chain.
The Unidraw framework for graphical editors defines Command objects that encapsulate requests to Component and ComponentView objects [VL90]
Commands are requests in the sense that a component or component view may interpret a command to perform an operation.
This corresponds to the "requests as objects" approach described in Implementation.
A component or a component view may forward command interpretation to its parent, which may in turn forward it to its parent, and so on, thereby forming a chain of responsibility.
A graphical object calls the InvalidateRect operation whenever it must update a part of its appearance.
A graphical object can't handle InvalidateRect by itself, because it doesn't know enough about its context.
For example, a graphical object can be enclosed in objects like Scrollers or Zoomers that transform its coordinate system.
That means the object might be scrolled or zoomed so that it's partially out of view.
Therefore the default implementation of InvalidateRect forwards the request to the enclosing container object.
The last object in the forwarding chain is a Window instance.
By the time Window receives the request, the invalidation rectangle is guaranteed to be transformed properly.
The Window handles InvalidateRect by notifying the window system interface and requesting an update.
Chain of Responsibility is often applied in conjunction with Composite (163)
Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.
Sometimes it's necessary to issue requests to objects without knowing anything about the operation being requested or the receiver of the request.
For example, user interface toolkits include objects like buttons and menus that carry out a request in response to user input.
But the toolkit can't implement the request explicitly in the button or menu, because only applications that use the toolkit know what should be done on which object.
As toolkit designers we have no way of knowing the receiver of the request or the operations that will carry it out.
The Command pattern lets toolkit objects make requests of unspecified application objects by turning the request itself into an object.
This object can be stored and passed around like other objects.
The key to this pattern is an abstract Command class, which declares an interface for executing operations.
In the simplest form this interface includes an abstract Execute operation.
Concrete Command subclasses specify a receiver-action pair by storing the receiver as an instance variable and by implementing Execute to invoke the request.
The receiver has the knowledge required to carry out the request.
Each choice in a Menu is an instance of a MenuItem class.
An Application class creates these menus and their menu items along with the rest of the user interface.
The Application class also keeps track of Document objects that a user has opened.
The application configures each MenuItem with an instance of a concrete Command subclass.
When the user selects a MenuItem, the MenuItem calls Execute on its command, and Execute carries out the operation.
Command subclasses store the receiver of the request and invoke one or more operations on the receiver.
For example, PasteCommand supports pasting text from the clipboard into a Document.
PasteCommand's receiver is the Document object it is supplied upon instantiation.
OpenCommand's Execute operation is different: it prompts the user for a document name, creates a corresponding Document object, adds the document to the receiving application, and opens the document.
Sometimes a MenuItem needs to execute a sequence of commands.
Because it's common to string commands together in this way, we can define a MacroCommand class to allow a MenuItem to execute an open-ended number of commands.
MacroCommand is a concrete Command subclass that simply executes a sequence of Commands.
MacroCommand has no explicit receiver, because the commands it sequences define their own receiver.
In each of these examples, notice how the Command pattern decouples the object that invokes the operation from the one having the knowledge to perform it.
This gives us a lot of flexibility in designing our user interface.
An application can provide both a menu and a push button interface to a feature just by making the menu and the push button share an instance of the same concrete Command subclass.
We can replace commands dynamically, which would be useful for implementing context-sensitive menus.
We can also support command scripting by composing commands into larger ones.
All of this is possible because the object that issues a request only needs to know how to issue it; it doesn't need to know how the request will be carried out.
You can express such parameterization in a procedural language with a callback function, that is, a function that's registered somewhere to be called at a later point.
A Command object can have a lifetime independent of the original request.
If the receiver of a request can be represented in an address space-independent way, then you can transfer.
The Command's Execute operation can store state for reversing its effects in the command itself.
The Command interface must have an added Unexecute operation that reverses the effects of a previous call to Execute.
Unlimited-level undo and redo is achieved by traversing this list backwards and forwards calling Unexecute and Execute, respectively.
By augmenting the Command interface with load and store operations, you can keep a persistent log of changes.
Recovering from a crash involves reloading logged commands from disk and reexecuting them with the Execute operation.
Such a structure is common in information systems that support transactions.
Commands have a common interface, letting you invoke all transactions the same way.
The pattern also makes it easy to extend the system with new transactions.
ConcreteCommand (PasteCommand, OpenCommand) o defines a binding between a Receiver object and an action.
Invoker (MenuItem) o asks the command to carry out the request.
Receiver (Document, Application) o knows how to perform the operations associated with carrying out a.
The client creates a ConcreteCommand object and specifies its receiver.
The invoker issues a request by calling Execute on the command.
The ConcreteCommand object invokes operations on its receiver to carry out the request.
It illustrates how Command decouples the invoker from the receiver (and the request it carries out)
Command decouples the object that invokes the operation from the one that knows how to perform it.
They can be manipulated and extended like any other object.
In general, composite commands are an instance of the Composite (163) pattern.
It's easy to add new Commands, because you don't have to change existing classes.
How intelligent should a command be? A command can have a wide range of abilities.
At one extreme it merely defines a binding between a receiver and the actions that carry out the request.
At the other extreme it implements everything itself without delegating to a receiver at all.
The latter extreme is useful when you want to define commands that are independent of existing classes, when no suitable receiver exists, or when a command knows its receiver implicitly.
For example, a command that creates another application window may be just as capable of creating the window as any other object.
Somewhere in between these extremes are commands that have enough knowledge to find their receiver dynamically.
Commands can support undo and redo capabilities if they provide a way to reverse their execution (e.g., an Unexecute or Undo operation)
A ConcreteCommand class might need to store additional state to do so.
The receiver must provide operations that let the command return the receiver to its prior state.
To support one level of undo, an application needs to store only the command that was executed last.
For multiple-level undo and redo, the application needs a history list of commands that have been executed, where the maximum length of the list determines the number of undo/redo levels.
The history list stores sequences of commands that have been executed.
Traversing backward through the list and reverse-executing commands cancels their effect; traversing forward and executing commands reexecutes them.
An undoable command might have to be copied before it can be placed on the history list.
That's because the command object that carried out the original request, say, from a MenuItem, will perform other requests at later times.
Copying is required to distinguish different invocations of the same command if its state can vary across invocations.
For example, a DeleteCommand that deletes selected objects must store different sets of objects each time it's executed.
Therefore the DeleteCommand object must be copied following execution, and the copy is placed on the history list.
If the command's state never changes on execution, then copying is not requiredâ€”only a reference to the command need be placed on the history list.
Commands that must be copied before being placed on the history list act as prototypes (see Prototype (117))
Errors can accumulate as commands are executed, unexecuted, and reexecuted repeatedly so that an application's state eventually diverges from original values.
It may be necessary therefore to store more information in the command to ensure that objects are restored to their original state.
The Memento (283) pattern can be applied to give the command access to this information without exposing the internals of other objects.
We show how to do this in the Sample Code section.
The C++ code shown here sketches the implementation of the Command classes in the Motivation section.
OpenCommand opens a document whose name is supplied by the user.
An OpenCommand must be passed an Application object in its constructor.
AskUser is an implementation routine that prompts the user for the name of the document to open.
A PasteCommand must be passed a Document object as its receiver.
The receiver is given as a parameter to PasteCommand's constructor.
For simple commands that aren't undoable and don't require arguments, we can use a class template to parameterize the command's receiver.
SimpleCommand is parameterized by the Receiver type and maintains a binding between a receiver object and an action stored as a pointer to a member function.
The constructor stores the receiver and the action in the corresponding instance variables.
To create a command that calls Action on an instance of class MyClass, a client simply writes.
Keep in mind that this solution only works for simple commands.
More complex commands that keep track of not only their receivers but also arguments and/or undo state require a Command subclass.
A MacroCommand manages a sequence of subcommands and provides operations for adding and removing subcommands.
No explicit receiver is required, because the subcommands already define their receiver.
The key to the MacroCommand is its Execute member function.
This traverses all the subcommands and performs Execute on each of them.
Note that should the MacroCommand implement an Unexecute operation, then its subcommands must be unexecuted in reverse order relative to Execute's implementation.
Perhaps the first example of the Command pattern appears in a paper by Lieberman [Lie85]
MacApp [App89] popularized the notion of commands for implementing undoable operations.
InterViews defines an Action abstract class that provides command functionality.
It also defines an ActionCallback template, parameterized by action method, that can instantiate command subclasses automatically.
The THINK class library [Sym93b] also uses commands to support undoable actions.
Commands in THINK are called "Tasks." Task objects are passed along a Chain of Responsibility (223) for consumption.
Unidraw's command objects are unique in that they can behave like messages.
A Unidraw command may be sent to another object for interpretation, and the result of the interpration varies with the receiving object.
Moreover, the receiver may delegate the interpretation to another object, typically the receiver's parent in a larger structure as in a Chain of Responsibility.
The receiver of a Unidraw command is thus computed rather than stored.
Coplien describes how to implement functors, objects that are functions, in C++ [Cop92]
He achieves a degree of transparency in their use by overloading the function call operator (operator())
The Command pattern is different; its focus is on maintaining a binding between a receiver and a function (i.e., action), not just maintaining a function.
A Memento (283) can keep state the command requires to undo its effect.
A command that must be copied before being placed on the history list acts as a Prototype (117)
Given a language, define a represention for its grammar along with an interpreter that uses the representation to interpret sentences in the language.
If a particular kind of problem occurs often enough, then it might be worthwhile to express instances of the problem as sentences in a simple language.
Then you can build an interpreter that solves the problem by interpreting these sentences.
For example, searching for strings that match a pattern is a common problem.
Regular expressions are a standard language for specifying patterns of strings.
Rather than building custom algorithms to match each pattern against strings, search algorithms could interpret a regular expression that specifies a set of strings to match.
The Interpreter pattern describes how to define a grammar for simple languages, represent sentences in the language, and interpret these sentences.
In this example, the pattern describes how to define a grammar for regular expressions, represent a particular regular expression, and how to interpret that regular expression.
The symbol expression is the start symbol, and literal is a terminal symbol defining simple words.
The Interpreter pattern uses a class to represent each grammar rule.
Symbols on the right-hand side of the rule are instance variables of these classes.
The grammar above is represented by five classes: an abstract class.
Every regular expression defined by this grammar is represented by an abstract syntax tree made up of instances of these classes.
We can create an interpreter for these regular expressions by defining the Interpret operation on each subclass of RegularExpression.
Interpret takes as an argument the context in which to interpret the expression.
The context contains the input string and information on how much of it has been matched so far.
Each subclass of RegularExpression implements Interpret to match the next part of the input string based on the current context.
Use the Interpreter pattern when there is a language to interpret, and you can represent statements in the language as abstract syntax trees.
For complex grammars, the class hierarchy for the grammar becomes large and unmanageable.
Tools such as parser generators are a better alternative in such cases.
They can interpret expressions without building abstract syntax trees, which can save space and possibly time.
The most efficient interpreters are usually not implemented by interpreting parse trees directly but by first translating them into another form.
For example, regular expressions are often transformed into state machines.
But even then, the translator can be implemented by the Interpreter pattern, so the pattern is still applicable.
Interpret typically calls itself recursively on the variables representing R1 through Rn.
Client o builds (or is given) an abstract syntax tree representing a particular.
Then the client initializes the context and invokes the Interpret operation.
The Interpret operation of each TerminalExpression defines the base case in the recursion.
The Interpret operations at each node use the context to store and access the state of the interpreter.
Because the pattern uses classes to represent grammar rules, you can use inheritance to change or extend the grammar.
Existing expressions can be modified incrementally, and new expressions can be defined as variations on old ones.
Classes defining nodes in the abstract syntax tree have similar implementations.
These classes are easy to write, and often their generation can be automated with a compiler or parser generator.
The Interpreter pattern defines at least one class for every rule in the grammar (grammar rules defined using BNF may require multiple classes)
Hence grammars containing many rules can be hard to manage and maintain.
Other design patterns can be applied to mitigate the problem (see Implementation)
But when the grammar is very complex, other techniques such as parser or compiler generators are more appropriate.
The Interpreter pattern makes it easier to evaluate an expression in a new way.
For example, you can support pretty printing or type-checking an expression by defining a new operation on the expression classes.
If you keep creating new ways of interpreting an expression, then consider using the Visitor (331) pattern to avoid changing the grammar classes.
The Interpreter and Composite (163) patterns share many implementation issues.
The Interpreter pattern doesn't explain how to create an abstract syntax tree.
The abstract syntax tree can be created by a table-driven parser, by a hand-crafted (usually recursive descent) parser, or directly by the client.
You don't have to define the Interpret operation in the expression classes.
If it's common to create a new interpreter, then it's better to use the Visitor (331) pattern to put Interpret in a separate "visitor" object.
For example, a grammar for a programming language will have many operations on abstract syntax trees, such as as type-checking, optimization, code generation, and so on.
It will be more likely to use a visitor to avoid defining these operations on every grammar class.
Grammars whose sentences contain many occurrences of a terminal symbol might benefit from sharing a single copy of that symbol.
Grammars for computer programs are good examplesâ€”each program variable will appear in many places throughout the.
In the Motivation example, a sentence can have the terminal symbol dog (modeled by the LiteralExpression class) appearing many times.
Terminal nodes generally don't store information about their position in the abstract syntax tree.
Parent nodes pass them whatever context they need during interpretation.
Hence there is a distinction between shared (intrinsic) state and passed-in (extrinsic) state, and the Flyweight (195) pattern applies.
For example, each instance of LiteralExpression for dog receives a context containing the substring matched so far.
And every such LiteralExpression does the same thing in its Interpret operationâ€”it checks whether the next part of the input contains a dogâ€”no matter where the instance appears in the tree.
The first is a complete example in Smalltalk for checking whether a sequence matches a regular expression.
The second is a C++ program for evaluating Boolean expressions.
The regular expression matcher tests whether a string is in the language defined by the regular expression.
This grammar is a slight modification of the Motivation example.
We changed the concrete syntax of regular expressions a little, because symbol "*" can't be a postfix operation in Smalltalk.
LiteralExpression has a components instance variable that holds a list of objects (probably characters)
These represent the literal string that must match the input sequence.
The match: operation implements an interpreter for the regular expression.
Each of the classes defining the abstract syntax tree implements this operation.
It takes inputState as an argument representing the current state of the matching process, having read part of the input string.
This current state is characterized by a set of input streams representing the set of inputs that the regular expression could have accepted so far.
The current state is most important to the repeat operation.
Only the stream that has accepted one character will match the remaining "abc"
Now we consider the definitions of match: for each class defining the regular expression.
The definition for SequenceExpression matches each of its subexpressions in sequence.
The output states represent all these possibilities, allowing subsequent elements of the regular expression to decide which state is the correct one.
Finally, the definition of match: for LiteralExpression tries to match its components against each possible input stream.
It keeps only those input streams that have a match:
This is the only match: operation that advances the stream.
Notice how the state that's returned contains a copy of the input stream, thereby ensuring that matching a literal never changes the input stream.
Now that we've defined the classes that make up an abstract syntax tree, we can describe how to build it.
Rather than write a parser for regular expressions, we'll define some operations on the RegularExpression classes so that evaluating a Smalltalk expression will produce an abstract syntax tree for the corresponding regular expression.
That lets us use the built-in Smalltalk compiler as if it were a parser for regular expressions.
This would let regular expressions match sequences of any kind of object.
The second example is a system for manipulating and evaluating Boolean expressions implemented in C++
The terminal symbols in this language are Boolean variables, that is, the constants true and false.
Nonterminal symbols represent expressions containing the operators and, or, and not.
The first, Evaluate, evaluates a Boolean expression in a context that assigns a true or false value to each variable.
The second operation, Replace, produces a new Boolean expression by replacing a variable with an expression.
Replace shows how the Interpreter pattern can be used for more than just evaluating expressions.
We give details of just the BooleanExp, VariableExp, and AndExp classes here.
BooleanExp defines the interface for all classes that define a Boolean expression:
The class Context defines a mapping from variables to Boolean values, which we represent with the C++ constants true and false.
Evaluating a variable returns its value in the current context.
To replace a variable with an expression, we check to see if the variable has the same name as the one it is passed as an argument:
An AndExp represents an expression made by ANDing two Boolean expressions together.
Evaluating an AndExp evaluates its operands and returns the logical "and" of the results.
An AndExp implements Copy and Replace by making recursive calls on its operands:
The expression evaluates to true for this assignment to x and y.
We can evaluate the expression with a different assignment to the variables simply by changing the context.
Finally, we can replace the variable y with a new expression and then reevaluate it:
This example illustrates an important point about the Interpreter pattern: many kinds of operations can "interpret" a sentence.
Of the three operations defined for BooleanExp, Evaluate fits our idea of what an interpreter should do most closelyâ€”that is, it interprets a program or expression and returns a simple result.
However, Replace can be viewed as an interpreter as well.
It's an interpreter whose context is the name of the variable being replaced along with the expression that replaces it, and whose result is a new expression.
Even Copy can be thought of as an interpreter with an empty context.
It may seem a little strange to consider Replace and Copy to be interpreters, because these are just basic operations on trees.
The examples in Visitor (331) illustrate how all three operations can be refactored into a separate "interpreter" visitor, thus showing that the similarity is deep.
The Interpreter pattern is more than just an operation distributed over a class hierarchy that uses the Composite (163) pattern.
We consider Evaluate an interpreter because we think of the BooleanExp class hierarchy as representing a language.
Given a similar class hierarchy for representing automotive part assemblies, it's unlikely we'd consider operations like Weight and Copy as interpreters even though they are distributed over a class hierarchy that uses the Composite patternâ€”we just don't think of automotive parts as a language.
It's a matter of perspective; if we started publishing grammars of automotive parts, then we could consider operations on those parts to be ways of interpreting the language.
The Interpreter pattern is widely used in compilers implemented with object-oriented languages, as the Smalltalk compilers are.
SPECTalk uses the pattern to interpret descriptions of input file formats [Sza92]
The QOCA constraint-solving toolkit uses it to evaluate constraints [HHMV92]
Considered in its most general form (i.e., an operation distributed over a class hierarchy based on the Composite pattern), nearly every use of the Composite pattern will also contain the Interpreter pattern.
But the Interpreter pattern should be reserved for those cases in which you want to think of the class hierarchy as defining a language.
Composite (163): The abstract syntax tree is an instance of the Composite pattern.
Flyweight (195) shows how to share terminal symbols within the abstract syntax tree.
Iterator (257): The interpreter can use an Iterator to traverse the structure.
Visitor (331) can be used to maintain the behavior in each node in the abstract syntax tree in one class.
For simplicity, we ignore operator precedence and assume it's the responsibility of whichever object constructs the syntax tree.
Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.
An aggregate object such as a list should give you a way to access its elements without exposing its internal structure.
Moreover, you might want to traverse the list in different ways, depending on what you want to accomplish.
But you probably don't want to bloat the List interface with operations for different traversals, even if you could anticipate the ones you will need.
You might also need to have more than one traversal pending on the same list.
The key idea in this pattern is to take the responsibility for access and traversal out of the list object and put it into an iterator object.
The Iterator class defines an interface for accessing the list's elements.
An iterator object is responsible for keeping track of the current element; that is, it knows which elements have been traversed already.
For example, a List class would call for a ListIterator with the following relationship between them:
Before you can instantiate ListIterator, you must supply the List to traverse.
Once you have the ListIterator instance, you can access the list's elements sequentially.
The CurrentItem operation returns the current element in the list, First initializes the current element to the first element, Next advances the current element to the next element, and IsDone tests whether we've advanced beyond the last elementâ€”that is, we're finished with the traversal.
Separating the traversal mechanism from the List object lets us define iterators for different traversal policies without enumerating them in the List interface.
Notice that the iterator and the list are coupled, and the client must know that it is a list that's traversed as opposed to some other aggregate structure.
It would be better if we could change the aggregate class without changing client code.
We can do this by generalizing the iterator concept to support polymorphic iteration.
As an example, let's assume that we also have a SkipList implementation of a list.
A skiplist [Pug90] is a probabilistic data structure with characteristics similar to balanced trees.
We want to be able to write code that works for both List and SkipList objects.
We define an AbstractList class that provides a common interface for manipulating lists.
Similarly, we need an abstract Iterator class that defines a common iteration interface.
Then we can define concrete Iterator subclasses for the different list implementations.
As a result, the iteration mechanism becomes independent of concrete aggregate classes.
Since we want to write code that's independent of the concrete List subclasses, we cannot simply instantiate a specific class.
Instead, we make the list objects responsible for creating their corresponding iterator.
This requires an operation like CreateIterator through which clients request an iterator object.
CreateIterator is an example of a factory method (see Factory Method (107))
We use it here to let a client ask a list object for the appropriate iterator.
The Factory Method approach give rise to two class hierarchies, one for lists and another for iterators.
Iterator o defines an interface for accessing and traversing elements.
A ConcreteIterator keeps track of the current object in the aggregate and can compute the succeeding object in the traversal.
For example, code generation and semantic checking involve traversing parse trees.
Code generation may traverse the parse tree inorder or preorder.
Iterators make it easy to change the traversal algorithm: Just replace the iterator instance with a different one.
You can also define Iterator subclasses to support new traversals.
Iterator's traversal interface obviates the need for a similar interface in Aggregate, thereby simplifying the aggregate's interface.
More than one traversal can be pending on an aggregate.
Therefore you can have more than one traversal in progress at once.
The trade-offs often depend on the control structures your language provides.
Some languages (CLU [LG86], for example) even support this pattern directly.
Who controls the iteration? A fundamental issue is deciding which party controls the iteration, the iterator or the client that uses the iterator.
When the client controls the iteration, the iterator is called an external iterator, and when the iterator controls it, the iterator is an internal iterator.2 Clients that use an external iterator must advance the traversal and request the next element explicitly from the iterator.
In contrast, the client hands an internal iterator an operation to perform, and the iterator applies that operation to every element in the aggregate.
It's easy to compare two collections for equality with an external iterator, for.
Internal iterators are especially weak in a language like C++ that does not provide anonymous functions, closures, or continuations like Smalltalk and CLOS.
But on the other hand, internal iterators are easier to use, because they define the iteration logic for you.
Who defines the traversal algorithm? The iterator is not the only place where the traversal algorithm can be defined.
The aggregate might define the traversal algorithm and use the iterator to store just the state of the iteration.
We call this kind of iterator a cursor, since it merely points to the current position in the aggregate.
A client will invoke the Next operation on the aggregate with the cursor as an argument, and the Next operation will change the state of the cursor.3
If the iterator is responsible for the traversal algorithm, then it's easy to use different iteration algorithms on the same aggregate, and it can also be easier to reuse the same algorithm on different aggregates.
On the other hand, the traversal algorithm might need to access the private variables of the aggregate.
If so, putting the traversal algorithm in the iterator violates the encapsulation of the aggregate.
How robust is the iterator? It can be dangerous to modify an aggregate while you're traversing it.
If elements are added or deleted from the aggregate, you might end up accessing an element twice or missing it completely.
A simple solution is to copy the aggregate and traverse the copy, but that's too expensive to do in general.
A robust iterator ensures that insertions and removals won't interfere with traversal, and it does it without copying the aggregate.
On insertion or removal, the aggregate either adjusts the internal state of iterators it has produced, or it maintains information internally to ensure proper traversal.
Kofler provides a good discussion of how robust iterators are implemented in ET++ [Kof93]
The minimal interface to Iterator consists of the operations First, Next, IsDone, and CurrentItem.4 Some additional operations might prove useful.
For example, ordered aggregates can have a Previous operation that positions the iterator to the previous element.
A SkipTo operation is useful for sorted or indexed collections.
SkipTo positions the iterator to an object matching specific criteria.
They require the iterator object to be allocated dynamically by a factory method.
Hence they should be used only when there's a need for polymorphism.
Otherwise use concrete iterators, which can be allocated on the stack.
Polymorphic iterators have another drawback: the client is responsible for deleting them.
This is error-prone, because it's easy to forget to free a heap-allocated iterator object when you're finished with it.
That's especially likely when there are multiple exit points in an operation.
And if an exception is triggered, the iterator object will never be freed.
We can use a stack-allocated proxy as a stand-in for the real iterator.
Thus when the proxy goes out of scope, the real iterator will get deallocated along with it.
The proxy ensures proper cleanup, even in the face of exceptions.
This is an application of the well-known C++ technique "resource allocation is initialization" [ES90]
An iterator can be viewed as an extension of the aggregate that created it.
We can express this close relationship in C++ by making the iterator a friend of its aggregate.
Then you don't need to define aggregate operations whose sole purpose is to let iterators implement traversal efficiently.
However, such privileged access can make defining new traversals difficult, since it'll require changing the aggregate interface to add another friend.
To avoid this problem, the Iterator class can include protected operations for accessing important but publicly unavailable members of the aggregate.
Iterator subclasses (and only Iterator subclasses) may use these protected operations to gain privileged access to the aggregate.
External iterators can be difficult to implement over recursive aggregate structures like those in the Composite (163) pattern, because a position in the structure may span many levels of nested aggregates.
Therefore an external iterator has to store a path through the Composite to keep track of the current object.
It can record the current position simply by calling itself recursively, thereby storing the path implicitly in the call stack.
If the nodes in a Composite have an interface for moving from a node to its siblings, parents, and children, then a cursor-based iterator may offer a better alternative.
The cursor only needs to keep track of the current node; it can rely on the node interface to traverse the Composite.
Composites often need to be traversed in more than one way.
You can support each kind of traversal with a different class of iterator.
A NullIterator is a degenerate iterator that's helpful for handling boundary conditions.
By definition, a NullIterator is always done with traversal; that is, its IsDone operation always evaluates to true.
At each point in the traversal, we ask the current element for an iterator for its children.
That lets us implement traversal over the entire structure in a uniform way.
We'll look at the implementation of a simple List class, which is part of our foundation library (Appendix C)
We'll show two Iterator implementations, one for traversing the List in front-to-back order, and another for traversing back-to-front (the foundation library supports only the first one)
Then we show how to use these iterators and how to avoid committing to a particular implementation.
After that, we change the design to make sure iterators get deleted properly.
The last example illustrates an internal iterator and compares it to its external counterpart.
First let's look at the part of the List interface that's relevant to implementing iterators.
The List class provides a reasonably efficient way to support iteration through its public interface.
So there's no need to give iterators privileged access to the underlying data structure; that is, the iterator classes are not friends of List.
To enable transparent use of the different traversals we define an abstract Iterator class, which defines the iterator interface.
It stores the List along with an index _current into the list:
IsDone checks whether the index refers to an element within the List:
Let's assume we have a List of Employee objects, and we would like to print all the contained employees.
To print the list, we define a PrintEmployees operation that takes an iterator as an argument.
It uses the iterator to traverse and print the list.
Since we have iterators for both back-to-front and front-to-back traversals, we can reuse this operation to print the employees in both orders.
Let's consider how a skiplist variation of List would affect our iteration code.
A SkipList subclass of List must provide a SkipListIterator that implements the Iterator interface.
Internally, the SkipListIterator has to keep more than just an index to do the iteration efficiently.
But since SkipListIterator conforms to the Iterator interface, the PrintEmployees operation can also be used when the employees are stored in a SkipList object.
Although this approach works, it would be better if we didn't have to commit to a specific List implementation, namely SkipList.
We can introduce an AbstractList class to standardize the list interface for different list implementations.
To enable polymorphic iteration, AbstractList defines a factory method CreateIterator, which subclasses override to return their corresponding iterator:
An alternative would be to define a general mixin class Traversable that defines the interface for creating an iterator.
Aggregate classes can mix in Traversable to support polymorphic iteration.
Now we're in a position to write the code for printing the employees independent of a concrete representation.
To make life easier for clients, we'll provide an IteratorPtr that acts as a proxy for an iterator.
It takes care of cleaning up the Iterator object when it goes out of scope.
IteratorPtr is always allocated on the stack.5 C++ automatically takes care of calling its destructor, which deletes the real iterator.
The members of IteratorPtr are all implemented inline; thus they can incur no overhead.
As a final example, let's look at a possible implementation of an internal or passive ListIterator class.
Here the iterator controls the iteration, and it applies an operation to each element.
The issue in this case is how to parameterize the iterator with the operation we want to perform on each element.
C++ does not support anonymous functions or closures that other languages provide for this task.
In the first case, the iterator calls the operation passed to it at each point in the iteration.
In the second case, the iterator calls an operation that a subclass overrides to enact specific behavior.
Often you want to accumulate state during the iteration, and functions aren't well-suited to that; we would have to use static variables to remember the state.
An Iterator subclass provides us with a convenient place to store the accumulated state, like in an instance variable.
But creating a subclass for every different traversal is more work.
Here's a sketch of the second option, which uses subclassing.
Internally it uses an external ListIterator to do the traversal.
Traverse starts the traversal and calls ProcessItem for each item.
The internal iterator can choose to terminate a traversal by returning false from ProcessItem.
Let's use a ListTraverser to print the first 10 employees from our employee list.
To do it we have to subclass ListTraverser and override ProcessItem.
We count the number of printed employees in a _count instance variable.
Here's how PrintNEmployees prints the first 10 employees on the list:
It's a bit more work than an external iterator, though, because we have to define a new class.
This interface is the same as ListTraverser's except for an added TestItem member function that defines the test.
Traverse decides to continue the traversal based on the outcome of the test:
A variant of this class could define Traverse to return if at least one item satisfies the test.6
Most collection class libraries offer iterators in one form or another.
Here's an example from the Booch components [Boo94], a popular collection class library.
It provides both a fixed size (bounded) and dynamically growing (unbounded) implementation of a queue.
The queue interface is defined by an abstract Queue class.
To support polymorphic iteration over the different queue implementations, the queue iterator is implemented in the terms of the abstract Queue class interface.
This variation has the advantage that you don't need a factory method to ask the queue implementations for their appropriate iterator.
However, it requires the interface of the abstract Queue class to be powerful enough to implement the iterator efficiently.
Iterators don't have to be defined as explicitly in Smalltalk.
Each element in the collection is bound to the local variable in the block; then the block is executed.
Smalltalk also includes a set of Stream classes that support an iterator-like interface.
ReadStream is essentially an Iterator, and it can act as an external iterator for all the sequential collections.
There are no standard external iterators for nonsequential collections such as Set and Dictionary.
Polymorphic iterators and the cleanup Proxy described earlier are provided by the ET++ container classes [WGM88]
The Unidraw graphical editing framework classes use cursor-based iterators [VL90]
You can iterate over different container types in the same way.
The ObjectWindow iteration syntax relies on overloading the postincrement operator ++ to advance the iteration.
Composite (163): Iterators are often applied to recursive structures such as Composites.
Factory Method (107): Polymorphic iterators rely on factory methods to instantiate the appropriate Iterator subclass.
Memento (283) is often used in conjunction with the Iterator pattern.
An iterator can use a memento to capture the state of an iteration.
Booch refers to external and internal iterators as active and passive iterators, respectively [Boo94]
The terms "active" and "passive" describe the role of the client, not the level of activity in the iterator.
Cursors are a simple example of the Memento (283) pattern and share many of its implementation issues.
CurrentItem into a single operation that advances to the next object and returns it.
If the traversal is finished, then this operation returns a special value (0, for instance) that marks the end of the iteration.
You can ensure this at compile-time just by declaring private new and delete operators.
The Traverse operation in these examples is a Template Method (325) with primitive operations TestItem and ProcessItem.
Define an object that encapsulates how a set of objects interact.
Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.
Such distribution can result in an object structure with many connections between objects; in the worst case, every object ends up knowing about every other.
Though partitioning a system into many objects generally enhances reusability, proliferating interconnections tend to reduce it again.
Lots of interconnections make it less likely that an object can work without the support of othersâ€”the system acts as though it were monolithic.
As a result, you may be forced to define many subclasses to customize the system's behavior.
As an example, consider the implementation of dialog boxes in a graphical user interface.
A dialog box uses a window to present a collection of widgets such as buttons, menus, and entry fields, as shown here:
Often there are dependencies between the widgets in the dialog.
For example, a button gets disabled when a certain entry field is empty.
Selecting an entry in a list of choices called a list box might change the contents of an entry field.
Conversely, typing text into the entry field might automatically select one or more corresponding entries in the list box.
Once text appears in the entry field, other buttons may become enabled that let the user do something with the text, such as changing or deleting the thing to which it refers.
So even though dialogs display the same kinds of widgets, they can't simply reuse stock widget classes; they have to be customized to reflect dialog-specific dependencies.
Customizing them individually by subclassing will be tedious, since many classes are involved.
You can avoid these problems by encapsulating collective behavior in a separate mediator object.
A mediator is responsible for controlling and coordinating the interactions of a group of objects.
The mediator serves as an intermediary that keeps objects in the group from referring to each other.
The objects only know the mediator, thereby reducing the number of interconnections.
For example, FontDialogDirector can be the mediator between the widgets in a dialog box.
A FontDialogDirector object knows the widgets in a dialog and coordinates their interaction.
The following interaction diagram illustrates how the objects cooperate to handle a change in a list box's selection:
Here's the succession of events by which a list box's selection passes to an entry field:
Note how the director mediates between the list box and the entry field.
Widgets communicate with each other only indirectly, through the director.
They don't have to know about each other; all they know is the director.
Furthermore, because the behavior is localized in one class, it can be changed or replaced by extending or replacing that class.
Here's how the FontDialogDirector abstraction can be integrated into a class library:
DialogDirector is an abstract class that defines the overall behavior of a dialog.
Clients call the ShowDialog operation to display the dialog on the screen.
CreateWidgets is an abstract operation for creating the widgets of a dialog.
WidgetChanged is another abstract operation; widgets call it to inform their director that they have changed.
DialogDirector subclasses override CreateWidgets to create the proper widgets, and they override WidgetChanged to handle the changes.
Mediator (DialogDirector) o defines an interface for communicating with Colleague objects.
Colleague classes (ListBox, EntryField) o each Colleague class knows its Mediator object.
The mediator implements the cooperative behavior by routing requests between the appropriate colleague(s)
A mediator localizes behavior that otherwise would be distributed among several objects.
Changing this behavior requires subclassing Mediator only; Colleague classes can be reused as is.
You can vary and reuse Colleague and Mediator classes independently.
A mediator replaces many-to-many interactions with one-to-many interactions between the mediator and its colleagues.
Making mediation an independent concept and encapsulating it in an object lets you focus on how objects interact apart from their individual behavior.
That can help clarify how objects interact in a system.
The Mediator pattern trades complexity of interaction for complexity in the mediator.
Because a mediator encapsulates protocols, it can become more complex than any individual colleague.
This can make the mediator itself a monolith that's hard to maintain.
The following implementation issues are relevant to the Mediator pattern:
The abstract coupling that the Mediator class provides lets colleagues work with different Mediator subclasses, and vice versa.
Colleagues have to communicate with their mediator when an event of interest occurs.
One approach is to implement the Mediator as an Observer using the Observer (293) pattern.
Colleague classes act as Subjects, sending notifications to the mediator whenever they change state.
The mediator responds by propagating the effects of the change to other colleagues.
Another approach defines a specialized notification interface in Mediator that lets colleagues be more direct in their communication.
Smalltalk/V for Windows uses a form of delegation: When communicating with the mediator, a colleague passes itself as an argument, allowing the mediator to identify the sender.
The Sample Code uses this approach, and the Smalltalk/V implementation is discussed further in the Known Uses.
We'll use a DialogDirector to implement the font dialog box shown in the Motivation.
Widgets call WidgetChanged on their director to inform it of a significant event.
Subclasses of DialogDirector override WidgetChanged to affect the appropriate widgets.
The widget passes a reference to itself as an argument to WidgetChanged to let the director identify the widget that changed.
DialogDirector subclasses redefine the CreateWidgets pure virtual to construct the widgets in the dialog.
The ListBox, EntryField, and Button are subclasses of Widget for specialized user interface elements.
ListBox provides a GetSelection operation to get the current selection, and EntryField's SetText operation puts new text into the field.
Button is a simple widget that calls Changed whenever it's pressed.
The FontDialogDirector class mediates between widgets in the dialog box.
It redefines CreateWidgets to create the widgets and initialize its references to them:
The complexity of WidgetChanged increases proportionally with the complexity of the dialog.
Large dialogs are undesirable for other reasons, of course, but mediator complexity might mitigate the pattern's benefits in other applications.
The application architecture of Smalltalk/V for Windows is based on a mediator structure [LaL94]
In that environment, an application consists of a Window containing a set of panes.
The library contains several predefined Pane objects; examples include TextPane, ListBox, Button, and so on.
An application developer only subclasses from ViewManager, a class that's responsible for doing inter-pane coordination.
ViewManager is the Mediator, and each pane only knows its view manager, which is considered the "owner" of the pane.
The following object diagram shows a snapshot of an application at run-time:
A pane generates an event when it wants to get information from the mediator or when it wants to inform the mediator that something significant happened.
An event defines a symbol (e.g., #select) that identifies the event.
To handle the event, the view manager registers a method selector with the pane.
This selector is the event's handler; it will be invoked whenever the event occurs.
The following code excerpt shows how a ListPane object gets created inside a ViewManager subclass and how ViewManager registers an event handler for the #select event:
Another application of the Mediator pattern is in coordinating complex updates.
An example is the ChangeManager class mentioned in Observer (293)
ChangeManager mediates between subjects and observers to avoid redundant updates.
When an object changes, it notifies the ChangeManager, which in turn coordinates the update by notifying the object's dependents.
A similar application appears in the Unidraw drawing framework [VL90] and uses a class called CSolver to enforce connectivity constraints between "connectors." Objects in graphical editors can appear to stick to one another in different ways.
Connectors are useful in applications that maintain connectivity automatically, like diagram editors and circuit design systems.
It solves the connectivity constraints and updates the connectors' positions to reflect them.
Facade (185) differs from Mediator in that it abstracts a subsystem of objects to provide a more convenient interface.
Its protocol is unidirectional; that is, Facade objects make requests of the subsystem classes but not vice versa.
In contrast, Mediator enables cooperative behavior that colleague objects don't or can't provide, and the protocol is multidirectional.
Colleagues can communicate with the mediator using the Observer (293) pattern.
Without violating encapsulation, capture and externalize an object's internal state so that the object can be restored to this state later.
Sometimes it's necessary to record the internal state of an object.
This is required when implementing checkpoints and undo mechanisms that let users back out of tentative operations or recover from errors.
You must save state information somewhere so that you can restore objects to their previous states.
But objects normally encapsulate some or all of their state, making it inaccessible to other objects and impossible to save externally.
Exposing this state would violate encapsulation, which can compromise the application's reliability and extensibility.
Consider for example a graphical editor that supports connectivity between objects.
A user can connect two rectangles with a line, and the rectangles stay connected when the user moves either of them.
The editor ensures that the line stretches to maintain the connection.
A well-known way to maintain connectivity relationships between objects is with a constraint-solving system.
ConstraintSolver records connections as they are made and generates mathematical equations that describe them.
It solves these equations whenever the user makes a connection or otherwise modifies the diagram.
ConstraintSolver uses the results of its calculations to rearrange the graphics so that they maintain the proper connections.
Supporting undo in this application isn't as easy as it may seem.
An obvious way to undo a move operation is to store the original distance moved and move the object back an equivalent distance.
However, this does not guarantee all objects will appear where they did before.
In that case, simply moving the rectangle back to its original location won't necessarily achieve the desired effect.
In general, the ConstraintSolver's public interface might be insufficient to allow precise reversal of its effects on other objects.
The undo mechanism must work more closely with ConstraintSolver to reestablish previous state, but we should also avoid exposing the ConstraintSolver's internals to the undo mechanism.
A memento is an object that stores a snapshot of the internal state of another objectâ€”the memento's originator.
The undo mechanism will request a memento from the originator when it needs to checkpoint the originator's state.
The originator initializes the memento with information that characterizes its current state.
Only the originator can store and retrieve information from the mementoâ€”the memento is "opaque" to other objects.
In the graphical editor example just discussed, the ConstraintSolver can act as an originator.
The editor requests a memento from the ConstraintSolver as a side-effect of the move operation.
A SolverState memento contains data structures that describe the current state of the ConstraintSolver's internal equations and variables.
Later when the user undoes the move operation, the editor gives the SolverState back to the ConstraintSolver.
Based on the information in the SolverState, the ConstraintSolver changes its internal structures to return its equations and variables to their exact previous state.
This arrangement lets the ConstraintSolver entrust other objects with the information it needs to revert to a previous state without exposing its internal structure and representations.
Memento (SolverState) o stores internal state of the Originator object.
Caretaker sees a narrow interface to the Mementoâ€”it can only pass the memento to other objects.
Originator, in contrast, sees a wide interface, one that lets it access all the data necessary to restore itself to its previous state.
Ideally, only the originator that produced the memento would be permitted to access the memento's internal state.
Originator (ConstraintSolver) o creates a memento containing a snapshot of its current internal state.
Caretaker (undo mechanism) o is responsible for the memento's safekeeping.
A caretaker requests a memento from an originator, holds it for a time, and passes it back to the originator, as the following interaction diagram illustrates:
Sometimes the caretaker won't pass the memento back to the originator, because the originator might never need to revert to an earlier state.
Only the originator that created a memento will assign or retrieve its state.
Memento avoids exposing information that only an originator should manage but that must be stored nevertheless outside the originator.
The pattern shields other objects from potentially complex Originator internals, thereby preserving encapsulation boundaries.
Having clients manage the state they ask for simplifies Originator and keeps clients from having to notify originators when they're done.
Mementos might incur considerable overhead if Originator must copy large amounts of information to store in the memento or if clients create and return mementos to the originator often enough.
Unless encapsulating and restoring Originator state is cheap, the pattern might not be appropriate.
It may be difficult in some languages to ensure that only the originator can access the memento's state.
A caretaker is responsible for deleting the mementos it cares for.
However, the caretaker has no idea how much state is in the memento.
Hence an otherwise lightweight caretaker might incur large storage costs when it stores mementos.
Here are two issues to consider when implementing the Memento pattern:
Mementos have two interfaces: a wide one for originators and a narrow one for other objects.
Ideally the implementation language will support two levels of static protection.
C++ lets you do this by making the Originator a friend of Memento and making Memento's wide interface private.
For example, undoable commands in a history list can use mementos to ensure that commands are restored to their exact state when they're undone (see Command (233))
The history list defines a specific order in which commands can be undone and redone.
That means mementos can store just the incremental change that a command makes rather than the full state of every object they affect.
In the Motivation example given earlier, the constraint solver can store only those internal structures that change to keep the line connecting the rectangles, as opposed to storing the absolute positions of these objects.
The C++ code given here illustrates the ConstraintSolver example discussed earlier.
We use MoveCommand objects (see Command (233)) to (un)do the translation of a graphical object from one position to another.
The graphical editor calls the command's Execute operation to move a graphical object and.
Its key member function is Solve, which solves the constraints registered with the AddConstraint operation.
The constraint solver can be returned to a previous state by calling SetMemento.
Given these interfaces, we can implement MoveCommand members Execute and Unexecute as follows:
Unexecute moves the graphic back, sets the constraint solver's state to the previous state, and finally tells the constraint solver to solve the constraints.
The preceding sample code is based on Unidraw's support for connectivity through its CSolver class [VL90]
Collections in Dylan [App92] provide an iteration interface that reflects the Memento pattern.
Dylan's collections have the notion of a "state" object, which is a memento that represents the state of the iteration.
Each collection can represent the current state of the iteration in any way it chooses; the representation is completely hidden from clients.
The Dylan iteration approach might be translated to C++ as follows:
Next advances the state object to the next position in the iteration; it effectively increments the iteration index.
IsDone returns true if Next has advanced beyond the last element in the collection.
CurrentItem dereferences the state object and returns the element in the collection to which it refers.
This is useful for marking a point in an iteration.
Given a class ItemType, we can iterate over a collection of its instances as follows7:
It doesn't require breaking a collection's encapsulation to support iteration.
The memento is only interpreted by the collection itself; no one else has access to it.
Other approaches to iteration require breaking encapsulation by making iterator classes friends of their collection classes (see Iterator (257))
The QOCA constraint-solving toolkit stores incremental information in mementos [HHMV92]
Clients can obtain a memento that characterizes the current solution to a system of constraints.
The memento contains only those constraint variables that have changed since the last solution.
Usually only a small subset of the solver's variables changes for each new solution.
This subset is enough to return the solver to the preceding solution; reverting to earlier solutions requires restoring mementos from the intervening solutions.
Hence you can't set mementos in any order; QOCA relies on a history mechanism to revert to earlier solutions.
Command (233): Commands can use mementos to maintain state for undoable operations.
Iterator (257): Mementos can be used for iteration as described earlier.
Note that our example deletes the state object at the end of the iteration.
But delete won't get called if ProcessItem throws an exception, thus creating garbage.
This is a problem in C++ but not in Dylan, which has garbage collection.
Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
A common side-effect of partitioning a system into a collection of cooperating classes is the need to maintain consistency between related objects.
You don't want to achieve consistency by making the classes tightly coupled, because that reduces their reusability.
Classes defining application data and presentations can be reused independently.
Both a spreadsheet object and bar chart object can depict information in the same application data object using different presentations.
The spreadsheet and the bar chart don't know about each other, thereby letting you reuse only the one you need.
When the user changes the information in the spreadsheet, the bar chart reflects the changes immediately, and vice versa.
This behavior implies that the spreadsheet and bar chart are dependent on the data object and therefore should be notified of any change in its state.
And there's no reason to limit the number of dependent objects to two; there may be any number of different user interfaces to the same data.
The key objects in this pattern are subject and observer.
All observers are notified whenever the subject undergoes a change in state.
In response, each observer will query the subject to synchronize its state with the subject's state.
It sends out these notifications without having to know who its observers are.
Use the Observer pattern in any of the following situations:
When an abstraction has two aspects, one dependent on the other.
Encapsulating these aspects in separate objects lets you vary and reuse them independently.
When a change to one object requires changing others, and you don't know how many objects need to be changed.
When an object should be able to notify other objects without making assumptions about who these objects are.
In other words, you don't want these objects tightly coupled.
Observer o defines an updating interface for objects that should be notified of.
ConcreteSubject notifies its observers whenever a change occurs that could make its observers' state inconsistent with its own.
After being informed of a change in the concrete subject, a ConcreteObserver object may query the subject for information.
ConcreteObserver uses this information to reconcile its state with that of the subject.
The following interaction diagram illustrates the collaborations between a subject and two observers:
Note how the Observer object that initiates the change request postpones its update until it gets a notification from the subject.
It can be called by an observer or by another kind of object entirely.
The Observer pattern lets you vary subjects and observers independently.
You can reuse subjects without reusing their observers, and vice versa.
It lets you add observers without modifying the subject or other observers.
Further benefits and liabilities of the Observer pattern include the following:
All a subject knows is that it has a list of observers, each conforming to the simple interface of the abstract Observer class.
The subject doesn't know the concrete class of any observer.
Thus the coupling between subjects and observers is abstract and minimal.
Because Subject and Observer aren't tightly coupled, they can belong to different layers of abstraction in a system.
A lower-level subject can communicate and inform a higher-level observer, thereby keeping the system's layering intact.
If Subject and Observer are lumped together, then the resulting object must either span two layers (and violate the layering), or it must be forced to live in one layer or the other (which might compromise the layering abstraction)
Unlike an ordinary request, the notification that a subject sends needn't specify its receiver.
The notification is broadcast automatically to all interested objects that subscribed to it.
The subject doesn't care how many interested objects exist; its only responsibility is to notify its observers.
This gives you the freedom to add and remove observers at any time.
It's up to the observer to handle or ignore a notification.
Because observers have no knowledge of each other's presence, they can be blind to the ultimate cost of changing the subject.
A seemingly innocuous operation on the subject may cause a cascade of updates to observers and their dependent objects.
Moreover, dependency criteria that aren't well-defined or maintained usually lead to spurious updates, which can be hard to track down.
This problem is aggravated by the fact that the simple update protocol provides no details on what changed in the subject.
Without additional protocol to help observers discover what changed, they may be forced to work hard to deduce the changes.
Several issues related to the implementation of the dependency mechanism are discussed in this section.
The simplest way for a subject to keep track of the observers it should notify is to store references to them explicitly in the subject.
However, such storage may be too expensive when there are many subjects and few observers.
Thus a subject with no observers does not incur storage overhead.
On the other hand, this approach increases the cost of accessing the observers.
It might make sense in some situations for an observer to depend on more than one subject.
For example, a spreadsheet may depend on more than one data source.
It's necessary to extend the Update interface in such cases to let the observer know which subject is sending the notification.
The subject can simply pass itself as a parameter in the Update operation, thereby letting the observer know which subject to examine.
Who triggers the update? The subject and its observers rely on the notification mechanism to stay consistent.
But what object actually calls Notify to trigger the update? Here are two options:
Have state-setting operations on Subject call Notify after they change the subject's state.
The advantage of this approach is that clients don't have to remember to call Notify on the subject.
The disadvantage is that several consecutive operations will cause several consecutive updates, which may be inefficient.
Make clients responsible for calling Notify at the right time.
The advantage here is that the client can wait to trigger the update until after a series of state changes has been made, thereby avoiding needless intermediate updates.
The disadvantage is that clients have an added responsibility to trigger the update.
That makes errors more likely, since clients might forget to call Notify.
Deleting a subject should not produce dangling references in its observers.
One way to avoid dangling references is to make the subject notify its observers as it is deleted so that they can reset their reference to it.
In general, simply deleting the observers is not an option, because other objects may reference them, or they may be observing other subjects as well.
It's important to make sure Subject state is self-consistent before calling Notify, because observers query the subject for its current state in the course of updating their own state.
This self-consistency rule is easy to violate unintentionally when Subject subclass operations call inherited operations.
For example, the notification in the following code sequence is trigged when the subject is in an inconsistent state:
You can avoid this pitfall by sending notifications from template methods (Template Method (325)) in abstract Subject classes.
Define a primitive operation for subclasses to override, and make Notify the last operation in the template method, which will ensure that the object is self-consistent when subclasses override Subject operations.
By the way, it's always a good idea to document which Subject operations trigger notifications.
Implementations of the Observer pattern often have the subject broadcast additional information about the change.
The subject passes this information as an argument to Update.
At one extreme, which we call the push model, the subject sends observers detailed information about the change, whether they want it or not.
At the other extreme is the pull model; the subject sends nothing but the most minimal notification, and observers ask for details explicitly thereafter.
The pull model emphasizes the subject's ignorance of its observers, whereas the push model assumes subjects know something about their observers' needs.
The push model might make observers less reusable, because Subject classes make assumptions about Observer classes that might not always be true.
On the other hand, the pull model may be inefficient, because Observer classes must ascertain what changed without help from the Subject.
You can improve update efficiency by extending the subject's registration interface to allow registering observers only for specific events of interest.
When such an event occurs, the subject informs only those observers that have registered interest in that event.
One way to support this uses the notion of aspects for Subject objects.
To register interest in particular events, observers are attached to their subjects using.
At notification time, the subject supplies the changed aspect to its observers as a parameter to the Update operation.
When the dependency relationship between subjects and observers is particularly complex, an object that maintains these relationships might be required.
Its purpose is to minimize the work required to make observers reflect a change in their subject.
For example, if an operation involves changes to several interdependent subjects, you might have to ensure that their observers are notified only after all the subjects have been modified to avoid notifying observers more than once.
It maps a subject to its observers and provides an interface to maintain this mapping.
This eliminates the need for subjects to maintain references to their observers and vice versa.
It updates all dependent observers at the request of a subject.
In contrast, DAGChangeManager handles directed-acyclic graphs of dependencies between subjects and their observers.
In that case, a change in two or more subjects might cause redundant updates.
In general there is only one ChangeManager, and it is known globally.
Class libraries written in languages that lack multiple inheritance (like Smalltalk) generally don't define separate Subject and Observer classes but combine their interfaces in one class.
That lets you define an object that acts as both a subject and an observer without multiple inheritance.
The subject passed to the Update operation lets the observer determine which subject changed when it observes more than one.
ClockTimer is a concrete subject for storing and maintaining the time of day.
ClockTimer provides the interface for retrieving individual time units such as the hour, minute, and second.
The Tick operation gets called by an internal timer at regular intervals to provide an accurate time base.
Tick updates the ClockTimer's internal state and calls Notify to inform observers of the change:
Now we can define a class DigitalClock that displays the time.
It inherits its graphical functionality from a Widget class provided by a user interface toolkit.
The Observer interface is mixed into the DigitalClock interface by inheriting from Observer.
Before the Update operation draws the clock face, it checks to make sure the notifying subject is the clock's subject:
An AnalogClock class can be defined in the same way.
The following code creates an AnalogClock and a DigitalClock that always show the same time:
Whenever the timer ticks, the two clocks will be updated and will redisplay themselves appropriately.
MVC's Model class plays the role of Subject, while View is the base class for observers.
Unidraw splits graphical editor objects into View (for observers) and Subject parts.
Mediator (273): By encapsulating complex update semantics, the ChangeManager acts as mediator between subjects and observers.
Singleton (127): The ChangeManager may use the Singleton pattern to make it unique and globally accessible.
Allow an object to alter its behavior when its internal state changes.
A TCPConnection object can be in one of several different states: Established, Listening, Closed.
When a TCPConnection object receives requests from other objects, it responds differently depending on its current state.
For example, the effect of an Open request depends on whether the connection is in its Closed state or its Established state.
The State pattern describes how TCPConnection can exhibit different behavior in each state.
The key idea in this pattern is to introduce an abstract class called TCPState to represent the states of the network connection.
The TCPState class declares an interface common to all classes that represent different operational states.
For example, the classes TCPEstablished and TCPClosed implement behavior particular to the Established and Closed states of TCPConnection.
The class TCPConnection maintains a state object (an instance of a subclass of TCPState) that represents the current state of the TCP connection.
The class TCPConnection delegates all state-specific requests to this state object.
TCPConnection uses its TCPState subclass instance to perform operations particular to the state of the connection.
Whenever the connection changes state, the TCPConnection object changes the state object it uses.
Use the State pattern in either of the following cases:
An object's behavior depends on its state, and it must change its behavior at run-time depending on that state.
Operations have large, multipart conditional statements that depend on the object's state.
This state is usually represented by one or more enumerated constants.
The State pattern puts each branch of the conditional in a separate class.
This lets you treat the object's state as an object in its own right that can vary independently from other objects.
Context (TCPConnection) o defines the interface of interest to clients.
ConcreteState subclasses (TCPEstablished, TCPListen, TCPClosed) o each subclass implements a behavior associated with a state of the.
A context may pass itself as an argument to the State object handling the request.
This lets the State object access the context if necessary.
Once a context is configured, its clients don't have to deal with the State objects directly.
Either Context or the ConcreteState subclasses can decide which state succeeds another and under what circumstances.
It localizes state-specific behavior and partitions behavior for different states.
The State pattern puts all behavior associated with a particular state into one object.
Because all state-specific code lives in a State subclass, new states and transitions can be added easily by defining new subclasses.
An alternative is to use data values to define internal states and have Context operations check the data explicitly.
But then we'd have look-alike conditional or case statements scattered throughout Context's implementation.
Adding a new state could require changing several operations, which complicates maintenance.
The State pattern avoids this problem but might introduce another, because the pattern distributes behavior for different states across several State subclasses.
This increases the number of classes and is less compact than a single class.
But such distribution is actually good if there are many states, which would otherwise necessitate large conditional statements.
They're monolithic and tend to make the code less explicit, which in turn makes them difficult to modify and extend.
The State pattern offers a better way to structure state-specific code.
The logic that determines the state transitions doesn't reside in monolithic if or switch statements but instead is partitioned between the State subclasses.
Encapsulating each state transition and action in a class elevates the idea of an execution state to full object status.
That imposes structure on the code and makes its intent clearer.
When an object defines its current state solely in terms of internal data values, its state transitions have no explicit representation; they only show up as assignments to some variables.
Introducing separate objects for different states makes the transitions more explicit.
Also, State objects can protect the Context from inconsistent internal states, because state transitions are atomic from the Context's perspectiveâ€”they happen by rebinding one variable (the Context's State object variable), not several [dCLF93]
If State objects have no instance variablesâ€”that is, the state they represent is encoded entirely in their typeâ€”then contexts can share a State object.
When states are shared in this way, they are essentially flyweights (see Flyweight (195)) with no intrinsic state, only behavior.
Who defines the state transitions? The State pattern does not specify which participant defines the criteria for state transitions.
If the criteria are fixed, then they can be implemented entirely in the Context.
It is generally more flexible and appropriate, however, to let the State subclasses themselves specify their successor state and when to make the transition.
This requires adding an interface to the Context that lets State objects set the Context's current state explicitly.
Decentralizing the transition logic in this way makes it easy to modify or extend the logic by defining new State subclasses.
A disadvantage of decentralization is that one State subclass will have knowledge of at least one other, which introduces implementation dependencies between subclasses.
In C++ Programming Style [Car92], Cargill describes another way to impose structure on state-driven code: He uses tables to map inputs to state transitions.
For each state, a table maps every possible input to a succeeding state.
In effect, this approach converts conditional code (and virtual functions, in the case of the State pattern) into a table look-up.
The main advantage of tables is their regularity: You can change the transition criteria by modifying data instead of changing program code.
The table-driven approach captures the states and their transitions, but it must be augmented to perform arbitrary computation on each transition.
The key difference between table-driven state machines and the State pattern can be summed up like this: The State pattern models state-specific behavior, whereas the table-driven approach focuses on defining state transitions.
The first choice is preferable when the states that will be entered aren't known at run-time, and contexts change state infrequently.
This approach avoids creating objects that won't be used, which is important if the State objects store a lot of information.
The second approach is better when state changes occur rapidly, in which case you want to avoid destroying states, because they may be needed again shortly.
Instantiation costs are paid once up-front, and there are no destruction costs at all.
This approach might be inconvenient, though, because the Context must keep references to all states that might be entered.
Changing the behavior for a particular request could be accomplished by changing the object's class at run-time, but this is not possible in most object-oriented programming languages.
Exceptions include Self [US87] and other delegation-based languages that provide such a mechanism and hence support the State pattern directly.
Objects in Self can delegate operations to other objects to achieve a form of dynamic inheritance.
Changing the delegation target at run-time effectively changes the inheritance structure.
This mechanism lets objects change their behavior and amounts to changing their class.
The following example gives the C++ code for the TCP connection example described in the Motivation section.
This example is a simplified version of the TCP protocol; it doesn't describe the complete protocol or all the states of TCP connections.8
First, we define the class TCPConnection, which provides an interface for transmitting data and handles requests to change state.
TCPConnection keeps an instance of the TCPState class in the _state member variable.
Each TCPState operation takes a TCPConnection instance as a parameter, letting TCPState access data from TCPConnection and change the connection's state.
TCPConnection delegates all state-specific requests to its TCPState instance _state.
TCPConnection also provides an operation for changing this variable to a new TCPState.
The constructor for TCPConnection initializes the object to the TCPClosed state (defined later)
TCPState implements default behavior for all requests delegated to it.
It can also change the state of a TCPConnection with the ChangeState operation.
TCPState is declared a friend of TCPConnection to give it privileged access to this operation.
A TCP connection can be in many states: Established, Listening, Closed, etc., and there's a subclass of TCPState for each state.
We'll discuss three subclasses in detail: TCPEstablished, TCPListen, and TCPClosed.
TCPState subclasses maintain no local state, so they can be shared, and only one instance of each is required.
The unique instance of each TCPState subclass is obtained by the static Instance operation.9
Each TCPState subclass implements state-specific behavior for valid requests in the state:
After performing state-specific work, these operations call the ChangeState operation to change the state of the TCPConnection.
TCPConnection itself doesn't know a thing about the TCP connection protocol; it's the TCPState subclasses that define each state transition and action in TCP.
Johnson and Zweig [JZ91] characterize the State pattern and its application to TCP connection protocols.
Most popular interactive drawing programs provide "tools" for performing operations by direct manipulation.
For example, a line-drawing tool lets a user click and drag to create a new line.
There's usually a palette of such tools to choose from.
The user thinks of this activity as picking up a tool and wielding it, but in reality the editor's behavior changes with the current tool: When a drawing tool is active we create shapes; when the selection tool is active we select shapes; and so forth.
We can use the State pattern to change the editor's behavior depending on the current tool.
We can define an abstract Tool class from which to define subclasses that implement tool-specific behavior.
The drawing editor maintains a current Tool object and delegates requests to it.
It replaces this object when the user chooses a new tool, causing the behavior of the drawing editor to change accordingly.
It allows clients to define new kinds of tools easily.
In HotDraw, the DrawingController class forwards the requests to the current Tool object.
The following class diagram sketches the Tool and DrawingController interfaces:
Envelope-Letter is a technique for changing an object's class at run-time.
The State pattern is more specific, focusing on how to deal with an object whose behavior depends on its state.
The Flyweight (195) pattern explains when and how State objects can be shared.
This example is based on the TCP connection protocol described by Lynch and Rose [LR93]
Define a family of algorithms, encapsulate each one, and make them interchangeable.
Strategy lets the algorithm vary independently from clients that use it.
Many algorithms exist for breaking a stream of text into lines.
Hard-wiring all such algorithms into the classes that require them isn't desirable for several reasons:
Clients that need linebreaking get more complex if they include the linebreaking code.
That makes clients bigger and harder to maintain, especially if they support multiple linebreaking algorithms.
We don't want to support multiple linebreaking algorithms if we don't use them all.
It's difficult to add new algorithms and vary existing ones when linebreaking is an integral part of a client.
We can avoid these problems by defining classes that encapsulate different linebreaking algorithms.
An algorithm that's encapsulated in this way is called a strategy.
Suppose a Composition class is responsible for maintaining and updating the linebreaks of text displayed in a text viewer.
Instead, they are implemented separately by subclasses of the abstract Compositor class.
SimpleCompositor implements a simple strategy that determines linebreaks one at a time.
This strategy tries to optimize linebreaks globally, that is, one paragraph at a time.
ArrayCompositor implements a strategy that selects breaks so that each row has a fixed number of items.
It's useful for breaking a collection of icons into rows, for example.
Whenever a Composition reformats its text, it forwards this responsibility to its Compositor object.
The client of Composition specifies which Compositor should be used by installing the Compositor it desires into the Composition.
Strategies provide a way to configure a class with one of many behaviors.
For example, you might define algorithms reflecting different space/time trade-offs.
Strategies can be used when these variants are implemented as a class hierarchy of algorithms [HO87]
Use the Strategy pattern to avoid exposing complex, algorithm-specific data structures.
Instead of many conditionals, move related conditional branches into their own Strategy class.
Strategy (Compositor) o declares an interface common to all supported algorithms.
A context may pass all data required by the algorithm to the strategy when the algorithm is called.
Alternatively, the context can pass itself as an argument to Strategy operations.
That lets the strategy call back on the context as required.
A context forwards requests from its clients to its strategy.
Clients usually create and pass a ConcreteStrategy object to the context; thereafter, clients interact with the context exclusively.
There is often a family of ConcreteStrategy classes for a client to choose from.
Hierarchies of Strategy classes define a family of algorithms or behaviors for contexts to reuse.
Inheritance can help factor out common functionality of the algorithms.
Inheritance offers another way to support a variety of algorithms or behaviors.
You can subclass a Context class directly to give it different behaviors.
It mixes the algorithm implementation with Context's, making Context harder to understand, maintain, and extend.
You wind up with many related classes whose only difference is the algorithm or behavior they employ.
Encapsulating the algorithm in separate Strategy classes lets you vary the algorithm independently of its context, making it easier to switch, understand, and extend.
The Strategy pattern offers an alternative to conditional statements for selecting desired behavior.
When different behaviors are lumped into one class, it's hard to avoid using conditional statements to select the right behavior.
Encapsulating the behavior in separate Strategy classes eliminates these conditional statements.
For example, without strategies, the code for breaking text into lines could look like.
The Strategy pattern eliminates this case statement by delegating the linebreaking task to a Strategy object:
Code containing many conditional statements often indicates the need to apply the Strategy pattern.
The client can choose among strategies with different time and space trade-offs.
The pattern has a potential drawback in that a client must understand how Strategies differ before it can select the appropriate one.
Therefore you should use the Strategy pattern only when the variation in behavior is relevant to clients.
The Strategy interface is shared by all ConcreteStrategy classes whether the algorithms they implement are trivial or complex.
Hence it's likely that some ConcreteStrategies won't use all the information passed to them through this interface; simple ConcreteStrategies may use none of it! That means there will be times when the context creates and initializes parameters that never get used.
If this is an issue, then you'll need tighter coupling between Strategy and Context.
Sometimes you can reduce this overhead by implementing strategies as stateless objects that contexts can share.
Any residual state is maintained by the context, which passes it in each request to the Strategy object.
The Flyweight (195) pattern describes this approach in more detail.
The Strategy and Context interfaces must give a ConcreteStrategy efficient access to any data it needs from a context, and vice versa.
One approach is to have Context pass data in parameters to Strategy operationsâ€”in other words, take the data to the strategy.
On the other hand, Context might pass data the Strategy doesn't need.
Another technique has a context pass itself as an argument, and the strategy requests data from the context explicitly.
Alternatively, the strategy can store a reference to its context, eliminating the need to pass anything at all.
But now Context must define a more elaborate interface to its data, which couples Strategy and Context more closely.
The needs of the particular algorithm and its data requirements will determine the best technique.
In C++ templates can be used to configure a class with a strategy.
The class is then configured with a Strategy class when it's instantiated:
With templates, there's no need to define an abstract class that defines the.
Using Strategy as a template parameter also lets you bind a Strategy to its Context statically, which can increase efficiency.
The Context class may be simplified if it's meaningful not to have a Strategy object.
Context checks to see if it has a Strategy object before accessing it.
If there isn't a strategy, then Context carries out default behavior.
The benefit of this approach is that clients don't have to deal with Strategy objects at all unless they don't like the default behavior.
We'll give the high-level code for the Motivation example, which is based on the implementation of Composition and Compositor classes in InterViews [LCI+92]
The Composition class maintains a collection of Component instances, which represent text and graphical elements in a document.
A composition arranges component objects into lines using an instance of a Compositor subclass, which encapsulates a linebreaking strategy.
Each component has an associated natural size, stretchability, and shrinkability.
The stretchability defines how much the component can grow beyond its natural size; shrinkability is how much it can shrink.
The composition passes these values to a compositor, which uses them to determine the best location for linebreaks.
When a new layout is required, the composition asks its compositor to determine where to place linebreaks.
The composition passes the compositor three arrays that define natural sizes, stretchabilities, and shrinkabilities of the components.
It also passes the number of components, how wide the line is, and an array that the compositor fills with the position of each linebreak.
The Compositor interface lets the composition pass the compositor all the information it needs.
This is an example of "taking the data to the strategy":
Repair first initializes arrays with the natural size, stretchability, and shrinkability of each component (the details of which we omit for brevity)
Then it calls on the compositor to obtain the linebreaks and finally lays out the components according to the breaks (also omitted):
SimpleCompositor examines components a line at a time to determine where breaks should go:
It examines a paragraph at a time, taking into account the components' size and stretchability.
It also tries to give an even "color" to the paragraph by minimizing the whitespace between components.
These classes don't use all the information passed in Compose.
SimpleCompositor ignores the stretchability of the components, taking only their natural widths into account.
TeXCompositor uses all the information passed to it, whereas ArrayCompositor ignores everything.
To instantiate Composition, you pass it the compositor you want to use:
Compositor's interface is carefully designed to support all layout algorithms that subclasses might implement.
You don't want to have to change this interface with every new subclass, because that will require changing existing subclasses.
In general, the Strategy and Context interfaces determine how well the pattern achieves its intent.
Both ET++ [WGM88] and InterViews use strategies to encapsulate different linebreaking algorithms as we've described.
This provides flexibility in targeting the optimizer for different machine architectures.
The ET++SwapsManager calculation engine framework computes prices for different financial instruments [EG92]
YieldCurve calculates discount factors, which determine the present value of future cash flows.
Both of these classes delegate some behavior to Strategy objects.
The framework provides a family of ConcreteStrategy classes for generating cash flows, valuing swaps, and calculating discount factors.
You can create new calculation engines by configuring Instrument and YieldCurve with the different ConcreteStrategy objects.
This approach supports mixing and matching existing Strategy implementations as well as defining new ones.
These strategies are passed as template arguments to a collection class when it's instantiated.
RApp must lay out and route wires that connect subsystems on the circuit.
Routing algorithms in RApp are defined as subclasses of an abstract Router class.
Borland's ObjectWindows [Bor94] uses strategies in dialogs boxes to ensure that the user enters valid data.
Validating that a string is correct can require a table look-up.
Data entry fields delegate the validation strategy to an optional Validator object.
The client attaches a validator to a field if validation is required (an example of an optional strategy)
When the dialog is closed, the entry fields ask their validators to validate the data.
The class library provides validators for common cases, such as a RangeValidator for numbers.
New client-specific validation strategies can be defined easily by subclassing the Validator class.
Define the skeleton of an algorithm in an operation, deferring some steps to subclasses.
Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.
Consider an application framework that provides Application and Document classes.
The Application class is responsible for opening existing documents stored in an external format, such as a file.
A Document object represents the information in a document once it's read from the file.
Applications built with the framework can subclass Application and Document to suit specific needs.
The abstract Application class defines the algorithm for opening and reading a document in its OpenDocument operation:
A template method defines an algorithm in terms of abstract operations that subclasses override to provide concrete behavior.
Application subclasses define the steps of the algorithm that check if the document can be opened (CanOpenDocument) and that create the Document (DoCreateDocument)
Document classes define the step that reads the document (DoRead)
By defining some of the steps of an algorithm using abstract operations, the template method fixes their ordering, but it lets Application and Document subclasses vary those steps to suit their needs.
This is a good example of "refactoring to generalize" as described by Opdyke and Johnson [OJ93]
You first identify the differences in the existing code and then separate the differences into new operations.
Finally, you replace the differing code with a template method that calls one of these new operations.
You can define a template method that calls "hook" operations (see Consequences) at specific points, thereby permitting extensions only at those points.
AbstractClass (Application) o defines abstract primitive operations that concrete subclasses define to.
The template method calls primitive operations as well as operations defined in AbstractClass or those of other objects.
ConcreteClass (MyApplication) o implements the primitive operations to carry out subclass-specific steps.
ConcreteClass relies on AbstractClass to implement the invariant steps of the algorithm.
They are particularly important in class libraries, because they are the means for factoring out common behavior in library classes.
Template methods lead to an inverted control structure that's sometimes referred to as "the Hollywood principle," that is, "Don't call us, we'll call you" [Swe85]
This refers to how a parent class calls the operations of a subclass and not the other way around.
It's important for template methods to specify which operations are hooks (may be overridden) and which are abstract operations (must be overridden)
To reuse an abstract class effectively, subclass writers must understand which operations are designed for overriding.
A subclass can extend a parent class operation's behavior by overriding the operation and calling the parent operation explicitly:
Unfortunately, it's easy to forget to call the inherited operation.
We can transform such an operation into a template method to give the parent control over how subclasses extend it.
The idea is to call a hook operation from a template method in the parent class.
In C++, the primitive operations that a template method calls can be declared protected members.
This ensures that they are only called by the template method.
Primitive operations that must be overridden are declared pure virtual.
The template method itself should not be overridden; therefore you can make the template method a nonvirtual member function.
An important goal in designing template methods is to minimize the number of primitive operations that a subclass must override to flesh out the algorithm.
The more operations that need overriding, the more tedious things get for clients.
You can identify the operations that should be overridden by adding a prefix to their names.
The following C++ example shows how a parent class can enforce an invariant for its subclasses.
Consider a class View that supports drawing on the screen.
View enforces the invariant that its subclasses can draw into a view only after it becomes the "focus," which requires certain drawing state (for example, colors and fonts) to be set up properly.
We can use a Display template method to set up this state.
View defines two concrete operations, SetFocus and ResetFocus, that set up and clean up the drawing state, respectively.
Display calls SetFocus before DoDisplay to set up the drawing state; Display calls ResetFocus afterwards to release the drawing state.
To maintain the invariant, the View's clients always call Display, and View subclasses always override DoDisplay.
Template methods are so fundamental that they can be found in almost every abstract class.
In the Motivation example, the factory method DoCreateDocument is called by the template method OpenDocument.
Strategy (315): Template methods use inheritance to vary part of an algorithm.
Represent an operation to be performed on the elements of an object structure.
Visitor lets you define a new operation without changing the classes of the elements on which it operates.
Consider a compiler that represents programs as abstract syntax trees.
It will need to perform operations on abstract syntax trees for "static semantic" analyses like checking that all variables are defined.
So it might define operations for type-checking, code optimization, flow analysis, checking for variables being assigned values before they're used, and so on.
Moreover, we could use the abstract syntax trees for pretty-printing, program restructuring, code instrumentation, and computing various metrics of a program.
Most of these operations will need to treat nodes that represent assignment statements differently from nodes that represent variables or arithmetic expressions.
Hence there will be one class for assignment statements, another for variable accesses, another for arithmetic expressions, and so on.
The set of node classes depends on the language being compiled, of course, but it doesn't change much for a given language.
The problem here is that distributing all these operations across the various node classes leads to a system that's hard to understand, maintain, and change.
It will be confusing to have type-checking code mixed with pretty-printing code or flow analysis code.
Moreover, adding a new operation usually requires recompiling all of these classes.
It would be better if each new operation could be added separately, and the node classes were independent of the operations that apply to them.
We can have both by packaging related operations from each class in a separate object, called a visitor, and passing it to elements of the abstract syntax tree as it's traversed.
When an element "accepts" the visitor, it sends a request to the visitor that encodes the element's class.
The visitor will then execute the operation for that elementâ€”the operation that used to be in the class of the element.
For example, a compiler that didn't use visitors might type-check a procedure by calling the TypeCheck operation on its abstract syntax tree.
Each of the nodes would implement TypeCheck by calling TypeCheck on its components (see the preceding class diagram)
To make visitors work for more than just type-checking, we need an abstract parent class NodeVisitor for all visitors of an abstract syntax tree.
An application that needs to compute program metrics will define new subclasses of NodeVisitor and will.
The Visitor pattern encapsulates the operations for each compilation phase in a Visitor associated with that phase.
With the Visitor pattern, you define two class hierarchies: one for the elements being operated on (the Node hierarchy) and one for the visitors that define operations on the elements (the NodeVisitor hierarchy)
You create a new operation by adding a new subclass to the visitor class hierarchy.
As long as the grammar that the compiler accepts doesn't change (that is, we don't have to add new Node subclasses), we can add new functionality simply by defining new NodeVisitor subclasses.
Visitor lets you keep related operations together by defining them in.
When the object structure is shared by many applications, use Visitor to put operations in just those applications that need them.
Changing the object structure classes requires redefining the interface to all visitors, which is potentially costly.
If the object structure classes change often, then it's probably better to define the operations in those classes.
Visitor (NodeVisitor) o declares a Visit operation for each class of ConcreteElement in the object.
The operation's name and signature identifies the class that sends the Visit request to the visitor.
That lets the visitor determine the concrete class of the element being visited.
Then the visitor can access the element directly through its particular interface.
ConcreteVisitor provides the context for the algorithm and stores its local state.
This state often accumulates results during the traversal of the structure.
Element (Node) o defines an Accept operation that takes a visitor as an argument.
A client that uses the Visitor pattern must create a ConcreteVisitor object and then traverse the object structure, visiting each element with the visitor.
When an element is visited, it calls the Visitor operation that corresponds to its class.
The element supplies itself as an argument to this operation to let the visitor access its state, if necessary.
The following interaction diagram illustrates the collaborations between an object structure, a visitor, and two elements:
Some of the benefits and liabilities of the Visitor pattern are as follows:
Visitors make it easy to add operations that depend on the components of complex objects.
You can define a new operation over an object structure simply by adding a new visitor.
In contrast, if you spread functionality over many classes, then you must change each class to define a new operation.
Related behavior isn't spread over the classes defining the object structure; it's localized in a visitor.
Unrelated sets of behavior are partitioned in their own visitor subclasses.
That simplifies both the classes defining the elements and the algorithms defined in the visitors.
Any algorithm-specific data structures can be hidden in the visitor.
The Visitor pattern makes it hard to add new subclasses of Element.
Each new ConcreteElement gives rise to a new abstract operation on Visitor and a corresponding implementation in every ConcreteVisitor class.
Sometimes a default implementation can be provided in Visitor that can be inherited by most of the ConcreteVisitors, but this is the exception rather than the rule.
So the key consideration in applying the Visitor pattern is whether you are mostly likely to change the algorithm applied over an object structure or the classes of objects that make up the structure.
The Visitor class hierarchy can be difficult to maintain when new ConcreteElement classes are added frequently.
In such cases, it's probably easier just to define operations on the classes that make up the structure.
If the Element class hierarchy is stable, but you are continually adding operations or changing algorithms, then the Visitor pattern will help you manage the changes.
An iterator (see Iterator (257)) can visit the objects in a structure as it traverses them by calling their operations.
But an iterator can't work across object structures with different types of elements.
For example, the Iterator interface defined on page 263 can access only objects of.
This implies that all elements the iterator can visit have a common parent class Item.
It can visit objects that don't have a common parent class.
You can add any type of object to a Visitor interface.
MyType and YourType do not have to be related through inheritance at all.
Visitors can accumulate state as they visit each element in the object structure.
Without a visitor, this state would be passed as extra arguments to the operations that perform the traversal, or they might appear as global variables.
Visitor's approach assumes that the ConcreteElement interface is powerful enough to let visitors do their job.
As a result, the pattern often forces you to provide public operations that access an element's internal state, which may compromise its encapsulation.
Each Visit operation on the Visitor declares its argument to be a particular ConcreteElement, allowing the Visitor to access the interface of the ConcreteElement directly.
ConcreteVisitor classes override each Visit operation to implement visitor-specific behavior for the corresponding ConcreteElement class.
The Visitor class would be declared like this in C++:
Each class of ConcreteElement implements an Accept operation that calls the matching Visit...
Here are two other implementation issues that arise when you apply the Visitor pattern:
Effectively, the Visitor pattern lets you add operations to classes without changing them.
In fact, some programming languages support it directly (CLOS, for example)
In single-dispatch languages, two criteria determine which operation will fulfill a request: the name of the request and the type of receiver.
For example, the operation that a GenerateCode request will call depends on the type of node object you ask.
The operation that gets executed depends both on the kind of request and the type of the receiver.
Its meaning depends on two types: the Visitor's and the Element's.
Double-dispatching lets visitors request different operations on each class of element.11
This is the key to the Visitor pattern: The operation that gets executed depends on both the type of Visitor and the type of Element it visits.
Instead of binding operations statically into the Element interface, you can consolidate the operations in a Visitor and use Accept to do the binding at run-time.
Extending the Element interface amounts to defining one new Visitor subclass rather than many new Element subclasses.
Who is responsible for traversing the object structure? A visitor must visit each element of the object structure.
The question is, how does it get there? We can put responsibility for traversal in any of three places: in the object structure, in the visitor, or in a separate iterator object (see Iterator (257))
A collection will simply iterate over its elements, calling the Accept operation on each.
A composite will commonly traverse itself by having each Accept operation traverse the element's children and call Accept on each of them recursively.
Another solution is to use an iterator to visit the elements.
In C++, you could use either an internal or external iterator, depending on what is available and what is most efficient.
Since internal iterators are implemented by the object structure, using an internal iterator is a lot like making the object structure responsible for iteration.
But it's easy to use the Visitor pattern with an internal iterator if the operation on the visitor simply calls the operation on the element without recursing.
You could even put the traversal algorithm in the visitor, although you'll end up duplicating the traversal code in each ConcreteVisitor for each aggregate ConcreteElement.
The main reason to put the traversal strategy in the visitor is to implement a particularly complex traversal, one that depends on the results of the operations on the object structure.
We'll give an example of such a case in the Sample Code.
Because visitors are usually associated with composites, we'll use the Equipment classes defined in the Sample Code of Composite (163) to illustrate the Visitor pattern.
We will use Visitor to define operations for computing the inventory of materials and the total cost for a piece of equipment.
The Equipment classes are so simple that using Visitor isn't really necessary, but they make it easy to see what's involved in implementing the pattern.
We've augmented it with an Accept operation to let it work with a visitor.
The Equipment operations return the attributes of a piece of equipment, such as its power consumption and cost.
Subclasses redefine these operations appropriately for specific types of equipment (e.g., a chassis, drives, and planar boards)
The abstract class for all visitors of equipment has a virtual function for each subclass of equipment, as shown next.
Equipment subclasses define Accept in basically the same way: It calls the EquipmentVisitor operation that corresponds to the class that received the Accept request, like this:
Equipment that contains other equipment (in particular, subclasses of CompositeEquipment in the Composite pattern) implements Accept by iterating over its children and calling Accept on each of them.
For example, Chassis::Accept could traverse all the parts in the chassis as follows:
Subclasses of EquipmentVisitor define particular algorithms over the equipment structure.
It computes the net price of all simple equipment (e.g., floppies) and the discount price of all composite equipment (e.g., chassis and buses)
PricingVisitor will compute the total cost of all nodes in the equipment structure.
Note that PricingVisitor chooses the appropriate pricing policy for a class of equipment by dispatching to the corresponding member function.
What's more, we can change the pricing policy of an equipment structure just by changing the PricingVisitor class.
We can define a visitor for computing inventory like this:
The InventoryVisitor accumulates the totals for each type of equipment in the object structure.
InventoryVisitor uses an Inventory class that defines an interface for adding equipment (which we won't bother defining here)
Here's how we can use an InventoryVisitor on an equipment structure:
Now we'll show how to implement the Smalltalk example from the Interpreter pattern (see page 248) with the Visitor pattern.
Like the previous example, this one is so small that Visitor probably won't buy us much, but it provides a good illustration of how to use the pattern.
Further, it illustrates a situation in which iteration is the visitor's responsibility.
The object structure (regular expressions) is made of four classes, and all of them have an accept: method that takes the visitor as an argument.
In class RepeatExpression, the accept: method sends the visitRepeat: message.
The four classes also must have accessing functions that the visitor can use.
It is responsible for the traversal because its traversal algorithm is irregular.
The biggest irregularity is that a RepeatExpression will repeatedly traverse its component.
Its methods are essentially the same as the match: methods of the expression classes in the Interpreter pattern except they replace the argument named inputState with the expression node being matched.
However, they still return the set of streams that the expression would match to identify the current state.
It isn't used for code generation or pretty-printing, although it could be.
Inventor represents a three-dimensional scene as a hierarchy of nodes, each representing either a geometric object or an attribute of one.
Operations like rendering a scene or mapping an input event require traversing this hierarchy in different ways.
Inventor does this using visitors called "actions." There are different visitors for rendering, event handling, searching, filing, and determining bounding boxes.
To make adding new nodes easier, Inventor implements a double-dispatch scheme for C++
The scheme relies on run-time type information and a two-dimensional table in which rows represent visitors and columns represent node classes.
The cells store a pointer to the function bound to the visitor and node class.
Composite (163): Visitors can be used to apply an operation over an object structure defined by the Composite pattern.
Interpreter (243): Visitor may be applied to do the interpretation.
We could use function overloading to give these operations the same simple name, like Visit, since the operations are already differentiated by the parameter they're passed.
On the one hand, it reinforces the fact that each operation involves the same analysis, albeit on a different argument.
On the other hand, that might make what's going on at the call site less obvious to someone reading the code.
It really boils down to whether you believe function overloading is good or not.
If we can have double-dispatch, then why not triple or quadruple, or any other number? Actually, double-dispatch is just a special case of multiple dispatch, in which the operation is chosen based on any number of types.
Languages that support doubleor multiple dispatch lessen the need for the Visitor pattern.
When an aspect of a program changes frequently, these patterns define an object that encapsulates that aspect.
Then other parts of the program can collaborate with the object whenever they depend on that aspect.
These patterns describe aspects of a program that are likely to change.
Most patterns have two kinds of objects: the new object(s) that encapsulate the aspect, and the existing object(s) that use the new ones.
Usually the functionality of new objects would be an integral part of the existing objects were it not for the pattern.
For example, code for a Strategy would probably be wired into the strategy's Context, and code for a State would be implemented directly in the state's Context.
But not all object behavioral patterns partition functionality like this.
For example, Chain of Responsibility (223) deals with an arbitrary number of objects (i.e., a chain), all of which may already exist in the system.
Chain of Responsibility illustrates another difference in behavioral patterns: Not all define static communication relationships between classes.
Chain of Responsibility prescribes communication between an open-ended number of objects.
Other patterns involve objects that are passed around as arguments.
Several patterns introduce an object that's always used as an argument.
A Visitor object is the argument to a polymorphic Accept operation on the objects it visits.
The visitor is never considered a part of those objects, even though the conventional alternative to the pattern is to distribute Visitor code across the object structure classes.
Other patterns define objects that act as magic tokens to be passed around and invoked at a later time.
In Command, the token represents a request; in Memento, it represents the internal state of an object at a particular time.
In both cases, the token can have a complex internal representation, but the client is never aware of it.
Polymorphism is important in the Command pattern, because executing the Command object is a polymorphic operation.
In contrast, the Memento interface is so narrow that a memento can only be passed as a value.
So it's likely to present no polymorphic operations at all to its clients.
The difference between them is that Observer distributes communication by introducing Observer and Subject objects, whereas a Mediator object encapsulates the communication between other objects.
In the Observer pattern, there is no single object that encapsulates a constraint.
Instead, the Observer and the Subject must cooperate to maintain the constraint.
Communication patterns are determined by the way observers and subjects are interconnected: a single subject usually has many observers, and sometimes the observer of one subject is a subject of another observer.
It places the responsibility for maintaining a constraint squarely in the mediator.
We've found it easier to make reusable Observers and Subjects than to make reusable Mediators.
On the other hand, it's easier to understand the flow of communication in Mediator than in Observer.
Observers and subjects are usually connected shortly after they're created, and it's hard to see how they are connected later in the program.
If you know the Observer pattern, then you understand that the way observers and subjects are connected is important, and you also know what connections to look for.
However, the indirection that Observer introduces will still make a system harder to understand.
Observers in Smalltalk can be parameterized with messages to access the Subject state, and so they are even more reusable than they are in C++
Thus a Smalltalk programmer will often use Observer where a C++ programmer would use Mediator.
When collaborating objects refer to each other directly, they become dependent on each other, and that can have an adverse impact on the layering and reusability of a system.
Command, Observer, Mediator, and Chain of Responsibility address how you can decouple senders and receivers, but with different trade-offs.
The Command pattern supports decoupling by using a Command object to define the binding between a sender and receiver:
The Command object provides a simple interface for issuing the request (that is, the Execute operation)
Defining the sender-receiver connection in a separate object lets the sender work with different receivers.
It keeps the sender decoupled from the receivers, making senders easy to reuse.
Moreover, you can reuse the Command object to parameterize a receiver with different senders.
The Command pattern nominally requires a subclass for each sender-receiver connection, although the pattern describes implementation techniques that avoid subclassing.
The Observer pattern decouples senders (subjects) from receivers (observers) by defining an interface for signaling changes in subjects.
Observer defines a looser sender-receiver binding than Command, since a subject may have multiple observers, and their number can vary at run-time.
The Subject and Observer interfaces in the Observer pattern are designed for communicating changes.
Therefore the Observer pattern is best for decoupling objects when there are data dependencies between them.
The Mediator pattern decouples objects by having them refer to each other indirectly through a Mediator object.
A Mediator object routes requests between Colleague objects and centralizes their communication.
Consequently, colleagues can only talk to each other through the Mediator interface.
Requests can be encoded and arguments packed in such a way that colleagues can request an open-ended set of operations.
The Mediator pattern can reduce subclassing in a system, because it centralizes communication behavior in one class instead of distributing it among subclasses.
Finally, the Chain of Responsibility pattern decouples the sender from the receiver by passing the request along a chain of potential receivers:
Since the interface between senders and receivers is fixed, Chain of Responsibility may also require a custom dispatching scheme.
Chain of Responsibility is a good way to decouple the sender and the receiver if the chain is already part of the system's structure, and one of several objects may be in a position to handle the request.
Moreover, the pattern offers added flexibility in that the chain can be changed or extended easily.
With few exceptions, behavioral design patterns complement and reinforce each other.
A class in a chain of responsibility, for example, will probably include at least one application of Template Method (325)
The template method can use primitive operations to determine whether the object should handle the request and to choose the object to forward to.
The chain can use the Command pattern to represent requests as objects.
Interpreter (243) can use the State pattern to define parsing contexts.
For example, a system that uses the Composite (163) pattern might use a visitor to perform operations on components of the composition.
It could use Chain of Responsibility to let components access global properties through their parent.
It could also use Decorator (175) to override these properties on parts of the composition.
It could use the Observer pattern to tie one object structure to another and the State pattern to let a component change its behavior as its state changes.
Well-designed object-oriented systems are just like thisâ€”they have multiple patterns embedded in themâ€”but not because their designers necessarily thought in these terms.
Composition at the pattern level rather than the class or object levels lets us achieve the same synergy with greater ease.
Decorator (175) encapsulates responsibility that can be added to an object.
Bridge (151) separates an abstraction from its implementation, letting them vary independently.
It's possible to argue that this book hasn't accomplished much.
After all, it doesn't present any algorithms or programming techniques that haven't been used before.
It doesn't give a rigorous method for designing systems, nor does it develop a new theory of designâ€”it just documents existing designs.
You could conclude that it makes a reasonable tutorial, perhaps, but it certainly can't offer much to an experienced object-oriented designer.
It gives us standard names and definitions for the techniques we use.
If we don't study design patterns in software, we won't be able to improve them, and it'll be harder to come up with new ones.
It contains some of the most common design patterns that expert object-oriented designers use, and yet people hear and learn about them solely by word of mouth or by studying existing systems.
Early drafts of the book prompted other people to write down the design patterns they use, and it should prompt even more in its current form.
We hope this will mark the start of a movement to document the expertise of software practitioners.
This chapter discusses the impact we think design patterns will have, how they are related to other work in design, and how you can get involved in finding and cataloging patterns.
Here are several ways in which the design patterns in this book can affect the way you design object-oriented software, based on our day-to-day experience with them.
Designers probably don't think about the notation they're using for recording the design as much as they try to match the current design situation against plans, algorithms, data structures, and idioms they have learned in the past.
Computer scientists name and catalog algorithms and data structures, but we don't often name other kinds of patterns.
Design patterns provide a common vocabulary for designers to use to communicate, document, and explore design alternatives.
Design patterns make a system seem less complex by letting you talk about it at a higher level of abstraction than that of a design notation or programming language.
Design patterns raise the level at which you design and discuss design with your colleagues.
Once you've absorbed the design patterns in this book, your design vocabulary will almost certainly change.
You will speak directly in terms of the names of the design patterns.
You'll find yourself saying things like, "Let's use an Observer here," or, "Let's make a Strategy out of these classes."
Knowing the design patterns in this book makes it easier to understand existing systems.
People learning object-oriented programming often complain that the systems they're working with use inheritance in convoluted ways and that it's difficult to follow the flow of control.
In large part this is because they do not understand the design patterns in the system.
Learning these design patterns will help you understand existing object-oriented systems.
These design patterns can also make you a better designer.
If you work with object-oriented systems long enough, you'll probably learn these design patterns on your own.
But reading the book will help you learn them much faster.
Learning these patterns will help a novice act more like an expert.
Moreover, describing a system in terms of the design patterns that it uses will make it a lot easier to understand.
Otherwise, people will have to reverse-engineer the design to unearth the patterns it uses.
Having a common vocabulary means you don't have to describe the whole design pattern; you can just name it and expect your reader to know it.
We use these patterns in our own designs, and we've found them invaluable.
We use them to pick names for classes, to think about and teach good design, and to describe designs in terms of the sequence of design patterns we applied [BJ94]
It's easy to imagine more sophisticated ways of using patterns, such as pattern-based CASE tools or hypertext documents.
But patterns are a big help even without sophisticated tools.
Object-oriented design methods are supposed to promote good design, to teach new designers how to design well, and to standardize the way designs are developed.
A design method typically defines a set of notations (usually graphical) for modeling various aspects of a design, along with a set of rules that govern how and when to use each notation.
Design methods usually describe problems that occur in a design, how to resolve them, and how to evaluate design.
But they haven't been able to capture the experience of expert designers.
We believe our design patterns are an important piece that's been missing from object-oriented design methods.
The design patterns show how to use primitive techniques such as objects, inheritance, and polymorphism.
They show how to parameterize a system with an algorithm, a behavior, a state, or the kind of objects it's supposed to create.
The Applicability, Consequences, and Implementation sections of the design patterns help guide you in the decisions you have to make.
Design patterns are especially useful in turning an analysis model into an implementation model.
Despite many claims that promise a smooth transition from object-oriented analysis to design, in practice the transition is anything but smooth.
A flexible and reusable design will contain objects that aren't in the analysis model.
The programming language and class libraries you use affect the design.
Analysis models often must be redesigned to make them reusable.
Many of the design patterns in the catalog address these issues, which is why we call them design patterns.
A full-fledged design method requires more kinds of patterns than just design patterns.
There can also be analysis patterns, user interface design patterns, or performance-tuning patterns.
But the design patterns are an essential part, one that's been missing until now.
One of the problems in developing reusable software is that it often has to be reorganized or refactored [OJ90]
Design patterns help you determine how to reorganize a design, and they can reduce the amount of refactoring you need to do later.
The prototyping phase is a flurry of activity as the software is brought to life through rapid prototyping and incremental changes, until it meets an initial set of requirements and reaches adolescence.
At this point, the software usually consists of class hierarchies that closely reflect entities in the initial problem domain.
The main kind of reuse is white-box reuse by inheritance.
New requirements usually add new classes and operations and perhaps whole class hierarchies.
The software goes through an expansionary phase to meet new requirements.
Eventually the software will become too inflexible and arthritic for further change.
The class hierarchies will no longer match any problem domain.
To continue to evolve, the software must be reorganized in a process known as refactoring.
Refactoring involves tearing apart classes into special- and general-purpose components, moving operations up or down the class hierarchy, and rationalizing the interfaces of classes.
This consolidation phase produces many new kinds of objects, often by decomposing existing objects and using object composition instead of inheritance.
But good designers are aware of the changes that can prompt refactorings.
Good designers also know class and object structures that can help avoid refactoringsâ€”their designs are robust in the face of requirement changes.
A thorough requirements analysis will highlight those requirements that are likely to change during the life of the software, and a good design will be robust to them.
Our design patterns capture many of the structures that result from refactoring.
Using these patterns early in the life of a design prevents later refactorings.
But even if you don't see how to apply a pattern until after you've built your system, the pattern can still show you how to change it.
Roughly half of the current patterns were in his thesis.
So we summarized the catalog and submitted the summary, which was accepted.
We decided to turn the catalog into a book shortly thereafter.
Our names for the patterns have changed a little along the way.
In fact, noticing that something is a pattern is the easy part.
All four of us are actively working on building object-oriented systems, and we've found that it's easy to spot patterns when you look at enough systems.
If you build systems and then reflect on what you build, you will see patterns in what you do.
But it's hard to describe patterns so that people who don't know them will understand them and realize why they are important.
Experts immediately recognized the value of the catalog in its early stages.
But the only ones who could understand the patterns were those who had already used them.
Since one of the main purposes of the book was to teach object-oriented design to new designers, we knew we had to improve the catalog.
We also started examining the trade-offs and the various ways of implementing the pattern.
Another important change over the past year has been a greater emphasis on the problem that a pattern solves.
It's easiest to see a pattern as a solution, as a technique that can be adapted and reused.
It's harder to see when it is appropriateâ€”to characterize the problems it solves and the context in which it's the best solution.
In general, it's easier to see what someone is doing than to know why, and the "why" for a pattern is the problem it solves.
Knowing the purpose of a pattern is important too, because it helps us choose patterns to apply.
It also helps us understand the design of existing systems.
A pattern author must determine and characterize the problem that the pattern solves, even if you have to do it after you've discovered its solution.
We aren't the only ones interested in writing books that catalog the patterns experts use.
We are a part of a larger community interested in patterns in general and software-related patterns in particular.
Christopher Alexander is the architect who first studied patterns in buildings and communities and developed a "pattern language" for generating them.
So it's fitting and worthwhile to compare our work to his.
There are many ways in which our work is like Alexander's.
Both are based on observing existing systems and looking for patterns in them.
Both have templates for describing patterns (although our templates are quite different)
Both rely on natural language and lots of examples to describe patterns rather than formal languages, and both give rationales for each pattern.
But there are just as many ways in which our works are different:
People have been making buildings for thousands of years, and there are many classic examples to draw upon.
We have been making software systems for a relatively short time, and few are considered classics.
Alexander gives an order in which his patterns should be used; we have not.
When Alexander claims you can design a house simply by applying his patterns one after another, he has goals similar to those of object-oriented design methodologists who give step-by-step rules for design.
Alexander doesn't deny the need for creativity; some of his patterns require understanding the living habits of the people who will use the building, and his belief in the "poetry" of design implies a level of expertise beyond the pattern language itself.1 But his description of how patterns generate designs implies that a pattern language can make the design process deterministic and repeatable.
The Alexandrian point of view has helped us focus on design trade-offsâ€”the different "forces" that help shape a design.
His influence made us work harder to understand the applicability and consequences of our patterns.
It also kept us from worrying about defining a formal representation of patterns.
Although such a representation might make automating patterns possible, at this stage it's more important to explore the space of design patterns than to formalize it.
From Alexander's point of view, the patterns in this book do not form a pattern language.
Given the variety of software systems that people build, it's hard to see how we could provide a "complete" set of patterns, one that offers step-by-step instructions for designing an application.
We can do that for certain classes of applications, such as report-writing or making a forms-entry system.
But our catalog is just a collection of related patterns; we can't pretend it's a pattern language.
In fact, we think it's unlikely that there will ever be a complete pattern language for software.
But it's certainly possible to make one that is more complete.
Design patterns are just a part of a larger pattern language for software.
Our first collective experience in the study of software architecture was at an OOPSLA '91 workshop led by Bruce Anderson.
The workshop was dedicated to developing a handbook for software architects.
This has created a community of people interested in documenting software expertise.
Donald Knuth's The Art of Computer Programming [Knu73] was one of the first attempts to catalog software knowledge, though he focused on describing algorithms.
The knowledge-based software engineering community tries to represent software-related knowledge in general.
There are many other groups with goals at least a little like ours.
The patterns in his book tend to be more C++-specific than our design patterns, and his book contains lots of lower-level patterns as.
But there is some overlap, as we point out in our patterns.
He's currently working on patterns that describe people's roles in software development organizations.
There are a lot of other places in which to find descriptions of patterns.
Kent Beck was one of the first people in the software community to advocate Christopher Alexander's work.
In 1993 he started writing a column in The Smalltalk Report on Smalltalk patterns.
Peter Coad has also been collecting patterns for some time.
His paper on patterns seems to us to contain mostly analysis patterns [Coa92]; we haven't seen his latest patterns, though we know he is still working on them.
We've heard of several books on patterns that are in the works, but we haven't seen any of them, either.
All we can do is let you know they're coming.
One of these books will be from the Pattern Languages of Programs conference.
What can you do if you are interested in patterns? First, use them and look for other patterns that fit the way you design.
A lot of books and articles about patterns will be coming out in the next few years, so there will be plenty of sources for new patterns.
Use it when you talk with other people about your designs.
The design pattern catalog is the result of hard work, not just ours but that of dozens of reviewers who gave us feedback.
If you spot a problem or believe more explanation is needed, contact us.
The same goes for any other catalog of patterns: Give the authors feedback! One of the great things about patterns is that they move design decisions out of the realm of vague intuition.
They let authors be explicit about the trade-offs they make.
This makes it easier to see what is wrong with their patterns and to argue with them.
Third, look for patterns you use, and write them down.
You don't have to be in a research lab to find patterns.
In fact, finding relevant patterns is nearly impossible if you don't have practical experience.
The best designs will use many design patterns that dovetail and intertwine to produce a greater whole.
It is possible to make buildings by stringing together patterns, in a rather loose way.
A building made like this, is an assembly of patterns.
But it is also possible to put patterns together in such a way that many patterns overlap in the same physical space: the building is very dense; it has many meanings captured in a small space; and through this density, it becomes profound.
A class whose primary purpose is to define an interface.
An abstract class defers some or all of its implementation to subclasses.
Given a class A that maintains a reference to an abstract class B, class A is said to be abstractly coupled to B.
We call this abstract coupling because A refers to a type of object, not a concrete object.
An operation that declares a signature but doesn't implement it.
In C++, an abstract operation corresponds to a pure virtual member function.
The subobjects are called the aggregate's parts, and the aggregate is responsible for them.
A class defines this relationship for its instances (e.g., aggregate objects)
Composed objects reveal no internal details to each other and are thus analogous to "black boxes."
It specifies the object's internal representation and defines the operations the object can perform.
A diagram that depicts classes, their internal structure and operations, and the static relationships between them.
An operation targeted to a class and not to an individual object.
In C++, class operations are are called static member functions.
In C++, an operation that is automatically invoked to initialize new instances.
An implementation mechanism in which an object forwards or delegates a request to another object.
The delegate carries out the request on behalf of the original object.
A design pattern systematically names, motivates, and explains a general design that addresses a recurring design problem in object-oriented systems.
It describes the problem, the solution, when to apply the solution, and its consequences.
The solution is a general arrangement of objects and classes that solve the problem.
The solution is customized and implemented to solve the problem in a particular context.
In C++, an operation that is automatically invoked to finalize an object that is about to be deleted.
The run-time association of a request to an object and one of its operations.
The result of hiding a representation and implementation in an object.
The representation is not visible and cannot be accessed directly from outside the object.
Operations are the only way to access and modify an object's representation.
A set of cooperating classes that makes up a reusable design for a specific class of software.
A framework provides architectural guidance by partitioning the design into abstract classes and defining their responsibilities and collaborations.
A developer customizes the framework to a particular application by subclassing and composing instances of framework classes.
In C++, a class that has the same access rights to the operations and data of a class as that class itself.
A relationship that defines one entity in terms of another.
Class inheritance defines a new class in terms of one or more parent classes.
The new class inherits its interface and implementation from its parents.
The new class is called a subclass or (in C++) a derived class.
Interface inheritance defines a new interface in terms of one or more existing interfaces.
Implementation inheritance defines a new implementation in terms of one or more existing implementations.
A piece of data that defines part of an object's representation.
The set of all signatures defined by an object's operations.
The interface describes the set of requests to which an object can respond.
A class designed to be combined with other classes through inheritance.
A run-time entity that packages both data and the procedures that operate on that data.
An object's data can be manipulated only by its operations.
An object performs an operation when it receives a request.
The unspecified types are supplied as parameters at the point of use.
Synonyms are superclass (Smalltalk), base class (C++), and ancestor class.
The ability to substitute objects of matching interface for one another at run-time.
Extends the concept of an interface to include the allowable sequences of requests.
An object performs an operation when it receives a corresponding request from another object.
An independent group of classes that collaborate to fulfill a set of responsibilities.
A type is a subtype of another if its interface contains the interface of the other type.
A collection of classes that provides useful functionality but does not define the design of an application.
A subclass reuses the interface and implementation of its parent class, but it may have access to otherwise private aspects of its parent.
We use diagrams throughout the book to illustrate important ideas.
Some diagrams are informal, like a screen shot of a dialog box or a schematic showing a tree of objects.
But the design patterns in particular use more formal notations to denote relationships and interactions between classes and objects.
A class diagram depicts classes, their structure, and the static relationships between them.
An object diagram depicts a particular object structure at run-time.
An interaction diagram shows the flow of requests between objects.
The other notations are used as needed to supplement the discussion.
These notations are summarized on the inside back cover of the book.
Figure B.1a shows the OMT notation for abstract and concrete classes.
A class is denoted by a box with the class name in bold type at the top.
The key operations of the class appear below the class name.
Type information is optional; we use the C++ convention, which puts the type name before the name of the operation (to signify the return type), instance variable, or actual parameter.
Slanted type indicates that the class or operation is abstract.
In some design patterns it's helpful to see where client classes reference Participant classes.
When a pattern includes a Client class as one of its participants (meaning the client has a responsibility in the pattern), the Client appears as an ordinary class.
When the pattern does not include a Client participant (i.e., clients have no responsibilities in the pattern), but including it nevertheless clarifies.
A gray Client also makes it clear that we haven't accidentally omitted the Client from the Participants discussion.
The OMT notation for class inheritance is a triangle connecting a subclass (LineShape in the figure) to its parent class (Shape)
An object reference representing a part-of or aggregation relationship is indicated by an arrowheaded line with a diamond at the base.
The arrow points to the class that is aggregated (e.g., Shape)
An arrowheaded line without the diamond denotes acquaintance (e.g., a LineShape keeps a reference to a Color object, which other shapes may share)
A name for the reference may appear near the base to distinguish it from other references.2
Another useful thing to show is which classes instantiate which others.
We use a dashed arrowheaded line to indicate this, since OMT doesn't support it.
Figure B.1c shows that Drawing aggregates multiple objects of type Shape.
Finally, we've augmented OMT with pseudocode annotations to let us sketch the implementations of operations.
Figure B.1d shows the pseudocode annotation for the Draw operation on the Drawing class.
It provides a snapshot of the objects in a design pattern.
The objects are named "aSomething", where Something is the class of the object.
Our symbol for an object (modified slightly from standard OMT) is a rounded box with a line separating the object name from any object references.
An interaction diagram shows the order in which requests between objects get executed.
Figure B.3 is an interaction diagram that shows how a shape gets added to a drawing.
Time flows from top to bottom in an interaction diagram.
A solid vertical line indicates the lifetime of a particular object.
The naming convention for objects is the same as for object diagramsâ€”the class name prefixed by the letter "a" (e.g., aShape)
If the object doesn't get instantiated until after the beginning of time as recorded in the diagram, then its vertical line appears dashed until the point of creation.
A vertical rectangle shows that an object is active; that is, it is handling a request.
The operation can send requests to other objects; these are.
The name of the request is shown above the arrow.
A request to create an object is shown with a dashed arrowheaded line.
A request to the sending object itself points back to the sender.
Figure B.3 shows that the first request is from aCreationTool to create aLineShape.
Later, aLineShape is Added to aDrawing, which prompts aDrawing to send a Refresh request to itself.
Note that aDrawing sends a Draw request to aLineShape as part of the Refresh operation.
We use "object diagram" exclusively to refer to diagrams of object structures.
Although associations are appropriate during analysis, we feel they're too high-level for expressing the relationships in design patterns, simply because associations must be mapped down to object references or pointers during design.
Object references are intrinsically directed and are therefore better suited to the relationships that concern us.
For example, Drawing knows about Shapes, but the Shapes don't know about the Drawing they're in.
This appendix documents the foundation classes we use in the C++ sample code of several design patterns.
Iterator, the interface for accessing an aggregate's objects in a.
Some newer C++ standard types may not be available on all compilers.
In particular, if your compiler doesn't define bool, then define it manually as.
The List class template provides a basic container for storing an ordered list of objects.
List stores elements by value, which means it works for built-in types as well as class instances.
But most of the patterns use List to store pointers to objects, as in List.
For convenience, List also provides synonyms for stack operations, which make code that uses List for stacks more explicit without defining another class.
The size parameter is a hint for the initial number of elements.
List(List&) overrides the default copy constructor so that member data are initialized properly.
List() frees the list's internal data structures but not the elements in the list.
The class is not designed for subclassing; therefore the destructor isn't virtual.
Item& Get(long index) const returns the object at the given index.
Item& First() const returns the first object in the list.
Item& Last() const returns the last object in the list.
This operation requires that the type of elements in the list supports the == operator for comparison.
Item& Top() const returns the top element (when the List is viewed as a stack)
Iterator is an abstract class that defines a traversal interface for aggregates.
Its constructor takes a list to traverse as an argument.
Point represents a point in a two-dimensional Cartesian coordinate space.
A Rect is defined by an origin point and an extent (that is, width and height)
The ET++SwapsManager: Using object technology in the financial engineering domain.
A cookbook for using the model-view controller user interface paradigm in Smalltalk-80
Using prototypical objects to implement shared behavior in object-oriented systems.
Refactoring: An aid in designing application frameworks and evolving object-oriented systems.
The life of an object model: How the object model changes during development.
The Service Configurator Framework: An extensible architecture for dynamically configuring concurrent, multi-service network daemons.
Names of design patterns appear in small capitals: e.g., ADAPTER.
Page numbers in bold indicate the definition of a term.
Letters after a diagram's page number indicate the kind of diagram: a "c" denotes a class diagram, an "i" denotes an interaction diagram, and an "o" denotes an object diagram.
