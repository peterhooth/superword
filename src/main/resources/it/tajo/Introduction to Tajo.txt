Tajo is designed for low-latency and scalable ETL and ad-hoc queries on large-data sets by leveraging advanced database techniques.
Tajo has its own query engine and uses HDFS as a primary storage layer.
An alternative choice to Hive/Pig on the top of MapReduce.
A dedicated server for providing client service and coordinating QueryMasters.
For each query , one QueryMaster and many task runners work together.
TaskRunner includes a local query engine that executes a directed acyclic graph (DAG) of physical operators.
Tajo employs  Hadoop Yarn as a resource manager for large clusters.
Logical Plan – A representation of relational algebra – Implemented in a graph of java objects – (de) serialized in a JSON document via GSON.
Physical Execution Plan – A directed acyclic graph of physical operators.
Execution Block – A subquery executed across a number of cluster nodes.
Distributed Query Execution Plan (DQEP) – A directed acyclic graph of execution blocks.
It provides a client service that enables users to submit to queries and  to ask catalog information.
Supports some statistics (min, max value, num of rows, and bytes)
Also, It monitors running tasks, collects the statistics, reports them to TajoMaster.
It contains a local query engine that actually executes tasks.
According to the workload of the execution block, different resources.
In TaskRunner, a physical execution plan is completed according to the container’s resource or the size of input data.
It allows a TaskRunner to choose more efficient execution plans and to maximize the utilization of hardware capacity.
The data flow is the pull-based iterator model like traditional rowstore database.
For each tuple, the root node calls “next()” on its children, who call “next” on their child recursively.
We already implemented various row-based physical operators: – Block nested Loop Join – Hash join – Merge join – External sort – In-memory sort – Selection – Projection – Sort aggregation – Hash aggregation.
Provide split methods that divide an input data set into a number of fragments (similar to splits)
Provide Scanner and Appender interfaces – Specialized to structured data.
If you can model unstructured data to structured data, the.
Currently, it provides various row/columnar store file formats, such as CSVFile, RowFile, RCFile, and Trevni (still unstable)
In distributed query execution, data repartition (like shuffle of MapReduce) is very important.
Finally, the multiple and ordered output files are written to HDFS.
According to the sort order of input table or consecutive operations, we can use different repartition methods.
Usually, it requires two phases, but various aggregation algorithms can be mixed.
It supports existing various join strategies used in shared-nothing databases (or Hive)
It also requires two phases and can mix various join algorithms.
Hash Join (or Merge Join if range repartition is performed)
In addition, we provide a new join strategy if the larger table is sorted on a join key.
Assign the range partitions to nodes whose large table partitions correspond to the join key range.
We carried out the experiments in comparison with Hive on the top of MapReduce.
During query processing, the optimizer will try to reoptimize the remain parts of the determined query plan.
Enable users to get estimates of an aggregate query in an online fashion as soon as the query is issued.
Tajo outperforms Hive about 2-3 times, and is comparable to Cloudera Impala.
