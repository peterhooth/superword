OpenStack is an open source cloud computing platform for public and private clouds.
A series of interrelated projects deliver a cloud infrastructure solution.
This guide shows OpenStack end users how to create and manage resources in an OpenStack cloud with the OpenStack dashboard and OpenStack client commands.
Except where otherwise noted, this document is licensed under Creative Commons Attribution 3.0 License.
How can I use an OpenStack cloud? As an OpenStack cloud end user, you can provision your own resources within the limits set by administrators.
The examples in this guide show you how to complete these tasks with either:
Use this Web-based graphical interface, code named horizon, to view, create, and manage resources.
Each core OpenStack project has a command-line client that lets you run simple commands to view, create, and manage resources in a cloud and automate tasks by using scripts.
You can modify these examples for your specific use cases.
In addition to these ways of interacting with a cloud, you can access the OpenStack APIs directly or indirectly through cURL commands or open SDKs.
You can automate access or build tools to manage resources and services by using the native OpenStack APIs or the EC2 compatibility API.
To use the OpenStack APIs, it helps to be familiar with HTTP/1.1, RESTful web services, the OpenStack services, and JSON or XML data serialization formats.
Document change history This version of the guide replaces and obsoletes all previous versions.
As a cloud end user, you can use the OpenStack dashboard to provision your own resources within the limits set by administrators.
You can modify these examples to create other types and sizes of server instances.
Log in to the dashboard The dashboard is available on the node with the nova-dashboard server role.
Ask the cloud operator for the host name or public IP address from which you can access the dashboard, and your user name and password.
In the address bar, type the host name or IP address for the dashboard:
If a certificate warning appears when you try to access the URL for the first time, a self-signed certificate is in use, which is not considered trustworthy by default.
Verify the certificate or add an exception in the browser to bypass the warning.
On the Log In page, enter your user name and password, and click Sign In.
You can also access Settings or sign out of the dashboard.
The visible tabs and functions in the dashboard depend on the access permissions, or roles, of the user you are logged in as.
If you are logged in as an end user, the main screen shows the Project tab.
If you are logged in as an administrator, the main screen shows the Project tab and Admin tab.
OpenStack dashboard—Project tab Select a project from the CURRENT PROJECT drop-down list on the left side to view and manage resources in that project.
The Project tab displays the details of the selected project.
Instances View, launch, create a snapshot from, stop, pause, or reboot instances, or connect to them through VNC.
Images & Snapshots View images, instance snapshots, and volume snapshots created project users, plus any images that are publicly available.
Create, edit, and delete images, and launch instances from images and snapshots.
Access & Security Use the following tabs to complete these tasks:
Stacks Use REST API to orchestrate multiple composite cloud applications.
OpenStack dashboard—Admin tab Enables administrative users to view usage and manage instances, volumes, flavors, images, projects, users, services, and quotas.
Resource Usage Use the following tabs to view the following usages:
Instances View, pause, resume, suspend, migrate, soft or hard reboot, and delete running instances that belong to users of some, but not all, projects.
Also, view the log for an instance or access an instance through VNC.
Volumes View, create, edit, and delete volumes and volume types.
Flavors View, create, edit, view extra specs for, and delete flavors.
Images View, create, edit properties for, and delete custom images.
Quotas are hard-coded in OpenStack Compute and define the maximum allowable size and number of resources.
System Info Use the following tabs to view the service info:
Projects View, create, assign users to, remove users from, and delete projects.
Create and manage images The cloud operator assigns roles to users, which determines who can upload and manage images.
Image upload and management might be restricted to only cloud administrators or cloud operators.
If you have admin privileges, you can create and manage images in the admin project.
You can also use the glance and nova clients or the Image Service and Compute APIs to manage images.
Choose the admin project from the CURRENT PROJECT drop-down list.
On the Project tab, click the Images & Snapshots category.
In the Create An Image window, enter or select the following values:
Image File Alternatively, browse to find the file on your machine.
Public Select this option to make the image public to all users.
Protected Select this option to ensure that only users with permissions can delete it.
It might take some time before the status changes from queued to active.
Choose the admin project from the CURRENT PROJECT drop-down list.
On the Project tab, click the Images & Snapshots category.
Choose the admin project from the CURRENT PROJECT drop-down list.
On the Project tab, click the Images & Snapshots category.
Configure access and security for instances Before you launch a virtual machine, you can add security group rules to enable users to ping and SSH to the instances.
To do so, you either add rules to the default security group or add a security group with rules.
Keypairs are SSH credentials that are injected into images when they are launched.
For this to work, the image must contain the cloud-init package.
For information, see the section called “Add a keypair” [8]
If you have generated a keypair with an external tool, you can import it into OpenStack.
The keypair can be used for multiple instances that belong to a project.
For information, see the section called “Import a keypair” [9]
Log in to the dashboard, choose a project, and click the Access & Security category.
The dashboard shows the security groups that are available for this project.
To accept requests from a particular range of IP addresses, specify the IP address block in the CIDR box.
The ssh port 22 is now open for requests from any IP address.
Add a keypair Create at least one keypair for each project.
Log in to the dashboard, choose a project, and click the Access & Security category.
The Keypairs tab shows the keypairs that are available for this project.
Log in to the dashboard, choose a project, and click the Access & Security category.
The Keypairs tab shows the keypairs that are available for this project.
In the Import Keypair window, enter the name of your keypair.
To change its permissions so that only you can read and write to the file, run the following command:
To make the keypair known to SSH, run the ssh-add command:
The Compute database registers the public key of the keypair.
The dashboard lists the keypair in the Access & Security category.
Launch and manage instances Instances are virtual machines that run inside the cloud.
The OpenStack Image Service provides a pool of images that are accessible to members of different projects.
You can also launch an instance from an image that you have copied to a persistent volume.
The instance boots from the volume, which is provided by nova-volume through iSCSI.
When you launch an instance from a volume, especially note the following steps:
To select from which volume to boot, launch an instance from an arbitrary image.
It is replaced by the image on the volume that you choose in the next steps.
To boot a Xen image from a volume, the image you launch in must be the same type, fully virtualized or paravirtualized, as the one on the volume.
Select the volume or volume snapshot from which to boot.
Launch an instance from an image When you launch an instance from an image, OpenStack creates a local copy of the image on the Compute node where the instance starts.
Log in to the dashboard, choose a project, and click the Images & Snapshot category.
The dashboard shows the images that have been uploaded to OpenStack Image Service and are available for this project.
Instance Name The name to assign to the virtual machine.
In case an image uses a static root password or a static key set (neither is recommended), you do not need to provide a keypair to launch the instance.
Security Groups Activate the security groups that you want to assign to the instance.
Security groups are a kind of cloud firewall that define which incoming network traffic is forwarded to instances.
For details, see the section called “Add rules to the default security group” [8]
If you have not created any security groups, you can assign only the default security group to the instance.
Volume Options Not applicable when you launch an instance from an image.
To launch from a volume or volume snapshot, select the appropriate option in the Volume Options drop-down list.
For information about how to create a bootable volume, see the section called “Launch an instance from a volume” [12]
Customization Script A customization script that runs after your instance launches.
The instance starts on a Compute node in the cloud.
The Instances category shows the instance name, its private and public IP addresses, size, status, task, and power state.
If you did not provide a keypair, security groups, or rules so far, users can only access the instance from inside the cloud through VNC.
To access the instance through a VNC console, see the section called “Get a console to access an instance” [51]
Launch an instance from a volume You can launch an instance directly from an image that has been copied to a persistent volume.
Create a volume that is large enough to store an unzipped image.
Assuming that the attached volume is mounted as /dev/vdb, use one of the following commands to copy the image to the attached volume:
Because only detached volumes are available for booting, detach the volume.
Now, you can launch an instance from an image that has been copied to the volume.
The instance is booted from the volume, which is provided by nova-volume through iSCSI.
To launch an instance from the volume, see the section called “Launch an instance from an image” [11]
The username is ubuntu for the Ubuntu cloud images on TryStack.
Use the SSH command to make a secure connection to the instance.
Track usage for instances You can track usage for instances for each tenant, also known as a project.
You can track costs per month by showing metrics like number of VCPUs, disks, RAM, and uptime for all your instances.
Log in to the dashboard, choose a project, and click the Overview category.
To query the instance usage for a month, select a month and click Submit.
Log in to the dashboard, choose a project, and click the Instances category.
To launch an instance from the snapshot, select the snapshot and click Launch.
Proceed with the section called “Launch an instance from an image” [11]
Log in to the dashboard, choose a project, and click the Instances category.
In the More drop-down list in the Actions column, select the state.
You can also choose to view the instance console log.
Depending on the current state of the instance, you can choose to pause, resume, suspend, soft or hard reboot, or terminate an instance.
Log in to the dashboard, choose a project, and click the Networks category.
You do not have to initially specify a subnet (although this will result in the status of 'error' for any attached instance)
Disable Gateway Check this option to disable gateway IP address.
Manage volumes Volumes are block storage devices that you attach to instances to enable persistent storage.
You can attach a volume to a running instance or detach a volume and attach it to another instance at any time.
You can also create a snapshot from or delete a volume.
Log in to the dashboard, choose a project, and click the Volumes category.
In the window that opens, enter a name, an optional description, and the size in GBs for the volume.
Attach volumes to instances After you create one or more volumes, you can attach them to instances.
Log in to the dashboard, choose a project, and click the Volumes category.
Select the volume to add to an instance and click Edit Attachments.
Enter the name of the device from where the volume should be accessible on the virtual machine.
The actual device name might differ due to hypervisor settings.
The dashboard shows the instance to which the volume is now attached and the device name.
You can attach a volume to one instance at a time.
View the status of a volume in the Instances & Volumes category of the dashboard.
Now you can log in to the instance and mount, format, and use the disk.
Log in to the dashboard, choose a project, and click the Volumes category.
In the window that opens, enter a snapshot name and a description.
The dashboard shows the new volume snapshot in the Images & Snapshots category.
Delete volumes When you delete an instance, the data of its attached volumes is not destroyed.
Log in to the dashboard, choose a project, and click the Volumes category.
Activate the check boxes in front of the volumes that you want to delete.
Click Delete Volumes and confirm your choice in the pop-up that appears.
The purpose of Heat is to provide a template based orchestration for describing a cloud application by executing appropriate OpenStack API calls to generate running cloud applications, integrate other core components of OpenStack into a one-file template system.
The templates allow creation of most OpenStack resource types such as instances, floating ips, volumes, security groups, users, etc.
Enter the URL, browse to the file location, or directly include the template based on your previous selection.
Rollback On Failure Check this option if you want Heat to rollback on failure.
After the stack is created, click on the stack name to see these details:
Overview You can use the OpenStack command-line clients to run simple commands that make API calls.
You can run these commands from the command line or in scripts to automate tasks.
As long as you provide OpenStack credentials, you can run these commands on any machine.
Internally, each client command runs cURL commands that embed API requests.
The OpenStack APIs are RESTful APIs that use the HTTP protocol, including methods, URIs, media types, and response codes.
These open-source Python clients run on Linux or Mac OS X systems and are easy to learn and use.
On some client commands, you can specify a debug parameter to show the underlying API request for the command.
This is a good way to become familiar with the OpenStack API calls.
These command-line clients are available for the respective services' APIs:
Client for the Telemetry API that lets you create and collect measurements across OpenStack.
Client for the Block Storage Service API that lets you create and manage volumes.
Client for the Image Service API that lets you create and manage images.
Client for the Orchestration API that lets you launch stacks from templates, view details of running stacks including events and resources, and update and delete stacks.
Client for the Identity Service API that lets you create and manage users, tenants, roles, endpoints, and credentials.
Client for the Networking API that lets you configure networks for guest servers.
Client for the Object Storage API that lets you gather statistics, list items, update metadata, upload, download and delete files stored by the Object Storage service.
Provides access to a swift installation for ad hoc processing.
Install the OpenStack command-line clients Install the prerequisite software and the Python package for each OpenStack client.
For each command, replace PROJECT with the lower case name of the client to install, such as nova.
Many Linux distributions provide packages to make setuptools easy to install.
Search your package manager for setuptools to find an installation package.
If you cannot find one, download the setuptools package directly from http://pypi.python.org/pypi/setuptools.
The recommended way to install setuptools on Microsoft Windows is to follow the documentation provided on the setuptools website.
It is easy to use, ensures that you get the latest version of the clients from the Python Package Index, and lets you update or remove the packages later on.
Alternatively, install pip and use it to manage client installation:
Alternatively, install pip and use it to manage client installation:
It is easy and ensures that you get the latest version of the client from the Python Package Index.
After you install the clients, you must source an openrc.sh file to set required environment variables before you can request OpenStack services through the clients or the APIs.
Where PROJECT is the project name and has one of the following values:
For example, to install the nova client, run this command:
To upgrade a package, add the --upgrade option to the pip command.
Before you can run client commands, you must create and source the openrc.sh file to set environment variables.
Get the version for a client After you install an OpenStack client, you can get its version number.
Run the following command get the version number for a client:
For example, to see the version of the nova client, run the following command:
To see the version of the keystone client, run the following command:
The OpenStack RC file To set the required environment variables for the OpenStack command-line clients, you must create an environment file.
If your OpenStack installation provides it, you can download the file from the OpenStack dashboard as an administrative user or any other user.
This project-specific environment file contains the credentials that all OpenStack services use.
When you source the file, environment variables are set for your current shell.
The variables enable the OpenStack client commands to communicate with the OpenStack services that run in the cloud.
Defining environment variables using an environment file is not a common practice on Microsoft Windows.
Environment variables are usually defined in the Advanced tab of the System Properties dialog.
Copy the openrc.sh file to the machine from where you want to run OpenStack commands.
For example, copy the file to the machine from where you want to upload an image with a glance client command.
On any shell from where you want to run OpenStack commands, source the openrc.sh file for the respective project.
In this example, you source the demo-openrc.sh file for the demo project:
When you are prompted for an OpenStack password, enter the password for the user who downloaded the openrc.sh file.
Create and source the OpenStack RC file Alternatively, you can create the openrc.sh file from scratch.
On any shell from where you want to run OpenStack commands, source the openrc.sh file for the respective project:
You are not prompted for the password with this method.
The password lives in clear text format in the openrc.sh file.
Restrict the permissions on this file to avoid security problems.
You can also remove the OS_PASSWORD variable from the file, and use the --password parameter with OpenStack client commands.
Override environment variable values When you run OpenStack client commands, you can override some environment variable settings by using the options that are listed at the end of the nova help output.
For example, you can override the OS_PASSWORD setting in the openrc.sh file by specifying a password on a nova command, as follows:
The operator might restrict image upload and management to only cloud administrators or operators.
You can upload images through the glance client or the Image Service API.
You can also use the nova client to list images, set, and delete image metadata, delete images, and take a snapshot of a running instance to create an image.
You can use grep to filter the list, as follows:
After you restart the Image Service, you can use the following syntax to view the image's location information:
Alternatively, you can pass images to the client through stdin.
For the sake of optimal performance, it will default to using virtio for both disk and VIF (NIC) models.
The downside of this approach is that it is not possible to run operating systems that lack virtio drivers, for example, BSD, Solaris, old Linux, and old Windows.
The valid model values depend on the libvirt_type setting, as shown in the following tables:
Create image (nova) You can use the nova client to list images, set and delete image metadata, delete images, and take a snapshot of a running instance to create an image.
The safest approach is to shut down the instance before you take a snapshot.
You cannot create a snapshot from an instance that has an attached volume.
Detach the volume, create the image, and re-mount the volume.
To create the image, list instances to get the server ID:
The command creates a qemu snapshot and automatically uploads the image to your repository.
Only the tenant that creates the image has access to it.
Only the tenant who creates the image has access to it.
You cannot create a snapshot from an instance that has an attached volume.
Make sure the version of qemu you are using is version 0.14 or greater.
Older versions of qemu result in an "unknown option -s" error message in the nova-compute.log.
Configure access and security for instances When you launch a virtual machine, you can inject a keypair, which provides SSH access to your instance.
For this to work, the image must contain the cloud-init package.
If you generate a keypair with an external tool, you can import it into OpenStack.
You can use the keypair for multiple instances that belong to that project.
In case an image uses a static root password or a static key set – neither is recommended – you must not provide a keypair when you launch the instance.
A security group is a named collection of network access rules that you use to limit the types of traffic that have access to instances.
When you launch an instance, you can assign one or more security groups to it.
If you do not create security groups, new instances are automatically assigned to the default security group, unless you explicitly specify a different security group.
The associated rules in each security group control the traffic to instances in the group.
Any incoming traffic that is not matched by a rule is denied access by default.
You can add rules to or remove rules from a security group.
You can modify rules for the default and any other security group.
You must modify the rules for the default security group because users cannot access instances that use the default group from any IP address outside the cloud.
You can modify the rules in a security group to allow access to instances through different ports and protocols.
For example, you can modify rules to allow access to instances through SSH, to ping them, or to allow UDP traffic – for example, for a DNS server running on an instance.
Enable traffic to instances from either IP addresses inside the cloud from other group members or from all IP addresses.
To open a single port only, enter the same value twice.
Rules are automatically enforced as soon as you create or modify them.
You can also assign a floating IP address to a running instance to make it accessible from outside the cloud.
You assign a floating IP address to an instance and attach a block storage device, or volume, for persistent storage.
Add a keypair You can generate a keypair or upload an existing public key.
To set the permissions of the MY_KEY.pem file, run the following command:
The command changes the permissions of the MY_KEY.pem file so that only you can read and write to it.
If you have already generated a keypair with the public key located at ~/.ssh/
The command registers the public key at the Nova database and names the keypair KEY_NAME.
List keypairs to make sure that the uploaded keypair appears in the list:
To create a security group with a specified name and description, enter the following command:
Note You cannot delete the default security group for a project.
Also, you cannot delete a security group that is assigned to a running instance.
Create and manage security group rules Modify security group rules with the nova secgroup-*-rule commands.
To allow SSH access to the instances, choose one of the following sub-steps:
Either from all IP addresses (specified as IP subnet in CIDR notation as 0.0.0.0/0):
Alternatively, you can allow only IP addresses from other security groups (source groups) to access the specified port:
To allow pinging the instances, choose one of the following sub-steps:
Specify all IP addresses as IP subnet in CIDR notation: 0.0.0.0/0
This command allows access to all codes and all types of ICMP traffic, respectively:
To allow only members of other security groups (source groups) to ping instances:
To allow access through a UDP port, such as allowing access to a DNS server that runs on a VM, complete one of the following sub-steps:
To allow UDP access from IPs, specify all IP addresses as IP subnet in CIDR notation: 0.0.0.0/0
To allow only IP addresses from other security groups (source groups) to access the specified port:
To delete a security group rule, specify the same arguments that you used to create the rule.
Launch instances Instances are virtual machines that run inside the cloud.
Before you can launch an instance, gather the following parameters:
Alternatively, you can boot from a volume, which is block storage, to which you've copied an image or snapshot.
The flavor for your instance, which defines the compute, memory, and storage capacity of nova computing instances.
A flavor is an available hardware configuration for a server.
It defines the "size" of a virtual server that can be launched.
User Data is a special key in the metadata service that holds a file that cloud-aware applications in the guest instance can access.
Access and security credentials, which include one or both of the following credentials:
A keypair for your instance, which are SSH credentials that are injected into images when they are launched.
For this to work, the image must contain the cloud-init package.
If you already have generated a keypair with an external tool, you can import it into OpenStack.
You can use the keypair for multiple instances that belong to that project.
A security group, which defines which incoming network traffic is forwarded to instances.
Security groups hold a set of firewall policies, known as security group rules.
If needed, you can assign a floating (public) IP address to a running instance and attach a block storage device, or volume, for persistent storage.
After you gather the parameters you need to launch an instance, you can launch it from an image or a volume.
You can launch an instance directly from one of the available OpenStack images or from an image that you have copied to a persistent volume.
The OpenStack Image Service provides a pool of images that are accessible to members of different projects.
Note the ID of the flavor that you want to use for your instance.
You can also filter the image list by using grep to find a specific image, like this:
Note the ID of the image that you want to boot your instance from.
If you are an admin user, specify the --all-tenants parameter to list groups for all tenants.
If you have not created any security groups, you can assign the instance to only the default security group.
You can also list rules for a specified security group:
Note the name of the keypair that you use for SSH access.
Optionally, you can provide a key name for access control and security group for security.
For example you can add a description for your server by providing the --meta description="My Server" parameter.
You can pass user data in a local file at instance launch by using the flag --userdata USER-DATA-FILE parameter.
Depending on the parameters that you provide, the command returns a list of server properties.
A status of BUILD indicates that the instance has started, but is not yet online.
A status of ACTIVE indicates that the instance is active.
If the status for the instance is ACTIVE, the instance is online.
To view the available options for the nova list command, run the following command:
If you did not provide a keypair, security groups, or rules, you can only access the instance from inside the cloud through VNC.
Launch an instance from a volume After you create a bootable volume, you can launch an instance from that volume.
Optionally, to configure your volume, see the OpenStack Configuration Reference.
For a list of images to choose from to create a bootable volume, run this command:
To create a bootable volume from an image, include the image ID in the command:
Copy the value in the ID field for your volume.
A device name where the volume is attached in the system at /dev/dev_name.
The ID of the volume to boot from, as shown in the output of nova volume-list.
Either snap or any other value, including a blank string.
It is safe to leave this blank and have the Compute service infer the size.
Indicates whether the volume is deleted when the instance is deleted.
You must specify an image when booting from a volume, even though the specified image is not used.
Otherwise, the Attempt to boot from volume - no image supplied error is returned.
You can also attach a swap disk on boot with the --swap flag, or you can attach an ephemeral disk on boot with the --ephemeral flag.
For example, you might enter the following command to boot from a volume.
The volume is not deleted when the instance is terminated:
Now when you list volumes, the volume is attached to a server:
Manage instances and hosts Instances are virtual machines that run inside the cloud.
Manage IP addresses Each instance can have a private, or fixed, IP address and a public, or floating, one.
Private IP addresses are used for communication between instances, and public ones are used for communication with the outside world.
When you launch an instance, it is automatically assigned a private IP address that stays the same until you explicitly terminate the instance.
Rebooting an instance has no effect on the private IP address.
A pool of floating IPs, configured by the cloud operator, is available in OpenStack Compute.
You can allocate a certain number of these to a project: The maximum number of floating IP addresses per project is defined by the quota.
You can add a floating IP address from this set to an instance of the project.
Floating IP addresses can be dynamically disassociated and associated with other instances of the same project at any time.
Before you can assign a floating IP address to an instance, you first must allocate floating IPs to a project.
After floating IP addresses have been allocated to the current project, you can assign them to running instances.
You can assign a floating IP address to one instance at a time.
Assign floating IP addresses You can assign floating IP addresses to a project or an instance.
If more than one IP address pool is available, you can specify the pool from which to allocate the IP address.
To release a floating IP address from the current project:
The IP address is returned to the pool of IP addresses that are available for all projects.
If an IP address is assigned to a running instance, it is disassociated from the instance.
To associate an IP address with an instance, at least one floating IP address must be allocated to the current project.
After you assign the IP address and configure security group rules for the instance, the instance is publicly available at the floating IP address.
To remove a floating IP address from an instance, specify the same arguments that you used to assign the IP address:
Change the size of your server You change the size of a server by changing its flavor.
To resize the server, pass the server ID and the desired flavor to the nova resize command.
If the resize fails or does not work as expected, you can revert the resize:
Stop and start an instance Use one of the following methods to stop and start an instance.
This command stores the state of the VM in RAM.
A paused instance continues to run in a frozen state.
Administrative users might want to suspend an infrequently used instance or to perform system maintenance.
When you suspend an instance, its VM state is stored on disk, all memory is written to disk, and the virtual machine is stopped.
Suspending an instance is similar to placing a device in hibernation; memory and vCPUs become available.
To initiate a hypervisor-level suspend operation, run the following command:
Reboot an instance You can soft or hard reboot a running instance.
A soft reboot attempts a graceful shut down and restart of the instance.
By default, when you reboot a server, it is a soft reboot.
To perform a hard reboot, pass the --hard parameter, as follows:
Delete an instance When you no longer need an instance, you can delete it.
Use the following command to delete the newServer instance, which is in ERROR state:
The command does not notify that your server was deleted.
To get a VNC console to access an instance, run the following command:
The command returns a URL from which you can access your instance:
To get a non-VNC console, specify the novnc parameter instead of the xvpvnc parameter.
Manage bare metal nodes The bare metal driver for OpenStack Compute manages provisioning of physical hardware using common cloud APIs and tools such as Orchestration (Heat)
The use case for this driver is for single tenant clouds such as a high-performance computing cluster or deploying OpenStack itself.
Development efforts are focused on moving the driver out of the Compute code base in the Icehouse release.
If you use the bare metal driver, you must create and add a network interface to a bare metal node.
Then, you can launch an instance from a bare metal image.
When you delete a node, any associated network interfaces are removed.
You can list and remove network interfaces that are associated with a bare metal node.
When a node is in use, its status includes the UUID of the instance that runs on it:
Separate the zone from the host name with a comma.
Show usage statistics for hosts and instances You can show basic statistics on resource usage for hosts and instances.
For more sophisticated monitoring, see the Ceilometer project, which is under development.
You can also use tools, such as Ganglia or Graphite, to gather more detailed data.
List the hosts and the nova-related services that run on them:
Get a summary of resource usage of all of the instances running on the host.
The cpu column shows the sum of the virtual CPUs for instances running on the host.
The memory_mb column shows the sum of the memory (in MB) allocated to the instances that run on the hosts.
The disk_gb column shows the sum of the root and ephemeral disk sizes (in GB) of the instances that run on the hosts.
The used_now row shows the sum of the resources allocated to the instances that run on the host plus the resources allocated to the virtual machine of the host itself.
The used_max row shows the sum of the resources allocated to the instances that run on the host.
These values are computed by using only information about the flavors of the instances that run on the hosts.
This command does not query the CPU usage, memory usage, or hard disk usage of the physical host.
Get CPU, memory, I/O, and network statistics for an instance.
Provide user data to instances User data is a special key in the metadata service that holds a file that cloud-aware applications in the guest instance can access.
For example the cloudinit system is a Ubuntu open source package that handles early initialization of a cloud instance and that makes use of user data.
You can place user data in a local file and pass it through the --user-data <userdata-file> parameter at instance creation:
Store metadata on a configuration drive You can configure OpenStack to write metadata to a special configuration drive that attaches to the instance when it boots.
The instance can mount this drive and read files from it to get information that is normally available through the metadata service.
One use case for the configuration drive is to pass a networking configuration when you do not use DHCP to assign IP addresses to instances.
For example, you might pass the IP configuration for the instance through the configuration drive, which the instance can mount and access before the you configure the network settings for the instance.
Any modern guest operating system that is capable of mounting an ISO9660 or VFAT file system can use the configuration drive.
The following hypervisors support the configuration drive: libvirt, xenserver, hyper-v, and vmware.
To use configuration drive with libvirt, xenserver, or vmware, you must first install the genisoimage package on each Compute host.
Use the mkisofs_cmd flag to set the path where you install the genisoimage program.
If genisoimage is in same path as the nova-compute service, you do not need to set this flag.
To use configuration drive with hyper-v, you must set the mkisofs_cmd value to the full path to an mkisofs.exe installation.
Additionally, you must set the qemu_img_cmd value in the hyperv configuration section to the full path to an qemu-img command installation.
An image built with a recent version of the cloud-init package can automatically access metadata passed through the configuration drive.
The cloud-init package version 0.7.1 works with Ubuntu and Fedora-based images, such as RHEL.
If an image does not have the cloud-init package installed, you must customize the image to run a script that mounts the configuration drive on boot, reads the data from the drive, and takes appropriate action such as adding the public key to an account.
See the section called “Configuration drive contents” [60] for details on how data is organized on the configuration drive.
Do not rely on the presence of the EC2 metadata present in the configuration drive, as this content might be removed in a future release.
For example, do not rely on files in the ec2 directory.
When you create images that access configuration drive data and multiple directories are under the openstack directory, always select the highest API version by date that your consumer supports.
This example enables the configuration drive and passes user data, two files, and two key/value metadata pairs, all of which are accessible from the configuration drive:
You can also configure the Compute service to always create a configuration drive.
Make sure that you use at least version 0.3.1 of CirrOS for configuration drive support.
If your guest operating system does not use udev, the /dev/disk/by-label directory is not present.
You can use the blkid command to identify the block device that corresponds to the configuration drive.
For example, when you boot the CirrOS image with the m1.tiny flavor, the device is /dev/vdb:
In this example, the contents of the configuration drive are:
The files that appear on the configuration drive depend on the arguments that you pass to the nova boot command.
The default format of the configuration drive as an ISO 9660 file system.
By default, you cannot attach the configuration drive image as a CD drive instead of as a disk drive.
It is unlikely that you would require VFAT format because ISO 9660 is widely supported across operating systems.
If you choose VFAT, the configuration drive is 64 MBs.
Configuration drive reference The following table shows the configuration options for the configuration drive:
Create and manage networks Before you run commands, set the following environment variables:
Some fields of the created network are invisible to non-admin users.
In the previous command, net1 is the network name, which is a positional argument.
We can see that the system will allocate one IP address if we don't specify the IP address in command line.
For example, in the port creation command, we see the fixed_ips fields, which can be used as an unknown option.
Manage objects and containers The OpenStack Object Storage Service provides the swift client, which is a command-line interface (CLI)
Use this client to list objects and containers, upload objects to containers, and download or delete objects from containers.
You can also gather statistics and update metadata for accounts, containers, and objects.
For example, a user with the admin role has full access to all containers and objects in an account.
You can set access control lists (ACLs) at the container level and support lists for read and write access, which you set with the X-ContainerRead and X-Container-Write header, respectively.
To give a user read access, use the swift post command with the -r parameter.
To give a user write access, use the -w parameter.
The following example enables the testuser user to read objects in the container:
You can also use this command with a list of users.
If you use StaticWeb middleware to enable Object Storage to serve public web content, use .r:, followed by a list of allowed referrers.
The following command gives object access to all referring domains:
Create and manage stacks Create a stack from an example template file.
To create a stack, or template, from an example template file, run the following command:
The --parameters values that you specify depend on the parameters that are defined in the template.
If a website hosts the template file, you can specify the URL with the --template-url parameter instead of the --template-file parameter.
You can also use the stack-create command to validate a template file without creating a stack from it.
Get information about stacks To explore the state and history of a particular stack, you can run a number of commands.
To see which stacks are visible to the current user, run the following command:
To show the details of a stack, run the following command:
To list the resources and their status, run the following command:
To show the details for the specified resource in a stack, run the following command:
Some resources have associated metadata which can change throughout the life-cycle of a resource:
A series of events is generated during the life-cycle of a stack.
To show the details for a particular event, run the following command:
To update an existing stack from a modified template file, run a command like the.
Some resources are updated in-place, while others are replaced with new resources.
It collects information about how much, who, what, and when with regards to billing.
Currently, metering is available through only the ceilometer command-line client.
Meter Measures a specific aspect of resource usage, such as the existence of a running instance, or ongoing performance, such as the CPU utilization for an instance.
For example, a separate cpu_util meter exists for each instance.
The life cycle of a meter is decoupled from the existence of its related resource.
Indicates whether values increase monotonically (cumulative), are interpreted as a change from the previous value (delta), or are standalone and relate only to the current duration (gauge)
Sample An individual data point that is associated with a specific meter.
Has the same attributes as the meter, with the addition of timestamp and value attributes.
The value attribute is also known as the sample volume.
Statistic A set of data point aggregates over a time duration.
Alarm A set of rules that define a monitor and a current state, with edge-triggered actions associated with target states.
Alarms follow a tristate model of ok, alarm, and insufficient data.
For conventional threshold-oriented alarms, a static threshold value and comparison operator govern state transitions.
The comparison operator compares a selected meter statistic against an evaluation window of configurable length into the recent past.
This example uses the heat client to create an auto-scaling stack and the ceilometer client to measure resources.
Manage volumes A volume is a detachable block storage device, similar to a USB hard drive.
To create and manage volumes, you use a combination of nova and cinder client commands.
This example creates a my-new-volume volume based on an image.
List images, and note the ID of the image to use for your volume:
List the availability zones, and note the ID of the availability zone in which to create your volume:
To verify that your volume was created successfully, list the available volumes:
If your volume was created successfully, its status is available.
If its status is error, you might have exceeded your quota.
To resize your volume, you must first detach it from the server.
To detach the volume from your server, pass the server ID and volume ID to the command:
Resize the volume by passing the volume ID and the new size (a value greater than the old one) as parameters:
To delete your volume, you must first detach it from the server.
List the volumes again, and note that the status of your volume is deleting:
When the volume is fully deleted, it disappears from the list of volumes:
Transfer a volume You can transfer a volume from one owner to another by using the cinder transfer* commands.
The volume donor, or original owner, creates a transfer request and sends the created transfer ID and authorization key to the volume recipient.
The volume recipient, or new owner, accepts the transfer by using the ID and key.
Note The procedure for volume transfer is intended for tenants (both the volume donor and recipient) within the same cloud.
Create a custom bootable volume or a volume with a large data set and transfer it to the end customer.
For bulk import of data to the cloud, the data ingress system creates a new Block Storage volume, copies data from the physical device, and transfers device ownership to the end user.
While logged in as the volume donor, list available volumes:
As the volume donor, request a volume transfer authorization code for a specific volume:
The volume must be in an ‘available’ state or the request will be denied.
If the transfer request is valid in the database (that is, it has not expired or been deleted), the volume is placed in an awaiting transfer state.
Note Optionally, you can specify a name for the transfer by using the -display-name displayName parameter.
Send the volume transfer ID and authorization key to the new owner (for example, by email)
After the volume recipient, or new owner, accepts the transfer, you can see that the transfer is no longer available:
As the volume recipient, you must first obtain the transfer ID and authorization key from the original owner.
If you do not have a sufficient quota for the transfer, the transfer is refused.
The transfer list is now empty and the volume is again available for transfer:
Use the OpenStack Python Software Development Kit (SDK) to write Python automation scripts that create and manage resources in your OpenStack cloud.
The SDK implements Python bindings to the OpenStack API, which enables you to perform automation tasks in Python by making calls on Python objects rather than making REST calls directly.
All OpenStack command-line tools are implemented using the Python SDK.
For example, the Python bindings for the Compute API are bundled with the python-novaclient package.
For details about how to install the clients, see install the OpenStack command-line clients.
Authentication You must authenticate against an OpenStack endpoint before you can use OpenStack services.
Each project uses a slightly different syntax for doing authentication.
You must typically authenticate against a specific version of a service.
For example, a client might need to authenticate against the Identity Service v2.0
Python scripts that use the OpenStack SDK must have access to the credentials contained in the OpenStack RC file.
Because credentials are sensitive information, do not include them in your scripts.
This guide assumes that users source the openrc.sh file and access the credentials by using the environment variables in the Python scripts.
After you instantiate a Client object, you can retrieve the token by accessing its auth_token attribute object:
If the Openstack cloud is configured to use public-key infrastructure (PKI) tokens, the Python script output looks something like this:
If you authenticate against an endpoint that uses a custom authentication back-end, you must load the authentication plug-in and pass it to the constructor.
The Rackspace Public Cloud is an OpenStack deployment that uses a custom authentication back-end.
The following Python code shows the additional modifications required to instantiate a Client object that can authenticate against the Rackspace custom authentication back-end.
If you set the OS_AUTH_SYSTEM environment variable, check for this variable in your Python script to determine whether you need to load a custom authentication back-end:
You can also authenticate by explicitly specifying the endpoint and token:
The images method returns a Python generator, as shown in the following interaction with the Python interpreter:
Get image by name The Image Service Python bindings do not support the retrieval of an image object by name.
However, the Compute Python bindings enable you to get an image object by name.
The file must be readable and writeable by only the file owner, otherwise the ssh client will refuse to read the private key file.
It is safest to create the file with the appropriate permissions, as shown in the following example:
Defaults to env[OS_CACERT] --insecure            Explicitly allow keystoneclient to perform "insecure" TLS (https) requests.
The server's certificate will not be verified against any certificate authorities.
Defaults to env[OS_CACHE] --force-new-token     If the keyring is available and in use, token will always be stored and fetched from the keyring until the token has expired.
Use this option to request a new token and replace the existing one in the keyring.
The server's certificate will not be verified against any certificate authorities.
This file can optionally be prepended with the private key.
This option is not necessary if your key is prepended to your cert file.
Without this option glance looks for the default system CA certificates.
The server's certificate will not be verified against any certificate authorities.
Defaults to env[OS_CACERT] --insecure            Explicitly allow novaclient to perform "insecure" SSL (https) requests.
The server's certificate will not be verified against any certificate authorities.
The server's certificate will not be verified against any certificate authorities.
This file can optionally be prepended with the private key.
This option is not necessary if your key is prepended to your cert file.
Without this option the client looks for the default system CA certificates.
The server's certificate will not be verified against any certificate authorities.
This file can optionally be prepended with the private key.
This option is not necessary if your key is prepended to your cert file.
Without this option ceilometer looks for the default system CA certificates.
Many resources are available to help you run and use OpenStack.
Members of the OpenStack community can answer questions and help with bug suspicions.
We are constantly improving and adding to the main features of OpenStack, but if you have any problems, do not hesitate to ask.
Use the following resources to get OpenStack support and troubleshoot your existing installations.
The following books explain how to install an OpenStack cloud and its associated components:
The following books explain how to configure and run an OpenStack cloud:
The following books explain how to use the OpenStack dashboard and command-line clients:
The following documentation provides reference and guidance information for the OpenStack APIs:
The Training Guides offer software training for cloud administration and management.
Be sure to give a clear, concise summary in the title and provide as much detail as possible in the description.
Paste in your command output or stack traces, links to screen shots, and so on.
OpenStack mailing lists A great way to get answers and insights is to post your question or problematic scenario to the OpenStack mailing list.
You can learn from and help others who might have similar issues.
To subscribe or view the archives, go to http://lists.openstack.org/cgi-bin/mailman/ listinfo/openstack.
You might be interested in the other mailing lists for specific projects or development, which you can find on the wiki.
A description of all mailing lists is available at http://wiki.openstack.org/MailingLists.
The OpenStack wiki The OpenStack wiki contains a broad range of topics but some of the information can be difficult to find or is a few pages deep.
If you search for specific information, such as about networking or nova, you can find lots of relevant material.
More is being added all the time, so be sure to check back often.
You can find the search box in the upper right corner of any OpenStack wiki page.
The Launchpad Bugs area The OpenStack community values your set up and testing efforts and wants your feedback.
You can view existing bugs and report bugs in the Launchpad Bugs area.
Use the search feature to determine whether the bug has already been reported or even better, already fixed.
If it still seems like your bug is unreported, fill out a bug report.
Paste in your command output or stack traces, links to screen shots, and so on.
Any deployment specific information is helpful, such as Ubuntu 12.04 or multi-node install.
The OpenStack IRC channel The OpenStack community lives and breathes in the #openstack IRC channel on the Freenode network.
You can hang out, ask questions, or get immediate feedback for urgent and pressing issues.
You can also use Colloquy (Mac OS X, http://colloquy.info/), mIRC (Windows, http://www.mirc.com/), or XChat (Linux)
When you are in the IRC channel and want to share code or command output, the generally accepted method is to use a Paste Bin.
Just paste your longer amounts of text or logs in the web form and you get a URL you can paste into the channel.
Log in to the dashboard OpenStack dashboard—Project tab OpenStack dashboard—Admin tab.
Create and manage images Create images Update images Delete images.
Configure access and security for instances Add rules to the default security group Add a keypair Import a keypair.
Launch and manage instances Launch an instance from an image Launch an instance from a volume SSH in to your instance Track usage for instances Create instance snapshots Manage an instance.
Create a network Manage volumes Create a volume Attach volumes to instances Detach a volume from an instance Create volume snapshots Delete volumes.
Get the version for a client The OpenStack RC file Download and source the OpenStack RC file Create and source the OpenStack RC file Override environment variable values.
Manage images List or get details for images (glance) Create or update an image (glance) Create image (nova) Troubleshoot image creation.
Configure access and security for instances Add a keypair Import a keypair Create and manage security groups Create and manage security group rules.
Launch instances Gather parameters to launch an instance Launch an instance from an image Launch an instance from a volume.
Change the size of your server Stop and start an instance Pause and un-pause an instance Suspend and resume an instance.
Reboot an instance Delete an instance Get a console to access an instance Manage bare metal nodes Show usage statistics for hosts and instances.
Provide user data to instances Store metadata on a configuration drive Requirements and guidelines Enable and access the configuration drive Configuration drive reference.
Create and manage networks Create networks Create subnets Create ports.
Manage objects and containers Create and manage stacks Create a stack from an example template file Get information about stacks Update a stack.
Measure cloud resources Manage volumes Create a volume Attach a volume to an instance Resize a volume Delete a volume Transfer a volume Create a volume transfer request Accept a volume transfer request Delete a volume transfer.
Manage images List images Get image by ID Get image by name Upload an image.
Configure access and security for instances Add a keypair Import a keypair List keypairs Create and manage security groups Create and manage security group rules.
