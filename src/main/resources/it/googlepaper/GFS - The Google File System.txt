It provides fault tolerance while running on inexpensive commodity hardware, and it delivers high aggregate performance to a large number of clients.
While sharing many of the same goals as previous distributed ﬁle systems, our design has been driven by observations of our application workloads and technological environment, both current and anticipated, that reﬂect a marked departure from some earlier ﬁle system assumptions.
This has led us to reexamine traditional choices and explore radically diﬀerent design points.
It is widely deployed within Google as the storage platform for the generation and processing of data used by our service as well as research and development eﬀorts that require large data sets.
The largest cluster to date provides hundreds of terabytes of storage across thousands of disks on over a thousand machines, and it is concurrently accessed by hundreds of clients.
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page.
To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
We have designed and implemented the Google File System (GFS) to meet the rapidly growing demands of Google’s data processing needs.
However, its design has been driven by key observations of our application workloads and technological environment, both current and anticipated, that reﬂect a marked departure from some earlier ﬁle system design assumptions.
We have reexamined traditional choices and explored radically diﬀerent points in the design space.
The ﬁle system consists of hundreds or even thousands of storage machines built from inexpensive commodity parts and is accessed by a comparable number of client machines.
The quantity and quality of the components virtually guarantee that some are not functional at any given time and some will not recover from their current failures.
We have seen problems caused by application bugs, operating system bugs, human errors, and the failures of disks, memory, connectors, networking, and power supplies.
Therefore, constant monitoring, error detection, fault tolerance, and automatic recovery must be integral to the system.
Each ﬁle typically contains many application objects such as web documents.
When we are regularly working with fast growing data sets of many TBs comprising billions of objects, it is unwieldy to manage billions of approximately KB-sized ﬁles even when the ﬁle system could support it.
As a result, design assumptions and parameters such as I/O operation and block sizes have to be revisited.
Once written, the ﬁles are only read, and often only sequentially.
Some may constitute large repositories that data analysis programs scan through.
Some may be data streams continuously generated by running applications.
Some may be intermediate results produced on one machine and processed on another, whether simultaneously or later in time.
Given this access pattern on huge ﬁles, appending becomes the focus of performance optimization and atomicity guarantees, while caching data blocks in the client loses its appeal.
For example, we have relaxed GFS’s consistency model to vastly simplify the ﬁle system without imposing an onerous burden on the applications.
We have also introduced an atomic append operation so that multiple clients can append concurrently to a ﬁle without extra synchronization between them.
These will be discussed in more details later in the paper.
In designing a ﬁle system for our needs, we have been.
We alluded to some key observations earlier and now lay out our assumptions in more details.
The system is built from many inexpensive commodity components that often fail.
It must constantly monitor itself and detect, tolerate, and recover promptly from component failures on a routine basis.
We expect a few million ﬁles, each typically 100 MB or larger in size.
Multi-GB ﬁles are the common case and should be managed eﬃciently.
Small ﬁles must be supported, but we need not optimize for them.
The workloads primarily consist of two kinds of reads: large streaming reads and small random reads.
In large streaming reads, individual operations typically read hundreds of KBs, more commonly 1 MB or more.
Successive operations from the same client often read through a contiguous region of a ﬁle.
A small random read typically reads a few KBs at some arbitrary oﬀset.
The workloads also have many large, sequential writes that append data to ﬁles.
Small writes at arbitrary positions in a ﬁle are supported but do not have to be eﬃcient.
The system must eﬃciently implement well-deﬁned semantics for multiple clients that concurrently append to the same ﬁle.
Our ﬁles are often used as producerconsumer queues or for many-way merging.
Hundreds of producers, running one per machine, will concurrently append to a ﬁle.
The ﬁle may be read later, or a consumer may be reading through the ﬁle simultaneously.
Most of our target applications place a premium on processing data in bulk at a high rate, while few have stringent response time requirements for an individual read or write.
Files are organized hierarchically in directories and identiﬁed by pathnames.
We support the usual operations to create, delete, open, close, read, and write ﬁles.
Snapshot creates a copy of a ﬁle or a directory tree at low cost.
Record append allows multiple clients to append data to the same ﬁle concurrently while guaranteeing the atomicity of each individual client’s append.
It is useful for implementing multi-way merge results and producerconsumer queues that many clients can simultaneously append to without additional locking.
We have found these types of ﬁles to be invaluable in building large distributed applications.
A GFS cluster consists of a single master and multiple.
Each of these is typically a commodity Linux machine running a user-level server process.
It is easy to run both a chunkserver and a client on the same machine, as long as machine resources permit and the lower reliability caused by running possibly ﬂaky application code is acceptable.
Chunkservers store chunks on local disks as Linux ﬁles and read or write chunk data speciﬁed by a chunk handle and byte range.
By default, we store three replicas, though users can designate diﬀerent replication levels for diﬀerent regions of the ﬁle namespace.
This includes the namespace, access control information, the mapping from ﬁles to chunks, and the current locations of chunks.
It also controls system-wide activities such as chunk lease management, garbage collection of orphaned chunks, and chunk migration between chunkservers.
The master periodically communicates with each chunkserver in HeartBeat messages to give it instructions and collect its state.
Clients interact with the master for metadata operations, but all data-bearing communication goes directly to the chunkservers.
We do not provide the POSIX API and therefore need not hook into the Linux vnode layer.
Client caches oﬀer little beneﬁt because most applications stream through huge ﬁles or have working sets too large to be cached.
Not having them simpliﬁes the client and the overall system by eliminating cache coherence issues.
Chunkservers need not cache ﬁle data because chunks are stored as local ﬁles and so Linux’s buﬀer cache already keeps frequently accessed data in memory.
However, we must minimize its involvement in reads and writes so that it does not become a bottleneck.
Clients never read and write ﬁle data through the master.
Instead, a client asks the master which chunkservers it should contact.
It caches this information for a limited time and interacts with the chunkservers directly for many subsequent operations.
First, using the ﬁxed chunk size, the client translates the ﬁle name and byte oﬀset speciﬁed by the application into a chunk index within the ﬁle.
Then, it sends the master a request containing the ﬁle name and chunk index.
The master replies with the corresponding chunk handle and locations of the replicas.
The client caches this information using the ﬁle name and chunk index as the key.
The request speciﬁes the chunk handle and a byte range within that chunk.
Further reads of the same chunk require no more client-master interaction until the cached information expires or the ﬁle is reopened.
In fact, the client typically asks for multiple chunks in the same request and the master can also include the information for chunks immediately following those requested.
This extra information sidesteps several future client-master interactions at practically no extra cost.
Each chunk replica is stored as a plain Linux ﬁle on a chunkserver and is extended only as needed.
Lazy space allocation avoids wasting space due to internal fragmentation, perhaps the greatest objection against such a large chunk size.
First, it reduces clients’ need to interact with the master because reads and writes on the same chunk require only one initial request to the master for chunk location information.
The reduction is especially signiﬁcant for our workloads because applications mostly read and write large ﬁles sequentially.
Even for small random reads, the client can comfortably cache all the chunk location information for a multi-TB working set.
Second, since on a large chunk, a client is more likely to perform many operations on a given chunk, it can reduce network overhead by keeping a persistent TCP connection to the chunkserver over an extended period of time.
Third, it reduces the size of the metadata stored on the master.
This allows us to keep the metadata in memory, which in turn brings other advantages that we will discuss in Section 2.6.1
On the other hand, a large chunk size, even with lazy space.
A small ﬁle consists of a small number of chunks, perhaps just one.
The chunkservers storing those chunks may become hot spots if many clients are accessing the same ﬁle.
In practice, hot spots have not been a major issue because our applications mostly read large multi-chunk ﬁles sequentially.
However, hot spots did develop when GFS was ﬁrst used.
The few chunkservers storing this executable were overloaded by hundreds of simultaneous requests.
We ﬁxed this problem by storing such executables with a higher replication factor and by making the batchqueue system stagger application start times.
A potential long-term solution is to allow clients to read data from other clients in such situations.
The master stores three major types of metadata: the ﬁle.
The ﬁrst two types (namespaces and ﬁle-to-chunk mapping) are also kept persistent by logging mutations to an operation log stored on the master’s local disk and replicated on remote machines.
Using a log allows us to update the master state simply, reliably, and without risking inconsistencies in the event of a master crash.
Instead, it asks each chunkserver about its chunks at master startup and whenever a chunkserver joins the cluster.
Furthermore, it is easy and eﬃcient for the master to periodically scan through its entire state in the background.
This periodic scanning is used to implement chunk garbage collection, re-replication in the presence of chunkserver failures, and chunk migration to balance load and disk space.
Most chunks are full because most ﬁles contain many chunks, only the last of which may be partially ﬁlled.
Similarly, the ﬁle namespace data typically requires less then 64 bytes per ﬁle because it stores ﬁle names compactly using preﬁx compression.
If necessary to support even larger ﬁle systems, the cost.
The master does not keep a persistent record of which.
The master can keep itself up-to-date thereafter because it controls all chunk placement and monitors chunkserver status with regular HeartBeat messages.
This eliminated the problem of keeping the master and chunkservers in sync as chunkservers join and leave the cluster, change names, fail, restart, and so on.
In a cluster with hundreds of servers, these events happen all too often.
Another way to understand this design decision is to realize that a chunkserver has the ﬁnal word over what chunks it does or does not have on its own disks.
There is no point in trying to maintain a consistent view of this information on the master because errors on a chunkserver may cause chunks to vanish spontaneously (e.g., a disk may go bad and be disabled) or an operator may rename a chunkserver.
Not only is it the only persistent record of metadata, but it also serves as a logical time line that deﬁnes the order of concurrent operations.
Files and chunks, as well as their versions (see Section 4.5), are all uniquely and eternally identiﬁed by the logical times at which they were created.
Since the operation log is critical, we must store it reliably and not make changes visible to clients until metadata changes are made persistent.
Otherwise, we eﬀectively lose the whole ﬁle system or recent client operations even if the chunks themselves survive.
Therefore, we replicate it on multiple remote machines and respond to a client operation only after ﬂushing the corresponding log record to disk both locally and remotely.
The master batches several log records together before ﬂushing thereby reducing the impact of ﬂushing and replication on overall system throughput.
The master recovers its ﬁle system state by replaying the.
To minimize startup time, we must keep the log small.
The master checkpoints its state whenever the log grows beyond a certain size so that it can recover by loading the latest checkpoint from local disk and replaying only the.
Serial defined defined success interspersed with Concurrent consistent inconsistent successes but undefined Failure inconsistent.
The checkpoint is in a compact B-tree like form that can be directly mapped into memory and used for namespace lookup without extra parsing.
Because building a checkpoint can take a while, the master’s internal state is structured in such a way that a new checkpoint can be created without delaying incoming mutations.
The master switches to a new log ﬁle and creates the new checkpoint in a separate thread.
It can be created in a minute or so for a cluster with a few million ﬁles.
When completed, it is written to disk both locally and remotely.
Older checkpoints and log ﬁles can be freely deleted, though we keep a few around to guard against catastrophes.
A failure during checkpointing does not aﬀect correctness because the recovery code detects and skips incomplete checkpoints.
We now discuss GFS’s guarantees and what they mean to applications.
We also highlight how GFS maintains these guarantees but leave the details to other parts of the paper.
A ﬁle region is consistent if all clients will always see the same data, regardless of which replicas they read from.
A region is deﬁned after a ﬁle data mutation if it is consistent and clients will see what the mutation writes in its entirety.
When a mutation succeeds without interference from concurrent writers, the aﬀected region is deﬁned (and by implication consistent): all clients will always see what the mutation has written.
Concurrent successful mutations leave the region undeﬁned but consistent: all clients see the same data, but it may not reﬂect what any one mutation has written.
A failed mutation makes the region inconsistent (hence also undeﬁned): diﬀerent clients may see diﬀerent data at diﬀerent times.
We describe below how our applications can distinguish deﬁned regions from undeﬁned.
The applications do not need to further distinguish between diﬀerent kinds of undeﬁned regions.
A record append causes data (the “record”) to be appended atomically at least once even in the presence of concurrent mutations, but at an oﬀset of GFS’s choosing (Section 3.3)
In contrast, a “regular” append is merely a write at an oﬀset that the client believes to be the current end of ﬁle.
The oﬀset is returned to the client and marks the beginning of a deﬁned region that contains the record.
In addition, GFS may insert padding or record duplicates in between.
They occupy regions considered to be inconsistent and are typically dwarfed by the amount of user data.
Stale replicas will never be involved in a mutation or given to clients asking the master for chunk locations.
Since clients cache chunk locations, they may read from a.
This window is limited by the cache entry’s timeout and the next open of the ﬁle, which purges from the cache all chunk information for that ﬁle.
Moreover, as most of our ﬁles are append-only, a stale replica usually returns a premature end of chunk rather than outdated data.
When a reader retries and contacts the master, it will immediately get current chunk locations.
Once a problem surfaces, the data is restored from valid replicas as soon as possible (Section 4.3)
A chunk is lost irreversibly only if all its replicas are lost before GFS can react, typically within minutes.
Even in this case, it becomes unavailable, not corrupted: applications receive clear errors rather than corrupt data.
In one typical use, a writer generates a ﬁle from beginning to end.
It atomically renames the ﬁle to a permanent name after writing all the data, or periodically checkpoints how much has been successfully written.
Readers verify and process only the ﬁle region up to the last checkpoint, which is known to be in the deﬁned state.
Regardless of consistency and concurrency issues, this approach has served us well.
Appending is far more eﬃcient and more resilient to application failures than random writes.
Checkpointing allows writers to restart incrementally and keeps readers from processing successfully written.
In the other typical use, many writers concurrently append to a ﬁle for merged results or as a producer-consumer queue.
Readers deal with the occasional padding and duplicates as follows.
Each record prepared by the writer contains extra information like checksums so that its validity can be veriﬁed.
A reader can identify and discard extra padding and record fragments using the checksums.
If it cannot tolerate the occasional duplicates (e.g., if they would trigger non-idempotent operations), it can ﬁlter them out using unique identiﬁers in the records, which are often needed anyway to name corresponding application entities such as web documents.
These functionalities for record I/O (except duplicate removal) are in library code shared by our applications and applicable to other ﬁle interface implementations at Google.
With that, the same sequence of records, plus rare duplicates, is always delivered to the record reader.
We designed the system to minimize the master’s involvement in all operations.
With that background, we now describe how the client, master, and chunkservers interact to implement data mutations, atomic record append, and snapshot.
A mutation is an operation that changes the contents or.
We use leases to maintain a consistent mutation order across replicas.
The master grants a chunk lease to one of the replicas, which we call the primary.
The primary picks a serial order for all mutations to the chunk.
Thus, the global mutation order is deﬁned ﬁrst by the lease grant order chosen by the master, and within a lease by the serial numbers assigned by the primary.
The lease mechanism is designed to minimize management overhead at the master.
However, as long as the chunk is being mutated, the primary can request and typically receive extensions from the master indeﬁnitely.
These extension requests and grants are piggybacked on the HeartBeat messages regularly exchanged between the master and all chunkservers.
The master may sometimes try to revoke a lease before it expires (e.g., when the master wants to disable mutations on a ﬁle that is being renamed)
Even if the master loses communication with a primary, it can safely grant a new lease to another replica after the old lease expires.
In Figure 2, we illustrate this process by following the.
The client asks the master which chunkserver holds the current lease for the chunk and the locations of the other replicas.
If no one has a lease, the master grants one to a replica it chooses (not shown)
The master replies with the identity of the primary and the locations of the other (secondary) replicas.
It needs to contact the master again only when the primary.
Each chunkserver will store the data in an internal LRU buﬀer cache until the data is used or aged out.
By decoupling the data ﬂow from the control ﬂow, we can improve performance by scheduling the expensive data ﬂow based on the network topology regardless of which chunkserver is the primary.
Once all the replicas have acknowledged receiving the data, the client sends a write request to the primary.
The request identiﬁes the data pushed earlier to all of the replicas.
The primary assigns consecutive serial numbers to all the mutations it receives, possibly from multiple clients, which provides the necessary serialization.
It applies the mutation to its own local state in serial number order.
The primary forwards the write request to all secondary replicas.
Each secondary replica applies mutations in the same serial number order assigned by the primary.
The secondaries all reply to the primary indicating that they have completed the operation.
Any errors encountered at any of the replicas are reported to the client.
In case of errors, the write may have succeeded at the primary and an arbitrary subset of the secondary replicas.
If it had failed at the primary, it would not have been assigned a serial number and forwarded.
The client request is considered to have failed, and the modiﬁed region is left in an inconsistent state.
Our client code handles such errors by retrying the failed mutation.
If a write by the application is large or straddles a chunk boundary, GFS client code breaks it down into multiple write operations.
They all follow the control ﬂow described above but may be interleaved with and overwritten by concurrent operations from other clients.
This leaves the ﬁle region in consistent but undeﬁned state as noted in Section 2.7
We decouple the ﬂow of data from the ﬂow of control to.
While control ﬂows from the client to the primary and then to all secondaries, data is pushed linearly along a carefully picked chain of chunkservers in a pipelined fashion.
Our goals are to fully utilize each machine’s network bandwidth, avoid network bottlenecks and high-latency links, and minimize the latency to push through all the data.
Thus, each machine’s full outbound bandwidth is used to transfer the data as fast as possible rather than divided among multiple recipients.
It sends the data to the closest chunkserver, say S1
Our network topology is simple enough that “distances” can be accurately estimated from IP addresses.
Finally, we minimize latency by pipelining the data transfer over TCP connections.
Once a chunkserver receives some data, it starts forwarding immediately.
Pipelining is especially helpful to us because we use a switched network with full-duplex links.
Sending the data immediately does not reduce the receive rate.
Without network congestion, the ideal elapsed time for transferring B bytes to R replicas is B/T +RL where T is the network throughput and L is latency to transfer bytes between two machines.
In a traditional write, the client speciﬁes the oﬀset at which data is to be written.
Concurrent writes to the same region are not serializable: the region may end up containing data fragments from multiple clients.
In a record append, however, the client speciﬁes only the data.
This is similar to writing to a ﬁle opened in O APPEND mode in Unix without the race conditions when multiple writers do so concurrently.
Record append is heavily used by our distributed applications in which many clients on diﬀerent machines append to the same ﬁle concurrently.
Clients would need additional complicated and expensive synchronization, for example through a distributed lock manager, if they do so with traditional writes.
Record append is a kind of mutation and follows the control ﬂow in Section 3.1 with only a little extra logic at the primary.
The client pushes the data to all replicas of the last chunk of the ﬁle Then, it sends its request to the primary.
The primary checks to see if appending the record to the current chunk would cause the chunk to exceed the maximum size (64 MB)
If so, it pads the chunk to the maximum size, tells secondaries to do the same, and replies to the client indicating that the operation should be retried on the next chunk.
Record append is restricted to be at most one-fourth of the maximum chunk size to keep worstcase fragmentation at an acceptable level.
If the record ﬁts within the maximum size, which is the common case, the primary appends the data to its replica, tells the secondaries to write the data at the exact oﬀset where it has, and ﬁnally replies success to the client.
If a record append fails at any replica, the client retries the.
As a result, replicas of the same chunk may contain diﬀerent data possibly including duplicates of the same record in whole or in part.
It only guarantees that the data is written at least once as an atomic unit.
This property follows readily from the simple observation that for the operation to report success, the data must have been written at the same oﬀset on all replicas of some chunk.
Furthermore, after this, all replicas are at least as long as the end of record and therefore any future record will be assigned a higher oﬀset or a diﬀerent chunk even if a diﬀerent replica later becomes the primary.
In terms of our consistency guarantees, the regions in which successful record append operations have written their data are deﬁned (hence consistent), whereas intervening regions are inconsistent (hence undeﬁned)
Our applications can deal with inconsistent regions as we discussed in Section 2.7.2
The snapshot operation makes a copy of a ﬁle or a directory tree (the “source”) almost instantaneously, while minimizing any interruptions of ongoing mutations.
Our users use it to quickly create branch copies of huge data sets (and often copies of those copies, recursively), or to checkpoint the current state before experimenting with changes that can later be committed or rolled back easily.
When the master receives a snapshot request, it ﬁrst revokes any outstanding leases on the chunks in the ﬁles it is about to snapshot.
This ensures that any subsequent writes to these chunks will require an interaction with the master to ﬁnd the lease holder.
This will give the master an opportunity to create a new copy of the chunk ﬁrst.
After the leases have been revoked or have expired, the.
It then applies this log record to its in-memory state by duplicating the metadata for the source ﬁle or directory tree.
The newly created snapshot ﬁles point to the same chunks as the source ﬁles.
The ﬁrst time a client wants to write to a chunk C after.
The master notices that the reference count for chunk C is greater than one.
It defers replying to the client request and instead picks a new chunk.
It then asks each chunkserver that has a current replica of C to create a new chunk called C’
By creating the new chunk on the same chunkservers as the original, we ensure that the data can be copied locally, not over the network (our disks are about three times as fast as our 100 Mb Ethernet links)
From this point, request handling is no different from that for any chunk: the master grants one of the replicas a lease on the new chunk C’ and replies to the client, which can write the chunk normally, not knowing that it has just been created from an existing chunk.
In addition, it manages chunk replicas throughout the system: it makes placement decisions, creates new chunks and hence replicas, and coordinates various system-wide activities to keep chunks fully replicated, to balance load across all the chunkservers, and to reclaim unused storage.
Many master operations can take a long time: for example, a snapshot operation has to revoke chunkserver leases on all chunks covered by the snapshot.
We do not want to delay other master operations while they are running.
Therefore, we allow multiple operations to be active and use locks over regions of the namespace to ensure proper serialization.
Nor does it support aliases for the same ﬁle or directory (i.e, hard or symbolic links in Unix terms)
With preﬁx compression, this table can be eﬃciently represented in memory.
Each node in the namespace tree (either an absolute ﬁle name or an absolute directory name) has an associated read-write lock.
Each master operation acquires a set of locks before it.
Note that leaf may be a ﬁle or directory depending on the operation.
The snapshot operation acquires read locks on /home and /save, and write locks on /home/user and /save/user.
The ﬁle creation acquires read locks on /home and /home/user, and a write lock on /home/user/foo.
The two operations will be serialized properly because they try to obtain conﬂicting locks on /home/user.
File creation does not require a write lock on the parent directory because there is no “directory”, or inode-like, data structure to be protected from modiﬁcation.
The read lock on the name is suﬃcient to protect the parent directory from deletion.
One nice property of this locking scheme is that it allows.
For example, multiple ﬁle creations can be executed concurrently in the same directory: each acquires a read lock on the directory name and a write lock on the ﬁle name.
The read lock on the directory name suﬃces to prevent the directory from being deleted, renamed, or snapshotted.
Also, locks are acquired in a consistent total order to prevent deadlock: they are ﬁrst ordered by level in the namespace tree and lexicographically within the same level.
A GFS cluster is highly distributed at more levels than.
It typically has hundreds of chunkservers spread across many machine racks.
These chunkservers in turn may be accessed from hundreds of clients from the same or diﬀerent racks.
Communication between two machines on diﬀerent racks may cross one or more network switches.
Additionally, bandwidth into or out of a rack may be less than the aggregate bandwidth of all the machines within the rack.
Multi-level distribution presents a unique challenge to distribute data for scalability, reliability, and availability.
For both, it is not enough to spread replicas across machines, which only guards against disk or machine failures and fully utilizes each machine’s network bandwidth.
This ensures that some replicas of a chunk will survive and remain available even if an entire rack is damaged or oﬄine (for example, due to failure of a shared resource like a network switch or power circuit)
It also means that traﬃc, especially reads, for a chunk can exploit the aggregate bandwidth of multiple racks.
On the other hand, write traﬃc has to ﬂow through multiple racks, a tradeoﬀ we make willingly.
Chunk replicas are created for three reasons: chunk creation, re-replication, and rebalancing.
When the master creates a chunk, it chooses where to.
We want to place new replicas on chunkservers with below-average disk space utilization.
We want to limit the number of “recent” creations on each chunkserver.
As discussed above, we want to spread replicas of a chunk across racks.
The master re-replicates a chunk as soon as the number.
This could happen for various reasons: a chunkserver becomes unavailable, it reports that its replica may be corrupted, one of its disks is disabled because of errors, or the replication goal is increased.
Each chunk that needs to be re-replicated is prioritized based on several factors.
One is how far it is from its replication goal.
For example, we give higher priority to a chunk that has lost two replicas than to a chunk that has lost only one.
In addition, we prefer to ﬁrst re-replicate chunks for live ﬁles as opposed to chunks that belong to recently deleted ﬁles (see Section 4.4)
Finally, to minimize the impact of failures on running applications, we boost the priority of any chunk that is blocking client progress.
The master picks the highest priority chunk and “clones” it by instructing some chunkserver to copy the chunk data directly from an existing valid replica.
The new replica is placed with goals similar to those for creation: equalizing disk space utilization, limiting active clone operations on any single chunkserver, and spreading replicas across racks.
To keep cloning traﬃc from overwhelming client traﬃc, the master limits the numbers of active clone operations both for the cluster and for each chunkserver.
Additionally, each chunkserver limits the amount of bandwidth it spends on each clone operation by throttling its read requests to the source chunkserver.
Finally, the master rebalances replicas periodically: it examines the current replica distribution and moves replicas for better disk space and load balancing.
Also through this process, the master gradually ﬁlls up a new chunkserver rather than instantly swamps it with new chunks and the heavy write traﬃc that comes with them.
The placement criteria for the new replica are similar to those discussed above.
In addition, the master must also choose which existing replica to remove.
In general, it prefers to remove those on chunkservers with below-average free space so as to equalize disk space usage.
After a ﬁle is deleted, GFS does not immediately reclaim.
It does so only lazily during regular garbage collection at both the ﬁle and chunk levels.
We ﬁnd that this approach makes the system much simpler and more reliable.
When a ﬁle is deleted by the application, the master logs.
However instead of reclaiming resources immediately, the ﬁle is just renamed to a hidden name that includes the deletion timestamp.
During the master’s regular scan of the ﬁle system namespace, it removes any such hidden ﬁles if they have existed for more than three days (the interval is conﬁgurable)
Until then, the ﬁle can still be read under the new, special name and can be undeleted by renaming it back to normal.
When the hidden ﬁle is removed from the namespace, its inmemory metadata is erased.
In a similar regular scan of the chunk namespace, the.
In a HeartBeat message regularly exchanged with the master, each chunkserver reports a subset of the chunks it has, and the master replies with the identity of all chunks that are no longer present in the master’s metadata.
The chunkserver is free to delete its replicas of such chunks.
We can easily identify all references to chunks: they are in the ﬁleto-chunk mappings maintained exclusively by the master.
We can also easily identify all the chunk replicas: they are Linux ﬁles under designated directories on each chunkserver.
Any such replica not known to the master is “garbage.”
The garbage collection approach to storage reclamation oﬀers several advantages over eager deletion.
First, it is simple and reliable in a large-scale distributed system where component failures are common.
Chunk creation may succeed on some chunkservers but not others, leaving replicas that the master does not know exist.
Replica deletion messages may be lost, and the master has to remember to resend them across failures, both its own and the chunkserver’s.
Garbage collection provides a uniform and dependable way to clean up any replicas not known to be useful.
Second, it merges storage reclamation into the regular background activities of the master, such as the regular scans of namespaces and handshakes with chunkservers.
Thus, it is done in batches and the cost is amortized.
Moreover, it is done only when the master is relatively free.
The master can respond more promptly to client requests that demand timely attention.
Third, the delay in reclaiming storage provides a safety net against accidental, irreversible deletion.
In our experience, the main disadvantage is that the delay.
Applications that repeatedly create and delete temporary ﬁles may not be able to reuse the storage right away.
We address these issues by expediting storage reclamation if a deleted ﬁle is explicitly deleted again.
We also allow users to apply diﬀerent replication and reclamation policies to diﬀerent parts of the namespace.
For example, users can specify that all the chunks in the ﬁles within some directory tree are to be stored without replication, and any deleted ﬁles are immediately and irrevocably removed from the ﬁle system state.
For each chunk, the master maintains a chunk version number to distinguish between up-to-date and stale replicas.
Whenever the master grants a new lease on a chunk, it.
The master and these replicas all record the new version number in their persistent state.
This occurs before any client is notiﬁed and therefore before it can start writing to the chunk.
If another replica is currently unavailable, its chunk version number will not be advanced.
The master will detect that this chunkserver has a stale replica when the chunkserver restarts and reports its set of chunks and their associated version numbers.
If the master sees a version number greater than the one in its records, the master assumes that it failed when granting the lease and so takes the higher version to be up-to-date.
Before that, it eﬀectively considers a stale replica not to exist at all when it replies to client requests for chunk information.
As another safeguard, the master includes the chunk version number when it informs clients which chunkserver holds a lease on a chunk or when it instructs a chunkserver to read the chunk from another chunkserver in a cloning operation.
The client or the chunkserver veriﬁes the version number when it performs the operation so that it is always accessing up-to-date data.
One of our greatest challenges in designing the system is.
Component failures can result in an unavailable system or, worse, corrupted data.
We discuss how we meet these challenges and the tools we have built into the system to diagnose problems when they inevitably occur.
Among hundreds of servers in a GFS cluster, some are.
We keep the overall system highly available with two simple yet eﬀective strategies: fast recovery and replication.
Both the master and the chunkserver are designed to restore their state and start in seconds no matter how they terminated.
In fact, we do not distinguish between normal and abnormal termination; servers are routinely shut down just by killing the process.
Clients and other servers experience a minor hiccup as they time out on their outstanding requests, reconnect to the restarted server, and retry.
Users can specify diﬀerent replication levels for diﬀerent parts of the ﬁle namespace.
The master clones existing replicas as needed to keep each chunk fully replicated as chunkservers go oﬄine or detect corrupted replicas through checksum veriﬁcation (see Section 5.2)
Although replication has served us well, we are exploring other forms of cross-server redundancy such as parity or erasure codes for our increasing readonly storage requirements.
We expect that it is challenging but manageable to implement these more complicated redundancy schemes in our very loosely coupled system because our traﬃc is dominated by appends and reads rather than small random writes.
A mutation to the state is considered committed only after its log record has been ﬂushed to disk locally and on all master replicas.
For simplicity, one master process remains in charge of all mutations as well as background activities such as garbage collection that change the system internally.
If its machine or disk fails, monitoring infrastructure outside GFS starts a new master process elsewhere with the replicated operation log.
They are shadows, not mirrors, in that they may lag the primary slightly, typically fractions of a second.
They enhance read availability for ﬁles that are not being actively mutated or applications that do not mind getting slightly stale results.
In fact, since ﬁle content is read from chunkservers, applications do not observe stale ﬁle content.
To keep itself informed, a shadow master reads a replica of.
Like the primary, it polls chunkservers at startup (and infrequently thereafter) to locate chunk replicas and exchanges frequent handshake messages with them to monitor their status.
It depends on the primary master only for replica location updates resulting from the primary’s decisions to create and delete replicas.
Given that a GFS cluster often has thousands of disks on hundreds of machines, it regularly experiences disk failures that cause data corruption or loss on both the read and write paths.
We can recover from corruption using other chunk replicas, but it would be impractical to detect corruption by comparing replicas across chunkservers.
Moreover, divergent replicas may be legal: the semantics of GFS mutations, in particular atomic record append as discussed earlier, does not guarantee identical replicas.
Therefore, each chunkserver must independently verify the integrity of its own copy by maintaining checksums.
Like other metadata, checksums are kept in memory and stored persistently with logging, separate from user data.
If a block does not match the recorded checksum, the chunkserver returns an error to the requestor and reports the mismatch to the master.
In response, the requestor will read from other replicas, while the master will clone the chunk from another replica.
After a valid new replica is in place, the master instructs the chunkserver that reported the mismatch to delete its replica.
Since most of our reads span at least a few blocks, we need to read and checksum only a relatively small amount of extra data for veriﬁcation.
Moreover, checksum lookups and comparison on the chunkserver are done without any I/O, and checksum calculation can often be overlapped with I/Os.
We just incrementally update the checksum for the last partial checksum block, and compute new checksums for any brand new checksum blocks ﬁlled by the append.
Even if the last partial checksum block is already corrupted and we fail to detect it now, the new checksum value will not match the stored data, and the corruption will be detected as usual when the block is next read.
In contrast, if a write overwrites an existing range of the.
If we do not verify the ﬁrst and last blocks before overwriting them partially, the new checksums may hide corruption that exists in the regions not being overwritten.
This allows us to detect corruption in chunks that are rarely read.
Once the corruption is detected, the master can create a new uncorrupted replica and delete the corrupted replica.
This prevents an inactive but corrupted chunk replica from fooling the master into thinking that it has enough valid replicas of a chunk.
Extensive and detailed diagnostic logging has helped immeasurably in problem isolation, debugging, and performance analysis, while incurring only a minimal cost.
Without logs, it is hard to understand transient, non-repeatable interactions between machines.
These diagnostic logs can be freely deleted without aﬀecting the correctness of the system.
However, we try to keep these logs around as far as space permits.
By matching requests with replies and collating RPC records on diﬀerent machines, we can reconstruct the entire interaction history to diagnose a problem.
The logs also serve as traces for load testing and performance analysis.
The most recent events are also kept in memory and available for continuous online monitoring.
In this section we present a few micro-benchmarks to illustrate the bottlenecks inherent in the GFS architecture and implementation, and also some numbers from real clusters in use at Google.
Note that this conﬁguration was set up for ease of testing.
Typical clusters have hundreds of chunkservers and hundreds of clients.
All the machines are conﬁgured with dual 1.4 GHz PIII.
The two switches are connected with a 1 Gbps link.
Figure 3(a) shows the aggregate read rate for N clients and its theoretical limit.
The aggregate write rate and its theoretical limit are shown in Figure 3(b)
The write rate for one client is 6.3 MB/s, about half of the.
It does not interact very well with the pipelining scheme we use for pushing data to chunk replicas.
Delays in propagating data from one replica to another reduce the overall write rate.
As in the case of reads, it becomes more likely that multiple clients write concurrently to the same chunkserver as the number of clients increases.
Performance is limited by the network bandwidth of the chunkservers that store the last chunk of the ﬁle, independent of the number of clients.
In other words, N clients append to M shared ﬁles simultaneously where both N and M are in the dozens or hundreds.
Therefore, the chunkserver network congestion in our experiment is not a signiﬁcant issue in practice because a client can make progress on writing one ﬁle while the chunkservers for another ﬁle are busy.
We now examine two clusters in use within Google that.
Cluster A is used regularly for research and development by over a hundred engineers.
A typical task is initiated by a human user and runs up to several hours.
It reads through a few MBs to a few TBs of data, transforms or analyzes the data, and writes the results back to the cluster.
In both cases, a single “task” consists of many processes on many machines reading and writing many ﬁles simultaneously.
As shown by the ﬁrst ﬁve entries in the table, both clusters.
The two clusters have similar numbers of ﬁles, though B.
It also has more chunks because its ﬁles tend to be larger.
The chunkservers in aggregate store tens of GBs of metadata, mostly the checksums for 64 KB blocks of user data.
The only other metadata kept at the chunkservers is the chunk version number discussed in Section 4.5
The metadata kept at the master is much smaller, only.
This agrees with our assumption that the size of the master’s memory does not limit the system’s capacity in practice.
Most of the per-ﬁle metadata is the ﬁle names stored in a preﬁx-compressed form.
Other metadata includes ﬁle ownership and permissions, mapping from ﬁles to chunks, and each chunk’s current version.
In addition, for each chunk we store the current replica locations and a reference count for implementing copy-on-write.
Therefore recovery is fast: it takes only a few seconds to read this metadata from disk before the server is able to answer queries.
Table 3 shows read and write rates for various time periods.
Both clusters had been up for about one week when these measurements were taken.
The clusters had been restarted recently to upgrade to a new version of GFS.
The average write rate was less than 30 MB/s since the.
Top curves show theoretical limits imposed by our network topology.
They have error bars that show 95% conﬁdence intervals, which are illegible in some cases because of low variance in measurements.
The read rates were much higher than the write rates.
The total workload consists of more reads than writes as we have assumed.
Both clusters were in the middle of heavy read activity.
In particular, A had been sustaining a read rate of 580 MB/s for the preceding week.
Its network conﬁguration can support 750 MB/s, so it was using its resources eﬃciently.
Table 3 also shows that the rate of operations sent to the.
The master can easily keep up with this rate, and therefore is not a bottleneck for these workloads.
In an earlier version of GFS, the master was occasionally.
It spent most of its time sequentially scanning through large directories (which contained hundreds of thousands of ﬁles) looking for particular ﬁles.
We have since changed the master data structures to allow eﬃcient binary searches through the namespace.
It can now easily support many thousands of ﬁle accesses per second.
If necessary, we could speed it up further by placing name lookup caches in front of the namespace data structures.
After a chunkserver fails, some chunks will become underreplicated and must be cloned to restore their replication levels.
The time it takes to restore all such chunks depends on the amount of resources.
In one experiment, we killed a single chunkserver in cluster B.
This double failure reduced 266 chunks to having a single replica.
In this section, we present a detailed breakdown of the.
Cluster X is for research and development while cluster Y is for production data processing.
They do not include interserver requests to carry out client requests or internal background activities, such as forwarded writes or rebalancing.
For example, GFS client code may break a read into multiple RPCs to increase parallelism, from which we infer the original read.
Since our access patterns are highly stylized, we expect any error to be in the noise.
Explicit logging by applications might have provided slightly more accurate data, but it is logistically impossible to recompile and restart thousands of running clients to do so and cumbersome to collect the results from as many machines.
One should be careful not to overly generalize from our.
Since Google completely controls both GFS and its applications, the applications tend to be tuned for GFS, and conversely GFS is designed for these applications.
For reads, the size is the amount of data actually read and transferred, rather than the amount requested.
The small reads (under 64 KB) come from seek-intensive clients that look up small pieces of data within huge ﬁles.
The large reads (over 512 KB) come from long sequential reads through entire ﬁles.
A signiﬁcant number of reads return no data at all in cluster Y.
Our applications, especially those in the production systems, often use ﬁles as producer-consumer queues.
Producers append concurrently to a ﬁle while a consumer reads the end of ﬁle.
Occasionally, no data is returned when the consumer outpaces the producers.
Cluster X shows this less often because it is usually used for short-lived data analysis tasks rather than long-lived distributed applications.
Writers that buﬀer less data, checkpoint or synchronize more often, or simply generate less data account for the smaller writes (under 64 KB)
As for record appends, cluster Y sees a much higher percentage of large record appends than cluster X does because our production systems, which use cluster Y, are more aggressively tuned for GFS.
Table 5 shows the total amount of data transferred in operations of various sizes.
For all kinds of operations, the larger operations (over 256 KB) generally account for most of the bytes transferred.
Small reads (under 64 KB) do transfer a small but signiﬁcant portion of the read data because of the random seek workload.
Record appends are heavily used especially in our production systems.
Moreover, these ratios suggest that for both clusters record appends tend to be larger than writes.
For cluster X, however, the overall usage of record append during the measured period is fairly low and so the results are likely skewed by one or two applications with particular buﬀer size choices.
We measured the amount of data overwritten on primary replicas.
For reads, the size is the amount of data actually read and transferred, rather than the amount requested.
The two may diﬀer if the read attempts to read beyond end of ﬁle, which by design is not uncommon in our workloads.
Although this is minute, it is still higher than we expected.
It turns out that most of these overwrites came from client retries due to errors or timeouts.
They are not part of the workload per se but a consequence of the retry mechanism.
Table 6 shows the breakdown by type of requests to the.
Most requests ask for chunk locations (FindLocation) for reads and lease holder information (FindLeaseLocker) for data mutations.
Delete requests because cluster Y stores production data sets that are regularly regenerated and replaced with newer versions.
Some of this diﬀerence is further hidden in the diﬀerence in Open requests because an old version of a ﬁle may be implicitly deleted by being opened for write from scratch (mode “w” in Unix open terminology)
FindMatchingFiles is a pattern matching request that supports “ls” and similar ﬁle system operations.
Unlike other requests for the master, it may process a large part of the namespace and so may be expensive.
Cluster Y sees it much more often because automated data processing tasks tend to examine parts of the ﬁle system to understand global application state.
In contrast, cluster X’s applications are under more explicit user control and usually know the names of all needed ﬁles in advance.
In the process of building and deploying GFS, we have.
Initially, GFS was conceived as the backend ﬁle system for our production systems.
Over time, the usage evolved to include research and development tasks.
It started with little support for things like permissions and quotas but now includes rudimentary forms of these.
While production systems are well disciplined and controlled, users sometimes are not.
More infrastructure is required to keep users from interfering with one another.
Some of our biggest problems were disk and Linux related.
Many of our disks claimed to the Linux driver that they supported a range of IDE protocol versions but in fact responded reliably only to the more recent ones.
Since the protocol versions are very similar, these drives mostly worked, but occasionally the mismatches would cause the drive and the kernel to disagree about the drive’s state.
This would corrupt data silently due to problems in the kernel.
This problem motivated our use of checksums to detect data corruption, while concurrently we modiﬁed the kernel to handle these protocol mismatches.
Earlier we had some problems with Linux 2.2 kernels due.
Its cost is proportional to the size of the ﬁle rather than the size of the modiﬁed portion.
This was a problem for our large operation logs especially before we implemented checkpointing.
We worked around this for a time by using synchronous writes and eventually migrated to Linux 2.4
We saw transient timeouts in our system under light load and looked hard for resource bottlenecks or sporadic hardware failures.
Eventually, we found that this single lock blocked the primary network thread from mapping new data into memory while the disk threads were paging in previously mapped data.
Since we are mainly limited by the network interface rather than by memory copy bandwidth, we worked around this by replacing mmap() with pread() at the cost of an extra copy.
When appropriate, we improve the kernel and share the changes with the open source community.
In contrast to systems like AFS, xFS, Frangipani [12], and.
Intermezzo [6], GFS does not provide any caching below the ﬁle system interface.
Our target workloads have little reuse within a single application run because they either stream through a large data set or randomly seek within it and read small amounts of data each time.
We opt for the centralized approach in order to simplify the design, increase its reliability, and gain ﬂexibility.
In particular, a centralized master makes it much easier to implement sophisticated chunk placement and replication policies since the master already has most of the relevant information and controls how it changes.
We address fault tolerance by keeping the master state small and fully replicated on other machines.
Scalability and high availability (for reads) are currently provided by our shadow master mechanism.
Updates to the master state are made persistent by appending to a write-ahead log.
Therefore we could adapt a primary-copy scheme like the one in Harp [7] to provide high availability with stronger consistency guarantees than our current scheme.
We are addressing a problem similar to Lustre [8] in terms.
However, we have simpliﬁed the problem signiﬁcantly by focusing on the needs of our applications rather than building a POSIX-compliant ﬁle system.
Additionally, GFS assumes large number of unreliable components and so fault tolerance is central to our design.
While the NASD architecture is based on network-attached disk drives, GFS uses commodity machines as chunkservers, as done in the NASD prototype.
Unlike the NASD work, our chunkservers use lazily allocated ﬁxed-size chunks rather than variable-length objects.
Additionally, GFS implements features such as rebalancing, replication, and recovery that are required in a production environment.
Unlike Minnesota’s GFS and NASD, we do not seek to.
We focus on addressing day-to-day data processing needs for complicated distributed systems with existing commodity components.
While River uses memory-based queues distributed across machines and careful data ﬂow control, GFS uses a persistent ﬁle that can be appended to concurrently by many producers.
The River model supports m-to-n distributed queues but lacks the fault tolerance that comes with persistent storage, while GFS only supports m-to-1 queues eﬃciently.
Multiple consumers can read the same ﬁle, but they must coordinate to partition the incoming load.
The Google File System demonstrates the qualities essential for supporting large-scale data processing workloads on commodity hardware.
While some design decisions are speciﬁc to our unique setting, many may apply to data processing tasks of a similar magnitude and cost consciousness.
We started by reexamining traditional ﬁle system assumptions in light of our current and anticipated application workloads and technological environment.
Our observations have led to radically diﬀerent points in the design space.
We treat component failures as the norm rather than the exception, optimize for huge ﬁles that are mostly appended to (perhaps concurrently) and then read (usually sequentially), and both extend and relax the standard ﬁle system interface to improve the overall system.
Our system provides fault tolerance by constant monitoring, replicating crucial data, and fast and automatic recovery.
The frequency of these failures motivated a novel online repair mechanism that regularly and transparently repairs the damage and compensates for lost replicas as soon as possible.
Additionally, we use checksumming to detect data corruption at the disk or IDE subsystem level, which becomes all too common given the number of disks in the system.
We achieve this by separating ﬁle system control, which passes through the master, from data transfer, which passes directly between chunkservers and clients.
Master involvement in common operations is minimized by a large chunk size and by chunk leases, which delegates authority to primary replicas in data mutations.
This makes possible a simple, centralized master that does not become a bottleneck.
We believe that improvements in our networking stack will lift the current limitation on the write throughput seen by an individual client.
It is an important tool that enables us to continue to innovate and attack problems on the scale of the entire web.
Brain Bershad (our shepherd) and the anonymous reviewers gave us valuable comments and suggestions.
Markus Gutschke worked on a testing framework and security enhancements.
Many of our colleagues at Google bravely trusted their data to a new ﬁle system and gave us useful feedback.
Swift: Using distributed disk striping to provide high I/O data rates.
