Bill has written an engaging, useful, important, and unique book.
Software developers will certainly benefit from reading the antipatterns and solutions described here.
I immediately applied techniques from this book and improved my applications.
I really like how Bill has approached this book; it shows his unique.
This book is obviously the product of many years of practical experience with SQL databases.
Although it’s not a beginner’s book, any developer with a reasonable.
This is an excellent book for the software engineer who knows basic.
Karwin’s book is full of good and practical advice, and it was published at the right time.
Bill has captured the essence of a slew of traps that we’ve probably all.
A good read for SQL diehards, novices, and everyone in.
Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks.
Pragmatic Programmers, LLC was aware of a trademark claim, the designations have.
Every precaution was taken in the preparation of this book.
Our Pragmatic courses, workshops, and other products can help you and your team.
No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in any form, or by any means, electronic, mechanical, photocopying, recording, or.
An expert is a person who has made all the mistakes that.
Shortly after I finished my college degree in computer and information.
He had his own software startup company on the side that was.
How hard could it be to parse a single statement of a.
I found a reference for SQL and noticed immediately that this was a.
To call SELECT only one statement in that language is like calling.
To support execution of that single SQL statement, I realized I would.
I declined this opportunity to code an SQL parser and RDBMS engine.
My early experience with SQL seems to be a common one for software.
Most people are self-taught in SQL, learning it out of self-defense when.
Regardless of whether the person is a hobbyist or a professional programmer or an accomplished researcher with a PhD, SQL seems to be.
Once I learned something about SQL, I was surprised how different.
I’m writing SQL Antipatterns for software developers who need to use.
Gradually, you may increase your SQL skills by inspecting other applications.
You may find some topics in SQL Antipatterns that are well-known to.
You’ll see new ways of looking at the problems, even if you’re.
If you are a trained database administrator, you may already know.
What is an antipattern? An antipattern is a technique that is intended.
An antipattern is practiced widely in different ways, but with a thread of commonality.
People may come up with an idea that fits an antipattern independently or with help from a colleague, a book, or an article.
This book has four parts for the following categories of antipatterns:
Before you start coding, you should decide what information you.
After you know what data you need to store, you implement the.
This includes defining tables and indexes and choosing data types.
You need to add data to your database and then retrieve data.
There are right ways and wrong ways to employ SQL in an application, and this part of the book describes some common blunders.
It’s traditional to give both positive design patterns and antipatterns names that serve as a metaphor or mnemonic.
The appendix provides practical descriptions of some relational database theory.
Many of the antipatterns this book covers are the result of.
This is the task that you may be trying to solve.
This section describes the nature of the common solution and.
There may be certain clues that help you identify when an antipattern is being used in your project.
I’m not going to give lessons on SQL syntax or terminology.
Performance, scalability, and optimization are important for many people who develop database-driven applications, especially on the Web.
There are books specifically about performance issues related to database programming.
I try to present issues that apply to all database brands and also solutions that should work with all brands.
This book is about SQL and relational databases, not alternative technology such as object-oriented databases, key/value stores, columnoriented databases, document-oriented databases, hierarchical databases, network databases, map/reduce frameworks, or semantic data.
The following sections describe some conventions I use in this book.
In the context of database-related usage, the word index refers to an.
In other contexts, an index may mean an indicator and is typically pluralized as indices.
Both are correct according to most dictionaries, and this causes some confusion among writers.
The most common way to diagram relational databases is with entityrelationship diagrams.
I illustrate most of the topics in SQL Antipatterns using a database for a.
The following data definition language shows how I define the tables.
In some cases, choices are made for the sake of examples later in the.
I try to use only standard SQL so the example is.
In some chapters, especially those in Logical Database Design Antipatterns, I show different database definitions, either to exhibit the.
First and foremost, I owe my gratitude to my wife Jan.
I also want to express thanks to my reviewers for giving me a lot of their.
Thanks to my editor Jacquelyn Carter and the publishers of Pragmatic.
A Netscape engineer who shan’t be named once passed a.
Jaywalking You’re developing a feature in the bug-tracking application to designate.
At the time, it seemed simple to change the database to store a list.
The engineering department has been adding associate staff to their projects.
If they try to add more, they get an error.
You nod, “Yeah, you can only list so many people on a project,” as.
You have a feeling you’re going to be staying late.
I call this antipattern Jaywalking, because jaywalking is also an act of avoiding an.
When a column in a table has a single value, the design is straightforward: you can choose an SQL data type to represent a single instance.
In the example bug-tracking database, we might associate a product.
As your project matures, you realize that a product might have multiple.
In addition to the many-to-one relationship, we also need to.
To minimize changes to the database structure, you decide to redefine.
This seems like a win, because you’ve created no additional tables or.
Queries are difficult if all the foreign keys are combined into a single.
You can no longer use equality; instead, you have to use a test.
For example, MySQL lets you write something like the following to find all the products for account 12:
Pattern-matching expressions may return false matches and can’t benefit from indexes.
Likewise, it’s awkward and costly to join a comma-separated list to.
Joining two tables using an expression like this one spoils any chance.
Aggregate queries use functions like COUNT( ), SUM( ), and AVG( )
However, these functions are designed to be used over groups of rows, not.
To remove an item from the list, you have to run two SQL queries: one.
That’s quite a lot of code just to remove an entry from a list.
What prevents a user from entering invalid entries like banana?
Users will find a way to enter any and all variations, and your database.
If you store a list of string values instead of integers, some list entries.
How many list entries can you store in a VARCHAR(30) column? It depends on the length of each entry.
How can you know that VARCHAR(30) supports the longest list you will.
If you hear phrases like the following spoken by your project team, treat.
This question comes up when you’re trying to choose the maximum length of the VARCHAR column.
If you use regular expressions to pick out parts of a string, this.
You want to use an unambiguous separator character, but you.
You might improve performance for some kinds of queries by applying denormalization to your database organization.
Your application may need the data in a comma-separated format and.
Instead of storing the account_id in the Products table, store it in a separate table, so each individual value of that attribute occupies a separate.
When the table has foreign keys referencing two tables, it’s called an.
That is, each product may be associated through the intersection table to multiple accounts, and likewise.
See the entityrelationship diagram in Figure 2.1, on the following page.
Let’s see how using an intersection table resolves all the problems we.
To query the attributes of all products for a given account, it’s more.
Some people resist queries that contain a join, thinking that they perform poorly.
Querying account details is likewise easy to read and easy to optimize.
The following example returns the number of accounts per product:
The number of products per account is just as simple:
Other more sophisticated reports are possible too, such as the product.
You can add or remove entries in the list by inserting or deleting rows.
You can use a foreign key to validate the entries against a set of legitimate values in another table.
You can also use SQL data types to restrict entries.
You use no separator character, since you store each entry on a separate row.
There’s no ambiguity if the entries contain commas or other.
Since each entry is in a separate row in the intersection table, the.
If it’s appropriate to limit the number of entries, you should.
You can also create additional attributes for each entry by adding columns to the intersection table.
A tree is a tree—how many more do you need to look at?
Naive Trees Suppose you work as a software developer for a famous website for.
This is a modern website, so readers can contribute comments and.
It soon becomes clear, however, that it’s hard to retrieve a long chain.
You can get only the immediate children or perhaps join with the grandchildren, to a fixed depth.
The other idea you have is to retrieve all the comments and assemble.
There must be a better way to store the threads of comments so you.
Data may be organized in a treelike or hierarchical way.
A node may have a number of children and one.
The top node, which has no parent, is called the root.
In the previous hierarchical data, you may need to query individual.
Organization chart: The relationship of employees to managers is the.
Threaded discussion: As seen in the introduction, a tree structure may.
In this chapter, we’ll use the threaded discussion example to show the.
The naive solution commonly shown in books and articles is to add.
The SQL to define this table is shown next, and the entityrelationship diagram is shown in Figure 3.1, on the next page.
Adjacency List can be an antipattern when it’s the default choice of so.
You can retrieve a comment and its immediate children using a relatively simple query:
This kind of query is awkward when you use Adjacency List, because.
This query is also awkward because it includes descendants from progressively deeper levels by adding more columns.
Another way to query a tree structure from Adjacency List is to retrieve.
Copying a large volume of data from the database to the application.
You might require only aggregate information about the data, such as the COUNT( ) of comments.
Relocating a single node or a subtree is also easy:
However, deleting a node from a tree is more complex.
Then remove the descendants from the lowest level up to.
You can use a foreign key with the ON DELETE CASCADE modifier to automate this, as long as you know you always want to delete the descendants instead of promoting or relocating them.
If you instead want to delete a nonleaf node and promote its children.
These are examples of operations that require multiple steps when you.
That’s a lot of code you have to write for.
If you hear a question like the following, it’s a clue that the Naive Trees.
You could compromise by supporting only trees of a limited depth, but the next natural question.
I dread ever having to touch the code that manages the tree data.
You’ve adopted one of the more sophisticated solutions of managing hierarchies, but you’re using the wrong one.
I need to run a script periodically to clean up the orphaned rows.
Your application creates disconnected nodes in the tree as it deletes nonleaf nodes.
The Adjacency List design might be just fine to support the work you.
If those operations are all you need to do with your.
I wrote an inventory-tracking application for a computer data center.
Some equipment was installed inside computers; for example, a caching.
I needed an SQL solution to track the usage of hierarchical collections.
But I also needed to track each individual piece of equipment to.
The manager said the collections could have subcollections, and thus the.
In practice, however, the inventory application never needed to create a.
If my client had acknowledged that this would be enough to.
Some brands of RDBMS support extensions to SQL to support hierarchies stored in the Adjacency List format.
MySQL, SQLite, and Informix are examples of database brands that.
In the future, we might assume recursive query syntax will.
There are several alternatives to the Adjacency List model of storing.
They may seem more complex than Adjacency List at first, but they make some tree operations.
One weakness of Adjacency List is that it’s expensive to retrieve ancestors of a given node in the tree.
You can see a form of Path Enumeration in directory hierarchies.
In the Comments table, instead of the parent_id column, define a column.
You can query ancestors by comparing the current row’s path to a pattern formed from the path of another row.
You can query descendants by reversing the arguments of the LIKE predicate.
Once you can easily select a subset of the tree or the chain of ancestors.
Inserting a node is similar to inserting in the Adjacency List model.
You can insert a nonleaf node without needing to modify any other.
Copy the path from the new node’s parent, and append the ID.
For example, if you use MySQL, the built-in function LAST_INSERT_ID( )
Get the rest of the path from the parent of your new.
Path Enumeration has some drawbacks similar to those shown in.
Path Enumeration allows you to sort a set of rows easily by their hierarchy, as long as the elements between the separator are of consistent.
The Nested Sets solution stores information with each node that pertains to the set of its descendants, rather than the node’s immediate.
This information can be represented by encoding each node in.
Each node is given nsleft and nsright numbers in the following way:
An easy way to assign these values is by following a depth-first traversal.
It may be easier to visualize the pattern from Figure 3.3, on the following page than from this description.
On the other hand, this may smell too much like the Jaywalking antipattern.
Once you have assigned each node with these numbers, you can use.
For example, you can retrieve comment #4 and its descendants by searching for.
You can retrieve comment #6 and its ancestors by searching for nodes.
One chief strength of the Nested Sets design is that when you delete a.
For example, you can count the depth of a given node and delete its.
So, you can use an additional outer join to search for a node that.
For example, to find the immediate parent of comment #6, do this:
Manipulations of the tree, inserting and moving nodes, are generally.
When you insert a new node, you need to recalculate all the left and.
This includes the new node’s right siblings, its ancestors, and the right.
The Nested Sets model is best when it’s more important to perform.
The Closure Table solution is a simple and elegant way of storing hierarchies.
It involves storing all paths through the tree, not just those.
Instead of using the Comments table to store information about the tree.
The queries to retrieve ancestors and descendants from this table are.
To retrieve ancestors of comment #6, match rows in TreePaths where the.
To insert a new leaf node, for instance a new child of comment #5, first.
Then add a copy of the set of rows in.
To delete a leaf node, for instance comment #7, delete all rows in.
Notice that if you delete rows in TreePaths, this doesn’t delete the comments themselves.
You don’t necessarily want to delete a node when you change its relationship to other nodes.
To move a subtree from one location in the tree to another, first disconnect the subtree from its ancestors by deleting rows that reference the.
For instance, to move comment #6 from its position as a child of.
Then add the orphaned subtree by inserting rows matching the ancestors of the new location and the descendants of the subtree.
Both have quick and easy methods for querying ancestors and.
However, you can improve the Closure Table to make queries for immediate parent or child nodes easier.
Each of the designs has its own strengths and weaknesses.
In Figure 3.5, some operations are marked as easy or hard with each.
Adjacency List is the most conventional design, and many software developers recognize it.
Path Enumeration is good for breadcrumbs in user interfaces, but.
Closure Table is the most versatile design and the only design in.
There’s more to learn about storing and manipulating hierarchical data.
A good book that covers hierarchical queries is Joe Celko’s.
The creatures outside looked from pig to man, and from.
In his content management database, he stored articles for publishing.
He used an intersection table for a many-to-many association between a table of articles and a table of tags.
He was getting incorrect results from queries when counting the number of articles with a given tag.
When he queried all the rows matching that tag_id, he saw that the.
This table had a primary key, but that primary key wasn’t preventing.
The objective is to make sure every table has a primary key, but confusion about the nature of a primary key has resulted in an antipattern.
Everyone who has been introduced to database design knows that a.
The tricky part is choosing a column to serve as the primary key.
Textbook examples such as a person’s first name and last.
A new column is needed in such tables to store an artificial value that.
This type of primary key column is sometimes called a pseudokey.
To ensure rows can be given unique pseudokey values even when concurrent clients are inserting new rows, most databases provide a mechanism to generate unique integer values serially, outside the scope of.
I’ve heard some software developers claim that their table doesn’t need a primary key.
Sometimes these programmers want to avoid the imagined overhead of maintaining a unique index, or else they have tables with no columns they can use for this purpose.
A primary key constraint is important when you need to do the following:
If you don’t use primary key constraints, you create a chore for yourself: checking for duplicate rows.
How frequently should you run this check? What should you do with a duplicate when you find one?
A table without a primary key is like organizing your MP3 collection with no song titles.
You can still listen to the music, but you can’t find the one you want or keep duplicates out of your collection.
Even the terminology for pseudokeys is vendor-dependent, as shown by the following.
Pseudokeys are a useful feature, but they aren’t the only solution for.
Books, articles, and programming frameworks have established a cultural convention that every database table must have a primary key.
The presence of a column named id in every table is so common that.
Programmers learning SQL get the false idea that a primary key always means a column.
Adding an id column to every table causes several effects that make its.
You might see an id column defined as the primary key simply for the.
The word code has a number of definitions, one of which is a way to.
The name id is so generic that it holds no meaning.
How do you tell the bug id from the account id in your application code.
The name of the id column doesn’t help make the query any clearer.
You’re probably familiar with the SQL syntax for a join, using the keywords JOIN and ON preceding an expression to evaluate matching rows.
You can rewrite the previous query in the following way if.
However, if all tables are required to define a pseudokey primary key.
Some developers refuse to use compound keys because they say these.
Some people allocate a value for a new row by taking the greatest value currently in use and adding one.
This isn’t reliable when you have concurrent clients both querying for the next value to use.
To avoid the race condition, you have to block concurrent inserts while you read the current maximum value and then use it in a new row.
To do this, you have to lock the whole tablerow-level locking isn’t enough.
Table locks create a bottleneck because they cause concurrent clients to queue up for access.
They never allocate the same value to multiple clients and therefore never roll back allocation of a value, whether or not you commit that value in a row.
Because sequences work this way, multiple clients can generate unique values concurrently and be assured they won’t try to use the same value.
Most databases support some function to return the last value a sequence generated.
These functions return the value generated during the current session, even if other clients generate their own values concurrently.
This refusal is like a mathematician refusing to use two-dimensional or.
The symptom of this antipattern is easy to recognize: tables use the.
The developer who says this is confusing the term primary key.
I read that database theory says I should move values to a lookup.
They expect every table to define its primary key in the same way: as an integer pseudokey column named id.
If you use such a framework, you may want to conform to its conventions, because this gives you access to other desirable features of the.
There’s also nothing wrong with using a pseudokey, or assigning values from an auto-incrementing integer mechanism.
A pseudokey is a good choice as a surrogate for a natural key that’s too.
A primary key is a constraint, not a data type.
You can declare a primary key on any column or set of columns, as long as the data types.
You should also be able to define a column as an.
Don’t let inflexible conventions get in the way of good design.
The name should convey the type of entity that the primary key identifies.
Use the same column name in foreign keys where possible.
An industry standard exists to describe naming conventions for metadata.
The standard, called ISO/IEC 11179,1 is a guideline for “managing classification schemes” in information technology systems.
Like most ISO standards, this document is nearly impenetrable, but.
Some developers think that specifying the primary key column is necessary only when supporting legacy databases where they can’t use.
If your table contains an attribute that’s guaranteed to be unique, is.
Practically speaking, it’s not uncommon for every attribute in a table to.
Databases tend to evolve during the lifetime of a project, and decision makers may not respect the.
BugsProducts table, use those columns in a compound primary key.
Note that foreign keys that reference a compound primary key also need.
Victorious warriors win first and then go to war, while.
Can you take a look into this and get it fixed?
They’re screaming at me that they both need the equipment and that.
The database had many logical relationships but could not enforce referential integrity.
As the project evolved and the application manipulated data in new.
The project manager asked me to write quality control scripts that we.
These scripts examined the state of the database, found mistakes such.
Every table relationship had to be checked by these scripts.
The script solution worked, of course, but it was a costly reinvention.
What I needed was a way to make the application fail.
Relational database design is almost as much about relationships between tables as it is about the individual tables themselves.
When you declare a foreign key constraint for a column or set of.
You’re using a database design that’s so flexible it can’t support.
You believe that the index the database creates for the foreign key.
You use a database brand that doesn’t support foreign keys.
You have to look up the syntax for declaring foreign keys.
Even though it seems at first that skipping foreign key constraints.
Many people’s solution for referential integrity is to write application.
To avoid making referential integrity mistakes when you have no foreign.
To delete a row, you’d have to make sure no child rows exist:
The only remedy is for you to explicitly lock the Bugs table while you’re.
Any architecture that requires that kind of locking is never going to do.
The antisolution described in the story in this chapter uses developerwritten scripts to report corrupted data.
For example, in our bugs database, the Bugs.status column references.
You can imagine that you’d have to write a similar query for every referential relationship in your database.
If you find yourself in the habit of checking for broken references like.
Running hundreds of checks every day, or even more frequently, becomes quite a chore.
What happens when you do find a broken reference? Can you correct.
Inevitably, there are other cases where you can’t synthesize data to correct these kinds of mistakes.
It’s pretty unlikely that all your code touching the database is perfect.
You could easily perform similar database updates in several functions.
When you have to change the code, how can you.
It’s easy to introduce broken references through ad hoc SQL statements.
You need the database to be consistent—that is, you need to be able to.
You have to execute multiple statements manually, one for each child.
If you add another child table in a future enhancement to your.
The unsolvable problem is when you UPDATE a column that child rows.
You can’t update the child rows before you update the parent, and you can’t update the parent before you update the child values.
Some developers find these scenarios difficult to manage, so they decide.
If you hear people use phrases like the following, they’re probably practicing the Keyless Entry antipattern:
How do I query to check for a value that exists in one table and.
Usually this is to find orphan child rows whose parent has been.
Is there a quick way to check that a value exists in one table as.
Foreign keys? I was told not to use them because they slow down.
Sometimes you’re forced to use a database brand that doesn’t support.
There are also some ultra-flexible database designs where foreign keys.
You can apply the poka-yoke principle to your database design by.
Using foreign keys saves you from writing unnecessary code and ensures that all your code works the same way if you change the database.
This reduces the time to develop the code and also many hours of.
Foreign keys have another feature you can’t mimic using application.
This solution allows you to update or delete the parent row and lets the.
The way you declare the ON UPDATE or ON DELETE clauses in the foreign.
For example, RESTRICT for the foreign key on reported_by means that you.
If you add a new child table to the database, the foreign keys in the.
It’s true that foreign key constraints have a bit of overhead.
But compared to the alternative, foreign keys prove to be a lot more efficient.
You don’t need to run SELECT queries to check before you insert or.
You don’t need to lock tables to protect multitable changes.
You don’t need to run periodic quality control scripts to correct.
Foreign keys are easy to use, improve performance, and help you maintain consistent referential integrity during any data change, both simple.
If you try and take a cat apart to see how it works, the first.
Values can be compared to one another so that GROUP BY can.
What if you can’t rely on those assumptions? What if the date is stored.
You may encounter these problems and others when you employ the.
This is not a new problem; similar arguments against the inflexibility.
A conventional table consists of attribute columns that are relevant.
A different set of attributes represents a different type of.
In modern object-oriented programming models, however, different object types can be related, for instance, by extending the same base type.
In object-oriented design, these objects are considered instances of the.
Every issue is associated with a person who reported it.
For this example, suppose a feature is associated with a sponsor whose budget supports that feature’s development.
The solution that appeals to some programmers when they need to support variable attributes is to create a second table, storing attributes as.
Typically this is a foreign key to a parent table that has.
This is simply the name of a column in a conventional table, but in this new design, we have to identify the.
Each entity has a value for each of its attributes.
For example, a given bug is an entity we identify by its primary.
By adding one additional table, you seem to gain the following benefits:
The number of columns doesn’t need to grow to support new.
You avoid a clutter of columns that contain null in rows where the.
Your boss needs to run a report of the bugs reported per day.
To get the same information as the previous query using the EAV design, your boss needs to fetch rows from the IssueAttributes table that.
When you use EAV, you sacrifice many advantages that a conventional.
To help your boss generate accurate project reports, you should also.
In the EAV design, each attribute corresponds to a row in the IssueAttributes table, not a column.
However, SQL doesn’t support a constraint that can do this.
Your boss tells you he is having trouble running his report because.
Some people try to extend the EAV design by defining a separate attr_
This allows you to use data types but makes queries even worse:
You would need to add even more columns to support user-defined data.
In a conventional database, you can restrict the range of some attributes by defining a foreign key to a lookup table.
In the EAV design, you can’t apply this kind of constraint on the attr_
If you define this constraint, it would force every attribute to match a.
How would you know if a given bug has stored an attribute by yet.
One remedy might be to declare a foreign key on the attr_name column.
However, this doesn’t support attributes you define on the fly for each entity.
It’s natural to retrieve a row from the Issues table with all its attributes.
You want to fetch an issue in a single row as though it were.
Because each attribute is stored on a separate row of the IssueAttributes.
You must know all attributes at the time you write this query.
You must use outer joins because inner joins would cause the query.
If you hear phrases like the following spoken by your project team, it’s.
If you need a query to support such a high number of joins that.
I can’t figure out how to write a report for our e-commerce platform.
It’s hard to justify using the EAV antipattern in a relational database.
You have to compromise too many features that are strengths of the.
Most applications that need schemaless data really need it for only a.
If you have nonrelational data management needs, the best answer is.
Berkeley DB is a popular key-value store that’s easy to embed in.
CouchDB is a document-oriented database—a distributed keyvalue store that encodes values in JSON.
Hadoop and HBase make up an open source DBMS inspired by.
Tokyo Cabinet is a key-value store, designed in the vein of POSIX.
Applications spend a lot of energy discovering the structure of.
If EAV seems like the right design, you should take a second look before.
There are several ways to store such data without using EAV.
The simplest design is to store all related types in one table, with.
The name of this design comes from Martin Fowler’s book Patterns of.
As new object types are introduced, the database must accommodate.
You may encounter a practical limit on the number of.
Another limitation of Single Table Inheritance is that there is no metadata to define which attributes belong to which subtypes.
In your application, you can ignore some attributes if you know they don’t apply to.
Single Table Inheritance is best when you have few subtypes and few.
Another solution is to create a separate table for each subtype.
An advantage of Concrete Table Inheritance over Single Table Inheritance is that you are prevented from storing a row containing values.
Another advantage of Concrete Table Inheritance is that you don’t need.
However, it’s hard to tell the common attributes from subtype-specific.
Also, if you add a new attribute to the set of common attributes, you must alter every subtype table.
No metadata shows that the data stored in these subtype tables belong.
That is, if a programmer new to your project looks.
If you want to search all objects regardless of their subtypes, this is.
The Concrete Table Inheritance design is best used when you seldom.
A third solution mimics inheritance, as though tables were object-oriented classes.
Create a single table for the base type, containing attributes common to all subtypes.
The name of this design also comes from Martin Fowler’s book.
The one-to-one relationship is enforced by the metadata, since the.
Once you’ve found the entries that match your search, you.
You don’t need to know from the row in the base table what subtype the.
This is also a good candidate for defining a VIEW.
If you have many subtypes or if you must support new attributes frequently, you can add a BLOB column to store data in a format such.
The advantage of this design is that it’s completely extensible.
Every row stores a potentially distinct set of attributes, so you have as many subtypes as you.
The disadvantage is that SQL has little support for accessing specific.
This design is best when you can’t limit yourself to a finite set of subtypes and when you need complete flexibility to define new attributes.
Unfortunately, sometimes you’re stuck with the EAV design, such as if.
If this is the case, familiarize yourself with the trouble areas in the “Antipattern” section so.
Above all, don’t try to write queries that fetch entities as a single row.
The result of this query might look like the following:
This query is easier for you to write, and it’s easier for the database to.
It returns all the attributes associated with the issue, even if.
To use a result in this format, you need to write application code to loop.
This might seem like too much work, but it’s the consequence of a.
Polymorphic Associations Let’s allow users to make comments on bugs.
However, you might have two tables you can comment on.
You’d like to store Comments in a single table regardless of whether they.
Developers also try to write invalid SQL to query multiple tables, such.
But you can’t join to a different table per row in SQL.
What should be a clear answer to Dorothy’s simple question just confuses her when the Scarecrow tries to give her two answers.
A solution for these cases has become popular enough to be given a.
This is also sometimes called a promiscuous association, because it can reference multiple tables.
To make Polymorphic Associations work, you must add an extra string.
The extra column contains the name of the parent table referenced by the current row.
Bugs or FeatureRequests, corresponding to the names of the two possible parent tables in this association.
You can see one difference immediately: the foreign key declaration for.
In fact, since a foreign key must specify exactly one.
In both antipatterns, the name of a metadata object is stored as a string value.
In EAV, the name of an attribute column is stored as a string in the attr_name column.
In Polymorphic Associations, the names of the parent tables are stored in the issue_type column.
The issue_id value in the Comments table may occur in the primary key.
It’s therefore crucial to use the issue_type correctly when joining the.
For example, this will retrieve comments for a given bug by its primary.
Although the previous query works if bugs are stored in the single table.
Bugs, you run into a problem when Comments is associated with both.
To retrieve either a bug or a feature given a specific comment, you need.
In the example of Bugs and FeatureRequests, these two parent tables are.
For example, in an ecommerce database, both tables Users and Orders.
In this case, the Addresses table contains a polymorphic column that.
Notice that you have to choose one or the other.
Also, if a user has a shipping address as well as a billing address, you.
If you hear statements like the following, it’s a clue that the Polymorphic.
Like in EAV, you should be suspicious of any claims of unlimited.
What’s the entity_type column for? Oh, that tells you which thing.
Any foreign key must reference the same table on all rows.
For example, you could associate Comments to Bugs and FeatureRequests as.
You should avoid the Polymorphic Associations antipattern—use constraints like foreign keys to ensure referential integrity.
Associations often relies too much on application code instead of metadata.
You may find that this antipattern is unavoidable if you use an objectrelational programming framework such as Hibernate.
Such a framework may mitigate the risks introduced by Polymorphic Associations.
However, if you are implementing Polymorphic Associations from scratch without the aid of a framework, you’re.
It’s better to redesign your database to avoid the weaknesses of Polymorphic Associations but still support the data modeling you need.
One solution to this antipattern is simple once you see the nature of.
A foreign key in the child table Comments can’t reference multiple parent.
Create a separate intersection table for each parent table, and in.
Now the metadata can enforce data integrity, instead of relying on application code to manage the associations without error.
A potential weakness of this solution is that it permits associations that.
You can enforce at least part of this rule by declaring a.
This ensures that a given comment can be referenced only once in the.
However, the metadata doesn’t prevent a given comment from being referenced once in.
You can query comments given a specific bug or feature request simply.
You can query the matching bug or feature request based on an instance of a comment by using an outer join to both intersection tables.
You have to name all the possible parent tables, but that’s no more.
Sometimes you need to make the result of a query against multiple.
This query should be guaranteed to return a single row if your application has associated each comment with exactly one parent table.
Alternatively, look at the following query using the SQL COALESCE( )
Likewise, all fields in f.* would be null if the comment.
Both of these queries are pretty complex, so they’re good candidates for.
In object-oriented polymorphism, two subtypes can be referenced similarly because they implicitly share a common supertype.
You can fix that by creating a base table that all of.
Add the foreign key in the child Comments table to reference.
Note that the primary keys of Bugs and FeatureRequests are also foreign.
They reference the surrogate key value generated in the Issues.
Given a specific comment, you can retrieve the referenced bug or feature request using a relatively simple query.
Also, since the primary key value of the Bugs table and its.
You can join two tables even if there is no foreign key constraint.
Given a specific bug, you can retrieve its comments just as easily.
The point is that if you use an ancestor table like Issues, you can rely on.
The sublime and the ridiculous are often so nearly related.
Multicolumn Attributes I can’t count the number of times I have created a table to store people’s contact information.
In the contact information table, it’s easy to store these in.
The bug-tagging feature must support multiple tags, because tags are.
A defect could affect multiple systems or could affect the performance of printing.
We still have to account for multiple values in the attribute, but we.
It might seem natural to create multiple columns in this table, each.
As you assign tags to a given bug, you’d put values in one of these three.
Most tasks you could do easily with a conventional attribute now become more complex.
When searching for bugs with a given tag, you must search all three.
For example, to retrieve bugs that reference performance, use a query.
You might need to search for bugs that reference both tags, performance.
To do this, use a query like the following one.
The syntax required to search for a single value over multiple columns.
Adding and removing a value from the set of columns presents its own.
In this case, for instance, the result shows you that tag2 is null.
You face the risk that in the moment after you query the table and.
You can avoid this twostep query by using complex SQL expressions.
The following statement uses the NULLIF( ) function to make each column null if it equals a specific value.
The following statement adds the new tag performance to the first column that is currently null.
Another weakness of this design is that three columns might not be.
To keep the design of one value per column, you must define as.
One tactic is to guess at a moderate number of columns and expand.
Some databases implement this kind of table restructure by defining a new table to match the desired structure, copying the data.
If the user interface or documentation for your project describes an.
The Jaywalking and Multicolumn Attributes antipatterns have a common thread: these two antipatterns are both solutions for the same objective: to store an attribute that may have multiple values.
In the examples for Jaywalking, we saw how that antipattern relates to many-to-many relationships.
Be aware that both antipatterns are sometimes used for both types of relationships.
Admittedly, some attributes might have a limit on the number of selections on purpose, but it’s more common that there’s no such limit.
If the limit seems arbitrary or unjustified, it might be because of this.
Another clue that the antipattern might be in use is if you hear statements such as the following:
You need to decide how many columns to define in the table for a.
If you’re searching for a given value across multiple columns, this.
In some cases, an attribute may have a fixed number of choices, and.
It would be valid to define three ordinary columns in the Bugs table.
Sometimes you might still need to query over all three.
Another way to structure this is to create a dependent table for multiple.
However, this structure might lead to some of the problems.
Store the multiple values in multiple rows instead of multiple columns.
Also, define a foreign key in the dependent table to associate the values.
When all the tags associated with a bug are in a single column, searching for bugs with a given tag is more straightforward.
Even more complex searches, such as a bug that relates to two specific.
You can add or remove an association much more easily than with the.
The PRIMARY KEY constraint ensures that no duplication is allowed.
You are not limited to three tags per bug, as you were when there were.
Store each value with the same meaning in a single column.
Metadata Tribbles My wife worked for years as a programmer in Oracle PL/SQL and Java.
She described a case that showed how a database design that was.
A table Customers used by the Sales division at her company kept data.
But the Sales division needed to break down the revenue by year so they.
Then they entered incomplete data, only for customers they thought.
Performance degrades for any database query as the volume of data.
Even if a query returns results promptly with a few thousand.
The objective is to structure a database to improve the performance of.
In the television series Star Trek,1 “tribbles” are small furry animals.
Tribbles are very appealing at first, but soon they reveal.
Where do you put them? Who’s responsible for them? How long would.
We know from experience that querying a table with few rows is quicker.
Split a single long table into multiple smaller tables, using table.
Split a single column into multiple columns, using column names.
But you can’t get something for nothing; to meet the goal of having few.
Notice that by appending the year onto the base table name, we’ve combined a data value with a metadata identifier.
In those cases, we stored metadata identifiers (a column name and table name) as string data.
In Multicolumn Attributes and Metadata Tribbles, we’re making a data value into a column name or a table name.
If you use any of these antipatterns, you create more problems than you solve.
To split data into separate tables, you’d need some policy for which.
As you insert rows into the database, it’s your responsibility to use the.
Your application starts getting an error from all new bug reports, because you didn’t remember to.
This means that introducing a new data value can cause a need for a.
There’s no way to limit the data relative to the name of its table automatically, but you can declare a CHECK constraint in each of your.
Remember to adjust the value in the CHECK constraint when you create.
If you make a mistake, you could create a table that rejects.
One day, your customer support analyst asks to change a bug report.
It’s in the database as reported on 2010-01-03, but the customer.
But this correction makes the row an invalid entry in the Bugs_2010
You would need to remove the row from one table and insert it.
You should make sure that the primary key values are unique across.
If you use a database that supports sequence objects, you can use a.
You have to define one extra table solely to produce primary key values:
Inevitably, your boss needs a query that references multiple tables.
You can reconstruct the full set of bugs using a.
As the years go on and you create more tables such as Bugs_2011, you.
Your boss tells you to add a column to track the hours of work required.
If you’ve split the table, then the new column applies only to the one.
If you use a UNION query across your split tables as in the previous.
If a dependent table like Comments references Bugs, the dependent table.
The split table may also have problems being a dependent instead of a.
You can create a table containing columns that are bound to propagate by their nature, as we saw in.
Another example we might have in our bugs database is a table that.
For instance, in the following table, it’s only a matter of.
The following phrases may indicate that the Metadata Tribbles antipattern is growing in your database:
Then we need to create a table (or column) per.
When you describe your database with phrases using per in this.
What’s the maximum number of tables (or columns) that the.
Most brands of database can handle many more tables and columns than you would need, if you used a sensible database design.
If you think you might exceed the maximum, it’s a strong.
We found out why the application failed to add new data this.
How do I run a query to search many tables at once? All the tables.
If you need to search many tables with identical structure, you.
How do I pass a parameter for a table name? I need to query a.
You wouldn’t need to do this if your data were in one table.
Barry said when he started out hosting blogs, he hosted all his customers.
This did work well for the site initially, but it soon grew to very large-scale.
When Barry adds a server, it would be very hard to separate data within a.
It’s easier to back up and restore individual databases of moderate size.
Although it seems like the right thing to do from a data modeling.
These include horizontal partitioning, vertical partitioning, and using dependent tables.
You can gain the benefits of splitting a large table without the drawbacks by using a feature that is called either horizontal partitioning or.
You define a logical table with some rule for separating rows.
Physically, the table is split, but you can still execute SQL statements against.
You have flexibility in that you can define the way each individual table.
The previous example achieves a partitioning similar to that which we.
The number of separate physical tables used to store the rows is fixed.
Partitioning is not defined in the SQL standard, so each brand of database implements it in their own nonstandard way.
Nevertheless, some form of partitioning is now supported by every major.
Whereas horizontal partitioning splits a table by rows, vertical partitioning splits a table by columns.
For efficiency of both storage and retrieval, many database brands.
For example, in the Products table of our bugs database, we might store.
Logically, the installer file should be an attribute of the Products table.
But in most queries against that table, you wouldn’t need the installer.
Storing such a large volume of data in the Products table, which you use.
The remedy is to store the BLOB column in another table, separate from.
The previous example is extreme to make the point, but it shows the.
MySQL’s MyISAM storage engine, querying a table is most efficient.
If you store all variablelength columns in a separate table, then queries against the primary.
Instead of one row per project with multiple columns for each year, use.
You can store any number of rows per project in this table as.
Rounding Errors Your boss asks you to produce a report of the cost of programmer time.
Each programmer in the Accounts table has a different hourly rate, so you record.
To support this query, you need to create new columns in the Bugs.
You update the columns with information from the bug work logs and.
The next day, your boss shows up in your office with a copy of the.
I did the calculation by hand for comparison, and your.
The integer is a useful data type, but it stores only whole numbers like.
So, the objective is to store numeric values that aren’t whole numbers.
Many programmers naturally use the SQL FLOAT data type everywhere they need fractional numeric data, because they are accustomed.
You need to understand some characteristics of floatingpoint numbers in this format to use them effectively.
Many programmers are not aware of a characteristic of this floatingpoint format: not all values you can describe in decimal can be stored.
Out of necessity, some numbers must be rounded to a value.
To give some context for this rounding behavior, compare with rational numbers such as one-third, represented by a repeating decimal.
The true value cannot be represented in decimal, because you would need to write an infinite number of digits.
The compromise is to use finite precision, choosing a numeric value as.
Even if we increase the precision, we still can’t add three of these.
This is the necessary compromise of using finite precision to represent numbers that.
This means some legitimate numbers that you can imagine cannot be.
But in practice, most people won’t do this computation for every.
Some databases support related data types called DOUBLE PRECISION and.
The precision that these data types and FLOAT support varies by.
Some databases can compensate for the inexactness and display the.
It was formally made a standard in 1985, and it is now widely implemented in software, most programming languages, and microprocessors.
The format has three fields to encode a floating-point value: a field for a fraction portion of the value, a field for the exponent to which to raise the fraction, and a single-bit sign field.
One advantage of IEEE 754 is that by using the exponent, it can represent fractional values that are both very small and very large.
The format not only supports real numbers, but the range of values it supports is greater than integers in fixed-point format.
The double-precision format supports an even greater range of values.
But themost common use of fractional numeric values is probably to represent quantities of money.
There’s no need to use IEEE 754 for money, because the scaled decimal format described in this chapter can handle money values just as easily andmore accurately.
But the actual value stored in the FLOAT column may not be exactly this.
If you magnify the value by a billion, you see the discrepancy:
You might expect the magnified value returned by the previous query.
However, it’s not close enough for some other kinds of calculations to.
One example is using a FLOAT in an equality comparison.
We saw before that the value stored in hourly_rate is actually slightly.
So even though you assigned the value 59.95 to this.
One common workaround for this issue is to treat floating-point values.
However, the difference is still large enough that a comparison of finer.
Another example of the inexact nature of FLOAT causing accuracy problems is when you calculate aggregates of many values.
The cumulative impact of inexact floating-point numbers is even more.
It doesn’t matter how many times you apply this factor.
However, if the factor is actually 0.999, this has a different result.
A good example of applying a multiplication many times in succession.
Virtually any use of FLOAT, REAL, or DOUBLE PRECISION data types is suspect.
It seems natural to use FLOAT data types in SQL, because it shares.
Instead of FLOAT or its siblings, use the NUMERIC or DECIMAL SQL data.
These data types store numeric values exactly, up to the precision you.
You may also specify a scale in a second argument to the data type.
The scale is the number of digits to the right of the decimal point.
The precision and scale you specify applies to the column on all rows in.
In other words, you can’t store values with scale 2 on some.
The advantage of NUMERIC and DECIMAL are that they store rational.
When you compare it for equality to a literal value 59.95, the comparison succeeds.
Likewise, if you scale up the value by a billion, you get the expected.
The data types NUMERIC and DECIMAL behave identically; there should.
You still can’t store values that require infinite precision, such as onethird.
But at least we’re more familiar with values that have this restriction in decimal format.
If you need exact decimal values, use the NUMERIC data type.
Science is feasible when the variables are few and can be.
In a personal contact information table, the salutation is a good example of a column that can have only a few values.
Mrs., Ms., Dr., and Rev., you’ve accounted for virtually everyone.
That should settle it, since there are no other salutations you need to.
Unfortunately, your boss tells you that your company is opening a subsidiary in France.
Your assignment is to alter your contact table to permit these values.
This is a delicate job and may not be possible without interrupting.
You also thought your boss mentioned that the company is trying to.
Restricting a column’s values to a fixed set of values is very useful.
In 1953, this famous chain of ice cream parlors offered one flavor for each day of the month.
The chain used the slogan 31 Flavors for many years.
Today, more than sixty years later, Baskin-Robbins offers twentyone classic flavors, twelve seasonal flavors, sixteen regional flavors, as well as a variety of Bright Choices and Flavors of the Month.
Even though its ice cream flavors were once an immutable set that defined its brand, Baskin-Robbins expanded its choices and made them configurable and variable.
The same thing could happen in the project for which you’re designing a database—in fact, you should count on it.
For example, in the Bugs table of our example database, the status column indicates whether a given bug is NEW , IN PROGRESS, FIXED, and.
The significance of each of these status values depends on how.
Many people choose to specify the valid data values when they define.
The column definition is part of the metadata—the definition of the table structure itself.
For example, you could define a check constraint on the column.
MySQL supports a nonstandard data type called ENUM that restricts the.
In MySQL’s implementation, you declare the values as strings, but.
Finally, you could write a trigger that contains the set of permitted.
Suppose you’re developing a user interface for the bug tracker so that.
How do you query the database for an enumerated list of values that are currently allowed in the status column?
Your first instinct might be to query all the values currently in use, with.
However, if all the bugs are new, the previous query returns only NEW.
If you use this result to populate a user interface control for the status of.
To get the complete list of permitted status values, you need to query.
For example, if you used MySQL’s ENUM data type, you can use.
You can’t simply get the discrete enumeration values from the INFORMATION_SCHEMA in a conventional result set.
For example, the previous query in MySQL returns a column of type.
LONGTEXT, with the value ENUM('NEW', 'IN PROGRESS', 'FIXED'), including the parentheses, commas, and single quotes.
You must write application code to parse this string and extract the individual quoted values.
The queries needed to report check constraints, domains, or UDTs are.
This is an easy way for bugs to affect your project as application data.
The most common alterations are to add or remove one of the permitted.
There’s no syntax to add or remove a value from an ENUM or.
The following is an example of adding DUPLICATE as one new.
You need to know that the previous definition of the column allowed.
Some database brands can’t change the definition of a column unless.
As a matter of policy, changing metadata—that is, changing the definition of tables and columns—should be infrequent and with attention.
If you make a value obsolete, you could upset historical data.
For example, you change your quality control process to replace FIXED with two.
If you remove FIXED from the enumeration, what do you do with bugs.
You may have to keep an obsolete value that old rows reference.
The problems with using ENUM or a check constraint arise when the set.
If you’re considering using ENUM, first ask yourself Report erratum.
If so, it’s probably not a good time to employ an ENUM.
We have to take the database offline so we can add a new choice.
This is a sign that a set of values is baked into the definition of a.
You should never need to interrupt service for a change.
The status column can have one of the following values.
Shouldn’t need to are weasel words, and this says something quite.
The list of values in the application code got out of sync with the.
This is a risk of maintaining information in two different places.
As we discussed, ENUM may cause fewer problems if the set of values.
It’s still difficult to query the metadata for the set of.
Check constraints can be used in many ways other than simply to.
There’s a better solution to restrict values in a column: create a lookup.
Then declare a foreign key constraint on Bugs.status referencing the new.
When you insert or update a row in the Bugs table, you must use a.
The set of permitted values is now stored in data, not metadata as it.
You can even sort the set of values the user can choose from.
When you use a lookup table, you can add a value to the set with.
You can make a change like this without interrupting access to the table.
You can also rename a value easily, if you declared the foreign key with.
You can’t DELETE a row from the lookup table if it’s referenced by a row in.
However, you can add another attribute column to the lookup table to.
This allows you to maintain historical data in the Bugs.status column, while distinguishing between the.
Use UPDATE instead of DELETE to make a value obsolete:
When you retrieve the set of values to show in a user interface for users.
Unlike the ENUM data type, check constraints, or domains or UDTs, the.
You can also keep a virtually unlimited number of values in your lookup.
Use metadata when validating against a fixed set of values.
Use data when validating against a fluid set of values.
It doesn’t take long during smoke testing to notice a problem: your.
You remember now that in this application, images are stored outside.
The database stores the path to the image, and the application opens each image.
Images and other media are used in most applications these days.
Sometimes media are associated with entities stored in the database.
For example, you may allow a user to have a portrait or avatar that is.
The objective described in this chapter is to store images and associate.
Likewise, you can store multiple images of the same type in a dependent table.
That much is straightforward, but choosing the data type for an image.
It may put me in an unpopular position, but I’m going to describe several real risks to this design in the following sections.
Unless you design your application to remove these “orphaned” image.
Normally, when you update or delete data, these changes aren’t visible.
However, any change you make to files outside the database don’t work.
If you remove a file, it is immediately inaccessible to other.
And if you change the contents of the file, other clients see.
Also, the impact is minor in this example; a missing image is hardly rare in a web.
It’s normal to roll back transactions in case of errors, or even if the logic.
For example, suppose you remove a screenshot file as you execute a.
The row in the database is restored but not the image file.
Most database brands provide a client tool to assist in backing up a.
A backup tool doesn’t know how to include files referenced by pathname.
Even if you include the external files with the backup, it’s hard to.
External files circumvent any privileges that you assign with the GRANT.
Read the actual image -- I hope the path is correct!
One advantage of using a database is that it helps us preserve data.
When you put some of your data in external files, you circumvent this advantage, and you have to write application code to perform.
What is the data backup and restore procedure? How can a backup be verified? Have you tested restoring data on a clean server or.
Do images accumulate, or are they removed from the system when.
Which users of the application have access to view images? How is.
Can I cancel a change to an image? If so, should the application.
Projects that are guilty of the antipattern typically fail to think through.
Not every application needs robust transaction management or SQL access control for image files.
There are good reasons to store images or other large objects in files.
The database is much leaner without images, because images tend.
Backing up the database is faster and the result is smaller if.
You must copy images from the filesystem as a separate backup step, but this can be more manageable.
If images are in files external to the database, it’s easier to do ad.
If these advantages of storing images in files are important and the.
Some database brands support special SQL data types that do reference external files more or less transparently.
I designed an application that stored images outside a database for a.
I worked on this project at a time when the practical limits of applications.
It made sense given these constraints to store images in a.
You need to plan how your application uses images to know whether the.
If any of the issues described in the “Antipattern” section of this chapter.
If you store an image in this way in a BLOB column, all the issues are.
Changes to an image are not visible to other clients until you commit the change.
Rolling back a transaction restores the previous state of the image.
Updating a row creates a lock, so no other client can update the.
The maximum size for a BLOB varies by database brand, but it’s enough.
Oracle supports data types called LONG RAW or BLOB, with capacity up to.
Images usually exist in a file to begin with, so you need some way to.
You can also save the contents of a BLOB column to a file.
MySQL has an optional clause of the SELECT statement to store the result.
You can also fetch the image data from the BLOB and output it directly.
Resources outside the database are not managed by the database.
Whenever any result is sought by its aid, the question will.
Index Shotgun “Hey! You got a minute? I could use your help,” the Oklahoman accent.
The thing is, you’ve got a database here that’s pretty much taken over.
I got in there to take a look, and I see.
You’ve got no indexes on some tables and every index in.
Son, I tuned everything I can; that’s why we’re still running down here.
Performance is the single most common concern I hear from database.
Just look at the talks scheduled at any technical conference: they’re full of tools and techniques to squeeze more work out of.
When I give a talk about a way to structure a database.
The best technique for improving performance in your database is to.
An index is a data structure that the database uses.
An index provides an easy way for the database to find values.
Software developers typically don’t understand how or when to use an.
Documentation and books about databases rarely or never contains a clear guide for when to use an index.
When we choose our indexes by guessing, we inevitably make some.
We commonly read that a database incurs overhead as it keeps an index.
Each time we use INSERT, UPDATE, or DELETE, the database has.
Did you know that the ANSI SQL standard says nothing about indexes? The implementation and optimization of data storage is not specified by the SQL language, so every brand of database is free to implement indexes differently.
Most brands have similar CREATE INDEX syntax, but each brand has flexibility to innovate and add their own proprietary technology.
Likewise, there is no standard for index maintenance, automatic query optimization, query plan reporting, or commands like EXPLAIN.
To get the most out of indexes, you have to study the documentation for your brand of database.
The specific syntax and features of indexes vary greatly, but the logical concepts apply across the board.
Yes, because those people contribute to the success of your company.
In a typical application, you’ll run hundreds of queries against a table.
An index can also help an UPDATE or DELETE statement by finding the.
A statement that searches an unindexed column has to perform a full.
You benefit from an index only if you run queries that use that index.
There’s no benefit to creating indexes that you don’t use.
Bill Cosby told a story about his vacation in Las Vegas: He was so.
If you cover a database table with indexes, you incur a lot of.
The next type of mistake is to run a query that can’t use any index.
Developers create more and more indexes, trying to find some magical.
We can think of a database index using an analogy to a telephone book.
If I ask you to look up everyone in the telephone book whose last name.
However, if I ask you to look up everyone in the telephone book whose.
Some examples of queries that can’t benefit from this index include the.
Even if you create an index for the date_reported column, the order.
We’re back to the problem that rows with that specific first name.
The result of the previous query is the same as the.
The index in our example helps find that last name, but it doesn’t.
Because the pattern in this search predicate could occur anywhere in the string, there’s no way the sorted index data structure.
This is probably the single most common SQL question, but it’s.
It’s the ratio of the number of distinct values in the index to the total number of rows in the table:
The lower the selectivity ratio, the less effective an index is.
This book has an index of a different type: each entry in a book’s index lists the pages where the entry’s words appear.
If a word appears frequently in the book, it may list many page numbers.
To find the part of the book you’re looking for, you have to turn to each page in the list one by one.
Indexes don’t bother to list words that appear on too many pages.
If you have to flip back and forth from the index to the pages of the book too much, then you might as well just read the whole book cover to cover.
Likewise in a database index, if a given value appears on many rows in the table, it’s more trouble to read the index than simply to scan the entire table.
In fact, in these cases it can actually be more expensive to use that index.
Ideally your database tracks the selectivity of indexes and shouldn’t use an index that gives no benefit.
If you need to design a database for general use, without knowing what.
The Index Shotgun antipattern is about creating or dropping indexes.
Commonwisdom in software developer communities is that the database is always the slowest part of your application and the source of performance issues.
For example, in one application I worked on, my manager asked me to find out why it was so slow, and he insisted it was the fault of the database.
After I used a profiling tool to measure the application code, I found that it spent 80 percent of its time parsing its own HTML output to find form fields so it could populate values into forms.
The performance issue had nothing to do with the database queries.
Before making assumptions about where the performance problem exists, use software diagnostic tools to measure.
Most databases provide some way to log the time to execute SQL queries so you.
MySQL and PostgreSQL can log queries that take longer to execute than a specified threshold of time.
Once you know which queries account for the most time in your application, you know where you should focus your optimizing attention for.
The area of greatest cost in your application isn’t necessarily the most.
Disable any query result caching while you’re measuring query performance.
This type of cache is designed to bypass query execution and.
You can get more accurate information by profiling your application.
Remember to disable or turn down the reporting rate of profilers after.
Having identified the query that has the greatest cost, your next step is.
You can get the database to give you a report of.
The syntax to request a QEP varies by database brand:
There’s no standard for what information a QEP report includes or the.
Let’s look at a sample SQL query and request a QEP report:
In the MySQL QEP report shown in Figure 13.1, the key column shows.
Also, the extra notes in the last column indicate that the query will sort.
The LIKE expression forces a full table scan in Bugs, and there is no index.
We can improve this query if we create a new.
Now that you have the optimizer’s QEP for your query, you should look.
If an index provides all the columns we need, then we don’t need to read rows of data from the table at all.
Imagine if telephone book entries contained only a page number; after you looked up a name, you would then have to turn to the page it referenced to get the actual phone number.
It makes more sense to look up the information in one step.
Looking up a name is quick because the book is ordered, and right there you can get other attributes you need for that entry, such as the phone number and perhaps also an address.
You can define the index to include extra columns, even though they’re not otherwise necessary for the index.
If your query references only the columns included in the index data structure, the database generates your query results by reading only the index.
The database doesn’t need to read the corresponding rows from this table.
You can’t use covering indexes for every query, but when you can, it’s usually a great win for performance.
Some databases have tools to do this for you, collecting query trace.
Even without automatic advisors, you can learn how to recognize when.
You need to study your database’s documentation to interpret the QEP report.
This step is important: after creating indexes, profile your queries.
It’s important to confirm that your change made a difference.
You can also use this step to impress your boss and justify the work.
Database servers allow you to configure the amount of system memory.
You probably want to raise the size of the cache.
How much memory should you allocate to cache? There’s no single.
You may also benefit from preloading indexes into cache memory, instead of relying on database activity to bring the most frequently used.
In practice, you may not see a large difference between an index that is.
Like most features related to indexes, each database brand uses vendor-specific terminology, syntax, and capabilities.
How frequently should you rebuild an index? You might hear generic.
It also depends on how large the table is and how important it is to get optimal.
Is it worth spending hours rebuilding indexes for a large but seldom used table if you can expect to gain.
A lot of the knowledge about getting the most out of indexes is vendorspecific, so you’ll need to research the brand of database you use.
Know your data, know your queries, and MENTOR your indexes.
As we know, there are known knowns; there are things we.
Fear of the Unknown In our example bugs database, the Accounts table has columns first_
Suppose your boss asks you to modify the database to add the user’s.
What happened to everyone else’s names? Can you fix this before your.
It’s inevitable that some data in your database has no value.
There are many ways you can use a null value productively in SQL.
You can use null in place of a value that is not available at the.
A given column can use a null value when it has no applicable.
A function can return a null value when given invalid inputs, as.
An outer join uses null values as placeholders for the columns of.
The objective is to write queries against columns that contain null.
Many software developers are caught off-guard by the behavior of null.
Unlike in most programming languages, SQL treats null as a.
Sybase, null is exactly the same as a string of zero length.
One case that surprises some people is when you perform arithmetic.
For example, many programmers would expect the result to be 10 for bugs that have been given no.
Null is not the same as a string of zero length.
The following query returns only rows where assigned_to has the value.
You might think that the next query returns the complementary set of.
However, neither query result includes rows where assigned_to is null.
Any comparison to null returns unknown, not true or false.
It’s common to make the following mistakes searching for null values.
The condition in a WHERE clause is satisfied only when the expression.
It’s also difficult to use null in a parameterized SQL expression as if the.
The previous query returns predictable results when you send an ordinary integer value for the parameter, but you can’t use a literal NULL as.
If handling null makes queries more complex, many software developers choose to disallow nulls in the database.
Jack, a software developer, described his client’s request that he prevent.
Jack asked what other value should he use to represent.
I told Jack that representing a missing value is the exact purpose of null.
No matter what other value he chooses to signify a missing value, he’d.
Jack’s client’s attitude to null is wrong; similarly, I could say that I don’t.
What exactly is wrong with this practice? In the following example, declare the previously nullable columns assigned_to and hours as NOT NULL:
Let’s say you use -1 to represent an unknown value.
The hours column is numeric, so you’re restricted to a numeric value to.
In another column, the value -1 might be significant, so you have to.
This adds a lot of meticulous and unnecessary work to a project.
When you declare a column as NOT NULL, it should be because it would.
If you find yourself or another member of your team describing issues.
How do I find rows where no value has been set in the assigned_to.
The full names of some users appear blank in the application.
Codd, the computer scientist who developed relational theory, recognized the need for null to signify missing data.
Date has shown that the behavior of null as defined in the SQL standard has some edge cases that conflict with relational logic.
The fact is that most programming languages are not perfect implementations of computer science theories.
The SQL language supports null, for better or for worse.
We’ve seen some of the hazards, but you can learn how to account for these cases and use null productively.
The report of total hours spent working on this project includes.
Your aggregate query to sum the hours probably includes an expression in the WHERE clause that fails to be true when priority is.
Watch out for unexpected results when you use not equals.
It turns out we can’t use the string we’ve been using to represent.
This is a likely consequence of assigning a special flag value that.
Recognizing problems with your handling of nulls can be elusive.
Problems may not occur during application testing, especially if you overlooked some edge cases while designing sample data for tests.
If a null can creep into the data, you can count on it.
Using null is not the antipattern; the antipattern is using null like an.
One situation where you need to treat null as an ordinary value is when.
Parameters and bound fields with this property automatically convert an empty.
Finally, null won’t work if you need to support several distinct missingvalue cases.
Let’s say you want to distinguish between a bug that has.
Most problems with null values are based on a common misunderstanding of the behavior of SQL’s three-valued logic.
Suppose Stan is thirty years old, while Oliver’s age is unknown.
Of course, these examples apply not only when using the NULL keyword.
The key concept for understanding how null values behave in boolean.
A null value certainly isn’t true, but it isn’t the same as false.
Since neither equality nor inequality return true when comparing one.
Consider the following case, where a nullable column may behave in a more intuitive way by serendipity.
Here the nullable column assigned_to is compared to the string value ’NULL’ (notice the quotes), instead of the actual NULL keyword.
Where assigned_to is null, comparing it to the string ’NULL’ is not true.
The row is excluded from the query result, which is the programmer’s intent.
The other case is that the column is an integer compared to the string ’NULL’
The integer value of a string like ’NULL’ is zero in most brands of database.
The integer value of assigned_to is almost certainly greater than zero.
It’s unequal to the string, so therefore the row is included in the query result.
Thus, by making another common mistake, that of putting quotes around the NULL keyword, some programmers may unwittingly get the result they wanted.
Unfortunately, this coincidence doesn’t hold in other searches, such as WHERE assigned_to = ’NULL’
This relieves you from writing tedious expressions that must test IS NULL.
You can use this predicate with query parameters to which you want to.
Support for IS DISTINCT FROM is inconsistent among database brands.
It’s recommended to declare a NOT NULL constraint on a column for.
It’s better to allow the database to enforce constraints uniformly rather than rely on application code.
For example, it’s reasonable that any entry in the Bugs table should have.
Likewise, rows in child tables like Comments must include a non-null.
What default, if any, should you declare for this column? It’s valid and.
In some queries, you may need to force a column or expression to be.
What you need is a way to set a default for a.
In the story about concatenating users’ names shown in the story opening this chapter, you could use COALESCE( ) to make an expression that.
Use null to signify a missing value for any data type.
Ambiguous Groups Suppose your boss needs to know which projects in the bugs database.
Your boss is a detail-oriented person, and he spends some time looking.
How can you explain this problem? Why does it affect one product but.
Most programmers who learn SQL get to the stage of using GROUP BY.
For example, a query to get the latest bug reported for each product in.
A natural extension to this query is to request the ID of the specific bug.
However, this query results in either an error or an unreliable answer.
This is a common source of confusion for programmers using SQL.
The objective is to run a query that not only reports the greatest value.
The root cause of this antipattern is simple, and it reveals a common misconception that many programmers have about how grouping.
The rows in each group are those rows with the same value in the column or columns you name after GROUP BY.
Every column in the select-list of a query must have a single value row.
The MAX( ) expression is also guaranteed to result in a single value for.
However, the database server can’t be so sure about any other column.
In this example, there are many distinct values for bug_id for a given.
In a grouping query that reduces to a single row per.
Since there is no guarantee of a single value per group in the “extra”
Most brands of database report an error if you try to run any query.
The common misconception that programmers have is that SQL can.
If two bugs have the exact same value for date_reported and that is.
If you query for two different aggregate functions, for example.
MAX( ) and MIN( ), these probably correspond to two different rows.
If none of the rows in the table matches the value returned by the.
These are examples of why the Single-Value Rule is important.
It would be clever if the database could tell an ambiguous.
In most brands of database, writing a query that violates the SingleValue Rule should elicit an error immediately as you prepare the query.
The following are examples of error messages given by some brands of.
For example, the following query reports who reported bugs and which days they reported bugs, but only one row per date and person:
A grouping query can achieve the same result by omitting any aggregate function.
The query result is reduced to one row for each distinct pair of values in the column named in the GROUP BY clause:
Both queries produce the same result and should be optimized and executed similarly, so the difference in this example is only a matter of preference.
Column 'Bugs.bug_id' is invalid in the select list because it is not.
In SQLite and in MySQL, ambiguous columns may contain unexpected.
As we’ve seen, MySQL and SQLite can’t guarantee a reliable result for.
In other words, if you know the value of reported_by, then you know the.
This kind of unambiguous relationship is called a functional dependency.
The most common example of this is between the primary key of.
Bugs.reported_by has a similar relationship with the dependent attributes of the Accounts table, because it references the primary key of.
MySQL or SQLite and you’re careful to query only functionally dependent columns, you can use this kind of grouping query and still avoid.
The sections that follow describe several ways you can resolve this.
The query reveals the date of the latest bug per product, even though it.
A correlated subquery contains a reference to the outer query and so.
Use this solution as a simple solution that is readable and easy to code.
However, keep in mind that this solution isn’t likely to be the best for.
You can use a subquery as a derived table, producing an interim result.
Notice that you can get multiple rows per product if the latest date.
Use the derived table solution as a more scalable alternative to the correlated subquery.
However, the database must store the interim result set in a temporary table, so this still.
You can create a join that tries to match against a set of rows that may.
So, where the query finds null, we know no such row was found.
It takes a few minutes of gazing at this query, and perhaps some doodles on notepaper, for most people to see how it works.
Use the JOIN solution when the scalability of the query over large sets of.
Although it’s a tougher concept to grasp and therefore more difficult to maintain, it often scales better than a subquerybased solution.
You can make the extra column comply with the Single-Value Rule by.
Use this solution only when you can rely on the latest bug_id being the.
Finally, you can use another aggregate function on bug_id to avoid violating the Single-Value Rule.
GROUP_CONCAT( ) that concatenates all the values in the group into one.
This query doesn’t reveal which bug_id corresponds to the latest date;
Another disadvantage of this solution is that it isn’t standard SQL.
Some other brands of database don’t support custom functions, so the.
Use this solution when you expect the extra column to have a single.
The generation of random numbers is too important to be.
Random Selection You’re writing a web application that displays advertisements.
Things go well for the first few days, but the application gradually.
Learning from past experiences, you first try to find the performance.
You measure the time to load web page, but curiously, there are no problems with the performance in any of the SQL.
Finally, you realize that the database on your production website is.
With a greater number of ads to choose from, the.
How can you redesign the query that chooses random ads before your.
It’s surprising how frequently we need an SQL query that returns a random result.
This seems to go against the principles of repeatability and.
Displaying rotating content, such as an advertisement or a news.
It’s better to query the database for this sample, as an alternative to.
The objective is to write an efficient SQL query that returns only a.
The most common SQL trick to pick a random row from a query is to.
Although this is a popular solution, it quickly shows its weakness.
It also benefits from an index, because an index is.
If your sorting criteria is a function that returns a random value per.
So, the order has no relation to the values in each row.
The order is also different each time you sort in this way.
Sorting by a nondeterministic expression (RAND( )) means the sorting.
That’s the point of them being random: they are different and unpredictable each time they’re selected.
This is a problem for the performance of the query, because using an.
A table scan sort is much slower than an index-assisted.
Another weakness of the sort-by-random technique is that after the.
Both of these problems are unnoticeable when you run the query over a.
The technique shown in the antipattern is straightforward, and many.
The query to select a random sample worked well against trivial data during development and testing, but it gets progressively.
No amount of database server tuning, indexing, or caching can improve the scalability.
How can I increase memory for my application? I need to fetch all.
You shouldn’t have to load all the rows into the application, and.
Does it seem to you like some entries come up more frequently.
The inefficiency of the sort-by-random solution is tolerable if your data.
For example, you could use a random method for assigning a programmer to fix a given bug.
The sort-by-random technique is an example of a query that’s bound to.
Instead of searching fruitlessly for a way to optimize an unoptimizable query, rethink your approach.
One technique that avoids sorting the table is to choose a random value.
This solution assumes that primary key values start at 1 and that primary key values are contiguous.
This is similar to the preceding solution, but if you have gaps of unused.
This solves the problem of a random number that misses any key.
Use this solution when gaps are uncommon and when it’s not important for all key values to be chosen with equal frequency.
You can use application code to pick one value from the primary keys.
Then query the full row from the database using that.
This avoids sorting the table, and the chance of choosing each key value.
Fetching all the bug_id values from the database might return a.
The query must be run twice: once to produce the list of primary.
Use this solution when you’re selecting a random row from a simple.
This solution is good for choosing from a list of noncontiguous values.
Still another technique that avoids problems found in the preceding.
This solution relies on the nonstandard LIMIT clause, supported by MySQL, PostgreSQL, and SQLite.
An alternative that uses the ROW_NUMBER( ) window function works in.
Use this solution when you can’t assume contiguous key values and.
Any given brand of database might implement its own solution for this.
You should read the documentation for the proprietary solution in your.
Poor Man’s Search Engine I was working in a technical support job in 1995, at a time when companies were just starting to adopt the Web as a way to provide information.
We quickly realized that as the collection grew, it needed to be searchable, because customers didn’t want to browse through hundreds of.
We wanted our customers to search the articles, narrowing down the.
The most flexible and straightforward interface was to allow the customer to enter any set of words.
If that careful description sounds superfluous to you, that shouldn’t be.
Any application that stores text needs to search for words or phrases.
Comparing substrings is bound to be inefficient or inaccurate in SQL.
In spite of this, we need a way to compare a short string to a longer.
The most widely supported of these is the LIKE predicate.
The LIKE predicate supports a wildcard (%) that matches zero or more.
Using this wildcard before and after a key word matches.
Regular expressions are also supported by many database brands, although not in a standard way.
You don’t need wildcards, because conventionally regular expressions match the pattern against any substring anyway.
A second problem of simple pattern-matching using LIKE or regular.
The previous example matches text that contains the words one, but.
The regular expressions supported by your database might support a.
Given the problems of performance and scalability and the gymnastics.
Some questions like the following commonly indicate that the Poor.
How do I insert a variable in between two wildcards in a LIKE.
The question usually comes up when the programmer wants to do.
How can I write a regular expression to check that a string contains multiple words, that the string doesn’t contain a certain.
If a complex problem seems too hard to solve with a regular expression, it probably is.
The search feature of our website has become unusably slow as.
As the volume of data goes up, the antipattern solution shows.
Performance is often important, but some queries are run so infrequently that it doesn’t make sense to invest a lot of resources to optimize them.
It’s hard to use pattern-matching operators for complex queries, but.
It’s best to use a specialized search engine technology, instead of SQL.
Another alternative is to reduce the recurring cost of search by saving.
The following sections describe some of the technologies offered as.
Every major brand of database has invented their own answer to the.
The following are brief descriptions of full-text search features in several.
MySQL provides a simple full-text index type for the MyISAM storage.
Use the MATCH( ) function to search for a key word among the indexed.
Since MySQL 4.1, you can also use a simple boolean expression notation in the pattern to filter results more carefully.
The text indexing in Oracle is complex and rich, so.
Create an index of this type for a single text column.
Use the CONTAINS( ) operator to search using this index.
This index type is specialized for short text samples such as those.
The CATSEARCH( ) operator takes two arguments for searching the.
This index type is specialized for searching an XML document with.
Suppose you have a large collection of documents in your database and you need to classify them based on their content.
With the CTXRULE index, you can design rules to analyze documents and report their classification.
Alternatively, you can provide a sample set of documents with your idea of their classifications and have Oracle design the rules to apply to the rest of the.
You can even fully automate the process, letting Oracle analyze your document collection and come up with a.
Examples using CTXRULE indexes are beyond the scope of this book.
To perform the familiar example of searching for bugs that include the.
Next, define a full-text index on the Bugs table, add columns to the.
To get the best benefit of performance, you need to store content as its.
Make sure the TSVECTOR column is kept in sync with the content in the.
You should also create a generalized inverted index (GIN ) index on the.
After this, you can use the PostgreSQL text search operator @@ to.
Standard tables in SQLite don’t support efficient full-text searches, but.
For example, add the following options to Makefile.in, and then.
Once you have a version of SQLite with FTS enabled, you can create.
Now you can query the FTS virtual table BugsText using the efficient fulltext search predicate MATCH, and you can join matching rows to the.
Using the name of the FTS table as a pseudocolumn.
If you need to search text in a way that works the same regardless of.
Indexing and searching is fast in Sphinx Search, and it supports distributed queries as well.
You can use Sphinx Search to index data stored in a MySQL database.
By modifying a few fields in a configuration file sphinx.conf, you.
You may declare some columns as attributes for restricting or sorting results.
Finally, another SQL query fetches a full row from the database given a primary key value coded as $id.
Once you declare this configuration in sphinx.conf, you can create the.
Sphinx Search also has a daemon process and an API with which to.
The major disadvantage of the current software is that the.
Sphinx Search over a data source that updates frequently requires.
Lucene builds an index in its proprietary format for a collection of text.
The Lucene index doesn’t stay in sync with the source data.
If you insert, delete, or update rows in the database, you.
Using the Lucene search engine is a bit like using a car engine; you.
Lucene doesn’t read data collections from an SQL database directly.
Suppose you don’t want to use proprietary search features, nor do you.
In a manyto-many relationship, the index associates these words with the text.
Next, add a row to BugsKeywords for every keyword that matches the.
Next, we write a stored procedure to make it easier to search for a.
Now we can call this stored procedure and pass the desired keyword.
The procedure returns the set of matching bugs, whether it has to.
There’s another piece to this solution: we need to define a trigger to.
The keyword list is populated naturally as users perform searches, so.
I used an inverted index for my knowledge-base application that I described at the start of this chapter.
You don’t have to use SQL to solve every problem.
Spaghetti Query Your boss is on the phone with his boss, and he waves to you to come.
The executives are in a budget meeting, and we’re going to have our.
I need to know how many products we work on, how many developers fixed bugs, the average bugs.
One of the most common places where SQL programmers get stuck is.
Programmers can’t reduce the complexity of their tasks, but they want.
One common consequence of producing all your results in one query.
Many programmers would try to use a query like the.
You happen to know that in reality there are twelve fixed bugs and.
This example joins the Products table to two different subsets.
Each of the twelve rows for FIXED bugs is paired with all seven.
You can visualize the Cartesian product graphically as shown in Figure 18.1
Each line connecting a fixed bug to an open bug becomes.
The only relationships expressed in that query are between the BugsProducts table and each subset of Bugs.
It’s all too easy to produce an unintentional Cartesian product when.
Besides the fact that you can get the wrong results, it’s important to.
You should expect to get regular requests for incremental enhancements to your database applications.
If you hear the following statements from members of your project, it.
If you’ve been struggling with a single query for too long, you should reconsider your approach.
We can’t add anything to our database report, because it will take.
The person who coded the query will be responsible for maintaining that code forever, even if they have moved on to other projects.
That person could be you, so don’t write overly complex SQL that.
Another clue that a query might be a Spaghetti Query is simply that.
The most common reason that you might need to run a complex task.
A component or reporting tool that assumes its data source is a single.
If the reporting requirements are too complex to be satisfied by a single.
Sometimes, you may want to produce a complex result in one query.
The quote from William of Ockham at the beginning of this chapter is.
When you have two competing theories that make exactly the same.
What this means to SQL is that when you have a choice between two.
If you can’t see a logical join condition between the tables involved in.
To avoid the Cartesian product, you have to split up.
You may feel slight regret at resorting to an “inelegant” solution by.
When new requirements are added to the report, it’s easier to add.
The SQL engine can usually optimize and execute a simple query.
In a code review or a teammate training session, it’s easier to.
You can combine the results of several queries into one result set with.
This can be useful if you really want to submit a.
The result of the query is the result of each subquery, concatenated.
Use the UNION operation only when the columns in both subqueries.
You can’t change the number, name, or data type of.
How could you have solved the urgent request for statistics about your.
How many of our fixed bugs were reported by customers:
Trying to combine them all into a single pass would be a nightmare.
When you split up a complex SQL query, the result may be many similar queries, perhaps varying slightly depending on data values.
Code generation is the technique of writing code whose output is new.
During a consulting job, I was called to solve an urgent SQL problem for a.
I went to the manager’s office and found a harried-looking fellow who was.
His problem was that he couldn’t use a consistent SQL expression in his.
He was too focused on solving this complex task in a single SQL.
Instead of writing one SQL statement to solve his complex update, I wrote.
The output of this query is a series of UPDATE statements, complete with.
With this technique, I solved in minutes what that manager had been.
Executing so many SQL queries or statements may not be the most.
Although SQL makes it seem possible to solve a complex problem in a.
How can I tell what I think till I see what I say?
Implicit Columns A PHP programmer asked for help troubleshooting the confusing result.
I helped him find the cause of his trouble: the PHP database extension.
In his tables, both Books and Authors had a column called title.
Most authors in the database had no title, so the.
I told the programmer that the solution was to declare a column alias.
Software developers don’t seem to like to type, which in a way makes.
One example that programmers cite as requiring too much typing is.
It’s no surprise that software developers gratefully use the SQLwildcard.
The * symbol means every column, so the list of columns is.
Likewise, when using INSERT, it seems smart to take advantage of the.
It’s shorter to write the statement without listing the columns.
Although using wildcards and unnamed columns satisfies the goal of.
Suppose you need to add a column to the Bugs table, such as date_due.
Your INSERT statement now results in an error, because you listed eleven.
In an INSERT statement that uses implicit columns, you must give values for all columns in the same order that columns are defined in the.
If the columns change, the statement produces an error—or even.
Suppose you run a SELECT * query, and since you don’t know the column.
But unknown to you, another person on the team dropped a column:
You can’t predict how many columns your query returns if you use a wildcard.
These errors can propagate through your code, and by the time you.
The convenience of using wildcards in queries can harm performance.
You probably have many queries running concurrently in your production application environment.
Even a gigabit network can be saturated by a hundred.
Object-relational mapping (ORM) techniques such as Active Record often use SELECT * by default to populate the fields of an object representing a row in a database.
One of the most common questions I see from programmers using the.
The following scenarios may indicate that your project is using implicit.
The application broke because it’s still referencing columns in the.
You’ve changed a table in the database—adding, deleting, renaming, or changing the order of columns—but you failed to change.
It took us days to track down our network bottleneck, and we.
According to our statistics, the average query fetches more than.
A well-justified use of wildcards is in ad hoc SQL when you’re writing.
The examples in this book use wildcards to save space and to avoid.
If your application needs to run a query that adapts when columns are.
Be sure to plan for the extra work it takes to troubleshoot.
You can use wildcards for each table individually in a join query.
Keying in a long list of column names can be time-consuming.
Likewise, you might place a priority on writing queries that.
I’ve heard a developer claim that a long SQL query passing from the.
In theory, query length could make a difference in some cases.
Always spell out all the columns you need, instead of relying on wildcards or implicit column lists.
All this typing seems burdensome, but it’s worth it in several ways.
If a column has been repositioned in the table, it doesn’t change.
If a column has been added in the table, it doesn’t appear in the.
If a column has been dropped from the table, your query raises an.
You get similar benefits when you specify columns in INSERT statements.
The order of columns you specify overrides the order in the table definition, and values are assigned to the columns you intend.
If you reference a column that has been deleted, you get an.
If you’re concerned about the scalability and throughput of your software, you should look for possible wasteful use of network bandwidth.
The bandwidth of an SQL query can seem harmless during software.
Once you abandon the SQL wildcard, you’re naturally motivated to.
When you buy a bag of M&M’s candies from the vending machine, the.
If you’re not careful, some may fall under your desk and attract.
But there’s no way to eat one until you tear open the bag.
You’ll inevitably need to treat some columns in a query individually by.
If you skip the use of wildcards from the beginning, it’ll be easier.
Readable Passwords Suppose you receive a phone call from a man using one of the applications you support.
You can use the instructions in that email to set a new.
The man on the phone becomes more impatient and assertive.
Are you unable to do your job? Do you want me to.
Johnson’s account and read it to him over the phone.
It’s a sure bet that in any application that has passwords, a user will.
Let’s explore these risks in the following sections, assuming our example bug-tracking database has a table Accounts, where each user’s account is stored as a row in this table.
A password is typically stored in the Accounts table as a string attribute.
You can create an account simply by inserting one row and specifying.
It’s not secure to store a password in clear text or even to pass it over.
Intercepting network packets as the SQL statement is sent from.
Reading data from database backup files on the server or on backup media.
Are your backup media kept safe? Do you erase backup.
Later, when the user tries to log in, your application compares the.
This comparison is done as plain text, since the password itself is stored in plain.
For example, you can use a query like the following to return a.
Like in the earlier section on storing passwords, interpolating the user’s.
Most of the time, I see the authentication query place conditions for both.
This query returns an empty result set if the account doesn’t exist or if.
For example, you may want to lock an account temporarily if you detect.
However, you can’t detect this pattern if you can’t tell the difference.
Since the password is stored in plain text in the database, retrieving.
Your application can then send to a user’s email address on request.
You’ve probably seen one of these emails as part of the password reminder feature of any number of websites you use.
You requested a reminder of the password for your account "bill"
Click the link below to log in to your account:
Sending an email with the password in plain text is a serious security.
Email can be intercepted, logged, and stored in multiple ways by.
It’s not good enough that you use a secure protocol to view.
Any application that can recover your password and send it to you must.
If your application can read a password for a legitimate purpose, then it’s possible that a hacker can read the password.
Your application may need to use a password to access another thirdparty service—that is, your application can be a client.
If you’re developing an application that supports passwords and you’re asked to design a password recovery feature, you should push back respectfully, warn the project decisionmakers about the risks, and offer an alternative solution that provides similar value.
Just as an electrician should recognize and correct a wiring design that poses an unsafe fire risk, it’s your responsibility as a software engineer to be aware of safety issues and to promote safer software.
A user can identify himself as anyone he wants, but authentication is.
If you can’t enforce security strong enough to defeat skilled and determined attackers, then you effectively have an identification mechanism.
Not every software application is at risk for attack, and not every application contains sensitive information that must be protected.
For example, an intranet application may be accessed by only a few people who.
In this case, an identification mechanism may be enough for the application to work, and in.
The additional work necessary to create a strong authentication system.
The chief problem in this antipattern is that the original form of the.
This function transforms its input string into a new string, called the.
Another characteristic of a hash is that it’s not reversible.
A popular algorithm in the past has been SHA-1, but researchers have.
MD5( ) has also been shown to be cryptographically weak, so you.
Hashing functions aren’t part of the standard SQL language, so you.
You can validate a user’s input by applying the same hash function to.
You can lock an account easily by changing the value in the password.
If you store hashes instead of passwords and the attacker gains access.
Guessing each password may take a long time, but he can prepare his.
One way to defeat this kind of “dictionary attack” is by including a salt.
Each password should use a different salt value to make an attacker.
Then he’s back to square one, because cracking passwords in your.
You can protect against this kind of exposure if you don’t put the plaintext password into the SQL query.
You do need the salt before you can compute the hash.
In web applications, there’s another place where attackers have an.
A good compromise is to use a secure HTTP connection whenever sending a password from browser to the application.
Now that the password is stored in a more secure way, you still need to.
The first alternative is that when a user who has forgotten his password.
This password will cease to allow access after one hour.
Click the link below to log in to your account and.
In a second alternative, instead of including a new password in an.
Click the link below within one hour to change your password.
After one hour, the link below will no longer work and your.
When the application receives a request for the special reset_password.
Accounts table, so the token is restricted to enable a password reset of.
Of course, it would be harmful if the wrong people could access this.
Simple restrictions reduce this risk, such as giving the special.
The state of cryptography is constantly advancing, trying to stay ahead.
He acquired an estimated 130 million credit and debit card numbers by hacking into ATM.
Gonzales broke the previous record, which he also held, for stealing.
How did Gonzalez nearly triple his own record? We imagine a daring plot.
He was able to use an attack technique called SQL Injection to gain privileged access to upload files to the corporate victims’
Victims’ credit and debit card processing networks, and then periodically.
The retailers whose websites Gonzalez attacked have said that they’ve.
This simple example shows interpolating a PHP variable into a string.
We intend that $bug_id is an integer so that by the time the database.
Dynamic SQL queries are a natural way to get the most out of a database.
When you use application data to specify how you want to query.
However, it’s not too hard to make your software do tasks that you.
In the classic example of SQL Injection, the value you.
This type of SQL Injection can be spectacular, as shown in Figure 21.1.3
Suppose you are writing a web interface to view the bugs database and.
The trouble begins when your team is hired to develop software for.
Your PHP code takes the value of that request parameter and interpolates it into the SQL query, but it produces a query that neither you nor.
Because a string is terminated by the first quote character it finds, the.
A clever attacker who can guess how the request parameters are used.
After interpolating the string from the userid parameter into your SQL.
This is key to understanding SQL Injection and also how to combat.
There are countless ways a maliciously chosen string can alter the.
Now that we know the threat of SQL Injection, the next natural question.
The oldest way to protect SQL queries from accidental unmatched quote.
Most brands of database also support the backslash to escape the following quote character, just like most other programming languages.
The idea is that you transform application data before you interpolate.
For example, in PHP’s PDO extension, use the quote( )
This technique can reduce the risk of SQL Injection resulting from.
You can’t compare a numeric column directly to a string containing.
There are also obscure corner cases where strings in non-ASCII character sets can pass through a function intended to escape the quote.
The solution most frequently cited as a panacea to SQL Injection is to.
Then provide a parameter value as you execute the prepared.
Many programmers recommend this solution because you don’t have to.
But parameters aren’t a universal solution because the value of a query.
This works as though you provided a single string value composed.
This works as though you had entered a string literal in place of.
In this example, the sort is a no-op, because the expression is a.
Many people think that using SQL query parameters is a way to quote values into an SQL statement automatically.
This isn’t accurate, and thinking about query parameters this way leads to misunderstanding about how they work.
The RDBMS server parses your SQL as you prepare the query.
After this, nothing can change the syntax of that SQL query.
Each value you provide is used for each placeholder, one for one.
You can execute a prepared query again, substituting new parameter values for the old values.
So, the RDBMS must keep track of the query and the parameter values separately.
This means that if you retrieve the prepared SQL query string, it doesn’t contain any parameter values.
It would be handy to see the SQL statement including parameter values if you’re debugging or logging queries, but these values are never combined with the query in its human-readable SQL form.
The best way to debug your dynamic SQL statements is to log both the statement with parameter placeholders at prepare time and the parameter values at execute time.
The parameter is interpreted as a literal string, not an SQL keyword.
Use of stored procedures is another method that many software developers claim is proof against SQL Injection vulnerabilities.
However, it’s possible to use dynamic SQL in stored procedures unsafely.
In the following example, the input_userid argument is interpolated into the SQL query verbatim, which is unsafe.
Using dynamic SQL in a stored procedure is no more and no less safe.
You might see advocates of data access frameworks claim that their.
After I gave a presentation on a PHP data access framework that I had.
He was looking for an automatic way to ensure that he doesn’t.
I told him the framework prevents SQL Injection like a toothbrush.
You have to use it consistently to get the benefit.
No framework can force you to write safe SQL code.
If you build any portion of an SQL statement by concatenating.
If you like to watch monster movies, you know that creatures like to hide behind the driver seat of your car and grab you after you get in.
The lesson is that you shouldn’t assume there’s no danger inside a familiar space like your car.
Even if you insert usersupplied data safely using query parameters, you might use that data later as you form dynamic SQL queries:
What would happen in the previous query if the user had spelled their name as O’Hara—or if they had deliberately entered their name to contain SQL syntax?
This antipattern is different from most of the others in this book, in that.
There is no single technique for securing your SQL code.
That is, if you need an integer, use only the part of the content that.
The best way to do this depends on your programming language; for example, in PHP, use the filter extension:
You can use type casting functions for simple cases like numbers:
You can also use regular expressions to match safe substrings, filtering.
When the dynamic parts of your query are simple values, you should.
We saw examples in the “Antipattern” section that a parameter can.
You should use query parameters when you need to combine application variables as literal values in SQL expressions.
Query parameters are usually the best solution, but in rare cases a.
For example, suppose you have a column in the Accounts table called.
In exotic cases like this, it could be better to interpolate values directly.
If you do this, you should quote the strings carefully.
Make sure you use a function that is mature and well-tested against.
We’ve seen that you can’t pass a comma-separated string in a single parameter.
You need asmany parameters as the number of items in your list.
For example, say you need to query six bugs by their primary keys, which you have in an array variable $bug_list:
This works only if you have exactly six items in $bug_list, matching the number of parameter placeholders.
You should build the SQL IN( ) predicate dynamically, using a number of placeholders equal to the number of items in $bug_list.
The following example in PHP uses some built-in array functions to produce an array of placeholders the same length as $bug_list and then joins that array with comma separators before interpolating it into the SQL expression.
Suppose your users want to choose how to sort lists of bugs, for instance by status or by date created.
In the following example, a PHP script accepts request parameters order.
The script assumes that order contains the name of a column and that.
Instead, you can use the request parameters to look up predefined values and then use these values in your SQL query.
You never combine user input with your SQL query, so you reduce.
You can make any part of an SQL statement dynamic, including.
You have an easy and efficient way to validate user choices.
You decouple the internal details of your database queries from.
The choices are hard-coded in your application, but this is appropriate.
The best way to catch flaws is to get another pair of eyes to look at it.
Ask a teammate who is familiar with SQL Injection risks to help you.
Don’t let pride or ego keep you from doing the right.
In an inspection for SQL Injection, use the following guidelines:
Code inspection is the most accurate and economical way to find SQL.
You should budget your time for this and treat it as a.
Let users input values, but never let users input code.
Those who matter don’t mind, and those who mind don’t.
Pseudokey Neat-Freak Your manager approaches you, holding two report printouts.
You look at the reports, and the pattern of discrepancies rings a bell.
So, I renumbered some of the rows to make them all fit into the places.
The accountants have to track depreciation by the asset numbers.
The number for each piece of equipment has to stay the same in each quarterly.
Besides, all the asset ID numbers are printed on labels on each.
You want to be cooperative, so you turn back to your keyboard to start.
There’s a certain type of person who is unnerved by a gap in a series of.
On one hand, it’s understandable to be concerned, because it’s unclear.
The objective of one who practices the Pseudokey Neat-Freak antipattern is to resolve these troubling questions.
Most people’s first reaction to a perceived gap is naturally to want to.
Instead of allocating a new primary key value using the automatic pseudokey mechanism, you might want to make any new row use the first.
However, you have to run an unnecessary self-join query to find the.
Earlier in the book, we looked at a concurrency issue when you try to.
You might find it’s more urgent to make the primary key values be contiguous, and waiting for new rows to fill in the gaps won’t fix the issue.
You might think to use a strategy of updating the key.
This usually means you find the row with the highest primary.
To accomplish this, you need to find an unused key value using a.
Either one of these steps is susceptible to concurrency issues.
You must also propagate the changed value to all child records that.
When a pseudokey generates a new value, the value is greater than the last value.
The story at the beginning of this chapter describes some hazards of.
It’s not a good idea to reuse the row’s primary key value, because a.
Don’t reallocate pseudokey values just because they seem to be unused.
The following quotes can be hints that someone in your organization is.
How can I reuse an autogenerated identity value after I roll back.
Pseudokey allocation doesn’t roll back; if it did, the RDBMS would.
This is an expression of misplaced anxiety over unused numbers.
The reason to do this search is almost certainly to reassign the ID.
This is used as a justification for reallocating unused ID values.
There’s no reason to change the value of a pseudokey, since the value.
It’s not unusual to change values in a natural key.
The values in any primary key must be unique and non-null so you.
Most pseudokey generators return numbers that look almost like row.
Row numbers in a query result set don’t correspond to primary key.
There are good reasons to use row numbers, for example to return a.
To select a subset in this way, you need to.
These functions are currently supported by many leading brands of.
Firebird and Informix support a query option with keywords FIRST and.
You could also generate random pseudokey values, as long as you don’t.
Another misconception related to the Pseudokey Neat-Freak antipattern is the idea that a monotonically increasing pseudokey generator eventually exhausts the set of integers, so you must take precautions not to waste values.
In mathematics, the set of integers is countably infinite, but in a database, any data type has a finite number of values.
It’s true that each time you allocate a value for a primary key, you’re one step closer to the last one.
If that doesn’t meet your needs, then use a 64-bit integer.
It’s very unlikely that you will run out of integers!
You gain at least two advantages over traditional pseudokey generators.
You can generate pseudokeys on multiple database servers concurrently without using the same values.
No one will complain about gaps—they’ll be too busy complaining.
The values are random, so you can’t infer any pattern or rely on a.
Now that you know the problems caused by renumbering pseudokeys.
This makes our code cheap to develop, makes it faster to.
Most managers prioritize based on cost of a task, and they should.
You can also use both a pseudokey and another attribute column.
Use pseudokeys as unique row identifiers; they’re not row numbers.
It is a capital mistake to theorize before you have all the.
See No Evil “I found another bug in your product,” the voice on the phone said.
I got this call while working as a technical support engineer for an SQL.
But I know the data is in the database—I can verify.
I was stunned, but I had to let the facts speak for themselves.
Copy and paste the exact SQL query from your code into the.
Syntax error at SELCET.” After a pause, he said, “You can close this.
The cooler the work is and the less code it takes us, the.
That’s a superficial reason, but there are more rational reasons to write.
We’ll have less code to test, to document, or to have peer-reviewed.
We’ll have fewer bugs if we have fewer lines of code.
It’s therefore an instinctive priority for programmers to eliminate any.
Developers commonly practice the See No Evil antipattern in two forms:
This code is concise, but there are several places in this code where.
Probably the most common error from a database API occurs when.
Figure 23.1: A fatal error in PHP results in a blank screen.
If this happens, the attempt to call execute( ) as a method.
The call to execute( ) could also fail, for example, because the statement violates a constraint or exceeds access privileges.
But users don’t see the code; they only see the output.
Another common bad habit that fits the See No Evil antipattern is to.
This is difficult because it’s hard to visualize the resulting SQL.
For a simple example, let’s look at a type of question I see frequently.
The following code builds a query conditionally by concatenating a WHERE clause if the script needs to search for a specific bug.
Why would the query in this example give an error? The answer is.
There’s no whitespace between Bugs and WHERE, which gives the query.
The code concatenated the strings with no space between them.
Developers waste an unbelievable amount of time and energy trying to.
Though you might think that the absence of code is by nature difficult to spot, many modern IDE products highlight instances in your.
Often the crash happens because your query failed, and you tried.
Can you help me find my SQL error? Here’s my code.
First, start by looking at the SQL, not the code that builds it.
Some computer scientists have estimated that up to 50 percent.
This may seem like a lot, unless you think of all.
You can omit error checking when there’s really nothing for you to do in.
Exceptions in object-oriented languages allow you to trigger an exception without being responsible for handling it.
Your code therefore can allow the exception to pass back.
Checking return status and exceptions from database API calls is the.
The following example shows code that checks the status after each call that could cause.
Many simple mistakes, such as misspellings or imbalanced quotes or parentheses, are.
Build your SQL query in a variable, instead of building it ad hoc in.
Choose a place to output SQL that is not part of your application.
Do not print the SQL query within HTML comments of a web application’s output.
If you don’t have access to the content of the SQL query, how can you.
Finally, most database brands provide their own logging mechanism on.
Diplomatic Immunity One of my earliest jobs gave me a lesson in the importance of using software engineering best practices, after a tragic accident left me responsible for an important database application.
I interviewed for a contract job at Hewlett-Packard to develop and maintain an application on UNIX, written in C with HP ALLBASE/SQL.
After I started the job, I found that the developer had never written.
This project had high technical debt—a consequence of using shortcuts.
I worked for six months to organize and document the code for what.
There was obviously no way that I could ask my predecessor to help me.
Professional programmers strive to use good software engineering habits in their projects, such as the following:
Most experienced developers know that sacrificing these practices for the sake of.
Why would developers make this assumption? The following are some.
The role of software engineer and database administrator are separate in some companies.
The SQL language used for relational databases is different from.
Even the way we invoke SQL statements as a specialized language within application code suggests.
But tools for database development are not as advanced, or at.
In IT, it’s ordinary for knowledge and operation of the database to.
The database is the foundation of an application, and quality matters.
You know how to develop application code with high quality, but you.
You might think it’s hard to show evidence of not doing something, but.
Lightweight in this context means that the team intends to skip.
We don’t need the DBA staff to attend training for our new source.
Excluding some technical team members from training (and probably access) ensures that they won’t use those tools.
How can I track usage of tables and columns in the database?
There are some elements we don’t know the purpose of, and we’d.
You are not using the project documentation for the database.
The document may be out-of-date, may be inaccessible, or may never have existed at all.
If you don’t follow a process of deploying changes to database.
I do write documentation and tests, and I use source control and other.
A good guideline for whether code is really temporary is to delete it.
That’s OK, but that means it’s worth storing in source control and writing at least some brief notes about what.
Quality is simply testing to most software developers, but that’s only.
You need to do all three of these to perform QA correctly, although in.
You can achieve quality assurance in database development by following best practices in documentation, source code control, and testing.
If code were readable, why would we call it code?
You should document the requirements and implementation of a database just as you do application code.
Whether you’re the original designer of the database or you’re inheriting a database designed by.
One caveat is that databases can be complex and have so many.
Tables, columns, and views: You also need written documentation for.
Tables need a description of what type of entity the table models.
For example, Bugs, Products, and Accounts are pretty clear, but what.
BugsProducts or a dependent table like Comments? Also, how many.
Columns each have a name and a data type, but that doesn’t tell.
For columns storing a quantitative value, what is the unit of measurement? Does the column allow nulls or not, and why? Does it.
Views store frequently used queries against one or more tables.
What made it worthwhile to create a given view? What application.
Relationships: Referential integrity constraints implement dependencies between tables, but this might not tell everything that you.
In some cases, you may have implicit relationships but no constraints for them.
What system-level security provisions do you use, such as if the.
Database infrastructure: This information is chiefly used by IT staff.
Object-relational mapping: Your project may implement some databasehandling logic in application code, as part of an layer of ORMbased code classes.
But even battle-hardened, extreme programmers know that they need to document the database, even if they.
If your database server failed completely, how would you re-create a.
We know how we would use a source control system to manage application code, solving similar problems of software development.
Source control also serves as a history of changes and an incremental backup so.
You can use source control with your database code and get similar.
You should check into source control the files related to your database.
Data definition scripts: All brands of database provide ways to execute.
Your code is under source control, but your database isn’t.
Ruby on Rails popularized a technique called migrations to manage upgrades to a database instance under source control.
Write a script with code to upgrade a database by one step, based on Rails’ abstract class for making database changes.
Also write a downgrade function that reverses the changes from those in the upgrade function.
The Rails tool that runs migrations automatically creates a table to record the revision or revisions that apply to your current database instance.
Rails 2.1 introduced changes to make this system more flexible, and subsequent versions of Rails may also change the way migrations work.
Create a new migration script for each schema alteration in the database.
You accumulate a set of these migration scripts; each one can upgrade or downgrade the database schema one step.
If you need to change your database to version 5, specify an argument to the migration tool.
There’s a lot more to learn about migrations in Agile Web Development with Rails, Third Edition [RTH08] or http://guides.
Most other web development frameworks, including Doctrine for PHP, Django for Python, and Microsoft ASP.NET, support features similar to Rails’ migrations, either included with the framework or available as a community project.
Migrations automate a lot of tedious work of synchronizing a database instance with the structure expected in a given revision of your project under source code control.
They handle only a few simple types of schema changes, and they basically implement a revision system on top of your conventional source control.
Bootstrap data: Lookup tables may contain some set of data that represents an initial state of your database, before any users enter.
You should keep bootstrap data to help if you need to.
These include tasks for import/export, synchronization, reporting, backups, validation, testing, and.
These may be written as SQL scripts, not part of a conventional application programming language.
Make sure your database code files are associated with the application.
Use the same source control repository for both application code and.
The final part of quality assurance is quality control—validating that.
Most professional developers are familiar with techniques to write automated tests to validate application code behavior.
We can extend the practice of isolation testing to the database by validating the database structure and behavior independently from your.
The following example shows a unit test script using the PHPUnit test.
You can use the following checklist for tests that validate your database:
Tables, columns, views: You should test that tables and views you expect to exist in the database do exist.
INSERT, UPDATE, or DELETE statements that should result in an error.
Stored procedures: Testing procedures in the database is closest to conventional unit testing of application code.
Confirm that the result set includes the column names and data types.
If any of your tests fail, your application could be using the wrong database instance.
While you develop your application, you could work on multiple revisions of the code.
For example, you could fix an urgent bug in the branch.
But the database your application uses isn’t under revision control.
Ideally, create a separate instance of your database for each revision of.
Make your application support a configurable means to specify database connection parameters so that whichever application revision you.
Today every RDBMS brand, both commercial and open source, offers a.
Use software development best practices, including documentation, testing, and source control, for your database as well as your application.
Explanations exist; they have existed for all time; there is.
Magic Beans “Why is it taking so long to add one little feature?” Your manager had.
Your group of software developers in the meeting room looks reluctant.
Well, no, that’s just a little bit of HTML, and that’s pretty easy since we.
But each time we added this element to a screen, we had to duplicate.
Your manager’s eyes are now starting to glaze over, but your co-worker.
Web application frameworks make it faster and easier to add features.
The greatest contributor to the cost of a software project is development time.
One way we assist the intellectual part of software development is to.
Frameworks help improve coding productivity by giving us reusable components and code generation tools.
Design patterns and software frameworks come together when we use.
The controllers accept user input, define the work the application.
The models handle everything else; they are the heart of the application and include input validation, business logic, and database.
It’s easy to understand what the controller and the view do.
In simple applications, you don’t need much custom logic in a model.
It’s relatively straightforward to match the fields of a model object to.
All you need the object to do is know how to create.
The use of the Active Record pattern as a model in MVC is a good example of a leaky abstraction.
But if you try to use it for all database access, you find many operations such as JOIN or GROUP BY that are simple to express in SQL are awkward in Active Record.
Some frameworks try to enhance Active Record to support a variety of SQL clauses.
The more these enhancements expose the fact that the class uses SQL internally, the more you feel like you might be better off using SQL directly.
The abstraction has failed to hide its secrets, like Toto exposing the Wizard of Oz as an ordinary man behind a curtain.
Ruby on Rails popularized Active Record for web development frameworks in 2004, and now most web application frameworks use this.
The antipattern is the convention that all model classes in an MVC application inherit from the base.
This is an example of the Golden Hammer antipattern: if the only tool you have is a hammer, treat everything as if it were.
It’s tempting to embrace any convention that simplifies software design.
But this is a fairy tale, like Jack and the Beanstalk.
Let’s look at the consequences of the Magic Beans antipattern.
Active Record is a simple pattern, because a plain Active Record class.
Active Record object match the columns in one corresponding table.
This means that if you need to refactor your database to represent a.
The next problem you may run into is that other programmers who.
For example, you might add a method assignUser( ) to a bug model, because you need to send an email to that engineer after updating the.
Your requirement was to have an email notification sent whenever the.
A closely related point is that a model frequently has no behavior except.
Treating models as simple data access objects encourages you to code.
For example, you might have separate Active Record classes corresponding to the Bugs, Accounts, and Products tables.
Let’s look at a simple code example for our bug-tracking application.
It uses a PHP framework called Doctrine to provide a.
Code that uses Active Record in controller classes expands to become.
The class interaction diagram (shown in Figure 25.2, on the next page)
When you employ the Magic Beans antipattern, you find that testing.
Testing the model: Since you’ve made the model the same class as.
To test the model, you have to execute queries against.
Testing the view: Testing views involves rendering the view into.
Testing the controller: You also find that testing the controller is.
To test a controller, you need to create a fake HTTP request.
To verify the test, you have to pick apart the HTTP response the.
This needs a lot of setup code to test business.
If you could separate business logic from the database access and separate business logic from presentation, it would help to meet the goals.
The following clues may mean that you have Magic Beans:
The question suggests that you’re using a database access class.
Should I copy complex model queries to all my controllers, or.
Neither of these solutions gives you the stability or simplicity you.
That way, you follow the Don’t Repeat Yourself (DRY) principle, and you make the.
You should be able to unit test a model in.
There’s nothing wrong with the Active Record design pattern per se.
Another good use of Active Record is for prototyping code.
Anything you can do to speed up development of the prototype is helpful.
Just be sure to budget some time for refactoring the code to pay back.
Controllers handle application input and views handle application output, both relatively simple and well-defined tasks.
This is where you actually need to think hard about what the objects.
Fortunately, there’s a lot of wisdom in the field of object-oriented design.
Some of these guidelines are especially relevant to separating models from their data access objects:
The object responsible for an operation should have all the data needed.
Since some operations in your application involve multiple tables (or no tables) and Active Record is good at working.
The relationship between a model and a DAO like Active Record should.
DAOs instead of inheriting from the DAO class, then you can design.
How the model persists its data in a database should be an internal implementation detail.
The controllers and views in your application should use the domain.
But you can make the best choice about where you implement that.
The interface for the domain model class should reflect its intended.
Generic methods of the Active Record interface like find( ), first( ), insert( ), or.
When you decouple a model class from the DAO it uses, you can even.
A model in the original MVC sense—not in the opinionated software.
Let’s look at a possible refactoring of our earlier example code:
The class interaction diagram (shown in Figure 25.3, on the following page) is much simpler and easier to read, indicating an.
Each model class creates the objects to interact with one or more.
The controllers do not need to know which tables are.
Ideally, you should be able to test your model without connecting to a.
If you decouple your model from its DAO, then you can.
Likewise, you can test the interface of a domain model just like any.
You still test your controllers with fake HTTP requests, but because the.
If you separate models and controllers and separate data access components from models, then you can unit test all these classes more simply.
You can use a data access object productively in any software development framework, even one that encourages the Magic Beans antipattern.
However, developers who don’t learn how to employ objectoriented design principles are doomed to write spaghetti code.
The basics of domain modeling described and cited in this chapter will.
Rules of Normalization Relational database design isn’t arbitrary or mysterious.
The rules of normalization aren’t complicated, but they are subtle.
Another possibility is that people are turned off by having to follow.
You can make a lot of work for yourself by reinventing the.
Or you can take advantage of existing knowledge and technology if you can conform to a relational design.
Mathematicians define a relation as the combination of two sets of values from different domains, with some condition applied that gives us.
For example, one set is the names of baseball teams, and the other.
The combination of every team to every city is a long list.
But we’re interested in a particular subset of this list: the.
In SQL, we can store that result in a table with two columns, and.
Before we can begin normalizing tables, we need to be sure that they.
In SQL, a query returns results in an unpredictable order, unless you.
Whether we ask Steven to test the product Open RoundFile against.
This is related to the antipattern in Chapter 19, Implicit Columns, on.
Once you know a fact, stating it again doesn’t make it any more true.
Given the name of a baseball team, your data dictates the city.
To prevent duplicates, we have to be able to tell one row from another.
A relation has a header that defines the names and data types of.
Every row must have the same columns as those in the.
A given value like 1234 in this column may be.
Columns contain data values, not physical storage indicators such as.
Some databases bend this rule, giving you access to internal storage.
It’s hard to find a subject that is so widely misunderstood, despite having a precise definition.
It’s true that you may need to use a join to retrieve attributes from separate tables after you apply normalization.
Index Shotgun, on page 148 applies to denormalization too: be.
You can use pseudokeys for the goal of convenience, performance, or storage efficiency, and those reasons are legitimate.
But don’t believe that it has anything to do with normalization.
No one needs to normalize past the third normal form.
One study showed that more than 20 percent of business.
If you learn of a bug that potentially results in.
To represent facts about the real world in a way that we can.
To reduce storing facts redundantly and to prevent anomalous or.
Notice that improving database performance is not on this list.
Normalization helps us store data correctly and avoid getting into trouble.
We find ourselves developing a lot more code to clean up inconsistent or duplicate data.
If you include these scenarios, the benefits to performance from normalizing a database become clearer.
When a table satisfies rules of normalization, we say the table is in.
There are five traditional normal forms, describing progressive levels of normalization.
The most fundamental requirement for first normal form is that the.
The next requirement is that the table must not have any repeating.
Remember that each row in a relation is a combination between.
In Figure A.2, we can see repeating groups according to each of these.
The proper design that satisfies first normal form is to.
The second normal form is identical to the first normal form, unless.
In Figure A.3, on the next page, we can see that the identity of the coiner.
To satisfy second normal form, we should store the coiner for a given.
That means we have to define another table, Tags, where.
Then we can store the coiner of that tag in this new table.
The figure uses names instead of ID numbers for the user identities.
In the Bugs table, you might want to store the email of the engineer.
However, the email is an attribute of the assigned engineer’s account;
In the example for second normal form the offending column is related.
To fix this, we need to put the email address into the Accounts table.
See how you can separate the column from the Bugs table in Figure A.4
That’s the right place because the email corresponds directly to the.
A slightly stronger version of third normal form is called Boyce-Codd.
The difference between these two normal forms is that in.
In Boyce-Codd normal form, key columns are subject to this rule.
This would come up only when the table has multiple sets of.
For example, suppose we have three tag types: tags that describe the.
Now let’s alter our database to allow each bug to be reported by multiple users, assigned to multiple development engineers, and verified by.
So, the primary key would need to be over all four columns.
Another problem is that we may have redundant values when any column contains fewer accounts than some other column.
All the problems shown previously are caused by trying to create an.
When you try to use a single intersection table to represent multiple.
The figure shows how we can solve this by splitting the table so that we.
This solves the problems of redundancy and mismatched numbers of.
Any table that meets the criteria of Boyce-Codd normal form and does.
This doesn’t tell us which products we may assign the engineer to work.
It also stores the fact that an engineer works on a given.
The figure uses names instead of ID numbers for the products.
Our solution is to isolate each relationship into separate tables:
Now we can record the fact that an engineer is available to work on a.
Domain-Key normal form (DKNF) says that every constraint on a table.
For example, you may decide that a bug that has a status of NEW or.
Bugs.status changes over time, and we might want to record this history.
You can imagine that for Bugs to support sixth normal form fully, nearly.
You can use this brief overview of relations and normal forms as an.
The Pragmatic Bookshelf Available in paperback and DRM-free eBooks, our titles are here to help you stay on top of.
The following are in print as of June 2010; be sure to check our website at.
The Agile Samurai Faced with a software project of epic proportions?
Language Implementation Patterns Learn to build configuration file readers, data.
As development gets more and more difficult, the Pragmatic Programmers.
Read our weblogs, join our online discussions, participate in our mailing list, interact.
Check out the latest pragmatic developments, new titles and other offerings.
Buy the Book If you liked this eBook, perhaps you’d like to have a paper copy of the book.
