But differ in nature and cost of each step XML parsing, File transfer, Web page generation, computational services, ...
Divide-and-conquer is usually the best approach for achieving any scalability goal.
Basic mechanisms supported in java.nio Non-blocking reads and writes Dispatch tasks associated with sensed IO events.
Usually harder to program Must break up into simple non-blocking actions.
Manage by binding handlers to events Similar to AWT addActionListener.
Buffers Array-like objects that can be directly read or written by Channels.
Selectors Tell which of a set of Channels have IO events.
Handler processing slows down Reactor Offload non-IO processing to other threads.
But harder to overlap processing with IO Best when can first read all input into a buffer.
Use thread pool so can tune and control Normally need many fewer threads than clients.
Each task enables, triggers, or calls next one Usually fastest but can be brittle.
Callbacks to per-handler dispatcher Sets state, attachment, etc A variant of GoF Mediator pattern.
Futures When each task produces a result Coordination layered on top of join or wait/notify.
The kind of task queue (any Channel) Maximum number of threads Minimum number of threads "Warm" versus on-demand threads Keep-alive interval until idle threads die.
Use to match CPU and IO rates Static or dynamic construction.
Each with own Selector, Thread, dispatch loop Main acceptor distributes to other reactors.
To bind different handlers to different IO events May need careful synchronization to coordinate.
Direct buffers Can sometimes achieve zero-copy transfer But have setup and finalization overhead Best for applications with long-lived connections.
Client connects Client sends a series of messages/requests Client disconnects.
Can extend basic network service patterns Handle many relatively long-lived clients Track client and session state (including drops) Distribute services across multiple hosts.
