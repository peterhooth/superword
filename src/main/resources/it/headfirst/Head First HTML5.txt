This book is a rollicking ride through the wild new territory of  HTML5, where we are all bound to be battling scorpions for years.
It takes you through basic concepts so you understand the purposes of  the HTML5 design, and then into each area so you know your way around.
Like all Head First books, it replaces dry recitation with lively, memorable, fact-laden bursts of  information.
Head First HTML5 Programming bakes that cake, and then throws it at your face.
Developers far and wide can’t wait to put it to use to build flexible, rich media websites that also work great on tablets and smart phones.
Head First HTML5 Programming is the best and funnest way to feed this exciting new technology to your brain.
The authors have hit the nail on the head—JavaScript skills are the key to HTML5
This book is close to perfect, because of  the way it combines expertise and readability.
It’s one of  the very few software books I’ve ever read that strikes me as indispensable.
I’d put maybe 10 books in this category, at the outside.
If  you’re someone who reads at night before falling asleep, you’ll have to restrict Head First HTML with CSS & XHTML to daytime reading.
Head First HTML with CSS & XHTML is a thoroughly modern introduction to forward-looking practices in Web page markup and presentation.
It correctly anticipates readers’ puzzlements and handles them just in time.
Head First HTML with CSS & XHTML teaches you how to do things right from the beginning without making the whole process seem overwhelming.
O’Reilly Media books may be purchased for educational, business, or sales promotional use.
Many of  the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks.
Where those designations appear in this book, and O’Reilly Media, Inc., was aware of  a trademark claim, the designations have been printed in caps or initial caps.
While every precaution has been taken in the preparation of  this book, the publisher and the authors assume no responsibility for errors or omissions, or for damages resulting from the use of  the information contained herein.
No gumballs were harmed in the making of  this book.
To Steve Jobs, who hyped HTML5 to the point where this book should sell a zillion copies...
She has been passionate about technology since her days as a student at Yale University, where she earned a Masters of  Science in Computer Science and designed a concurrent, visual programming language and software architecture.
Elisabeth’s been involved with the Internet since the early days; she co-created the award-winning Web site, The Ada Project, one of  the first Web sites designed to help women in computer science find career and mentorship information online.
She’s currently co-founder of  WickedlySmart, an online education experience centered on web technologies, where she creates books, articles, videos and more.
Previously, as Director of  Special Projects at O’Reilly Media, Elisabeth produced in-person workshops and online courses on a variety of  technical topics and developed her passion for creating learning experiences to help people understand technology.
Prior to her work with O’Reilly, Elisabeth spent time spreading fairy dust at The Walt Disney Company, where she led research and development efforts in digital media.
When not in front of  her computer, you’ll find Elisabeth hiking, cycling or kayaking in the great outdoors, with her camera nearby, or cooking vegetarian meals.
Eric is described by Head First series co-creator Kathy Sierra as “one of  those rare individuals fluent in the language, practice, and culture of  multiple domains from hipster hacker, corporate VP, engineer, think tank.”
Professionally, Eric recently ended nearly a decade as a media company executive—having held the position of CTO of  Disney Online & Disney.com at The Walt Disney Company.
Eric is now devoting his time to WickedlySmart, a startup he co-created with Elisabeth.
By training, Eric is a computer scientist, having studied with industry luminary David Gelernter during his Ph.D.
His dissertation is credited as the seminal work in alternatives to the desktop metaphor, and also as the first implementation of  activity streams, a concept he and Dr.
In his spare time, Eric is deeply involved with music; you’ll find Eric’s latest project, a collaboration with ambient music pioneer Steve Roach, available on the iPhone app store under the name Immersion Station.
Eric lives with his wife and young daughter on Bainbridge Island.
His daughter is a frequent vistor to Eric’s studio, where she loves to turn the knobs of  his synths and audio effects.
Eric’s also passionate about kids education and nutrition, and looking for ways to improve them.
Here you are trying to learn something, while here your brain is doing you a favor by making sure the learning.
Sure, HTML started as a mere markup language, but more recently HTML’s put on some major muscle.
Now we’ve got a language tuned for building true web applications with local.
You can’t mess with the DOM until the page has fully loaded.
You already know all about HTML markup (otherwise known as structure) and you know.
Get ready to add the most interesting and versatile skill in your.
You’ve learned the basics of JavaScript but can you get interactive with.
And sometimes knowing where you are makes all the difference (especially to a web app)
It’s time to get out a little, to talk to web services, to gather data and to bring it all back so you.
In this chapter we're going to do just that, and incorporate some data.
In this chapter we'll use the canvas element to bring out your inner.
After all, video is now a first-class member of the HTML family—just throw a <video> element in your page and you’ve got instant video, even across.
But video is far more than just an element, it’s also a JavaScript API that allows.
Come on, you’re going to be amazed what you can do with a little.
Well, there’s no need to be skeptical—the HTML5 Web storage API.
It’s hard to manage my busy life if I can’t get rid.
Slow script—do you want to continue running it?  If you’ve spent enough time with JavaScript or browsing the web you’ve probably seen the “slow script” message.
And, with all those multicore processors sitting in your new machine how could.
Put your JavaScript manager’s hat on, let’s get some workers cracking!
We covered a lot of  ground, and you’re almost finished with this book.
We’ll miss you, but before we let you go, we wouldn’t.
Note from marketing: this book is for anyone with a credit card.
Do you have a computer with a web browser and a test editor?
Do you want to learn, understand, remember, and create web applications using the best techniques and most recent standards?
Do you prefer stimulating dinner party conversation to dry, dull, academic lectures?
Are you already developing web apps and looking for a reference book on HTML5?
Are you afraid to try something different? Would you rather have a root canal than mix stripes with plaid? Do you believe that a technical book can’t be serious if cheesy 50’s educational films and anthropomorphized JavaScript APIs are in it?
Check out Head First HTML with CSS and XHTML for an excellent introduction to web development, and then come back and join us.
It was built that way, and it helps you stay alive.
So what does your brain do with all the routine, ordinary, normal things you encounter? Everything it can to stop them from interfering with the brain’s real job—recording things that matter.
It doesn’t bother saving the boring things; they never make it past the “this is obviously not important” filter.
How does your brain know what’s important? Suppose you’re out for a day hike and a tiger jumps in front of  you.
Or trying to learn some tough technical topic your boss thinks will take a week, ten days at the most.
It’s trying to make sure that this obviously non-important content doesn’t clutter up scarce resources.
Resources that are better spent storing the really big things.
And there’s no simple way to tell your brain, “Hey brain, thank you very much, but no matter how dull this book is, and how little I’m registering on the emotional Richter scale right now, I really do want you to keep this stuff  around.”
We think of a “Head First” r eader as a learner.
If  you really want to learn, and you want to learn more quickly and more deeply, pay attention to how you pay attention.
Most of  us did not take courses on metacognition or learning theory when we were growing up.
We were expected to learn, but rarely taught to learn.
But we assume that if  you’re holding this book, you really want to learn about iPhone development.
And you probably don’t want to spend a lot of  time.
And since you’re going to build more apps in the future, you need to remember what you read.
To get the most from this book, or any book or learning experience, take responsibility for your brain.
The trick is to get your brain to see the new material you’re learning as Really Important.
Otherwise, you’re in for a constant battle, with your brain doing its best to keep the new content from sticking.
I wonder how I can trick my brain into remembering.
So just how DO you get your brain to think that HTML5 (and JavaScript) is a hungry tiger?
There’s the slow, tedious way, or the faster, more effective way.
You obviously know that you are able to learn and remember even the dullest of  topics if  you keep pounding the same thing into your brain.
With enough repetition, your brain says, “This doesn’t feel important to him, but he keeps looking at the same thing over and over and over, so I suppose it must be.”
The faster way is to do anything that increases brain activity, especially different types of  brain activity.
The things on the previous page are a big part of  the solution, and they’re all things that have been proven to help your brain work in your favor.
For example, studies show that putting words within the pictures they describe (as opposed to somewhere else in the page, like a caption or in the body text) causes your brain to try to makes sense of  how the words and picture relate, and this causes more neurons to fire.
More neurons firing = more chances for your brain to get that this is something worth paying attention to, and possibly recording.
A conversational style helps because people tend to pay more attention when they perceive that they’re in a conversation, since they’re expected to follow along and hold up their end.
The amazing thing is, your brain doesn’t necessarily care that the “conversation” is between you and a book! On the other hand, if  the writing style is formal and dry, your brain perceives it the same way you experience being lectured to while sitting in a roomful of  passive attendees.
Here’s what WE did: We used pictures, because your brain is tuned for visuals, not text.
As far as your brain’s concerned, a picture really is worth a thousand words.
And when text and pictures work together, we embedded the text in the pictures because your brain works more effectively when the text is within the thing the text refers to, as opposed to in a caption or buried in the text somewhere.
We used redundancy, saying the same thing in different ways and with different media types, and multiple senses, to increase the chance that the content gets coded into more than one area of  your brain.
We used concepts and pictures in unexpected ways because your brain is tuned for novelty, and we used pictures and ideas with at least some emotional content, because your brain is tuned to pay attention to the biochemistry of  emotions.
That which causes you to feel something is more likely to be remembered, even if  that feeling is nothing more than a little humor, surprise, or interest.
We used a personalized, conversational style, because your brain is tuned to pay more attention when it believes you’re in a conversation than if  it thinks you’re passively listening to a presentation.
We included loads of  activities, because your brain is tuned to learn and remember more when you do things than when you read about things.
We used multiple learning styles, because you might prefer step-by-step procedures, while someone else wants to understand the big picture first, and someone else just wants to see an example.
But regardless of  your own learning preference, everyone benefits from seeing the same content represented in multiple ways.
We include content for both sides of  your brain, because the more of  your brain you engage, the more likely you are to learn and remember, and the longer you can stay focused.
Since working one side of  the brain often means giving the other side a chance to rest, you can be more productive at learning for a longer period of  time.
And we included stories and exercises that present more than one point of  view, because your brain is tuned to learn more deeply when it’s forced to make evaluations and judgments.
We included challenges, with exercises, and by asking questions that don’t always have a straight answer, because your brain is tuned to learn and remember when it has to work at something.
Think about it—you can’t get your body in shape just by watching people at the gym.
But we did our best to make sure that when you’re working hard, it’s on the right things.
That you’re not spending one extra dendrite processing a hard-to-understand example, or parsing difficult, jargon-laden, or overly terse text.
In stories, examples, pictures, etc., because, well, because you’re a person.
And your brain pays more attention to people than it does to things.
These tips are a starting point; listen to your brain and figure out what works for you and what doesn’t.
Your brain works best in a nice bath of  fluid.
Dehydration (which can happen before you ever feel thirsty) decreases cognitive function.
Create something! Apply this to your daily work; use what you are learning to make decisions on your projects.
Just do something to get some experience beyond the exercises and activities in this book.
All you need is a pencil and a problem to solve… a problem that might benefit from using the tools and techniques you’re studying for the exam.
Feel something! Your brain needs to know that this matters.
Groaning over a bad joke is still better than feeling nothing at all.
If  you find yourself  starting to skim the surface or forget what you just read, it’s time for a break.
Once you go past a certain point, you won’t learn faster by trying to shove more in, and you might even hurt the process.
If  you’re trying to understand something, or increase your chance of  remembering it later, say it out loud.
Better still, try to explain it out loud to someone else.
You’ll learn more quickly, and you might uncover ideas you hadn’t known were there when you were reading about it.
Part of  the learning (especially the transfer to long-term memory) happens after you put the book down.
Your brain needs time on its own, to do more processing.
If  you put in something new during that processing time, some of  what you just learned will be lost.
They’re not optional sidebars—they’re part of  the core content! Don’t skip them.
We put them in, but if  we did them for you, that would be like having someone else do your workouts for you.
There’s plenty of evidence that physical activity while learning can increase the learning.
The more you understand, the less you have to memorize.
When the book asks you a question, don’t just skip to the answer.
The more deeply you force your brain to think, the better chance you have of learning and remembering.
Here’s what YOU can do to bend your brain into submission.
Read me This is a learning experience, not a reference book.
We deliberately stripped out everything that might get in the way of  learning whatever it is we’re working on at that point in the book.
And the first time through, you need to begin at the beginning, because the book makes assumptions about what you’ve already seen and learned.
If  you don’t know HTML markup (that is, all about HTML documents including elements, attributes, property structure, structure versus presentation), then pick up a copy of  Head First HTML with CSS & XHTML before starting this book.
Some experience helps, but we don’t expect you to know JavaScript.
If  you’ve got any programming or scripting in your background (even if  it isn’t JavaScript), it’s going to help you.
But, we don’t expect you to know JavaScript going into this book; in fact, this book is designed to follow Head First HTML with CSS & XHTML, which has no scripting in it.
We encourage you to use more than one browser with this book.
We encourage you to test the pages and web applications in this book with several browsers.
This will give you experience in seeing the differences among browsers and in creating pages that work well in a variety of  browsers.
We most highly recommend Google Chrome and Apple Safari for use with this book as they are, in general, the most up-to-date with the current standards.
But we do recommend you also try the most recent versions of  the other major browsers including Internet Explorer, Firefox and Opera, as well as mobile browsers on devices with iOS and Android.
The exercises and activities are not add-ons; they’re part of  the core content of  the book.
Some of  them are to help with memory, some are for understanding, and some will help you apply what you’ve learned.
Even crossword puzzles are importantthey’ll help get concepts into your brain.
But more importantly, they’re good for giving your brain a chance to think about the words and terms you’ve been learning in a different context.
One distinct difference in a Head First book is that we want you to really get it.
And we want you to finish the book remembering what you’ve learned.
Most reference books don’t have retention and recall as a goal, but this book is about learning, so you’ll see some of  the same concepts come up more than once.
For some of  them, there is no right answer, and for others, part of  the learning experience of the Brain Power activities is for you to decide if  and when your answers are right.
In some of the Brain Power exercises, you will find hints to point you in the right direction.
To write HTML5 and JavaScript code, you need a text editor, a browser, and, sometimes, a web server (it can be locally hosted on your personal desktop)
The text editors we recommend for Windows are PSPad, TextPad or EditPlus (but you can use Notepad if  you have to)
If  you’re on a Linux system, you’ve got plenty of text editors built in, and we trust you don’t need us to tell you about them.
We hope you’ve got the browser bit covered and have installed at least two browsers (see the previous page)
It’s also worth your time to learn how to use the browser developer tools; each of  the major browsers has built-in tools you can use to inspect the JavaScript console (you can see errors as well as output you display using console.log, a handy alternative to alert), web storage usage, the DOM, CSS style that’s been applied to elements, and much much more.
You don’t need the developer tools to get through the book, but if  you’re willing to spend the time to investigate how to use these, it will make development easier.
Some HTML5 features and JavaScript APIs require that you serve files from a real web server rather than by loading a file (i.e., your URL will start with http:// rather than file://)
We’ve identified which examples you’ll need a server for in the appropriate places in the book, but if  you’re motivated, we recommend you go ahead and install a server on your computer now.
For Mac and Linux, Apache comes built-in, so you’ll just need to make sure you know how to access it and where to put your files so you can serve them using your local server.
For Windows, you’ll need to install Apache or IIS; if  you go the Apache route, there are plenty of  open source tools like WAMP and XAMPP that are fairly easy to install.
No simple reviewer here, he’s also the series creator! Man, talk about pressure...
He even ran around in the middle of the night in his PJs testing our geo code.
We tried to tell her she only needed to help us with graphics, but she couldn’t help herself and was also a stellar tech reviewer.
The whole team proved how much we needed their technical expertise and attention to detail.
Courtney Nash was given the difficult task managing not only the book Head First HTML5 Programming, but also managing, well, us.
Courtney not only cleared all paths for us, but also applied the delicate pressure every editor needs to, to get a book out the door.
Most of  all, though, Courtney provided extremely valuable feedback on the book and its content, which resulted in a few significant reworks of  the book.
This is a much better book because of  Courtney’s efforts.
This is becoming a recurring theme in our books, but we wanted to give another shout out to David Powers, our esteemed technical reviewer, and author of  many books including PHP Solutions: Dynamic Web Development Made Easy.
David’s comments always result in signficant improvements to the text, and we sleep better at night knowing that if  it’s been through David, then we’ve hit the technical mark.
Note to Editor: can we see if we can lock this guy in for our next three books? And see if we can make it an exclusive!
Lou Barr was also an integral part of  this book and contributed in many ways—from reviewer, graphic designer, production designer, web designer, to Photoshop wrangler.
Thank you Lou, we could not have done it without you!
And thanks to a few other folks that helped make this happen:
From there we’d like to thank the rest of  the O’Reilly crew for support in a hundred different ways.
Last, and anything but least, to Kathy Sierra and Bert Bates, our partners in crime and the BRAINS who created the series.
The large number of acknowledgments is because we’re testing the theory that everyone mentioned in a book acknowledgment will buy at least one copy, probably more, what with relatives and everything.
If you’d like to be in the acknowledgment of our next book, and you have a large family, write to us.
James Henstridge wrote the original code that became the fractal viewer in Chapter 10, which we shaped to our purposes for use in the book.
Apologies for any code we introduced that may not have been as elegant as his original version.
Actor and artist Laurence Zankowski, forever type-cast as the Starbuzz CEO, generously reappeared in this book and helped to test the video application in Chapter 8 (a must see)
Thank you to Anthony Vizzari and A&A Studios for allowing us to use a photo of  their fabulous photo booth.
Our TweetShirt startup example uses some fine looking icons from ChethStudios.Net.
We appreciate the dedicated work of  the Internet Archive, home of  the films we used for Webville TV.
And thank you to Daniel Steinberg for always being there to bounce things off.
With a subscription, you can read any page and watch any video from our library online.
Access new titles before they are available for print, and get exclusive access to manuscripts in development and post feedback for the authors.
Copy and paste code samples, organize your favorites, download chapters, bookmark key sections, create notes, print out pages, and benefit from tons of  other time-saving features.
To have full digital access to this book and others on similar topics from O’Reilly and other publishers, sign up for free at http://my.safaribooksonline.com.
We’re going to Webville! There’s so much great HTML5 construction going.
Sure, HTML started as a mere markup language, but more recently HTML’s put.
Heads up: XHTML received a “Dear John” letter in 2009 and we’ll be visiting XHTML later in the “Where are they now” segment.
Step right up! For a limited time we’ll take that grungy old HTML page.
You betcha; in fact we’ve got a demonstration already prepared for you.
Get your feet wet by reviewing this HTML, which is wr itten in HTML 4.01 (the previous version), not.
Carefully look at each line and refresh your m emory of what each part does.
We’ll look at how to tran sition this to HTML5 over the next few pages.
Remember, the doctype definition belongs at the top of your HTML file and tells the browser the type of your document, in this case, HTML 4.01
By using a doctype the browser is able to be more precise in the way it interprets and renders your pages.
So, using your deductive powers, what do you think the doctype definition for HTML5 will look like? Write it here (you can refer back to your answer when we cover this in a bit):
This part says we’re using HTML version 4.01 and that this markup is written in ENglish.
No more Googling to remember what the doctype looks like, or copying and pasting from another file, this doctype is so simple you can just remember it.
Not only is this the doctype for HTML5, it’s the doctype for every future version of HTML.
Not only that, it will work in your older browsers too.
Yes, the new meta tag has lost a lot of weight is much simpler.
When you specify the meta tag in HTML5, just supply the tag along with a character encoding.
Believe it or not, all browsers (old and new) already understand this meta description, so you can use it on any page and it just works.
Here’s the amazing part: the new doctype for HTML5 is simply:
Apologies to the crew that got the 4.01 doctype tattoo to remember it.
Congratulations, you’re now certified to upgrade any HTML to HTML5 !
As a trained HTML5-o-Matic user, you’ve got the tools you need to take any valid HTML page.
And, because you acted fast, we’ve got a special bonus for you.
We’re going to make your life even easier by simplifying the script tag.
With HTML5, JavaScript is now the standard and default scripting language, so you can remove the type attribute from your script tags too.
Here’s what the new script tag looks like without the type attribute:
And now for Step 3, the step that brings it all home.
Here we’re also going to focus on the <head> element and upgrade the link tag.
Here’s what we have now: a link of type text/css that points to a stylesheet:
To upgrade this for HTML5, we just need to remove the type attribute.
Why? Because CSS has been declared the standard, and default, style for HTML5
So, after we remove the type attribute, the new link looks like this:
Or if you have some inline code, you can just write your script like this:
Don’t worry if you don’t know a lot about the script tag yet, we’ll get there...
Wait a sec, all this fuss about HTML5 and this is all I needed to do? What is the rest of this book about?
So far, we’ve been talking about updating your older HTML pages so that they’re ready to take advantage of  everything HTML5 has to offer.
But, you’re right, we were being silly, of  course there is more to HTML5 than just updating a few elements.
But hang on; before we get there we’ve got just a bit more work to do to make sure we’re ready with our markup.
You’re closer to HTML5 markup than you think! Here’s some old skool HTML that needs updating.
Go ahead and scribble in the book, scratch out the existing markup code, and add any new markup code you need to.
We’ve helped a little by highlighting the areas that need to change.
When you’re done, type it in (or grab the exercise files and make your changes if you prefer), load this in your browser, sit back and enjoy your first HTML5
Oh, and you’ll find our answers on the next page.
To download all the code and sample files for this book, please visit http://wickedlysmart.com/hfhtml5
You’re closer to HTML5 markup than you think! Here’s some old skool HTML that needs updating.
Go ahead and scribble in the book, scratch out the existing markup code, and add any new markup code you need to.
We’ve helped a little by highlighting the areas that need to change.
Here are the four lines we changed to make our Head First Lounge web page officially HTML5
Q: How does this work on the old browsers? Like the new doctype, meta, and so on...
Take the type attributes on the link and script tags; now, it makes sense to get rid of this attribute with HTML5 because CSS and JavaScript are now the standards (and certainly are the default technologies for style and scripting)
But as it turns out, the browsers already assumed the defaults of CSS and JavaScript.
So the stars aligned and the new markup standard just happens to have been supported in the browser for years.
The same is true of the doctype and the meta tag.
Q: What about the new doctype, it seems too simple now; it doesn’t even have a version or DTD.
A: Yes, it does seem a little magical that after years of using complex doctypes we can now just simplify it to “we’re using HTML.” Here’s what happened: HTML used to be based on a standard called SGML, and that standard required both the complex form of the doctype and the DTD.
The new standard has moved away from SGML as a way to simplify HTML language and make it more flexible.
Further, as we said above, there is some luck here in that almost all browsers just look for HTML in the doctype to ensure they are parsing an HTML document.
Q: Were you joking about it never changing again? I thought the versioning was really important for browsers.
A: The use of the doctype evolved with browser makers using the doctype to tell their browsers to render things in their own.
Q: Well, I assume different browsers are going to have different capabilities at any one time.
We’ll cover both of these points in the chapter and throughout the book.
Q: Why does this even matter? I just typed a page in without a doctype and meta tag and it worked just fine.
Why do I need to worry if this stuff is totally correct?
A: Yes, browsers are great at overlooking small errors in HTML files.
But by including the correct doctype and meta tags, you’ll make sure browsers know exactly what you want, rather than having to guess.
Plus, for people using older browsers, the new doctype means they’ll use standards mode, which is what you want.
Remember, standards mode is a mode where the browser assumes you’re writing HTML that conforms to a standard, so it uses those rules to interpret your page.
If you don’t specify a doctype, some browsers may go into “quirks mode” and assume your web page is written for older browsers, when the standard wasn’t quite up to snuff, and may interpret your page incorrectly (or assume it’s just written incorrectly)
Q: Whatever happened to XHTML? It seems like a few years ago that was the future.
And by the way, if you really love XML, there’s still a way to write your HTML5 in strict form.
You’ve probably seen other character sets used in the past, but UTF-8 is being promoted as the new standard.
And it’s way shorter and easier to remember than previous character encodings.
If  you’ve never had exposure to HTML5 before, that’s okay, but you should have worked with HTML, and there are some basics you should know about like elements, tags, attributes, nesting, the difference between semantic markup and adding style, and so on.
If  you aren’t familiar with all these, we’re going to make a small suggestion (and a shameless plug): there’s another book that proceeds this one, Head First HTML with CSS & XHTML, and you should read it.
And if you’re somewhat familar with markup languages, you might want to skim it or use it as a reference while reading this book.
If you just want a quick overview of the new additions, have a quick read over them at the end of the book.
HTML5: Everyone’s excited because I’m enabling a whole new generation of  web applications and experiences.
Head First: Right, but again, why didn’t HTML 4 or even the promise of  “XHTML” do that?
I said, “Hey, wait a sec, I can do new things and embrace everything that is already out there.” I mean, if  something works, why reinvent the wheel? That’s my philosophy.
But you know, some of  the standards guys are still saying that the Web would be better off  following their “pure” standards.
I listen to the people out there writing real web pages—how are they using me, and how can I help? Second on my list are the developers creating the web browsers.
I’ll listen to them, but not if  it disagrees with what real users are doing.
HTML5: Because if  the users and the browser-makers disagree with the standards guys, it is a moot point.
Luckily the people working on the HTML5 spec totally agree with me, and that’s our philosophy.
Head First: Back to the previous version of  HTML, you’ve said you are a superset of  HTML 4.01
HTML5: I promise I’ll do my best to handle anything from the past that is thrown at me.
That said, it doesn’t mean that is the way to treat me.
I do want web page authors to be educated on the latest standard and use me in the best way possible.
That way, they can really push me to my limits.
But again, I won’t totally fail, and I will display an old page to the best of  my ability if  it’s not updated.
HTML5: Hold on, hold on!!! All these questions about the past.
As far as my markup is concerned, my personal mission is to embrace the Web as it is, add some new structured elements that make web author’s lives easier, and to help all browser implementors support consistent semantics around my markup.
But I’m really here to pitch my new purpose: web applica...
Head First: ...So sorry HTML5, that’s all we have time for.
Thanks, and we’ll be sure to talk about anything you want in an upcoming interview.
HTML5 is all about multimedia, getting rid of plug-ins and using the new native support for audio.
I can use canvas, transforms and JavaScript to make cool interfaces and animations.
The word on the street is that HTML5 removes the need for plug-ins, can be used for everything from simple pages to Quake-style games and is a whipped topping for desserts.
When people talk about HTML5 they mean a family of  technologies that, when combined, gives you a whole new palette for building web pages and applications.
So we’ve said HTML5 is made up of  a family of  technologies, but what does that mean? Well you already know there’s the HTML markup itself, which has been expanded to include some new elements; there are also lots of  additions to CSS with CSS3 that give you even more power to style your pages.
And then there’s the turbo charger: JavaScript, and a whole new set of  JavaScript APIs that are available to you.
Let’s take a look behind the scenes and see how this all fits together:
You’ll be seeing a lot more of the DOM in this book because it plays a vital role in how we add behavior to pages with JavaScript (we’ll get to that shortly, in Chapter 2)
The browser loads a document, which includes markup written in HTML and style written in CSS.
As the browser loads your page, it also creates an internal  model of your document that contains all the elements of your HTML markup.
This is where it gets interesting; for each element in your HTML, the browser creates an object that represents it and places it in a tree-like structure with all the other elements...
Using JavaScript, you can interact with your page by manipulating the DOM, react to user or browser-generated events, or make use of all the new APIs.
APIs, otherwise known as Application Programming Interfaces, expose a set of objects, methods, and properties that we can use to access all the functionality of these technologies.
We’ll be covering many of these APIs in this book.
The APIs give you access to audio, video, 2D drawing with the canvas, local storage and a bunch of other great technologies needed to build apps.
And remember, to make use of all these APIs, we need JavaScript.
We’re here to help with the structure and semantic meaning of  your page, including new ways of  making sections, headers, footers and navigation in your pages.
I can require that you fill out fields, and I can more easily verify that you’ve typed an email, URL or phone number where you’re supposed to.
You used to need a plug-in for us, but now we’re first class members of  the HTML family of  elements.
Using me, you can draw right on your web page.
With me, you can draw text, images, lines, circles, rectangles, patterns and gradients.
You’ve probably used me before, but did you know I can now animate your elements, give them great rounded corners and even drop shadows?
Use me as a bit of  local storage in every user’s browser.
Need to store a few preferences, some shopping cart items, or maybe even stash a huge cache for efficiency? I’m your API.
Need applications that work even when you aren’t connected to the network? I can help.
I’m the API that can tell you where you are, and I play nice with Google maps.
You’ll want me whenever you need several scripts running concurrently and in the background, so your user interface remains responsive.
We’ve already talked about the “family of technologies” so much we feel like they’re, well, family.
But then again we really haven’t gotten to know them yet, so isn’t it about time? You’ll find most of the family below, so go ahead mingle, see if you can figure out who is who.
And don’t worry, we know this is your first time meeting the HTML5 family members, so the answers are at the end of the chapter.
We’re sure you’ve heard some browsers are ready for HTML5, and some aren’t.
We need for you to get in close, because the truth is out there...
We’ve cheated on our answers and filled them in for.
But we thought you’d like t o look into the future.
Even though it will be a while before the standard gets signed, sealed and delivered, you’ll be using browsers that fully support HTML5 long before then.
In fact, on modern browsers many features are already supported across the board.
That’s why it’s a great idea to get started using HTML5 now.
Plus if  you start now, you’ll be able to impress your friends and coworkers with all your cutting edge knowledge.
Wait a sec, if I start using HTML5 now, aren’t all those users of old browsers going to be.
First of  all HTML5 is a superset of  HTML, and so your goal should be to write only one HTML page.
You’re right in that the features supported by any one browser may differ, depending on how current the browser is, and how aggressive your users are in upgrading.
So, we need to keep in mind that some of  the newer features of  HTML5 might not be supported, which leads back to your question of  how to handle that.
Now, one of  the design principles behind HTML5 is to allow your pages to degrade gracefully—that means if  your user’s browser doesn’t provide a new feature, then you should provide a meaningful alternative.
In this book we’re going to show you how to write your pages to do that.
But the good news is that all browsers are moving towards the HTML5 standard and related technologies (even the mobile browsers) and so over time graceful degradation will be more the exception than the rule (although you’ll always want to do what you can to give your users a meaningful experience no matter what browser they’re on)
That’s okay; the standard should be wrapped up in the next couple years and the browser makers are well on to their way to implementing it.
Remember that even if we do adopt HTML6, the doctype won’t change.
A: While there is plenty of healthy competition in the marketplace for browsers (desktop and mobile), in reality many of these browsers are based on a few common HTML engines.
For instance Chrome, Safari and the mobile browsers in the Android and iPhone are all based on WebKit, an open source browser engine.
So, for the most part, your pages will work out of the gate on multiple browsers without a lot of effort on your part.
Q: Why not just use Flash to solve cross-browser issues? A: Flash is a great tool for many applications and certainly on the desktop it is pervasive across operating systems and browsers.
HTML5 and its family of technologies is trying to allow you to do with open standards many of the same things that Flash can do.
So which way should you go? One thing to think about is the amount of investment going into HTML5 technologies within Google, Apple, Microsoft, and others.
Over the long term, HTML5 is going to be a huge player, and in the mobile space it already is.
So, while the choice is yours, and we’re sure both are going to be around for a long time, the industry is heading towards open standards.
We did some digging and found some code embedded in an HTML page.
We’re hoping you can help us crack the code to figure out what it means.
Don’t worry; we don’t expect you to understand this code, we’re just trying to get your brain warmed up with a little deductive reasoning...
A hint: document represents the entire HTML page, and getElementById probably has something to do with HTML elements and ids.
I’m just sayin’, if you’re going to get serious about building web apps and using HTML5, you’ve got to have JavaScript chops.
If  you’ve been with us since Head First HTML & CSS (or, you’ve read this far into the book without repurposing it as firewood) we know you probably have a good understanding of  using markup languages and stylesheets to create great looking web pages.
Knowing those two technologies can you get a long way...
But, with HTML5 things are changing: web pages are becoming rich experiences (and full blown applications) that have behavior, are updated on the fly, and interact with the user.
Building these kinds of  pages requires a fair bit of  programming and if you’re going to write code for the browser, there’s only one game in town: JavaScript.
Now, if  you’ve programmed or written simple scripts before, you’re going to be in good shape: JavaScript (despite some rumors) is a fantastic language and we’ll take you through everything you need to know to write the applications in this book.
If  you haven’t programmed before, we’re going to do everything we can to take you along for the ride.
In either case, one of  the huge benefits of  JavaScript is how accessible it is to new programmers.
In fact, for now, don’t worry too much about getting every detail over the next few pages—we just want you to get a feel for JavaScript.
We can’t think of a better or more fun way to learn to program!
What can you do with JavaScript? JavaScript opens up a whole new universe of expression and functionality to your web pages.
Let’s look at just a few things you might do with JavaScript and HTML5...
Access any web service and bring that data back to your app, in near real time.
Cache data locally using browser storage to speed up mobile apps.
Use web workers to turbo-charge your JavaScript code and do some serious computation or make your app more responsive.
You can even make better use of your user's multicore processor!
Interact with your pages in new ways that work for the desktop and mobile devices.
Create your own video playback controls using HTML and JavaScript.
Build complete video experiences that incorporate video in new ways.
Use the power of JavaScript to do full blown video processing in your browser.
Using JavaScript you can store lots of preferences and data for your users locally, in the browser, and even make it available for offline access.
We’re glad you could work us into your busy schedule.
Let me just put it out there: HTML5 is becoming quite a celebrity—what’s your take on this?
JavaScript: I’m not someone who seeks the limelight, I’m a behind the scenes kinda guy.
That said, a lot of  the credit going to HTML5 should be going to me.
And the truth is, it takes me, JavaScript, to really make use of  them.
Sure, HTML5 gives you a place to hold the whole experience together and present it, but without me, you wouldn’t have an interesting experience at all.
That’s okay, more power to HTML5; I’m just going to keep on doing my job.
Head First: You know, you haven’t always had the best reputation.
I’ll quote a review from 1998: “JavaScript is at best a half-baked, wimpy scripting language.”
I may not have started life in the clean, academic environment of  many programming languages, but I’ve become one of  the most widely used programming languages of  all time, so I wouldn’t discount me so quickly.
Not only that, but enormous resources have been poured into making me robust and extremely fast.
I’m at least 100 times faster than I was a decade ago.
JavaScript: Oh, and if  you haven’t heard, the standards guys also just told me I’m now the default scripting language for HTML5
In fact, you don’t even have to say “JavaScript” in your <script> tag anymore.
So they may have called me wimpy in ’98, but where are JScript, VBScript, Java Applets and all those failed attempts at browser languages now?
Head First: Well it certainly sounds like you are the key to creating great HTML5 experiences.
You do have a reputation for being a confusing language.
JavaScript: I’m a very powerful language, despite some rumors, so you should really spend some time learning to use me well.
On the other hand, I’m popular because I’m so easy to get up and running with.
Writing Serious JavaScript With all this talk about JavaScript, we bet you’re ready to jump in and see what it’s all about.
They don’t call this Head First for nothing, we’ve got a super serious business application below that we’re going to throw at you.
For now, get started by going through the code to get a feel for it.
Don’t worry, we don’t expect you to understand everything yet, but we bet you can make some really good guesses about what this code does.
And, when you’re done, turn the page and see how close you were...
It says, while the number of cans is greater than 0, do everything between the curly brackets.
We’ve stored all the lines to the song in the variable lyrics, so now we tell the web page to write it, which just means the string is added to the page so you can see the song.
Walk through the code again and see if  you were on the mark.
At this point you just want to get a feel for the code; we’ll be stepping through everything in detail soon enough.
You didn’t think you’d do all that hard work on the exercise without giving JavaScript a try for real, did you? What you’ll need to do is take the code from the previous page and type it (along with the HTML below) into a file (like index.html), and then load it in your browser.
And type the JavaScript code from the previous page in here.
The code creates the entire lyrics for the 99 bottles cans of beer energy drink on the wall and writes the text into the browser document.
They tell the page that what’s in them is JavaScript, not HTML.
Remember, to download all the code and sample files for this book, please visit http://wickedlysmart.com/hfhtml5
Q: Why was there nothing in the body of that HTML except the script?
A: We chose to start with an empty body because we created all the content for this page using JavaScript code.
Now, sure, we could have just typed the song lyrics directly into the body element (and that would have taken a lot of typing), or we can have code do all the hard work for us (which we did), and then just have the code insert the lyrics into the page with document.write.
Keep in mind we’re just getting our feet wet here; we’re going to spend a lot more time in this book seeing how we can take a page and dynamically fill in its content with code.
Q: I get that we built up the entire lyrics to the song, but what exactly did the document.write do and how did the text get in the document?
A: Well, document.write takes a string of text and inserts it into the document; in fact, it outputs the string precisely where the script tag is located.
So, in this case document.write outputs the string right into the body of the page.
You’re soon going to see more sophisticated ways to alter the text of a live document with JavaScript, but this example should give you a flavor of how code can dynamically change a page.
Q: You’ve been using the terms web page and web application; are they two different things? What makes something a web application?
A: That’s a great question because we’re using the terms loosely.
There’s no technical difference between the two; in other words, there’s nothing special you do to turn a page written with HTML, JavaScript and/or CSS into a web application.
When we have a page that is acting more like an application than just a static document, then we start thinking of it as a web application and less as a web page.
We think of applications as having a number of qualities such as holding lots of state, managing more complex interactions with the user, displaying dynamic and constantly updated data without a page refresh, or even doing more complex tasks or calculations.
Q: Hey, all this JavaScript is great, but what about CSS? I’m really itching to take advantage of some of the new CSS3 stuff I’ve been hearing about to make my pages look better.
A: Yes, CSS has come a long way and we’re thrilled it works so well with HTML5
Now, while this book isn’t about CSS3, you can be sure we’re going to take full advantage of some of its new capabilities.
As you might know, many of the tricks we used to do to add rounded corners and shadows with images in HTML, and simple animation with JavaScript, can now be easily done with CSS3
So, yes, we’re going to make use of the power of CSS3 in this book, and we’ll point out when we’re doing so.
What exactly is HTML5? It can’t just be the markup everyone is so excited about...
You see, when most people are talking about the promise of  HTML5, what they mean is all of  these technologies combined.
That is, we have markup to build the core structure of  our pages, we have JavaScript along with all its APIs to add behavior and new functionality, and we have CSS to style our pages—and together, these are the technologies we’re all going to use to build tomorrow’s web apps.
Now, why did we say unofficial? Well, there are people who like to make hard distinctions among these technologies and which standard each belongs to.
But, what we care about is this: what technologies are available in the browser, and are they ready for us to use to craft our pages and applications? So, we say HTML5 is markup + JavaScript APIs + CSS, and we think that is what people generally mean when talking about HTML5 as a technology.
If you’re really interested in how these technologies fit together as a set of standards (and we all should be) then we encourage you to visit w3.org for more information.
Use the magnets below to fill in the formula that solves the equation of  “what is HTML5?” Careful now, there are some distractions.
It introduces simplified tags, new semantic and media elements, and relies on a set of JavaScript libraries that enable web applications.
Developers and the W3C decided to keep extending and improving HTML instead.
The new, simpler HTML5 doctype is supported by older browsers—they use standards mode when they see this doctype.
The type attribute is no longer needed in the <script> tag or in a stylesheet link to CSS.
The <meta> tag used for specifying the character set has been simplified to include only the character encoding.
UTF-8 is now the standard charset in use on the Web.
Making changes to the doctype and <meta> tag won’t break your pages in older browsers.
We aren’t covering these in this book, but we have a small guide to them in the appendix.
Many of the new features in HTML5 require JavaScript to make the most of them.
The DOM is the browser’s internal representation of a web page.
Using JavaScript, you can access elements, change elements, and add new elements to the DOM.
JavaScript is one of the most popular languages in the world.
You’ll be able to detect whether a new feature is supported in a browser and gracefully degrade the experience if not.
HTML5cross It’s time to give the right side of your brain a break and put that left side to work.
Use a ______ loop to print verses of a song.
The ________ is an internal representation of a web page.
This attribute of the link and script tags is no longer needed in HTML5
Use a ______ loop to print verses of a song.
The ________ is an internal representation of a web page.
We’re here to help with the structure and semantic meaning of  your page, including new ways of  making sections, headers, footers and navigation in your pages.
I can require that you fill out fields, and I can more easily verify that you’ve typed an email, URL or phone number where you’re supposed to.
You used to need a plug-in for us, but now we’re first class members of  the HTML family of  elements.
Using me, you can draw right into your web page.
With me, you can draw text, images, lines, circles, rectangles, patterns and gradients.
You’ve probably used me before, but did you know I can now animate your elements, give them great rounded corners and even drop shadows?
Use me as a bit of  local storage in every user’s browser.
Need to store a few preferences, some shopping cart items, or maybe even stash a huge cache for efficiency? I’m your API.
Need applications that work even when you aren’t connected to the network? I can help.
I’m the API that can tell you where you are, and I play nice with Google maps.
You’ll want me whenever you need several scripts running concurrently and in the background, so your user interface remains responsive.
We’ve already talked about the “family of technologies” so much we feel like they’re, well, family.
But then again we really haven’t gotten to know them yet, so isn’t it about time? You’ll find the whole family below.
Go ahead, mingle, see if you can figure out who is who.
And don’t worry, we know this is your first time meeting the HTML5 family members, so here is the solution.
Use a ______ loop to print verses of a song.
The ________ is an internal representation of a web page.
This attribute of the link and script tags is no longer needed in HTML5
You already know all about HTML markup (otherwise known as structure)
When you add behavior with JavaScript, you can create an interactive.
Get ready to add the most interesting and versatile skill in your web.
The Way JavaScript Works Our goal is to write JavaScript code that runs in the browser when your web page is loaded—that code might respond to user actions, update or change the page, communicate with web services, and in general make your page feel more like an application than a document.
You create your HTML markup and your JavaScript code and put them in files, say index.html and index.js (or they both can go in the HTML file)
JavaScript continues executing, using the DOM to  examine the page, change it, receive events from it, or ask the browser to retrieve other data from the web server.
The browser retrieves and loads your page, parsing its contents from top to bottom.
As it encounters JavaScript, the browser parses the code and checks it for correctness, and then executes the code.
The browser also builds an internal model of the HTML page, called the DOM.
Once you’ve got a page with a <script> element (or a reference to a separate JavaScript file), you’re ready to start coding.
JavaScript is a full-fledged programming language and you can do pretty much anything with it you can with other languages, and even more because we’re programming inside a web page!
Create a variable and assign values, add things together, calculate things, use built-in functionality from a JavaScript library.
Perform statements over and over, as many times as you need to.
Write code that is conditional, depending on the state of your app.
Or, strings of characters (we call those “strings,” for short)
JavaScript variables don’t have strict types, so any variable can hold a number, a string or a boolean.
The first step is to declare your variable, in this case scoops.
Notice that JavaScript, unlike some languages, doesn’t need a type for the variable, it just creates a generic container that can hold lots of  things:
Next we need a value to put in the variable.
Your value can be a literal value, like a number or a string.
Or, the value can be the result of an expression.
Or use one of JavaScript's internal library functions, like a random number generator, to create a value.
Q: What is the value of my variable when I just write: var winner;
A: After this statement is executed, the variable winner will be assigned the value undefined, which is another JavaScript value and type.
We’ll see where and how to use this later in the book.
Q: I’ve seen other programming languages where variables are declared with a type.
A: JavaScript does have types, but unlike languages you might have used before, JavaScript has dynamic typing, which means that you don’t have to specify a type, and the JavaScript interpreter will figure out what type to use as your code is running.
Comments are just notes to you or other developers about the code.They aren’t evaluated.
Don't use quotes around the boolean values true and false.
Variables don’t have to be given a value when they are declared: var width;
Finally, we have a variable and we have a value (a literal value, like 10, or the result of  evaluating an expression (like totalScoops / people)), and all we need to do is assign the value to the variable:
Ahh, I’m no longer undefined, I now have a value of my very own.10
Of  course, once you have a variable created, you can change its value at any time, or even change it to a value that has a different type.
Or even use scoops itself in an expression that changes its value.
Or, we can change the value and type of scoops, in this case to a string.
Careful, this could cause big issues in your code if you’re expecting scoops to be a number.
Or, there’s even a value in JavaScript that means “no value”
How to name your variables You might be wondering how you pick names for your variables? If  you’re used to naming ids in your HTML elements, you’ll find variables very similar.
Rule#1: Start your variables with a letter, an underscore or a dollar sign.
Rule #2: Then you can use any number of letters, numeric digits, underscores or dollar signs.
You want to get off  to a good start with naming your variables, not just by making them meaningful, but also by using a letter (small or uppercase), an underscore character or a dollar sign.
Keep using letters, dollar signs, and underscores to create your variable name.
After the first character you can also thrown in numbers if  you like:
Numbers, strings and booleans are all known as primitive types in JavaScript.
There is one other thing you can store in a variable, an object.
We’ll be talking about objects soon enough, but for now you can think of an object as a collection of things, whereas a primitive is just one thing that can’t be broken up into anything else.
Rule #3: Make sure you avoid all of JavaScript’s reserved words.
JavaScript contains a number of  words that are reserved, such as if, else, while,  and for (to name just a few), and JavaScript doesn’t take too kindly to you trying to use those reserved words for your variable names.
Now, you don’t need to memorize them, and you’ll develop a sense of  what they are as you learn JavaScript, but if  you’re ever perplexed by JavaScript complaining about how you’ve declared your variables, think, “Hmm, is that a reserved word I’m trying to use?”
Q: What if I used a reserved word as part of my variable name? Like, can I have a variable named ifOnly (that is, a variable that contains the reserved word if)?
A: You sure can, just don’t match the reserved word exactly.
It’s also good to write clear code, so you wouldn’t in general want to use something like elze, which might be confused with else.
Q: Is JavaScript case sensitive? In other words are myvariable and MyVariable the same thing?
With JavaScript however, case matters and myvariable and MyVariable are two different variables.
Q: I get that JavaScript can assign a value at any time (number, string, and so on) to a variable.
But what happens when I add two variables together and one is a number and the other is a string of characters?
A: JavaScript tries to be smart about converting types for you as needed.
For instance if you add a string and a number, it usually tries to convert the number to a string and concatenate the two together.
Now in some cases that is great, and in some cases it isn’t what you wanted.
Hang on to that thought and we’ll come back to it in just a sec.
Variable names like _m, r and foo might mean something to you but they are generally frowned upon in Webville.
Not only are you likely to forget them over time, your code will be much more readable with names like angle, currentPressure and passed.
At some point you’re going to have to decide how you name a variable that represents, say, a two-headed dragon with fire.
Camel case is easy to form, widely spoken in Webville and gives you enough flexibility to create as specific a variable name as you need.
There are other schemes too, but this is one of the more commonly used (even beyond JavaScript)
You’ve got a lot of flexibility in choosing your variable names, so we wanted to give you a few tips to make your naming easier:
Be safe in your variable naming; we’ll cover a few more tips for staying safe later in the book, but for now be clear in your naming, avoid reserved words, and always use var when declaring a variable.
Getting Expressive We’ve already seen some JavaScript statements that look like:
But let’s take a closer look at expressions, like the one in this statement.
It turns out expressions are everywhere in JavaScript, so it’s important to know the kinds of  things you can express.
You can write expressions that result in the boolean values true or false (these are, obviously, boolean expressions)
There are other types of expressions too; we’ll be getting to these later.
Keep an eye on expressions over the next few pages (not to mention the rest of  the book), and you’re going to see how they are used to compute things, do things multiple times and to make decisions in your code.
Based on what you know so far about JavaScript variables, expressions and statements, see if you can figure out which of these are legal and which might cause an error.
From the following list, circle the statements that are legal.
What’s the result if color is “blue”? _____________ Hint: ! means not.
You’ve seen the different types of expressions you can use in JavaScript; now it’s time to put that knowledge to work by evaluating some expressions yourself.
Everything seems to work well if I add numbers to numbers or strings to strings, but what if I add a number to a string? Or an integer to a.
Remember when we said JavaScript makes programming easy to get into? One of  the ways it does that is by taking care of  converting types to other types as needed to make expressions make sense.
Now, we know that + could be for adding numbers together, and it’s also the operator used to concatenate strings together.
As you might guess, however, JavaScript doesn’t always do what you want, and in some cases it needs a little help in conversions.
We’ll be coming back to that topic a little later.
If  we did everything just once in a JavaScript program it would probably be a pretty boring program.
You do a lot of  things multiple times—you rinse, lather, repeat, until hair is clean, or, keep driving until you reach your destination, or keep scooping your ice cream until it’s all gone—and to handle these situations, JavaScript gives you a few ways to loop over blocks of  code.
You can use JavaScript’s while loop to do something until a condition is met:
We’ve got a tub of ice cream, and its got ten scoops left in it.
While there are more than zero scoops left, we’re going to keep doing everything in this code block.
Each time through the while loop, we alert the user there is more ice cream, and then we take one scoop away by subtracting one from the number of scoops.
While uses a boolean expression that evaluates to true or false.
So if  you think about the while loop, we’re initializing some values, say, the number of  ice cream scoops left, which the while loop tests, and if  true, we execute a block of  code.
And, the block of  code does some work that at some point updates the value involved in the conditional test so that the condition fails and the loop ends.
JavaScript also provides a for loop, which formalizes this structure a little more.
Here’s our ice cream code written with a for loop instead:
Q: The while and for loops seem the same to me.
When do I use which? A: In general you can do the same things with a for or a while; however, as you can see with the ice cream example, the for loop is a little more compact, and you might argue the while loop is more readable.
So, it really is a matter of which fits best given your situation.
In general, for loops get used more for iterating over a fixed number of values (say, over the items in a shopping cart), and while loops are used more to loop until a condition is met (say, giving the user a test until he gets it right)
How many times do you see the alert, “Top is spinning!”?
We’ve been using boolean expressions in for and while statements as a conditional test to decide whether to continue looping.
You can also use them to make decisions in JavaScript.
Here’s our boolean expression, testing to see how many scoops are left.
Add as many tests with “else if” as you need, each with its own associated code block that will be executed when the condition is true.
You can provide a catchall for your if statements as well—a final else that is run if all the other conditions fail.
Let’s add a few more if/elses and also a catchall:
Here’s our catchall; if none of the conditions above are true, then this block is guaranteed to execute.
We’ve added additional conditions to have a countdown to zero scoops.
Take the code above and insert it into the while loop below.
Walk through the while loop and write down the alerts in the sequence they occur.
A palindrome is a sentence that can be read the same way backwards and forwards! Here’s the palindrome you should see if the magnets are all in the right places.
Code Magnets This code prints out a well-known palindrome in an alert.
The problem is that some of the code was on fridge magnets and fell on the floor.
It’s your job to put the code back together again to make the palindrome work.
Watch out; there were a few magnets already on the floor that don’t belong here, and you’ll have to use some of the magnets more than once! Check your answer at the end of the chapter before you go on.
When are we going to get there, or are we just going to keep playing around with JavaScript?
Here’s what we’ve done so far: you know how to declare and use JavaScript variables, and you know how to build basic statements and expressions.
You also know how to use all those together to write conditional code with if/else statements, not to mention do things iteratively with while and for statements.
With that under your belt, now we’re going to see how to place JavaScript in your page, and more importantly, how JavaScript interacts with your page.
That is, how you determine what’s in your page, how you change your page, and, a bit more down the road, how you write code to react to things happening in your pages.
So, while we’re not done with JavaScript yet, your wait is over; it’s time to see how markup and behavior work together...
The most common way to add code to your pages is to put a <script> element in the head of  your page.
You can also link to a separate file containing JavaScript code.
If  you’re linking to a file in the same directory, you can just use the name of  the file.
Add your code in the body of the document, either inline or as a link to a separate file.
Or, you can put your code right in the body of  your HTML.
Again, enclose your JavaScript code in the <script> element (or reference a separate file in the src attribute)
JavaScript in the body of  your page is executed when the browser parses the body (which it does, typically, top down)
To use JavaScript you’ve got to add it to a web page.
But where and how? You already know there is a <script> element, so let’s see where we can use it and how that affects the way JavaScript executes within your pages.
Here are three different ways you might add code to your page:
Most of the time code is added to the head of the page.
There are some slight performance advantages to adding your code at the end of body, but only if you really need to super-optimize your page’s performance.
You can type your code right into your web page, or reference a separate JavaScript file using the src attribute of the script tag.
Or you can place your code (or a reference to your code) in the body.
It’s through reading, reacting to, and changing the DOM that JavaScript can be used to write interactive web pages/apps.
We call this the Document Object Model, which you can ask to tell you anything about the structure or content of your page.
Your browser When you load a page into the browser, the browser parses the HTML and creates an internal  model of your document, that contains all the elements of your HTML markup.
Your JavaScript can interact with the DOM to get access to the elements and the content in them.
JavaScript can also use the DOM to create or remove elements (among a number of other things we’ll be getting to)
When JavaScript modifies the DOM, the browser updates the page dynamically, so you see new content on your page.
Next, take the top level element of your HTML page, in our case the <html> element, call it the current element and add it as a child of the document.
For each element nested in the current element, add that element as a child of the current element in the DOM.
Return to (3) for each element you just added, and repeat until you are out of elements.
How to bake your very own DOM Let’s take some markup and create a DOM for it.
These are like the leaves of the tree (because there are no elements inside them, just text)
The DOM includes the content of the page as well as the elements.
A first taste of the DOM The beauty of  the Document Object Model is that it gives us a consistent way, across all browsers, to gain access to the structure and content of  the HTML from code.
And we’re going to see how all that works in a sec...
Back to our example; if  you follow the recipe for creating a DOM you’ll end up with a structure like the one below.
Every DOM has a document object at the top and then a tree complete with branches and leaf  nodes for each of  the elements in the HTML markup.
Now that we have a DOM we can examine or alter it in any way we.
We compare this structure to a tree because a “tree” is a data structure that comes from computer science.
You need to parse the HTML and build your very own DOM from it.
Go ahead and parse the HTML to the right, and draw your DOM below.
Check your answer with our solution at the end of the chapter before you go on.
The proof? HTML’s DNA is made of declarative markup that allows you to describe a set of nested elements that make up your pages.
JavaScript, on the other hand, is made of pure algorithmic genetic material, meant for describing computations.
Are they so far apart they can’t even communicate? Of course not, because they have something in common: the DOM.
Through the DOM, JavaScript can communicate with your page, and vice versa.
There are a few ways to make this happen, but for now lets concentrate on oneit’s a little wormhole of sorts that allows JavaScript to get access to any element, and it’s called getElementById.
Here’s a simple DOM; it’s got a few HTML paragraphs, each with an id identifying it as the green, red or blue planet.
Of course there’s a <head> element too, but we’ve left the details out to keep things simpler.
But we’ll get to all that; for now let’s just get the greenplanet text updated.
To do that we need the element with an id of greenplanet.
Here we’re asking the document to get us an element by finding the element that matches the given id.
Remember the document represents the entire page in your browser and contains the complete DOM, so we can ask it to do things like find an element with a specific id.
Once getElementById gives you an element, you’re ready do something with it (like change its text to “Red Alert: hit by phaser fire!”)
To do that, we typically assign the element to a variable so we can refer to the element thoughout our code;  let’s do that and then change the text:
Here’s our call to getElementById, which seeks out the “greenplanet” element and returns it.
And in our code we can now just use the variable planet to refer to our element.
We change the content of the greenplanet element to our new text...
We can use the innerHTML property of our planet element to change the content of the element.
Any changes to the DOM are reflected in the browser’s rendering of the page, so you’ll see the paragraph change to contain the new content!
Here’s a DOM with a secret message hidden in it.
Evaluate the code below to reveal the secret! The answer is upside down on this page.
Write the element each line of code selects, as well as the content of th.
Here’s the HTML for the planets; we’ve got a <script> element in the head where we’ll put the code, and three paragraphs for the green, red, and blue planets.
If  you haven’t already, go ahead and type in the HTML and the JavaScript to update the DOM:
We’ve added the JavaScript to the head of the page.
Here’s the <p> element you’re going to change with JavaScript.
After you’ve got it typed in, go ahead and load the page into your browser and see the DOM magic happen on the green planet.
Just like you saw before, we’re getting the <p> element with the id “greenplanet” and changing its content.
Most of  the time it makes sense to start executing your JavaScript code after the page is fully loaded.
The reason? Well, if  you don’t wait until the page has loaded, then the DOM won’t be fully created when your code executes.
In our case, the JavaScript is executing when the browser first loads the head of  the page, and before the rest of  the page has loaded, and so the DOM hasn’t been fully created yet.
So what happens? The call to get the element with an id of greenplanet isn’t going to return anything because there is no matching element, and so the browser just keeps moving on and renders the page anyway after your code has run.
So you’ll see the page rendered, but the text in the green planet won’t be altered by the code.
What we need is a way to tell the browser “run my code after you’ve fully loaded in the page and created the DOM.” Let’s see how to do that next.
I’ve triple-checked my markup and code, and this just isn’t working for me either.
You can’t mess with the DOM until the page has fully loaded.
But how do you tell the browser to execute your code only after it’s loaded?
To tell the browser to wait before executing code we’re going to use two parts of  JavaScript you haven’t seen much of  yet: the window object, and a function.
We’ll get to the details of  both these later; for now, just go with it so you can get the code to work.
First, create a function named init and put your existing code in the function.
Here, we’re setting the value of the window.onload property to the function name.
Reload the page Go ahead and reload the page and see if  you have the answer:
Yes! Now we see the new content in the green planet <p> element.
Well, what IS great is that now you know how to tell the browser to wait until the DOM has completely loaded before running code that accesses elements.
This says when the page is fully loaded, execute the code that is in init.
Here’s some HTML for a playlist of songs, except that the list is empty.
It’s your job to complete the JavaScript below to add the songs to the list.
Fill in the blank with the JavaScript that will do the job.
Check your answer with our solution and the end of the chapter before you go on.
When you get the JavaScript working, this is what the web page will look like after you load the page.
Fill in the blanks with the missing code to get the playlist filled out.
This code should fill in the list of songs below, in the <ul>
The code above should add content to each <li> in the playlist.
Look up and retrieve one or more elements from the DOM.
So, what else is a DOM good for anyway? The DOM can do a fair bit more than we’ve seen so far and we’ll be using a lot of  its other functionality as we move forward in the book, but for now let’s just take a quick look so you’ve got it in the back of  your mind:
And you can get form values the user has typed in, like the text of an input element.
You can create new elements and you can also add those elements to the DOM.
You can also remove elements from the DOM by taking a parent element and removing any of its children.
Again, you’ll see the element removed in your browser window as soon as it is deleted from the DOM.
So far you’ve accessed only the text content of an element, but you can access attributes as well.
For instance, you might want to know what an element’s class is, and then change the class it belongs to on the fly.
Access or create an attribute of an element, like id or class.
Can we talk about JavaScript again? Or, how to store multiple values in JavaScript You’ve been hanging right in there with JavaScript and the DOM, and before we let you get some rest and relaxation, we wanted to tell you about one more JavaScript type that you’ll use all the time—the Array.
Let’s say you wanted to store the names of  thirty-two ice cream flavors or the item numbers of  all the items in your user’s shopping cart or maybe the outside temperature by the hour.
To do that with variables would get awkward fast, especially if  we need to store tens, hundreds or thousands of  values.
And for every index in the array, there’s a corresponding value.
You can add more values to the array as needed.
We need to create an array before we use it, and we need to assign the array itself  to a variable so we have something to refer to it by in our code.
We’ll come back to this syntax in Chapter 4, but for now, just know that it creates a new array.
To add new values to the array, we just reference the index number of the array item, and give it a value.
Just like a variable in JavaScript you can assign any value (or type of value) to an array index.The index.
Or, if  you’re really in a hurry, JavaScript gives you a shortcut to type in an array (what we call a “literal array”) to create and intialize it with values:
At any time you can keep adding new items to your array simply by using the next, unused index, like this:
And now that we know how to get length of  an array, let’s see if  we can combine what you know about loops with arrays...
By using a new index, we get a new item in the array.
Using your array items You can get the value of  an array item just by referencing the array variable with an index, like this:
Know the size of your array, or else You can easily get the size of  your array by referring to a property of  the array called length:
Below you’ll find a web page with a list of empty items ready for your JavaScript to fill in with temperatures.
The code above will fill in each list item with a phrase with the temperature.
Can you see how we’re accessing each item in the array using a variable index?
You didn’t think our serious business application from Chapter 1 was serious enough? Fine.
Try this one, if you need something to show the boss.
Check out this code for the hot new Phrase-o-Matic app and see if you can figure out what it does before you go on...
The Phrase-O-Matic We hope you figured out this code is the perfect tool for creating your next start-up marketing slogan.
It has created winners like “Win-win value-added solution” and “24/7 empowered process” in the past and we have high hopes for more winners in the future.
First, we define the makePhrases function, which we run after the page has fully loaded so we know we can safely access the DOM:
We run makePhrases as soon as the page is done loading.
With that out of  the way we can write the code for the makePhrases function.
Each will hold words that we’ll use to create the phrases.
We create a variable named words1, that we can use to reference the first array.
All the code for makePhrases goes here, we’ll get to it in a sec...
We’re defining a function named makePhrases, that we can call later.
Feel free to change these to the latest buzzwords out there.
We’re almost done, we have the phrase, now we just have to display it.
By now you already know the drill: we’re going to use getElementById to locate our paragraph element and then use its innerHTML to put the new phrase there.
Then we set the content of the <p> element to the phrase.
Okay, we’ve got three new arrays of  nice buzzwords; now, what we’re going to do is randomly choose one word from each, and then put them together to create a phrase.
This code generates a random number based on the number of items in each array (in our case five, but feel free to add more to any array, it will still work)
Now we create the slick marketing phrase by taking each randomly choosen word and concatenating them all together, with a nice space in between for readability:
We use each random number to index into the word arrays...
Okay, finish that last line of  code, have one more look over it all and feel that sense of  accomplishment before you load it into your browser.
A: Math is a built-in JavaScript library that has a bunch of math-related functions in it.
We multiply that by the number of items in the array (which we get using the length property of the array) to get a number between 0 and the length of the array.
The result is likely to be a floating point number, like 3.2, so we use Math.floor to make sure we get an integer number that we can use as an index into the array to pick the random word.
All Math.floor does is drop the numbers after the decimal point in a floating point number.
Q: Where can I find documentation on things like Math?
Q: Earlier you said that you can store primitives (like number, string and boolean) in variables or objects.
So what is an array, a primitive or an object?
A: Good catch! An array is a special kind of object that’s built into JavaScript.
It’s special because you can use numerical indexes to access the values stored in the array, something you can’t do with other (non-array) objects, or objects that you create yourself.
A: You get undefined, which, if you recall, is the value of a variable that hasn’t been assigned a value yet.
Q: Can I remove an item from an Array? If so, what happens to the index of the other elements?
A: You can remove an item from an Array, and you can do it a couple of different ways.
You could set the value of the array at the index to null; for example, myArray[2] = null.
But that would mean the length of the Array stays the same.
Or you can remove the item altogether (using the function splice)
Learning a language is hard work and it requires you not only.
We haven’t figured out the digital to analog conversion yet, so you’ll need to supply your own real treats.
Undefined means a variable hasn’t been assigned a value; null means the variable has the no value.
Numerical, boolean and string expressions result in a number, a boolean, or a string value respectively.
To repeat blocks of code, use a for or a while loop.
For loops and while loops can do the same thing; use whichever one works best for the situation.
To end a for or while loop, the conditional test must be false at some point.
Use if/else statements to make a decision based on a conditional test.
You can add JavaScript to the head or body of your web page, or put it in a separate file and link to it from your web page.
Enclose your JavaScript (or link to it) using the <script> element.
When the browser loads a web page, it creates a Document Object Model (DOM), which is an internal representation of the web page.
You make your web pages interactive by examining and changing the DOM using JavaScript.
Use the innerHTML property of an element to change the element’s content.
If you try to access or change elements before the web page has completely loaded, you’ll get a JavaScript error and your code won’t work.
Assign a function to the window.onload property to run the code in that function after the browser has finished loading the web page.
To access a value in an array, use an index.
An index is an integer number that is the position of the item in the array (starting at 0)
The length property of an array tells you how many items are in the array.
By combining loops and arrays, you can access each item of an array sequentially.
Math is a JavaScript library with several mathrelated functions in it.
Math.floor converts a floating point number to an integer by dropping all the digits after the decimal point.
HTML5Cross Time to work a different part of your brain with a crossword.
You can add your JavaScript to the ________ or body of your HTML.
Use an ________ to get a value from an array.
Pick good names and use _______ case for long names.
You know how many items are in an array if you check the ___________
While and for loops use a __________ expression as a conditional test.
Don’t mess with the _______ until the page has fully loaded.
Use an ________ to get a value from an array.
Pick good names and use _______ case for long names.
Store all your ice cream flavors together in one _______
Based on what you know so far about JavaScript variables, expressions and statements, see if you can figure out which of these are legal and which might cause an error.
From the following list, circle the statements that are legal.
What’s the result if color is “blue”? _____________ color “is not equal” to pink.
You’ve seen the different types of expressions you can use in JavaScript, now it’s time to put that knowledge to work by evaluating some expressions yourself.
Technically, this one is legal, but results in a value you can't use.
How many times do you see the alert, “Top is spinning!”?
Eat faster, the ice cream is going to melt! Still lots of ice cream left, come and get it.
Still lots of ice cream left, come and get it.
Still lots of ice cream left, come and get it.
Still lots of ice cream left, come and get it.
Still lots of ice cream left, come and get it.
Still lots of ice cream left, come and get it.
Ice cream is running low! Going once! Going twice! Gone! Life without ice cream isn't the same.
Take the code above and insert it into the code below.
Walk through the while loop and write down the alerts in the sequence they occur.
A palindrome is a sentence that can be read the same way backwards and forwards! Here’s the palindrome you should see if the magnets are all in the right places.
Code Magnets Solution This code prints out a well-known palindrome in an alert.
The problem is that some of the code was on fridge magnets and fell on the floor.
It’s your job to put the code back together again to make the palindrome work.
Watch out; we put a few extra in, and you’ll have to use some of the magnets more than once! Here’s our solution.
You need to parse the HTML and build your very own DOM from it.
Go ahead and parse the HTML to the right, and draw your DOM below.
Here’s some HTML for a playlist of songs, except that the list is empty.
It was your job to complete the JavaScript below to add the songs to the list.
If you get the JavaScript working, this is what the web page will look like after you load the page.
The code above sets the content of these <li> elements by grabbing each element from the DOM and setting the innerHTML to the song name.
Below you’ll find a web page with a list of empty items ready for your JavaScript to fill in with temperatures.
We gave you most of the code; it was your job to finish it up so that it set the content of each list item to the corresponding temperature from the array.
Did you get the extra credit? Our solution is below.
Notice how we’re using i as the index into the array, so we’ll access each item as i increases in each loop.
And here we’re creating the string to use, using the variables i and theTemp.
Here, we’re creating a new Array to hold the temperatures.
You can add your JavaScript to the ________ or body of your HTML.
Use an ________ to get a value from an array.
Pick good names and use _______ case for long names.
You know how many items are in an array if you check the ___________
While and for loops use a __________ expression as a conditional test.
Don’t mess with the _______ until the page has fully loaded.
Sure, he looks great, but this relationship would be so.
You’ve learned the basics of JavaScript but can you get interactive with.
Get ready for Webville Tunes Okay, we’ve dragged you through a lot of  JavaScript fundamentals so far in this book, and while we’ve talked a good game on building web apps, we don’t have a lot to show for it, yet.
Displays all your favorite Webville tunes, right in the browser.
We don’t need to create a big, complex web page to get this started.
Let’s just create an HTML5 document with a form and a list element to hold the playlist:
Here it is with a text field to type in your songs.
We’re using the HTML5 placeholder attribute that shows an example of what to type in the input field.
And we’ve got a button with an id of “addButton” to submit your new additions to the playlist.We’re going to use a list for the.
For now it’s empty, but we’ll change that with JavaScript code in a sec...
Give it a test drive Go ahead and type in the code above, load it into your favorite browser and give it a spin before moving on to the next page.
Remember you can download the stylesheet (and all the code) from http://wickedlysmart.com/hfhtml5
We’re going to be putting all our JavaScript in the playlist.js file.
Nothing appears to happen, but your browser knows you clicked on the button (depending on your browser, you will also see the button depress)
The real question is how do we get the button to do something when you click on it? And what that question really means is, how do we get some JavaScript code invoked when you click on a button?
We need a bit of JavaScript code that will get evaluated when the user clicks on the “Add Song” button.
This code will (once we’ve written it) add a song to your playlist.
We need a way to hook up that bit of code so that when the button is clicked, JavaScript knows to run your “add song” code.
When the user clicks (or touches on a gesture-based device) a button, we want to know about it.
Great, you’ll be the first to know in the event that happens.
You’re going to see that many things are happening in the browser while your page is being displayed—buttons are being clicked, additional data your code requested from the network may be arriving, timers may be going off  (we’ll get to all that)
All these things cause events to happen, a button click event, a data available event, a time expired event, and so on (there are many more)
Whenever there is an event, there is an opportunity for your code to handle it; that is, to supply some code that will be invoked when the event occurs.
Now, you’re not required to handle any of  these events, but you’ll need to handle them if  you want interesting things to happen when they occur—like, say, when the button click event happens, you might want to add a new song to the playlist; when new data arrives you might want to process it and display it on your page; when a timer fires you might want to tell the user their hold on front row tickets is going to expire, and so on.
So, we know we want to handle the button click event, let’s see how we do that.
Set up a handler to handle the user’s click on the “Add Song” button.
Write the handler to get the song name the user typed in, and then...
Create a new element to hold the new song, and...
A function gives you a way to package up code into a chunk.
You can give it a name, and reuse the chunk of code wherever you want.
The function is named handleButtonClick; we’ll get to the specifics of the syntax in a bit.
We put all the code we want to execute when the function is called within the braces.
Right now we’re just going to display an alert when this function is called.
Let’s step back for a second before we lose ourselves in handlers and events.
The goal here is to click on “Add Song” and have a song added to a playlist on the page.
If  these steps aren’t clear to you, don’t worry, we’ll explain it as we go...
Go ahead an open up a new file, playlist.js for all your JavaScript code.
To ask the button to let us know when a click event occurs, we first need to get access to the button.
Luckily we created the button using HTML markup and that means...you guessed it, it is represented in the DOM, and you already know how to get elements in the DOM.
If  you look back at the HTML you’ll see we gave the button an id of  addButton.
So, we’ll use getElementById to get a reference to the button:
Now we just need to give the button some code to call when a click occurs.
To do that we’re going to create a function, named handleButtonClick, that will handle the event.
We’ll get into functions in a bit; for now, here’s the function:
Okay, we’ve got a button and we’ve got a function that will act as a handler, handleButtonClick, so let’s put them together.
To do that we’re going to use a property of  the button, onclick.
With a button in hand, after calling getElementById, we set the onclick property to the function we want called when a click event occurs.
You might remember that we did something similar when we used the window.onload property to call a function after the window was loaded.
In this case though, we’ll call the function when the button is clicked.
Now let’s put all of this together: Just like we did in the last chapter, we’re.
After the page loads we’ll grab the button and set up its onclick handler.
And the click handler will display an alert when we click on the button.
Go ahead and type in the code above (in your playlist.js file), load the page, click on that button as much as you want and you’ll see an alert each time.
After you’re finished testing your new button click handler, sit back and study the code and think through how all this works.
When you think you’ve got it in your head, turn the page and we’ll step through the details to make sure it really sticks.
Don’t worry, if and when I’m clicked on, you’ll literally be the first to know.
We set up the button click event handler in the init function (that is, after the page has finished loading)
When the user clicks on the button, the “click” event is triggered, and the handleButtonClick function is called.
The button object has an onclick property that we set to the handleButtonClick function.
We just introduced a lot of  new ideas over the last few pages, let’s step through the code again and make sure we’ve got it clear in our heads.
The first thing you did was throw a button in your HTML form.
And with that in place, you needed a way to capture a user’s click on that button so that you could have some code executed.
To do that we created a handler and assigned it to the onclick property of our button.
You also wrote a simple handler that just alerts the user that the button was clicked.
We’ll be writing the real code for the handler in a sec, but this one works well for testing.
Finally, the user clicks on your button, the button springs into action, notices it has a handler, and calls it...
I was asked to alert you that the button was clicked...
Using the getElementById method, we can get a handle to the songTextInput input element in the form.
We’re ready to move on to the second step of  our task: getting the song name that the user has typed in.
Once we have that, we can think about how we’re going to display the playlist in the browser.
But how are we going to get the song name? That’s something the user has typed in, right? Ah, but anything that happens in the web page gets reflected in the DOM, so the text the user typed must be there too.
To get the text from a form text input element, you first have to get the input element from the DOM, and you know how to do that: getElementById.
And, once you’ve done that you can use the value property of  the text input element to access the text the user types into the form field, here’s how:
This is the element we want to get from the DOM.
Then we can use the value property of the input element to get the text the user typed into the input field.
Rework the handleButtonClick function below to obtain the name of the song the user has typed into the form input element.
Q: What is the value of the value property of the text input if the user didn’t type anything? Is the value null? Or does the “Add Song” button not invoke the handler if the user hasn’t entered anything?
If you want to determine if the user typed something, that’s up to your code.
And, to know if the text input is empty (that is, the user didn’t type anything), you can check to see if its value is equal to a string with nothing in it, otherwise known as the empty string, which is written as “”, or two double quotes with nothing in between.
We see why you’d think it might be null, because we said that is the value of a variable that has no value, but from the text input field’s perspective, it isn’t holding nothing, it’s holding on to a string with nothing in it yet.
Q: I thought that the text input “value” was an attribute.
A: You’re right, value is an attribute of the HTML text input element.
You can initialize the value of a text input element using the value attribute.
But in JavaScript, to access the value that a user has typed in, you need to use the value property of the input element we get from the DOM.
Q: What other kinds of events can I handle in JavaScript other than button clicks?
A: There are a whole slew of other mouse events you can handle.
For instance, you can detect and handle a key press, a mouse moving over or out of an element, the mouse dragging, even a mouse press and hold (different from a mouse click)
And then there are many other types of events we’ve mentioned in passing, like events when new data is available, timer events, events related to the browser window, and so on.
You’ll see quite a few other kinds of event handling in the rest of the book; once you know how to do one, you can pretty much do them all!
Q: What is JavaScript doing while it’s waiting for events?
A: Unless you’ve programmed your JavaScript to do something, it sits idle until something happens (the user interacts with the interface, data comes in from the Web, a timer goes off, and so on)
This is a good thing; it means the processing power of your computer is going to other things, like making your browser responsive.
Later in the book, you’ll learn how to create tasks that run in the background so your browser can run the task code and respond to events at the same time.
Rework the handleButtonClick function below to obtain the name of the song the user has typed into the form input element.
First we need to get a reference to the text input element in the form.
We’ve given this element an id of “songTextInput” so we can use that with getElementById to get a reference.
The value property of the text input element holds whatever is typed into the text input, which is just a string.
Here we’re assigning that text to the variable songName.And now let’s just pop up an ale.
We can use an if statement and compare the songName string to an empty string to make sure the user typed something.
If they didn’t type anything we’ll alert them and ask them to enter a song.
What if you wanted to test to make sure the user actually entered some text before clicking the button? How might you do that? Here’s our solution:
We’ve already got a lot working! You can type a song name into a form, click the Add Song button and get the text you typed into the form, all within your code.
Now we’re going to display the playlist on the page itself.
You might have noticed that we already put an empty list in the HTML markup (an empty <ul> element to be exact) back when we first typed it in.
Given that, here’s what the DOM looks like right now.
Every time we enter a new song,  we want to add a new item to the unordered list.
To do that, we’ll create a new <li> element that will hold the song name.
Once we do that, the browser will do its thing and you’ll see the page update, just like the <li> was there all along.
Check out the DOM one more time and make sure you understand what we need to do.
When you click “Add Song”, your JavaScript will add the song to a list of songs on the page.
For the playlist shown here, draw the DOM as it looks after you’ve added all these songs.
Notice the order in which the songs are added to the page, and make sure the elements are in the right places in the DOM too.
Check the solution at the end of the chapter before you go on.
Draw the rest of the DOM here for the playlist above.
Did you have to make any assumptions about the order in which the <li> elements are added to the parent?
How to create a new element You’ve already seen how to get access to existing elements through the DOM.
But you can also use the DOM to create new elements (and then as a second step, add them to the DOM, which we’ll get to in a sec)
So now we have a new <li> element with nothing in it.
You already know one way to get text into an element:
Pass the kind of element you want to create as a string to createElement.
Here we’re assigning the new element to the variable li.
Note that it isn’t inserted into the DOM just yet.
Right now it is just a free-floating element in need of a place in the DOM.
This sets the content of the <li> to the song title.
Adding an element to the DOM To add a new element to the DOM you have to know where you want to put it.
But how do we do that? Let’s take another look at the DOM.
Remember how we said it was like a tree? Think family tree:
Use getElementById to get a reference to the <ul> element with id=“playlist”
Now when we type in a song name and click add, the song is added to the DOM, so we see the page change and the new song in the list.
Let’s put all that code together and add it to the handleButtonClick function.
Go ahead and type it in if  you haven’t already so you can test it.
Then we add the li object to the ul using appendChild.
First, create the new <li> element where the song name is going to go.
Then, set the content of that element to the song name.
And here’s how the DOM looks now that we’ve added all those new <li> elements.
Put Webville Tunes through its paces, add a few songs.
The first thing you did was set up an event handler to handle the user’s click on the “Add Song” button.
You created a function, handleButtonClick, and set the onclick property of the “Add Song” button to this function.
You built a playlist app that you can use to enter a song, click a button and add that song to a list on the page, all using JavaScript code.
When the user clicks the “Add Song” button, your handleButtonClick handler will be called.
In handleButtonClick, you’re getting the song name the user typed in, by using the input.value property to get the text from the DOM.
Next, you wrote code for the button click handler to get the song name from the input text field.
You used the input.value property to get the text, and you even added a check to make sure the user had typed in a song.
When the element is added to the DOM, the browser updates the page the user sees, and the playlist contains the song.
Adding a new child to the DOM updates the page.
Wait a sec, I get we’re interacting with the DOM and all, but how is this a real web App? If I close my browser, all my songs are gone.
We agree, the playlist should be persistent; after all, what’s the point of  entering all those songs if  they don’t stick around? And there’s a lot of  other functionality you might want to add as well.
You might, for instance, want to add an audio interface using the audio/video API so you can actually listen to the songs, share songs out to friends using a web service (like Facebook and Twitter), find other people in the local area that like the same artists (using the geolocation APIs), and we’re sure you can come up with more.
Plus, storing the songs requires the HTML5 Web Storage API, which is a few chapters away.
Hmm, on the other hand we really don’t want to under-deliver here...
We’ve gone ahead and baked a little code for you to save your playlists.
For now you just need to type it in and make two tiny changes to your existing code and you’ll have an HTML5-stored playlist.
We’ll be covering all the specifics of  storing things locally in your browser in the Web Storage chapter, but for now you can get your playlist up and running.
Of  course, it never hurts to look over the Ready Bake code.
You might be surprised how much you already know, not to mention how much of  it you can figure out if  you don’t know it.
The Ready Bake Code won’t work in some browsers if you’re serving your pages from file:// instead of a server like localhost:// or an.
We’ll deal with this situation more in future chapters (it pops up fairly often with new HTML5 features)
For now, if you don’t want to run a server or copy the files to a hosted server online, try using Safari or Chrome.
Here’s the Ready Bake code for you to add to your Webville Tunes app so you can save that fabulous playlist you’ve created.
This loads the saved songs from localStorage when you load your page, so you see your saved songs.
Test drive the saved songs We added all these songs, closed the browser, reopened the browser, loaded the page, and there they were.
You should see all the songs stored safely in your playlist.
Integrating your Ready Bake Code We need to make a few little tweaks to integrate the storage code.
Now you just need to add two lines to your code, in playlist.js, that will load and save the playlist:
And this saves your song each time you add one to the playlist.
Okay, are you tired of your playlist and want to delete it? You’ll have to check out the Web Storage chapter!
This is cool, we’re really starting to make the code and the page interact.
We really wanted to take you through a complete interactive example of  HTML markup and JavaScript working together to build the first part of  a web applications.
If  you think about it, you’ve already done a lot:
Set up a button click event and written the code to capture and handle the button click.
Not bad! And now that you have a bit of  an intuitive sense of  how this all works together, let’s take a little detour down JavaScript Avenue to see how things like functions and objects really work.
This isn’t going to be the regular tour, oh no, we’re going to pull up the manhole covers and get a rare look at how Webville functions.
There are lots of events happening in your browser all the time.
If you want to respond to these events, you need to handle the events with event handlers.
A button click event is triggered when you click on a button in a web page.
You handle a button click event by registering a function to handle the event.
You do this by writing a function, and setting the button’s onclick property to the function name.
If a button click event handler is registered, that function will be called when you click on the button.
You write code in the handler function to respond to the button click event.
You can alert the user or update the page or something else.
To get the text a user has typed into a form input text field, you use the input’s value property.
If a user has not entered anything into a form input text field, the value of the field will be the empty string (“”)
You can compare a variable to the empty string using an if test and ==
To add a new element to the DOM, you first need to create the element and then add it as a child of an element.
Pass the tag name (e.g., “li”) into the function call to indicate what element to create.
To add an element as a child of a parent element in the DOM, get a reference to the parent, and call appendChild on the parent, passing in the child element you’re adding.
If you add multiple children to a parent by using appendChild, each new child is appended after the other children, so they appear after or below the other children in the page (assuming you’re not changing the layout with CSS)
You can use the Web Storage API (localStorage) to store data in a user’s browser.
We used localStorage to save playlist songs, using Ready Bake Code.
You’ll learn more about the DOM and JavaScript features like functions and objects in the next chapter.
HTML5cross Give yourself some time to understand the interactions between HTML and JavaScript.
While you’re doing that mix it up a little by doing this crossword.
The default value of a form input element if the user doesn’t type anything is the ______ string.
For the playlist shown here, draw the DOM as it looks after you’ve added all these songs.
Notice the order in which the songs are added to the page, and make sure the elements are in the right places in the DOM too.
Did you have to make any assumptions about the order in which the <li> elements are added to the parent?
Yes, because it affects the display order of the songs on the page.
The default value of a form input element if the user doesn’t type anything is the ______ string.
They’re also heavily used across HTML5 JavaScript APIs, so the better you.
Strap in, this chapter is going to require your undivided attention...
Expanding your vocabulary You can already do a lot with JavaScript, let’s take a look at some of  the things you know how to do:
No worries; by the time you leave this chapter you’re going to have it down.
Now to get you there, we’re not going to start with a deep, technical analysis of  getElementById, no no, we’re going to do something a little more interesting: We’re going to extend JavaScript’s vocabulary and make it do some new things.
You’ve been using built-in functions, like alert, or even Math.random, but what if you wanted to add your own? Let’s say we wanted to write some code like this:
We’re grabbing the user’s guess just like we were on the previous page...
To create a function, use the function keyword and then follow it with a name, like “checkGuess”
Write a body for your function, which goes between the curly braces.
The body contains all the code that does the work of the function.
For the body here, we’ll reuse our code from the previous page.
Optionally, return a value as the result of calling the function.
Let’s say you’ve just written your new bark function, which has two parameters, dogName and dogWeight, and also a very impressive bit of  code that returns a dog’s bark, depending on its weight of  course.
You know how to call a function already: just use its name and give it any arguments it needs.
In this case we need two: a string with the dog’s name, and the dog’s weight, which is an integer.
So how does this all work? What happens when we actually invoke a function? Here’s the 10,000-foot view:
Here we’re passing two arguments, the name and the weight.
When we call bark, the arguments are assigned to the parameter names in the bark function.
And any time the parameters appear in the function, the values we passed in are used.
And, let the body of the function do its work.
After we’ve assigned the value of  each argument to its corresponding parameter in the function—like “Fido” to dogName and the integer 50 to dogWeight—then we’re ready to evaluate all the statements in the function body.
Statements are evaluated from top to bottom, just like all the other code you’ve been writing.
What’s different is that we’re doing it in an environment where the parameter names dogName and dogWeight are assigned to the arguments you passed into the function.
The string “Fido says Woof” is returned to the calling code (that’s the code that invoked the bark function)
And when the string is returned, it is assigned to the variable sound, which is then passed to alert, resulting in the dialog.
But in this case, the bark function does return a value.
I keep tellin’ you, all of the HTML5 APIs are chock-full of functions, objects and all that advanced JavaScript stuff...
But before we do, you really need to understand the underpinnings of  the HTML5 JavaScript APIs, and we’re going to do that in this chapter.
So what are these underpinnings? Think of  the HTML5 JavaScript APIs as made up of  objects, methods (otherwise known as functions) and properties.
And so to really get in and master these APIs, you need to understand those things pretty well.
Sure, you could try to get by without knowing them, but you’ll always be guessing your way around the APIs while failing to use them fully (not to mention making lots of  mistakes and writing buggy code)
So we just wanted to drop you a note before you got too far into this chapter to tell you what we are up to.
Here’s the great thing: by the end of  this chapter you’re going to understand objects, functions, methods and a lot of  other related things better than about 98% of JavaScript scripters out there.
Head First: Welcome Function! We’re looking forward to digging in and finding out what you’re all about.
Head First:  Now we’ve noticed many people who are new to JavaScript don’t tend to use you a lot.
They just get in and write their code, line by line, top to bottom.
Think about me like this: I give you a way to take code, write it once, and then reuse it over and over.
Function: No no, functions are parameterizedin other words, each time you use the function, you pass it arguments so that you can get back results that vary, depending on what you pass in.
Then you can pass that function different shopping carts belonging to different users and each time you get the appropriate cost of  the shopping cart.
Head First: Well, right, alert, that makes sense, but the other two don’t look quite like functions.
Head First: So, one thing a function has to do is return a value, right? I mean, what if  I don’t have a value I want to return?
Function: Many functions return values, but a function doesn’t have to.
Lots of  functions just do something like update the DOM and then return without any value, and that’s just fine.
Head First: So in those functions I just don’t have a return statement?
Head First: Well, what about naming your functions, I’ve heard you don’t have to do that either, if  you don’t want to.
Function: Okay, let’s not freak the audience out too much.
How about we come back to that topic after they know a bit more about me?
Head First: As long as you give me an exclusive?
The Function Exposed This week’s interview: a few things you didn’t know...
I’m not sure I get the difference between a parameter and an argument—are they just two.
When you define a function you can define it with one or more parameters.
When you call a function, you call it with arguments:
There are three arguments, a floating point number, a string and an integer.
So you’ll only define your parameters once, but you’ll probably call your functions with a lot of  different arguments.
You define a function with parameters, you call a function with arguments.
You’d be amazed how many people get this wrong—even books get it wrong, so if you read it differently elsewhere, now you know better....
Now that you know how to define and call a function, let’s make sure we’ve got the syntax down cold.
Follow the function keyword with the name of your function.
Even if your function has no parameters, you still need an opening and closing set of parens, like ()
And then zero or more comma separated parameters between parentheses.
The body sits between two curly braces and contains a set of statements (just like the statements you’re used to)
A function can include a statement with the return keyword, but it doesn’t have to.
The return statement includes an expression, which is returned as a result of calling the function.Here’s the closing brace of the body.
Q: Why don’t the parameter names have var in front of them? A parameter is a new variable right?
The function does all the work of instantiating the variable for you, so you don’t need to supply the var keyword in front of your parameter names.
A: The rules for naming a function are the same as the rules for naming a variable.
Q: I’m passing a variable to my function—if I change the value of the corresponding parameter in my function does it also change my original variable?
When you pass a primitive value it is copied into the parameter.
The exception to this is passing an array or object, and we’ll get to that in a bit.
Q: So how can I change values in a function?
A: You can only change the values of global variables (those defined outside of functions), or variables you’ve explictly defined in your function.
We’re going to talk about that in a little more detail shortly.
Q: What does a function return if it doesn’t have a return statement?
Use your knowledge of functions and passing arguments to parameters to evaluate the code below.
After you’ve traced through the code, write the value of each variable below.
Check your answers with the solution at the end of the chapter before you go on.
You already know that you can declare a variable by using the var keyword and a name anywhere in your script:
The points, score and i variables are all declared within a function.
And you’ve seen that you can also declare variables inside a function:
But what does it matter? Variables are variables, right? Well, where you declare your variables determines how visible they are to other part of  your code, and, later, understanding how these two kinds of  variables operate will help you write more maintainable code (not to mention, help you understand the code of  others)
These are global variables; they’re accessible everywhere in your JavaScript code.
We call them local variables because they are only known locally within the function itself.
Even if we use levelThreshold inside the function, it’s global because it’s declared outside the function.
Knowing the scope of your local and global variables Where you define your variables determines their scope; that is, where they are defined and where they aren’t, where they’re visible to your code and where they aren’t.
That means they are defined and visible in all the code below.
Note that if you link to additional scripts in your page, they will see these global variables too! The level variable here is local and is visible only to the code within the getAvatar function.
That means only this function can access the level variable.
Note that getAvatar makes use of the pointsPerLevel global variable too.
And let’s not forget the points parameter, which also has local scope in the getAvatar function.
And here in our code we can use only the global variables, we have no access to any variables inside the functions because they’re not visible in the global scope.
I could have sworn the variable was right behind me, but when I turned around he.
When you’re a variable, you work hard and life can be short.
That is, unless you’re a global variable, but even with globals, life has its limits.
But what determines the life of  a variable? Think about it like this:
A global variable begins life when its JavaScript is loaded into the page.
But, your global variable’s life ends when the page goes away.
Even if  you reload the same page, all your global variables are destroyed and then recreated in the newly loaded page.
Local variables are created when your function is first called and live until the function returns (with a value or not)
That said, you can take the values of  your local variables and return them from the function before the variables meet their digital maker.
So, there really is NO escape from the page is there? If  you’re a local variable, your life comes and goes quickly, and if  you’re lucky enough to be a global, you’re good as long as that browser doesn’t reload the page.
But there just has to be a way to escape the page! We can find a way! Can’t we?
Join us in the Web Storage chapter where we’ll help our data escape the dreaded page refresh!
We say “typically” because there are some advanced ways to retain locals a little longer, but we’re not going to worry about them now.
Here’s what that means: say you have a global variable beanCounter and you then declare a function, like this:
When you do this, any references to beanCounter within the function refer to the local variable and not the global.
So we say the global variable is in the shadow of  the local variable (in other words we can’t see it because the local version is in our way)
What happens when I name a local variable the same thing as an existing global variable?
Note that the local and global variables have no effect on each other: if you change one, it has no effect on the other.
If this were a book on in-depth JavaScript programming we’d take you further into this topic, but given that this is Head First HTML5 Programming, we’ll just suggest you explore this topic further to improve the quality of your code!
Q: Keeping track of the scope of all these locals and globals is confusing, so why not just stick to globals? That’s what I’ve always done.
A: If you’re writing code that is complex or that needs to be maintained over a long period of time, then you really have to watch how you manage your variables.
When you’re overzealous in creating global variables, it becomes difficult to track where your variables are being used (and where you’re making changes to your variables’ values), and that can lead to buggy code.
All this becomes even more important when you’re writing code with coworkers or you’re using third-party libraries (although if those libraries are written well, they should be structured to avoid these issues)
So, use globals where it makes sense, but use them in moderation, and whenever possible, make your variables local.
As you get more experience with JavaScript, you can investigate additional techniques to structure code so that it’s more maintainable.
Q: I have global variables in my page, but I’m loading in other JavaScript files as well.
A: There is only one global scope so every file you load sees the same set of variables (and creates globals in the same space)
That’s why it is so important you be careful with your use of variables to avoid clashes (and reduce or eliminate global variables when you can)
Q: I’ve seen code where people don’t use the var keyword when assigning a value to a new variable name.
A: Yes, that can be done; when you assign a value to a variable name that hasn’t been previously declared, it is treated as a new, global variable.
So be careful, if you do this within a function you are creating a global variable.
Note that we don’t recommend this coding practice; not only is it potentially confusing when reading code, some.
Q: Do I need to define a function before I use it, or can it appear anywhere in my script?
You can declare a function below where you use it if you want.
This works because when you first load your page, the browser parses all the JavaScript in the page (or in the external file) and sees the function declaration before it starts executing the code.
You can also put your global variable declarations anywhere in your script, although we recommend declaring all your global variables at the top of your files so they’re easy to locate.
One thing to keep in mind when using more than one external JavaScript file is that if you have two functions in different files named the same thing, the function that the browser sees last will be the one that is used.
Q: Everyone seems to complain about the overuse of global variables in JavaScript.
Why is this? Was the language badly designed or do people not know what they’re doing, or what? And what do we do about it?
Some of this is because the language makes it easy to just jump in and start coding—and that’s a good thing—because JavaScript doesn’t enforce a lot of structure or overhead on you.
The downside is when people write serious code this way and it has to be changed and maintained over the long term (and that pretty much describes all web pages)
All that said, JavaScript is a powerful langauge and includes features like objects that you can use to organize your code in a modular way.
Many books have been written on that topic alone, and we’re going to give you just a taste of objects in the second half of this chapter (which is only a few pages away)
Oh, did we mention functions are also values? OK, you’ve used variables to store numbers, boolean values, strings, arrays, all kinds of  things, but did we mention you can also assign a function to a variable? Check this out:
Let’s define a simple function that adds one to its argument.
We’ll use the name of the function addOne and assign addOne to a new variable, plusOne.
Well, not only did we fail to mention this little detail about functions before now, but we also weren’t totally honest when we told you about the anatomy of  a function—as it turns out, you don’t even have to give your function a name.
What the heck does that mean, and why would you want to do such a thing? First let’s see how you create a function without a name:
Here we’re creating a function and not using a name...
Let’s do it again and this time assign it to a variable.
And then we can use that variable to call the function.
Notice we’re not calling the function with addOne(), we’re just using the function name.
Take a look at this code: what do you think is going on?
What you can do with functions as values? So what’s the big deal?  Why is this useful? Well, the important thing isn’t so much that we can assign a function to a variable, that’s just our way of  showing you that a function actually is a value.
And you know you can store values in variables or arrays, you can pass them as arguments to functions, or as we’ll soon see, you can assign them to the properties of  objects.
But, rather than talking you through how anonymous functions are useful, let’s just look at one of  the many ways using functions as values starts to get interesting:
Here we’re assigning the function we defined to the onload handler.
Don’t worry if window.onload is still a little unclear, we’re just about to cover all that.
This should start to look a little more understandable with what we just covered...
Don’t worry if you’re still not getting 100% of it, we’ll get there...
You might be starting to see that functions can do some useful things beyond just packaging up code for reuse; to give you a better idea of  how to fully take advantage of  functions, we’re going to take a look at objects and see how they fit into JavaScript, and then we’ll put it all together.
And, doing that is going to require that you really understand functions, objects and a few other related topics.
So hang in there—in fact you’re halfway there! And don’t forget, this is the chapter where you’re going from scripter to programmer, from an HTML/CSS jockey to someone who is capable of  building real apps.
Did we already mention that is probably going to make you a lot more money too?
With objects, the future’s so bright we really DO have to wear shades...
That said, objects are a difficult topic, right? Hah! We’re going to just jump in head first and you’ll be using them in no time.
Here’s the secret to JavaScript objects: they’re just a collection of  properties.
All dogs have a list of activities they enjoy, like walking and fetching balls.
We’ve got some strings representing the dog’s name and breed.
And we’ll collect the dog's “loves” in an array of strings, zero or more; here we’ve got Fido’s two interests.
As you probably guessed, we’re going to have an object representing a dog.
Of  course Fido would be the first to admit there’s a lot more to him than just a few properties, but for this example, those are going to be the ones we need to capture in software.
Let’s think about those properties in terms of JavaScript data types:
How to create an object in JavaScript So we’ve got a object with some properties; how do we create this using JavaScript?  Here’s how:
Start an object with just the left curly brace, then all the properties are going to go inside.
This object has four properties, name, weight, breed and loves.
Notice that the value of weight is a number, 40, and the values of breed and name are strings.
We’re going to assign our object to the variable fido.
And of course we have an array to hold the dog’s loves.
Use the object along with a “.” and a property name to access the value of that property.
Use the object along with the property name wrapped in quotes and in brackets to access the value of that property.
Each time through the loop, the variable prop gets the string value of the next property name.
And we use the [ ] notation to access the value of that property.
We find dot notation the more readable of the two.
To enumerate is to go through all the properties of the object.
Note the order of the properties is arbitrary, so don’t count on a particular ordering.
In general it’s easier to read than the [“string”] notation:
Here, we’re assigning the value of fido’s loves array to the variable likes.
We can loop through the likes array and create a likesString of all fido’s interests.
We can pass an object to a function just like any other variable.
And in the function, we can access the object’s properties like normal, using the parameter name for the object, of course.
We’re passing fido as our argument to the function bark, which expects a dog object.
Yes, you can add or delete properties at any time.
To add a property to an object you simply assign a new property a value, like this:
Likewise, you can delete any property with the delete keyword, like this:
When you delete a property, you’re not just deleting the value of the property, you’re deleting the property itself.
In fact, if  you use fido.age after deleting it, it will evaluate to undefined.
The delete expression returns true if  the property was deleted successfully (or if  you delete a property that doesn’t exist or if  what you’re trying to delete isn’t a property of  an object)
The same rules hold true for objects, however we’ve got to look a little more closely at what a variable holds when it is assigned to an object to know what this means.
When an object is assigned to a variable, that variable holds a reference to the object, not the object itself.
Think of  a reference as a pointer to the object.
So, when you call a function and pass it an object, you’re passing the object reference—not the object itself, just a “pointer” to it.
A copy of  the reference is passed into the parameter, which then points to the original object.
When an object is assigned to a variable, the variable is given a reference to the object.
So, what does this all mean? Well, when you change a property of  the object, you’re changing the property in the original object, not a copy, and so, you’ll see all the changes you make to an object within and outside of  your function.
Let’s step through an example using a loseWeight function for dogs...
Let’s take a look at what’s going on when we pass fido to loseWeight and change the dog.weight property.
So, when we subtract 10 pounds from dog.weight, we’re changing the value of fido.weight.
When we pass fido into loseWeight, what gets assigned to the dog parameter is a copy of the reference, not a copy of the object.
When we pass fido to a function, we are passing the reference to the object.
We’ve defined an object, fido, and we are passing that object into a function, loseWeight.
The dog parameter of the loseWeight function gets a copy of the reference to fido.
And so, any changes to the properties of the parameter affect the object that was passed in.
The dog reference is a copy of the fido reference.
The Webville Cinema has come to us for help with their JavaScript API; let’s start simple and design the movie object for them.
What we need is a couple of movie objects that each include a title, a genre, a movie rating (1-5 stars) and a set of showtimes.
Go ahead and sketch out your movie object design here (you can use our dog object as a model)
Here’s some sample data you can use to populate your objects:
The solution's right on the next page, but don't look until you've done the exercise.
And showtimes is an array containing the show times of the movie as strings.
We use the same property names but different property values as movie1
We’ve already had a small taste of  mixing objects and functions.
Let’s take this further by writing some code to tell us when the next showing of  a movie is.
Our function’s going to take a movie as an argument, and return a string containing the next time it plays, based on your current time.
We’re not going to worry about the details of this one yet, but just know that it returns the current time in milliseconds.
Now use the movie's array, showtimes, and iterate over the showtimes.
For each showtime we get its time in milliseconds and then compare.
If the time hasn't happened yet, then it's the next showing, so return it.
If there are no more shows, we just return null;
Now we use the function by calling getNextShowing and use the string it returns in an alert.
Don’t worry about this code; it uses regular expressions, which you’ll learn later in your JavaScript education.
Get the code on the previous page typed in and let’s give it a test run.
You’ll see that the getNextShowing function takes whatever movie it is handed and figures out the next showing time.
Feel free to create some new movie objects of  your own and give them a test drive too.
This is really just a shorthand for a series of  steps we could have taken to get the length of  the showtimes array from the movies object.
But we can do all this in one shot by chaining together the expressions.
Note: our code isn’t quite “production code” quality; if you run it after the last movie showing you’ll get null.
You didn’t think objects were just for storing numbers, strings and arrays did you? Objects are active, they can do things.
Dogs don’t just sit there: they bark, run, play catch and a dog object should too! Given everything you’ve learned in this chapter, you’re all set to add behavior to your objects.
We tell an object to do something by calling methods on it.
When an object has a function in it, we say that object has a method.We can add a function  directly to our object.
Notice we’re making use of an anonymous function and assigning it to the bark property of the object.
Rather than saying this is a “function in the object,” we just say this is a method.
They’re the same thing, but everyone refers to object functions as methods.
To call a method on a object we use the object name along with the method using our dot notation, and supply any arguments needed.
Now that your knowledge of  objects is expanding we can go back and improve the cinema code.
We’ve already written a getNextShowing function that takes a movie as an argument, but we could instead make this part of  the movie object by making it a method.
No argument should be needed here, it’s clear which movie we want the next showing of, that is, we want movie1
We actually can’t just throw the function in this object because getNextShowing takes a movie argument, and what we really want is to call getNextShowing like this:
Alright, so how do we fix this? We’ve got to remove the parameter from the getNextShowing method definition, but then we need to do something with all the references to movie.showtimes in the code because, once we remove the parameter, movie will no longer exist as a variable.
We’ve taken our code and placed it in a method of the movie1 object with the property name getNextShowing.
We’ve taken the liberty of  removing the movie parameter, and all the references to it.
This all looks pretty reasonable, but we need to think through how the getNextShowing method will use the showtimes property...
Alright, here’s the conundrum: we’ve got these references to the properties showtimes and title.
Normally in a function we’re referencing a local variable, a global variable, or a parameter of  the function, but showtimes and title are properties of  the movie1 object.
Feel free to give it a test drive; JavaScript will tell you the showtimes and title variables are undefined.
Okay, here’s the deal: these variables are properties of  an object, but we aren’t telling JavaScript which object.
You might say to yourself, “Well, obviously we mean THIS object, this one right here! How could there be any confusion about that?” And, yes, we want the properties of  this very object.
In fact, there’s a keyword in JavaScript named this, and that is exactly how you tell JavaScript you mean this object we’re in.
Now, the situation is actually a little more complicated than it appears here, and we’re going to get to that in a second, but for now we’re going to add the this keyword and get this code working.
Let’s add this each place we specify a property, so that we’re telling JavaScript we want the property in this object:
Here we’ve added a this keyword before every property to signify we want the movie1 object reference.
Go ahead and type in the code above and also add the getNextShowing function to your movie2 object (just copy and paste it in)
Then make the changes below to your previous test code.
After that give it a spin! Here’s what we got:
You have great instincts if  you recognized that we are duplicating code when we copy getNextShowing into more than one movie object.
Not only is that a waste, it can be error prone.
There’s a much better way to do this using a constructor.
What’s a constructor? It’s just a special function we’re going to write that can create objects for us, and make them all the same.
Think of  it like a little factory that takes the property values you want to set in your object, and then hands you back a nice new object with all the right properties and methods.
It seems like we’re duplicating code with all the copying and.
How to create a constructor Let’s make a constructor for dogs.
We already know what we want our dog objects to look like: they have name, breed and weight properties, and they have a bark method.
So what our constructor needs to do is take the property values as parameters and then hand us back a dog object all ready to bark.
A constructor function looks a lot like a regular function.
But by convention, we give the name of the function a capital letter.
The parameters of the constructor take values for the properties we want our object to have.
Here, we’re initializing the properties of the object to the values that were passed to the constructor.
We can include the bark method in the object we’re constructing by initializing the bark property to a function value, just like we’ve been doing.
These are statements, so we need to end each one with a “;” just like we normally do in a function.
So let’s walk though this again to make sure we’ve got it.
Dog is a constructor function and it takes a set of  arguments, which just happen to be the initial values for the properties we want: name, breed and weight.
Once it has those values, it assigns properties using the this keyword.
The result of  all this? The Dog constructor returns an new object.
We need to use “this.weight” and “this.name” in the method to refer to the properties in the object, just as we have before.
The property names and parameter names don’t have to be the same, but they often are—again, by convention.
Don’t worry about building all those objects yourself; we’ll construct them for you.
Now let’s use our constructor Now that we’ve got our factory built, we can use it to create some dogs.
There’s only one thing we haven’t told you, which is that you need to call a constructor function in a special way by putting the keyword new before the call.
Let’s review what’s going on here one more time: we’re creating three different dog objects, each with its own properties, using the new keyword with the Dog constructor that we created.
The constructor returns a Dog object customized with the arguments we passed in.
Next, we call the bark method on each one—notice that we’re sharing the same bark method across all dogs, and when each dog barks, this points to the dog object that made the call.
So if  we call the bark method on fido, then, in the bark method, this is set to the fido object.
To create a dog, we use the new keyword with the constructor.
We’re creating three different Dog objects by passing in different arguments to customize each dog.Once we’ve got the objects, we.
How does this really work? Anytime we put this in the code of  a method it will be interpreted as a reference to the object the method was called on.
So, if  we call fido.bark, then this is going to reference fido.
Or, if  we call it on our dog object tiny then this is going to reference tiny within that method call.
How does this know which object it is representing? Let’s see:
So “this” always refers to the object the method was invoked on, no matter how many dogs we create to bark:
Let’s say we’ve got a dog object assigned to fido:
Here’s our new dog object all instantiated with the property values we want.
Whenever we invoke a method on an object, JavaScript sets up this to point to the object itself.
And so when we refer to this.name, we know the name is “Fido”
You can call bark on any dog object and this will be assigned to the specific dog before your body code is executed.
Code Magnets A working Movie constructor function was on the fridge, but some of the magnets fell on the floor.
Can you help get it back together?  Be careful, some extra magnets may have already been on the ground and might distract you.
Q: What’s the real difference between a function and a method? After all, if they’re the same thing why call them something different?
A: By convention, if an object has a function we call that a method.
They both work the same way, except that you invoke an object’s method using the dot operator, and a method can use this to access the object on which the method is invoked.
Think of a function as a standalone piece of code you can invoke, and a method as behavior that is attached to a specific object.
Q: So when I create objects with a constructor and those objects have a method, then all of those objects share the same code for that method?
A: That’s right, and that’s one of the advantages of objectoriented programming: you can create the code for that class of objects (say all your dog objects) in one place and all the dogs share it.
Now the way you make it specific to each dog is with your properties and using this to access those properties.
Q: Can I set this to a value of my choosing, and if I do, will that mess things up?
Remember, this is a keyword, not a variable! It looks and acts a bit like one, but it’s not a variable.
Q: Does this have a value outside of an object method? A: No, if you’re not invoking an object method, then this is undefined.
Q: So the way to think about this is when I invoke a method on an object, the value of this is set to that object the entire time the method is being evaluated?
A: Within the body of the object, yes, this will always be the object itself.
There are some advanced cases where it may not be true; for instance, things get more complicated when you have objects within objects, and if you start doing that, you’ll need to look up the semantics, but this is a good general rule.
Q: I’ve heard that in object-oriented programming I can have classes of objects and they can inherit from each other.
Like, I could have a mammals class that both dog and cat inherit from.
JavaScript uses something called prototypal inheritance, which is an even more powerful model than strictly class-based models.
Getting into prototypal inheritance is a little beyond the scope of this book, but who knows, we could be convinced to write more on JavaScript.
Q: So when we say new Date(), we’re using a constructor, right?
A: Yes, good catch! Date is a built-in constructor in JavaScript.
When you say new Date(), you get a Date object with a bunch of useful methods you can use to manipulate the date.
Q: What's the difference between objects we write out ourselves and ones we create with a constructor?
Objects you write out yourself using curly braces and comma separated properties are known as “object literals.” You literally type them into your code! If you want another one like it, you have to type it in yourself and make sure it’s got the same properties.
Objects created by a constructor are created by using new and a constructor function, which returns the object.
You can use the constructor function to create many objects that have the same properties, but different property values if you want.
Code Magnets A working Movie constructor function was on the fridge, but some of the magnets fell on the floor.
Can you help get it back together?  Be careful, some extra magnets may have already been on the ground and might distract you.
This is a constructor so we’re using “Movie” for the name.
We pass in values for the properties we want to customize: title, genre, rating and showtimes...
To refer to properties in the object, we need to use the this keyword.
Now that you’ve got a Movie constructor, it’s time to make some Movie objects! Go ahead and type in the Movie constructor function and then add the code below and take your constructor for a spin.
We think you’ll agree this a much easier way to create objects.
First we’ll create a movie object for the movie Buckaroo Banzai (one of our cult classic favorites)
Once we’ve got all our objects created, we can call the getNextShowing method and alert the user for the next showing times.
Notice we can put the array value for showtimes right in the function call.
Congrats, you’ve made it through functions and objects! Now that.
And, these are just a few of  many objects we’ll be encountering—when we get to the HTML5 APIs, we’ll be seeing objects everywhere!
Let’s take a second look at some of  the objects you’ve been using all along in this book:
We draw objects like this to show properties at the top...
When you’re writing code for the browser, the window object is always going to be part of  your life.
The window object represents both the global environment for your JavaScript programs and the main window of  your app, and as such, it contains many core properties and methods.
Here’s our window object with a few notable properties and methods you’ll want to know about.
Status holds the string that is displayed in the status area of your browser.
You’ve certainly seen this before: onload is a property that holds the function to call when the page is fully loaded.
Invokes a handler on a specified time interval, over and over.
It may seem a little weird, but the window object acts as your global environment, so the names of  any properties or methods from window are resolved even if  you don’t prepend them with window.
One thing we’ve used often so far in this book is a window.onload event handler.
By assigning a function to the window.onload property, we can ensure our code isn’t run until the page is loaded and the DOM is completely set up.
Now, there’s a lot going on in the window.onload statement, so let’s have another look and it will all start to come together for you:
This is an anonymous function, which is assigned to the onload property.
And of course the body of the function is executed once the window fully loads the page and invokes our anonymous function!
Another look at the document object The document object is another familar face; it’s the object we’ve been using to access the DOM.
And, as you’ve just seen, it is actually a property of  the window object.
Of  course we haven’t used it like window.document because we don’t need to.
Let’s take a quick peek under the covers to see its more interesting properties and methods:
We used this method in Chapter 3 to create new playlist items.
As you know it creates elements suitable for inclusion in the DOM.
Well, you made it through functions, objects, and methods, and now you’re ready! Check it out:
What was a confusing looking string of  syntax now has a lot more meaning, right? Now, that div variable is also an object: an element object.
These two are similar to getElementById, except they retrieve elements using tags and classes.
One more object to think about: your element objects We shouldn’t forget when we’re working with methods like getElementById that the elements they return are also objects! Okay, you might not have realized this, but now that you know, you might be starting to think everything in JavaScript is an object, and, well, you’re pretty much right.
You’ve already seen some evidence of  element properties, like the innerHTML property; let’s look at some of  the more notable properties and methods:
You know about innerHTML; two other properties are childElementCount (how many children the element has) and firstChild (the first child, if there is one)
You can use the methods appendChild and insertBefore to insert new elements into the DOM as children of this element.
We’ll use setAttribute and getAttribute to set and get attributes, like “src”, “class” and “id”, in elements.
Here are the properties and methods for the <p> element, but all elements support these.
Q: Since window is the global object, that means I can use its properties and all of its methods without specifying window first right?
And whether you prepend the window object’s properties and methods with window is up to you.
For things like alert, everyone knows what that is, and no one uses window with it.
On the other hand, if you’re using the lesser known properties or methods you might want to to make your code more easily understandable, and use window.
Q: So, technically, I could write  onload = init instead of  window.onload = init, right?
But we don’t recommend it in this particular case, because there are a lot of objects that have onload properties, so your code is going to be much clearer if you use window.
Q: The reason we don’t say  window.onload = init() is because that would call the function, instead of using its value?
When you use parentheses after the function name, like init(), you saying you want to call the function init.
If you use its name without parentheses, then you’re assigning the function value to the onload property.
It’s a subtle difference when you’re typing it in, but the ramifications are large, so pay careful attention.
Q: Which of the two ways of creating a window.onload handler is better, using a function name or an anonymous function?
A: One isn’t better than the other, they both do basically the same thing: set the value of window.onload to a function that will run when the page has loaded.
If you need to call init from another function later in your program for some reason, then you’ll need to define an init function.
Q: What’s the difference between built-in objects like window and document, and the ones we make?
A: One difference is that built-in objects follow the guidelines set by specifications, so you can refer to the W3C specifications to understand all their properties and methods.
In addition, many of the built-in objects, like String, may have properties that are immutable and can not be changed.
The nice thing about built-in objects is they’re already built for you.
So take a little R&R after this chapter, but before you.
Yes, String is an object! Check out a good JavaScript reference to get all the details of its properties and methods.
Congrats! You’ve completed our tour of objects, and made it through several.
Now it’s time to use all that knowledge to program with.
HTML5 and all the new JavaScript APIs, starting in the very next chapter!
You’re leaving this chapter knowing more about objects and functions than many people out there.
To create a function, use the function keyword with parentheses to hold parameters, if there are any.
Naming rules for functions are the same as naming rules for variables.
The body of a function goes between curly braces, and contains statements that do the work of the function.
A function can return a value with the return statement.
To invoke (or call) a function, use its name and pass any arguments it needs.
When you pass an object, like a dog, as an argument to a function, the parameter gets a copy of the reference to the object.
Variables defined in functions, including parameters, are known as local variables.
Variables defined outside of functions are known as global variables.
Local variables are not visible outside the function in which they are defined.
If you declare a local variable with the same name as a global variable, the local variable shadows the global variable.
When you link to multiple JavaScript files from your page, all the global variables are defined in the same global space.
If you assign a new variable without using the var keyword, that variable will be global, even if you are first assigning it in a function.
Functions are values that can be assigned to variables, passed to other functions, stored in arrays, and assigned to object properties.
You access an object’s properties using dot notation or the [ ] notation.
If you use [ ] notation, enclose the property’s name as a string; for example, myObject[“name”]
You can change a property’s value, delete properties, or add new properties to an object.
You can enumerate an object’s properties using a for-in loop.
A function assigned to an object property is referred to as a method.
A method can use a special keyword, this, to refer to the object on which it was invoked.
The job of a constructor is to create a new object and initialize its properties.
To invoke a constructor to create an object, use the new keyword.
We’ve already been using several objects in this book, including document, window, and various element objects.
HTML5cross It’s been a whirlwind chapter of functions, objects, properties and methods—so there’s lots to make stick.
Sit back, relax, and work the rest of your brain a little.
Functions might or might not include this kind of statement.
Stringing together properties and function calls with the dot operator.
A property in window that we assign to a handler function.
The ______ operator lets you access an object’s properties and methods.
By convention, constructors have a name with an _________ first letter.
Functions might or might not include this kind of statement.
A property in window that we assign to a handler function.
Use your knowledge of functions and passing arguments to parameters to evaluate the code below.
After you’ve traced through the code, write the value of each variable below.
Functions might or might not include this kind of statement.
Stringing together properties and function calls with the dot operator.
A property in window that we assign to a handler function.
The ______ operator lets you access an object’s properties and methods.
By convention, constructors have a name with an _________ first letter.
And sometimes knowing where you are makes all the difference (especially to a web app)
In any case, in this chapter we’re going to explore a JavaScript API: Geolocation.
Geolocation Isn’t it amazing how all this new technology is bringing everyone.
The Geolocation API is solely focused on getting you information about your position on the Earth.
The Google Maps API is a JavaScript library offered by Google that gives you access to all their Google Maps functionality.
So, if you need to display your users location in a map, Google’s API gives you a convenient way to implement that functionality.
Q: Isn’t it a privacy concern to have my device reveal my location?
A: The Geolocation specification specifies that any browser must have the express permission of the user to make use of their location.
So, if your code makes use of the Geolocation API, the first thing the browser will do is make sure it is okay with the user to share her location.
Q: How well supported is Geolocation? A: Very well supported; in fact, it’s available in almost every modern browser including desktop and mobile.
You’ll want to be sure you’re using the latest version of your browser; if you are, then you’re probably good to go.
Location, Location, Location Knowing where your users are can add a lot to a web experience: you can give them directions, make suggestions about where they might go, you can know it’s raining and suggest indoor activities, you can let your users know who else in their area might be interested in some activity.
There’s really no end to the ways you can use location information.
With HTML5 (and the Geolocation JavaScript-based API) you can easily access location information in your pages.
That’s said, there are a few things to know about location before we get started.
Your users are now on the move with mobile devices that are location aware.
The best apps are going to be the ones that can enhance users’ experiences.
To know where you are, you need a coordinate system, and you need one on the Earth’s surface.
Luckily we have such a thing, and it uses latitude and longitude together as a coordinate system.
Latitude specifies a north/sourth point on the Earth, and longitude, an east/west point.
Latitude is measured from the equator, and longitude is measured from Greenwich, England.
The job of  the geolocation API is to give us the coordinates of  where we are at any time, using these coordinates:
Latitude is a distance north or south of the equator.
Longitude is a distance east or west of Greenwich, England.
Also notice that longitude West and latitude South are represented by negative values.
How the Geolocation API determines your location You don’t have to have the newest smartphone to be location aware.
You might ask, how would a desktop browser determine its location if  it doesn’t have GPS or any other fancy location technologies? Well, all browsers (in devices and on your desktop) are using a few different ways to determine where you are, some more accurate than others.
I scored the newest smartphone and I’ve got GPS built right into the phone.
But my IP address can be mapped to a location, which is.
To use it, though, your device has to be able to see the sky, and it can take a long time to get a location.
The advantage of this approach is that it can work anywhere; however, often IP addresses are resolved to locations such as your ISP’s local office.
WiFi WiFi positioning uses one or more WiFi access points to triangulate.
This method can be very accurate, works indoors and is fast.
I’m on the move from coffee shop to coffee shop with my laptop and wireless subscriptions.
You know where I am by triangulating all those wireless carriers.
It’s cool we’ve got so many ways to know where we are.
How am I going to know which method my device is using?
The short answer is “you’re not,” as the browser implementation is going to determine how location is determined.
But the good news is the browser can use any of  these means to determine your location.
In fact, a smart browser might first use cell phone triangulation, if  it is available, to give you a rough idea of  location, and then later give you a more accurate location with WiFi or GPS.
We’ll see that you don’t need to worry about how the location is being determined, and we’ll focus more on the accuracy of  your location instead.
Based on the accuracy, you can determine how useful the location is going to be for you.
Stay tunedwe’ll get back to accuracy a little bit later.
Allow my users to share with others that are nearby.
Let my users more easily find local resources or services.
Well, of  course you know where you are, but let’s see where your browser thinks you are.
All the usual stuff at the top, including a link to the file where we’ll put our JavaScript, myLoc.js, and a stylesheet, myLoc.css to make it all look pretty.
And you’re going to use this <div> to output your location.
We’re calling the function getMyLocation as soon as the browser loads the page.
If it does, then we call the getCurrentPosition method and pass in a handler function, displayLocation.
If the browser does NOT support geolocation, then we’ll just pop up an alert to the user.
Now let’s create myLoc.js and write a little code; we’re going to do this quickly and then come back and dissect it all.
The displayLocation function is the handler that’s going to get its hands on the location.
We grab the latitude and longitude of your location from the position.coords object.
Here’s our handler, which is going to get called when the browser has a location.
Test drive your location Get this code typed in and take your new location-aware page for a test drive.
When you run a Geolocation web app for the first time, you’ll notice a request in the browser asking for your permission to use your location.
This is a browser security check, and you’re free to tell the browser no.
But assuming you want to test this web app, you’ll want to click Allow or Yes.
When you do, the app should show you your location, like this: The request for permission.
Here’s your location! Your location will obviously be different from ours (if it’s not we’re going to get really worried about you)
If you’re not getting your location, and assuming you’ve double checked for typos and that kind of thing, hold on for a few pages and we’ll give you some code to debug this...Keep in mind getting a location isn’t always.
Now that we’ve got some geolocation code up and running (and, again, if you’re not seeing a location yet, hold on, we’re getting to some debugging techniques in just a sec), let’s walk through the code in a little more detail:
The first thing you need to know if you’re going to write geolocation code is “does this browser support it?” To do that we make use of the fact that browsers have a geolocation property in their navigation object only if geolocation is supported.
So we can test to see if the geolocation property exists, and if so make use of it; otherwise, we’ll let the user know:
Let’s take a closer look at this method, which has three parameters, the second two of which are optional:
If your browser supports the Geolocation API, you’ll find a geolocation property in the.
If it is there, we can make use of it, and if not, we’ll let the user know.
The successHandler is a function that is called if the browser is able to successfully determine your location.
These two parameters are optional, which is why we didn’t need them before.
The errorHandler is another function, that is called if something goes wrong and the browser can’t determine your location.
The options parameter allows you to customize the way geolocation works.
Remember, APIs are just objects with properties and methods! Now aren’t you glad you did all the JavaScript training up front!
Remember chaining from Chapter 4? We’re using the navigator object to get access to the geolocation object, which is just a property of navigator.
Now let’s take a look at our call to the getCurrentPosition method.
For now, we’re supplying just the successHandler argument to handle a successful attempt to get the browser location.
We’ll look at the case when the browser fails to find a location in a bit.
If and when geolocation determines your location, it will call displayLocation.
And we’re calling the geolocation object’s getCurrentPosition method with one argument, the success callback.
When displayLocation is called, the geolocation API passes it a position object that contains information about the browser’s location, including a coordinates object that holds the latitude and longitude (as well as a few other values we’ll talk about later)
The position object has a coords property that holds a reference to the coordinates object...
And this part we’re sure you can do in your sleep by now: we’re just taking the coordinate information, and displaying it in a <div> in the page.
Did you notice we're passing a function to another function here? Remember from Chapter 4 that functions are values, so we can do that, no problem.
If the user gives permission, then geolocation uses the best means it can to get the browser’s location (GPS, triangulation, and so on)
And if geolocation can determine the browser’s location, it calls the success handler and passes it an object with the coordinates.
Now that we’ve gone through the code, let’s see how it all works at runtime:
When it comes to Geolocation, not every test drive is going to be successful, and even if your first test was successful, down the road something is going to go wrong.
To help, we’ve created a little diagnostic test for you that you can add right into your code.
So, if you’re having trouble, here’s your answer, and even if you’re not, one of your users is going to have an issue and you’re going to want to know how to handle that in your code.
So, add the code below, and if you’re having issues, kindly fill out the diagnostic form at the end once you’ve diagnosed the problem:
To create the diagnostic test we’re going to add an error handler to the getCurrentPosition method call.
This handler is going to get called anytime the Geolocation API encounters a problem in determining your location.
Add a second argument to your getCurrentPosition call named displayError.
This is a function that is going to be called when geolocation fails to find a location.
To do that you need to know that geolocation passes an error object to your handler that contains a numeric code describing the reason it couldn’t determine the location of your browser.
Depending on the code, it might also provide a message giving further information about the error.
Here’s how we can use the error object in the handler:
Here’s our new handler, which is passed an error by the Geolocation API.
Here’s a nice way to associate an error message with each code in JavaScript:
We create an object with three properties named zero to three.
These properties are strings with an error message we want to associate with each code.
And using the error.code property, we assign one of those strings to a new variable, errorMessage.
In the case of errors zero and two, there is sometimes additional information in the error.message property, so we add that to our errorMessage string.And then we add the message to the page to let the user know.
I did not give permission for my location to be used.
After a few seconds, I got a message indicating there was a request timeout.
Nothing happened at all, no location and no error alert.
When you’ve got the diagnostic test typed in, go ahead and give it a try.
Obviously if you receive a location then everything is working and you won’t see any of the errors.
You can force an error by denying the browser’s request to use your location.
Or you might get creative and, say, move indoors with your GPS phone while turning off your network.
In the worst case, if you wait for a long time without getting a location or an error message, most likely you’re waiting on a long timeout value to, well, time out.
We’ll see how to shorten that timeout duration a little later in the chapter.
Before we run the test, let’s take a closer look at the types of errors we can get.
This is the catchall error that is used when none of the others make sense.
This means the user denied the request to make use of location information.
This means the browser tried, but failed to get your location.
Finally, geolocation has an internal timeout setting, which, if exceeded before a location is determined, causes this error.
We’ll see how to change geolocation’s default timeout a little later in the chapter.
Now that you’ve got the basics out of  the way, let’s do something more interesting with location.
How about we see how far you are from our secret writing location at Wickedly Smart HQ? To do that we need the HQ coordinates and we need to know how to calculate distance between two coordinates.
First, let’s add another <div> to use in the HTML:
To test your geolocation code on a mobile device, you’re going to want a server.
Unless you have a means of loading your HTML, JavaScript and CSS files directly.
If you’ve got a server and you want to do that, we encourage you to do so.
On the other hand, if that doesn’t work for you, we’ve made sure the code is available on the Wickedly Smart servers so that you can test on your mobile devices.
That said, we encourage you to follow along with the code on your desktop, and once you have it working there, then test on your mobile device using the server (your own or Wickedly Smart)
Q: The latitude and longitude returned by the app for my location aren’t quite right, why is that?
A: There are a variety of ways that your device and the location service provider calculate your position, and some are more accurate than others.
We’re going to look at a way to determine the accuracy estimate that the location service gives back as part of the position object so you can see how accurate to expect the location data to be.
We’ll see more of this function in the Canvas chapter.
Ever wanted to know how to compute the distance between two points on a sphere? You’ll find the details fascinating, but they’re a little outside the scope of this chapter.
So, we’re going to give you some Ready Bake Code that does just that.
To compute the distance between two coordinates most everyone uses the Haversine equation; you’ll find it implemented below.
Feel free to use it anywhere you need to know the distance between two coordinates:
This function takes two coordinates, a start coodinate and a destination coordinate, and returns the distance in kilometers between them.
We want to compute the distance from you to us, as the crow flies.
Now that we’ve got a function to compute the distance between two coordinates, let’s define our (that is, the authors’) location here at the WickedlySmart HQ (go ahead and type this in too):
Here we’re going to define a literal object for the coordinates of our location at the Wickedly Smart HQ.
Add this as a global variable at the top of your myLoc.js file.
And now let’s write the code: all we need to do is pass the coordinates of your location and our location to the computeDistance function:
Here we’re passing the coordinates of your position and also our coordinates to computeDistance.
And then we take the results and update the contents of the distance <div>
Location-enabled test drive Now let’s give this new code a test drive.
Go ahead and finish adding the code to myLoc.js and then reload myLoc.html in your browser.
You should see your location and also your distance from us.
Your location and distance will obviously be different depending on where you are in the world.
Make sure you type this exactly as is, including the sensor query parameter (the API won’t work without this)
We’re using sensor=true because our code is using your location.
If we were just using the map without your location, we’d type sensor=false.
Mapping your position As we told you up front, the Geolocation API is pretty simple—it gives you a way to find (and as you’ll see, track, as well) where you are, but it doesn’t provide you with any tools to visualize your location.
To do that we need to rely on a third-party tool, and as you might guess, Google Maps is by far the most popular tool for doing that.
If  you want to be diverted, you can start by adding this to the head of  your HTML document and then we’ll work on adding a map to your page:
Now that you’ve linked to the Google Map API, all the functionality of  Google Maps is available to you through JavaScript.
But, we need a place to put our Google Map, and to do that we need to define an element that is going to hold it.
Experiment with the zoom: bigger numbers correspond to being zoomed in more (so you see more detail)
We want the map to be centered on this location.
You can also try SATELLITE and HYBRID as options here.
Here’s the constructor, which takes our lat and long and returns a new object that holds them both.
Google gives us some options we can set to control how the map is created.
For instance, we can control how far zoomed in or out the initial map view is, where the map is centered, and the type of  map, like a road-style map, a satellite view, or both.
To create the map we need two things: a latitude and longitude (and we know how to get those), and we need a set of  options that describe how we want the map created.
We already know how to get them with the Geolocation API, but the Google API likes them bundled up in its own object.
To create one of  those objects we can use a constructor supplied by Google:
We use our latitude and longitude from the coords object...
We create the mapOptions object with the options we want to set for our map.
We’ll call showMap from displayLocation after we’ve updated the other <div>s on the page.
Displaying the Map Let’s put all this together in a new function, showMap, that takes a set of coordinates and displays a map on your page:
Here’s another constructor from Google’s API, which takes an element and our options and creates and returns a map object.
We’re assigning the new Map object to our global variable map.
We’re declaring a global variable map, that is going to hold the Google map after we create it.
Go ahead and add this code to your JavaScript file at the bottom.
And now we just need to tie it into our existing code.
Make sure you’ve added all the new code on the previous page and also added the new map <div> to your HTML; then reload your page and, if  the browser can determine your location, you’ll see a map.
It would be more useful if  you could see exactly where you’re located on the map.
If  you’ve used Google Maps, then you’re probably familiar with the push pins used to mark the location of  items you search for.
For example, if  you search for Space Needle in Seattle, WA, you’ll get a map with a pin near the Space Needle area in the city, and if  you click on the pin, you’ll see an information window with more details about the item.
Well, push pins are called markers, and they are one of  the many things offered in the Google Maps API.
Adding a marker with a pop-up information window requires a little code because you have to create the marker, the information window, and a handler for the click event on the marker (which opens the information window)
Given we’re on a diversion, we’re going to cover this fairly quickly, but at this point in the book, you’ve got everything you need to keep up!
When you search for an item in Google Maps, you’ll see a red pin marking the spot of the search result.
We’re going to start by creating a new function, addMarker, and then use the Google API to create a marker:
The addMarker function takes a map, a google-style latitude and longitude, a title for the marker, and also some content for the info window.
We create an options object with the latitude and longitude, the map, the title, and whether or not we want the marker to be clickable...
Then we create the marker object by using yet another constructor from Google’s API, and pass it the markerOptions object we created.
Now we’re going to define some options for the info window.
When the marker is clicked, this function is called and the infoWindow opens on the map.
Our other code is still here, we’re just saving some trees...
Now all that’s left to do is call the addMarker function from showMap, making sure we pass in all the right arguments for the four parameters.
We pass in the map and googleLatAndLong objects we created using the Google maps API...
Next we’re going to create the info window by defining some options specific to it, and then create a new InfoWindow object with the Google API.
Next we’ll use the Google Maps addListener method to add a “listener” for the click event.
A listener is just like a handler, like onload and onclick, that you’ve already seen.
We pass the listener a function that gets called when the user clicks on the marker.
Get all the code for addMarker added, update showMap to call addMarker and reload the page.
You’ll see a map with a marker with your location on it.
You’ll get a pop-up window with your latitude and longitude.
Here’s what our map with the marker and info window pop-up looks like.
We’ve only scratched the surface of  what you can do with the Google Maps API, and although this API is way beyond the scope of  this book, you’re well on your way to being able to tackle it on your own.
Here are some things you can consider using it for, and some pointers to where to start.
The other cool things you can do with the Google Maps API.
To take your experiments further, check out the documentation at:
Controls: By default, your Google map includes several controls, like the zoom control, the pan control, a control to switch between Map and Satellite view, and even the Street View control (the little pegman above the zoom control)
You can access these controls programmatically from JavaScript to make use of them in your applications.
Overlays: Overlays provide another view on top of a Google map; say, a heat map overlay.
If you’re commuting, you can check traffic congestion with the traffic overlay.
You can create custom overlays, like custom markers, your photos, and pretty much anything else you can imagine, using the Google Maps overlay APIs.
Services: Ever looked up directions in Google Maps? If so, then you’ve used the Directions service.
You have access to directions, as well as other services, like distance and street view through the Google Maps services APIs.
I gotta say right up front, I’m a bit surprised to see you here.
Head First: You’re not even “officially” part of  the HTML5 spec and here you are, you’re the first API that’s been given a chapter! What’s up with that?
And, just look around, any mobile device worth its salt has me already implemented in its browser.
I mean what good is a mobile web app without me?
Head First: So what kind of  web apps are making use of  you?
Geolocation: Really, it’s most of  the apps people are using on the move; from apps that let you update your status and include geo information, to camera apps that record where pictures are taken, to social apps that find local friends or allow you to “check in” at various locations.
Heck, people are even using me to record where they cycle or run or eat or to get where they’re going.
Head First: Your API seems a bit simplistic, I mean you’ve got, what, a couple of  methods and properties total?
Do you see many complaints about me out there? Nope.
I’ve got what every developer needs and location-aware apps are getting cranked out by the dozen a day.
Plus, small equals quick and easy to learn, right? Maybe that’s why I’m the first API with his very own chapter?
Geolocation: That’s a short topic because I’m supported in almost every browser, on desktop and mobile.
Head First: Okay, so one thing I’ve always wanted to ask you: what good are you on a device that doesn’t have GPS?
Geolocation: There’s a big misconception that I’m somehow dependent on GPS.
There are other great ways to determine location today through cell phone triangulation, using IP addresses, and so on.
If  you have GPS, great, and in fact I can help you even more; but if  not, there are lots of  ways to get location.
Geolocation: If  you’ve got a good enough mobile device I can give you altitude, direction, speed, all kinds of  things.
Head First:  Say none of  those methods work, that is, GPS, IP address, triangulation, then what good are you?
Geolocation: Well, I can’t always guarantee you’re going to get a location, but that’s okay because I do give you a nice way to handle failures gracefully.
All you have to do is give me an error handler and I’ll call it if  I have a problem.
Thank you, Geolocation, for being here and congrats for getting promoted to a real W3C standard.
We’ve already travelled a fair distance with the Geolocation API: we’ve determined our location, computed distances to other locations, handled the error states of  the API and even added a map using the Google Maps API.
But it’s not time to rest yet, we’re just to the point of  getting into the interesting parts of  the API.
We’re also at that point between knowing about the API, and having mastery over it, so let’s keep moving!
One thing we need to do before going on is to take a closer look at the API itself.
We’ve talked about it enough, but we’ve never actually looked at it.
As we’ve been saying, the API is actually really simple, having just three methods: getCurrentPosition (which you know something about), watchPosition (which you’ll find out about soon enough), and clearWatch (which, you guessed it, is related to watchPosition)
Before getting to these two new methods, let’s take another look at getCurrentPosition and at some related objects, like the Position and Coordinates objects.
You’re going to find a few new things there you didn’t know about.
Remember, the success handler (or callback) is called when a location is determined, and it is passed a position object.
The error handler is called when the browser can’t determine its location.
As we’ve seen there are many possible reasons for that.
And we have another parameter we haven’t used yet that allows us to fine-tune the behavior of geolocation.
We know about the coords property, but there’s also a timestamp property in position that contains the time the position object was created.
This can be useful for knowing how old the location is.
We know about latitude and longitude, but there are other properties in the coordinates object.
Three are guaranteed to be there: lat, long and accuracy.
The rest may or may not be supported, depending on your device.
Can we talk about your accuracy? Finding your location isn’t an exact science.
Depending on the method the browser uses, you may know only the state, city, or city block you’re on.
Then again, with more advanced devices you might know your location to within 10 meters, complete with your speed, heading and altitude.
So how do we write code, given this situation? The designers of  the Geolocation API have made a nice little contract with us: every time they give us a location they’ll also give us the accuracy, in meters, of  the location, to within a 95% confidence level.
And for 500 meters, we’d be safe, for instance, giving city or neighborhood recommendations, but we might not want to provide street by street driving directions.
In any case, it is obviously up to your app to figure out how it wants to make use of  the accuracy data.
Enough talk, let’s find out what your accuracy looks like in your current location.
As you’ve just seen, the accuracy information is part of  the coordinates object.
Let’s pull it out and use it in the displayLocation function.
Here we use the accuracy property of position, and append onto the end of the <div>’s innerHTML.
Accuracy Test Make sure you’ve got this one liner added to your code, and load the page.
Be sure to try this on any device you have.
Some claim the first real mention of  it was in the film Buckaroo Banzai, others draw its origin from Zen Buddhist text, still others cite various books, movies and popular songs.
No matter the source, it’s here to stay, and even more so after this chapter because we’re going to turn it into a little web app named “Wherever you go, there you are.”  Yes, there is an app for that! But, we’re going to need a little participation from you, the reader, because for this one you’ll have to (excuse us for saying this) get off  your butt and move around a little.
What we’re going to do is extend our current code so that it tracks your movements in real time.
To do that we’re going to bring everything together, including last two methods in the Geolocation API, and create an app that tracks you, in near real time.
Where do you come in on the debate? Is the saying a product of the Banzai Institute, or are the origins in Zen literature?
How we’re going to track your movements You’ve already received a heads up that the Geolocation API has a watchPosition method.
This method does what it says: it watches your movements and reports your location back as your location changes.
The watchPosition method actually looks just like the getCurrentPosition method, but behaves a little differently: it repeatedly calls your success handler each time your position changes.
Getting the app started We’re going to use our previous code as a starting point; first we’re going to add a couple of  buttons to the HTML so that we can start and stop the tracking of  your location.
Why do we need the buttons?  Well, first of  all, users don’t want to be tracked all the time and they usually want some control over that.
But there’s another reason: constantly checking your position is an energy-intensive operation on a mobile device and if  it’s left on all the time, it will cause your battery life to suffer.
So, first, we’ll update the HTML to add a form and two buttons: one to start watching your position and one to stop.
We’re adding a form element with two buttons, one to start the watch, with an id of “watch”, and one to clear the watch, with an id of “clearWatch”
We’re going to reuse our old <div>s to report on the real-time location information.
Tracking a user in real time can be a real battery drainer.
Make sure you give the user information about their tracking, and some control over it, too.
We’ll come back and worry about the Google map in a bit...
So now we need to add button click handlers for the two buttons.
We’ll add them to the getMyLocation function only if  there is geolocation support.
And, since we’re going to control all the geolocation tracking using the two buttons, we’ll remove the existing call to getCurrentPosition from getMyLocation.
Let’s go ahead and remove that code, and add two handlers: watchLocation for the watch button, and clearWatch for the clear button:
If the browser supports geolocation, we’ll add our button click handlers.
At this point, here’s what we’re trying to do: when the user clicks on the watch button, they want to start tracking their position.
It also returns a watchId, which can be used at any time to cancel the watching behavior.
We’re going to stash the watchId in a global variable, which we’ll use when we write the click handler for the clear button.
Here’s the code for the watchLocation function and the watchId, go ahead and add this code to myLoc.js:
We’re going to call watchLocation to start the watch, and clearWatch to stop it.
Add watchId at the top of your file as a global variable.
We’re calling the watchPosition method, passing the success handler we’ve already written, displayLocation and our existing error handler, displayError.
Now let’s write the handler to clear the watching activity.
There’s one small change we need to make and it involves the Google Maps code we previously wrote.
In this code we call showMap to display the Google Map.
Now, showMap creates a new map in your page, and that is something you only want to do one time.
But remember, when you start watching your location with watchPosition, displayLocation is going to get called every time there is an update to your position.
To make sure we only call showMap once, we’ll first test to see if  the map exists and if  it doesn’t, we’ll call showMap.
Otherwise, showMap has already been called (and has already created the map) and we don’t need to call it again.
If we haven’t called showMap already, then call it, otherwise we don’t need to call it every time displayLocation is called.
Time to get moving! Make sure you’ve got all the new code typed in and reload your page, myLoc.html.
Now, to truly test this page you’re going to need to “relocate” to have your position updated.
So take a walk, jump on your bike, get in the car, or use whatever your favorite mode of  transportation might be.
It almost goes without saying that if  you’re running this on your desktop, this app is going to be pretty boring (since you can’t take it with you), so you really need to use a mobile device for this test.
And, if  you need help getting to a hosted version with your mobile device, we’ve placed a copy of  this code at: http://wickedlysmart.com/hfhtml5/chapter5/watchme/myLoc.html.
Note the map is just going to center on your initial location, for now...
Q: How can I control the rate at which the browser is providing updates of my location when using watchPosition?
The browser determines what the optimal update rate is and decides when you’ve changed positions.
Q: Why does my location change a few times when I first load the page, even though I’m sitting still?
A: Remember we said the browser may use a few methods to determine your location? Depending on the method (or methods) the browser is using to determine your location, the accuracy of the location may change over time.
In general the accuracy gets better, but sometimes (say, you’ve just driven into a rural area with only one cell tower) it may get worse.
And you can always use the accuracy property in the position.coords object to keep an eye on accuracy.
Q: Can I use the altitude and altitudeAccuracy properties of the coordinates object?
A: These properties are not guranteed to be supported (and obviously are going to be supported on only high-end mobile devices), so you’ll have to make sure your code handles the case where they aren’t.
Q: What are heading and speed? A: Heading is the direction you’re traveling in and speed is how fast you’re going.
If you are in your car in the parking lot at Starbuzz Coffee, then your speed is 0 and you have no heading (because you’re not moving)
Q: When I map the distance from my location to your location, it’s a lot longer than is being reported in the app, why?
A: Remember, our distance function is computing the distance “as the crow flies.” Your mapping tool is most likely giving you the driving distance.
Can you guess what it does? Take a look and write your answer below.
So far we’ve stayed away from the third parameter of  getCurrentPosition (and watchPosition): the positionOptions parameter.
With this parameter we can control how geolocation computes its values.
Let’s look at the three parameters along with their default values:
First we have a property that enables high accuracy, we’ll talk about what that means in a sec...
The timeout option controls how long the browser gets to determine its location.
You can reset this to a value in milliseconds, say 10000, this gives the browser ten seconds to find a location, otherwise the error handler is called.Finally, the maximumAge option sets the oldest age a location can be before the browser needs to recalculate the location.
By default this is zero, which means the browser will always have to recalculate its location (every time getCurrentPosition is called)
Can we talk about your accuracy, again? We’ve already seen that each position handed to us by the Geolocation API has an accuracy property.
But, we can also tell the Geolocation API that we’d like only the most accurate result it can get.
Now, this is only meant as a hint to the browser, and in fact, different implementations may do different things with the hint.
And, while this option doesn’t sound like a big deal, it has lots of  implications.
For instance, if  you don’t care that your results are super accurate—you might be just fine knowing that your user is in Baltimore—the API might be able to tell you that very quickly and very cheaply (in terms of  power consumption)
If, on the other hand, you need to know the street your user is on, that’s fine, but the API might then have to fire up GPS, and use lots of  power to get that information.
With the enableHighAccuracy option, you’re telling the API you need the most accurate location it can get, even if  it is costly.
Just keep in mind, using this option doesn’t guarantee the browser can give you a more accurate location.
Let’s review once again what the timeout and maximumAge options are:
Note that if  the user is prompted to approve the location request, the timeout doesn’t start until they’ve accepted.
If  the browser can’t determine a new location within the number of  milliseconds specified in the timeout, the error handler is called.
But if  the maximumAge was set to 30 seconds, the browser would be forced to determine a new position.
For timeout, think about it like this: when you’re using maximumAge so you get an old (cached) result, as long as that result is younger than the maximumAge you specified, this works really well to optimize the performance of  your app.
But what happens when the position’s age exceeds the maximumAge? Well, the browser goes off  and tries to get a new one.
But, what if  you don’t care that much—say you’ll take a new location if  it has it, but otherwise, you don’t need it right now.
Well, you could set timeout to 0, and if  there is a result that passes the maximumAge test, great, here it is, otherwise the call will fail immedately and call your error handler (with an error code of  TIMEOUT)
That’s just one example of  the creative ways you can use timeout and maximumAge to tune the behavior of  your application.
I can see how using that can make my app faster and more power efficient.
I’ll use a cached position if  the browser has one that’s less than 10 minutes old, otherwise, I want a fresh position.
Below you’ll see a few options for the geolocation API.
I want only cached positions less than 10 minutes old.
If  there is no cached position at all, then I call the error handler.
The browser can take as long it wants to get me one.
How to specify options One of  the nice things about JavaScript is that if  we want to specify a set of  options in an object, we can just type in a literal object, right into the middle of  our method call.
Here are the options, written as a literal object right in the function call! Some would argue this is easier and more readable as code.
And then pass options to either getCurrentPosition or watchPosition, like this:
Or, we could just write the options object inline, like this:
Here, we’re just passing our options along using the options variable.
You’ll see this technique used a lot in JavaScript code.
Now that you know the options, what they do, and how to specify them, we should use them.
We’re going to do that, but remember, these are meant to tune your application, which will have its own unique requirements.
These options are also affected by your device, browser implementation and network, so you’ll need to play on your own to fully explore them.
When you ran the diagnostics before, did you get the test case where you waited and waited and nothing happened? That’s most likely because of the infinite timeout.
In other words the browser will wait forever to get a location as long as it doesn’t encounter some error condition.
Well, now you know how to fix that, because we can force the Geolocation API to be a little more expedient by setting its timeout value.
Give it a try and feel free to adjust the option values.
Are you starting to see that JavaScript really rocks? Well, at least we think it does.
Wouldn’t it be fun to see how fast your browser can find your location? We could make it as hard for your browser as we can:
Warning: we don’t know if all devices and their batteries are up to this, so use at your own risk!
Here’s what the intial options are going to look like:
Now check out the code on the next page, you’ll find it quite interesting.
Go ahead and type it in—you can just add it to your JavaScript in myLoc.js.
Try it on your various devices and record your results here:
Do the usual here, with displayLocation and displayError as our success and error handlers, and passing in options as the third paramter.
But in the case of a failure, we’re going to increase the timeout option by 100ms and try again.
When the browser successfully gets your position, we’ll let the user know how long it took.
Let’s finish this app! When you sit back and think about it, with just a little HTML and JavaScript you’ve created a web app that not only can determine your location, but it can also track and display it in near real time.
But, speaking of  this app, don’t you think it needs just a little bit of  polish to finish it off ?  For instance, we could show your position on the map as you move around, and we could even go further and show where you’ve been too, to create a path through the map.
Let’s write a function to keep the map centered on your location as you move around, and drop a new marker each time we get a new position:
First let’s grab the new lat and long, and create a google.maps.
The panTo method of the map takes the LatLng object and scrolls the map so your new location is at the center of the map.
Finally, we’ll add a marker for your new location using the addMarker function we wrote earlier, passing in the map, the LatLng object, a title and some content for the new marker.
The coordinates are going to be your latest new position, so we’re going to center the map on that location, and drop a marker there too.
After that, all we need to do is add a new marker to the existing map.
Remember that the first time displayLocation is called, we’re calling showMap to create the map and display a marker for your initial location.
So, we submit this application as solid proof  that “wherever you go, there you are.”
The first time displayLocation is called, we need to draw the map and add the first marker.
Our trail of markers on a recent trip from Wickedly Smart HQ to the secret underground lair...oh wait, we shouldn’t have said that...
Code Magnets Before we conclude this chapter, we thought you might want to really polish up this app.
You might have noticed (under some circumstances) that there are just a few too many markers being added to the map when you’re watching your position?
What’s happening is that watchPosition is detecting movement frequently, so it’s calling the displayLocation success handler every few steps or so.
One way to fix that is to add some code so we have to move some significant distance, say 20 meters for testing purposes, before we create a new marker.
You’ll find some of the code below to do that; it’s your job to finish it.
Watch out, you’ll have to use some magnets more than once!
There are a variety of ways to determine your location, depending on the device you have.
Mobile devices without GPS can use cell tower triangulation to determine location.
The Geolocation API has three methods and a few properties.
A position object is passed to the success handler with information about your location, including your latitude and longitude.
The position object contains a coords property, which is a coordinates object.
The coordinates object has properties including latitude, longitude and accuracy.
Some devices may support the other coordinates properties: altitude, altitudeAccuracy, heading, and speed.
Use the accuracy property to determine how accurate your location is in meters.
When getCurrentPosition is called, your browser must verify that you have given permission to share your location.
When watchPosition is used, your device will require more energy, so your battery life may be shortened.
The third parameter, options, for getCurrentPosition and watchPosition, is an object with properties you set to control the behavior of the Geolocation API.
The maximumAge property determines whether getCurrentPosition will use a cached position, and if so, how old that position can be before a fresh position is required.
The timeout property determines how much time getCurrentPosition has to get a fresh position before the error handler is called.
The enableHighAccuracy property gives a hint to devices to spend more effort getting a highly accurate location if possible.
You can use the Geolocation API with the Google Maps API to place your location on a map.
HTML5cross You’ve traveled quite far in this chapter with your first JavaScript API.
Accuracy has implications for your app because it can affect _________ life.
Don’t give driving directions to someone if your coordinates don’t have a good ________________
Old Skool devices without GPS use cell tower _______________ to determine your location.
You can use the _______________ equation to find the distance between two coordinates.
Don’t give driving directions to someone if your coordinates don’t have a good ________________
Code Magnets It’s your job to finish the code below, so we only display a new marker if we’ve traveled more than 20 meters since the last marker was added.
Watch out, you’ll have to use some of them more than once! Here’s our solution.
It displays a “getting hotter” message if you’re moving closer to the WickedlySmart HQ, or “getting colder” if you’re moving farther away.
If you’re within 0.1 km of the  HQ, then the message is, “You’re on fire!”
Can you guess what it does? Take a look and write your answer below.
If you’re feeling adventurous, try it out! Here’s our solution.
I’ll use a cached position if  the browser has one that’s less than 10 minutes old, otherwise, I want a fresh position.
Below you’ll see a few options for the geolocation API.
I want only cached positions less than 10 minutes old.
If  there is no cached position at all, then I call the error handler.
The browser can take as long it wants to get me one.
Accuracy has implications for your app because it can affect _________ life.
Don’t give driving directions to someone if your coordinates don’t have a good ________________
Old Skool devices without GPS use cell tower _______________ to determine your location.
You can use the _______________ equation to find the distance between two coordinates.
It’s time to get out a little, to talk to web services, to gather data and to bring it all.
That's a big part of writing modern HTML5 applications, but to do that you’ve.
And, after you've learned how to do that you'll be able to reach out.
If only I’d known reaching out and touching a web service could be so much fun...
This just in: Mighty Gumball, Inc., an innovative company that builds and deploys real gumball machines, has contacted us for some help.
If  you’re not up on them, they’ve recently network-enabled their gumball machines to track sales in near real time.
Now it almost goes without saying that Mighty Gumball are gumball experts, not software developers, and so they’d like our help building an app to help them monitor gumball sales.
Thanks for helping! Here’s the way we th ink the gumball machine.
Oh, we’ll send over some specs for the we b service soon.
You might remember them from our book Head First Design Patterns, when we helped them design their server-side code.
Mobile and desktop devices get sales from a real-time server through a web service.
We want you to write this part, using HTML5 of course!
Before we get started, take a little time to think through how you might design an app that retrieves data from a web service and then keeps a web page updated based on the data.
Don’t worry that you don’t know how to retrieve the data yet, just think through the high level design.
Draw a pic, label it, write out pseudo-code for any code you might need.
Think of this as a warm-up, just to get your brain going...
How do we get the data from the web service to our web page?
Once we’ve got the data, how do we update the page?
What kinds of problems might we have with getting data from a remote server?
You probably need a little background beyond Mighty Gumball’s short note.
Here’s what we’ve got: first, they’ve got gumball machines all over the country sending sales reports to a Mighty Gumball server, which combines all those reports and makes them available through a web service.
And, second, they’re asking us to build a web app that displays the sales in a browser for the Gumball Sales team.
And, most likely they want this report to be updated as the sales change over time.
Mighty Gumball machines are deployed throughout the country and sending sales information to the central Gumball servers.
The server aggregates them together and makes them available through a web service.
The browser loads the Mighty Gumball web app, including the HTML markup, CSS and JavaScript.
The app makes a Web request to retrieve the aggregated sales from the Gumball server.
The app takes a look at the data and then updates the page’s DOM to reflect any new sales data.
The browser updates the page based on the DOM and your users see the results.
The app goes back to step 3, and continually asks for new data.
As a result, the page appears to be updated in near real time.
While we’re waiting on those specs from Mighty Gumball, let’s get some HTML going.
You’re probably getting the idea we don’t need a lot of  HTML markup to get a web app off  the ground, and you’re right.
All we need is a place to put our sales reports as they come in, and we’ll let JavaScript do the rest.
Go ahead and get this typed in, and then we’ll take a look at how to retrieve things via the Web.
Here’s a placeholder for where we’re going to put the sales data.
Each sale item will be added as a <div> here.
Go ahead and type in the code above, load it into your favorite browser and give it a try it before proceeding.
And remember, you can download the CSS (and the other code for this chapter) from http://wickedlysmart.com/hfhtml5
And we set up our CSS to style the Mighty Gumball sales report so it looks good for the CEO.
We’ve gone ahead and linked to a JS file knowing we’ll be writing some JavaScript soon!
So how do we make requests to web services? Let’s step back for a sec...
What you might not know is that the browser can also retrieve data with HTTP from a web server in the same way.
Browsers can request data from applications on the server, like the Mighty Gumball application that aggregates all the sales data.
It helps to look a little more closely at the request we make to the server and the response that comes back.
The request takes care of  telling the server what data we’re after (which we sometimes refer to as the “resource” we’re after), while the response contains metadata and, if  all goes well, the data we requested:
The metadata: we’re making the request to the host gumball.
Note: This pattern of retrieving data using XMLHttpRequest is commonly referred to as “Ajax” or XHR.
How to make a request from JavaScript Okay, so we know we can retrieve data with HTTP, but how? We’re going to write a little code to create an actual HTTP request and then ask the browser to make the request on our behalf.
After it’s made the request, the browser will then hand us back the data it receives.
After all, we need to tell the browser where to get the data we’re after:
And let’s stash the URL in a  variable, url, which will use in a sec.
Next we need to tell the request object which URL we want it to retrieve along with the kind of request it should use (we’ll use the standard HTTP GET request like we saw on the previous page)
To do this, we’ll use the request object’s open method.
Now "open" sounds like a method that not only sets these values in the request object, but also opens the connection and retrieves the data.
Despite the name, open just sets up the request with a URL and tells the request object the kind of request to use so that XMLHttpRequest can verify the connection.
And also sets up the request to use the URL stored in our url variable.
And we use the XMLHttpRequest constructor to create a new request object.
The “.json” signifies a format for exchanging data, we’ll come back to this in a bit.
Okay here’s the important part, and the trick of how XMLHttpRequest works: when we finally ask our XMLHttpRequest object to retrieve data, it’s going to go off on its own and get the data.
It might take a 90 milliseconds (quite a while in compute time), or, on a slow day, it might take ten seconds (an eternity in compute time)
So rather than just waiting around for the data, we're going to provide a handler that is called when the data arrives.
Here's how you set up the handler (this should look somewhat familiar):
When the browser gets an answer from the remote web service, it calls this function.
The handler first needs to check if the return code is 200, or “OK”, and then it can do something with the data.
For now we’ll just alert the user the data is here.
Just one last step: we still need to tell the request to go out and get the data, and to do that we use the send method:
So, to review: we create an XMLHttpRequest object, load it with a URL and HTTP request type, along with a handler.
Then we send the request and wait for the data to arrive.
Glad to see things went well with the 200 success code.
Better call my handler now and give it this data...
One thing I didn’t notice is how we get the data from the HTTP call.
The data from the HTTP GET retrieval can be found in the responseText property of  the request object.
This function is called when the request has received a response.
We can get the response from the responseText property of the request object.
Code Magnets A new web service at http://wickedlysmart.com/ifeelluckytoday returns either “unlucky” or “lucky” each time you hit it.
The logic is based on a secret and ancient algorithm we can’t reveal, but it’s a great service to let users know if they are lucky or not on a given day.
We need your help to create a reference implementation to show others how they might include it in their site.
You’ll find the skeleton code below; help us fill in the details using the magnets.
Code Magnets Solution A new web service at http://wickedlysmart.com/ifeelluckytoday returns either “unlucky” or “lucky” each time you hit it.
The logic is based on a secret and ancient algorithm we can’t reveal, but it’s a great service to let users know if they are lucky or not on a given day.
We need your help to create a reference implementation to show others how they might include it in their site.
You’ll find the code skeleton below; help us fill in the details using the magnets.
Head First: Welcome XMLHttpRequest, we’re glad you could fit us into your busy schedule.
Tell us about how you fit into building web apps.
XMLHttpRequest: I started this whole trend for bringing outside data into your web page.
XMLHttpRequest: Until I arrived, people were building a web page on the server side and baking everything into the page as they created it.
I allow you to go out and get data after the page is built.
Think about Google Maps: it updates what’s on the page every time you adjust your location on the map, without having to reload the whole page.
Give me a URL and I’ll go get the data for you.
XMLHttpRequest: Well, you do have to tell me what to do with the data after I’ve retrieved it.
You can just give me a handler function—a callback of  sorts—and when I get the data, I’ll throw it at your handler to do whatever it wants with the data.
Head First: What kinds of  data are we talking about here?
XMLHttpRequest: The Web is full of  data these days; weather, maps, social data about people and friends, geolocation data about what’s nearby...
Head First: And this is all XML data, right? I mean your first name is XML.
XMLHttpRequest: Really? You’re a professional and that’s where you wanna take this interview?  You did your homework and all you can say is “you’re all about XML, right?” Let me set you straight.
Sure, there was a time I mostly retrieved XML, but the world is moving on.
Sure, some XML, but more and more I’m getting requests for JSON.
XMLHttpRequest: JSON is JavaScript Object Notation and it has a number of  advantages—size, readability, the fact that it is native to the most popular programming language on the Web: my friend JavaScript, of  course.
Head First: But isn’t it the case that the format really shouldn’t matter to you?  Users should be able to request XML or JSON or teletype for all you care.
Head First: Well, it seems I’ve hit on a sore spot.
So, XMLHttpRequest, I think we’ve got more time with you later in this chapter?
You might (or might not) remember that XML was going to save us all—a data format that was human readable and machine parseable, a data format that was going to support all the data needs of  the world.
And when XMLHttpRequest was first developed, XML was indeed the way we all exchanged data (thus, the name XMLHttpRequest)
Well, along the way XML apparently slipped on a banana peel thrown by JSON.
Who’s JSON? Just the latest and greatest data format, born out of  JavaScript, and being adopted across the Web in the browser and on the server side.
And might we add, it’s quickly become the format of  choice for HTML5 apps?
So, what’s so great about JSON? Well, it’s pretty darn human-readable, and it can be parsed quickly and easily straight into JavaScript values and objects.
We’re going to use it to exchange JavaScript data over the network, to store data in a local store with the Web Storage API, and as part of  another way to access web data (more on that shortly)
To use JSON you just need to understand JavaScript objects (which you do, big time) and two simple method calls.
We have a JavaScript object we want to exchange or store, so we call the JSON.stringify method, passing the object as the argument.
We can store this string, pass it to a function, send it over the network, etc.
When we're ready to turn the string back into an object, we pass it to the JSON.parse method.
Let’s run through a quick example that converts an object into its JSON string format.
Not everything can be converted into a JSON string—for instance, methods—but all the basic types, like numbers, strings, and arrays, are supported.
Once you’ve got an object, you can convert it into the JSON string format with the JSON.stringify method.
Now we’ve got a JSON string that represents our movie object.
At this point we could take this string and do any number of  things with it, like send it over HTTP to a server.
We can also receive a JSON string from another server.
Let’s say a server gave us this string; how would we turn it back into an object we can do something with? Just use JSON.stringify’s sister method: JSON.parse.
There are actually a few other restrictions, but we won't worry about those now.
Here's a nice movie object complete with strings, numbers and an array.
Here's the result, a string version of the object displayed in the alert.
Ah, and now we use this as a real object, accessing its properties.
Note: Firefox will ask you to open or save a file.
You can open with TextEdit, Notepad, or any basic text editor.
Thanks for taking this on!!! We’ve got all the sales from the Gumball machines aggregated and being served from our central server at:
We’ve chosen JSON as our data format and if you hit the above URL, y ou’ll get.
Go ahead and type this URL into your browser to see the values coming back.
You should see one or more of these objects in an array.
You can also add a lastreporttime parameter to the end of the URL and you’ll get only the reports since that time.
We’ve got hundreds of gumball machines reporting in right now, in fact y ou should.
If you're using Opera or IE 8 or older, we recommend you test with another browser.
We'll talk about how to support Opera and older IE browsers later.
Let’s get to work! We’ve got our specs from Mighty Gumball and you’ve done your training on XMLHttpRequest and JSON.
You should be all ready to get some code written and to get a first cut of  the Gumball App running.
Now, remember we’ve already laid out some HTML to work from, which links to a file called mightygumball.js.
That’s what we’re going to start writing our code now.
Remember too that we’ve already left a spot in the HTML where we’re going to put the gumball sales data, right into the <div> we labeled with an id of “sales.” So let’s put everything together and write some code.
We set up the XMLHttpRequest by creating the object, calling the open method with our URL and then setting the onload property to a function.
Writing an onload handler function We’re sure this is old hat for you now, but we’re going to write an onload handler that gets invoked when the HTML is fully loaded; we’re also going to go ahead and fire off  an HTTP request to get the sales data.
When the data comes back we’ll ask the XMLHttpRequest to call the function updateSales (which we’ll write in just a sec):
We check to make sure everything is OK, and then...
It’s time for another test drive, but we have a little detour to take care of  first.
The Mighty Gumball engineers asked us to test locally before hitting their production server, which is a good idea.
But to do that we need the data to live on a server so that XMLHttpRequest can use the HTTP protocol to retrieve it.
If  your company has servers that are available for testing, use those.
Or, you can use a third-party hosting service like GoDaddy, Dreamhost or one of  many other hosting companies.
Finally, you can set up a server right on your own machine.
In that case your URLs are going to look something like:
Keep in mind, hosting environments differ a fair bit, so we can’t write a general guide to these.
So, may the force be with you, and if  you don’t have easy access to a server already, setting up a server on your local machine may be your best choice!
We’ll grab the <div> already put in the HTML and use it as a place for the data.
And set the div’s content to the whole chunk of data.
Displaying the gumball sales data Now we need to write the handler, updateSales.
Let’s make this easy and just go with the simplest implementation possible, we can always make it better later:
The files can also be placed in a subdirectory, like http://localhost/gumball/mightygumball.html.
Setting up a web server on the Mac is easy.
In the panel on the left, make sure Web Sharing is checked:
Once you’ve turned Web Sharing on (or if  you already have it on), you’ll see some information about how to access your local server.
You should be able to use localhost instead of  the IP address (which tends to change if  you’re using a DHCP router, so localhost will work better for you)
Installing your own web server on Windows is easier than it used to be thanks to the Microsoft Web Platform Installer (also known as Web PI)
Another option is to install the open source WampServer, which comes with Apache, PHP and MySQL for web application development.
There are a few other open source solutions out there if  you look, so you’ve got lots of  options.
I’m a total geek Linux Distribution Let’s face it, you already know what you’re doing.
Right? Apache is usually installed by default, so check your distribution documentation.
How you set up your local hosting really depends on what kind of  operating system you’re using.
Check out the tips below for OS X (otherwise known as the Mac), the PC and Linux.
If  you don’t want to set up your own server, you can always use a remote server, but you’ll need to host your HTML, JavaScript and CSS, as well as the JSON file, all on the same server (we’ll talk later about why this is crucial) in order to follow along with this example.
Most hosting services will give you FTP access to a folder where you can put all these files.
If  you have access to a server like this, upload all the files and substitute your server name wherever you see localhost in the following pages.
We’ve put together a list of  hosting providers in case you need a recommendation, but they’re easy to find; just search for “web hosting” and you’ll find lots to choose from.
And let us know if  you get an HTML5 web site up online; we’d love to see it!
You can use an FTP program like Transit, Cyberduck or WinSCP to get your files uploaded if you don't want to use command line FTP.
How to set up your own Web Server, continued DetourAh, you want to really host your pages? Excellent, there’s no substitute for having your.
Back to the code At this point we’re expecting you’ve got your own server up and running—that could be a server running on your local machine (what we’re doing) or a server somewhere else you have access to.
In either case you’re going to place your HTML and JavaScript files on the server and then point your browser to the HTML file.
You’re also going to need the Mighty Gumball sales data test file there too, so we’re going to give you a simple data file to place on your server.
To your application it will look just like it’s being generated from Mighty Gumball’s near-real-time server, and it gives you a way to test your code without hitting the Mighty Gumball server.
Here’s what the file looks like; it’s named sales.json and it’s included with the code for the book (or you can type it in if  you enjoy that kind of  thing):
Go ahead and put this file on your server and then make sure you update your JavaScript to the URL for this file.
We’re going to use “sales.json” for testing before we hit the real production server with the real-time sales data.
It helps to first test this URL in your browser to make sure it works.
Remember we’re sending an HTTP request to get the data in sales.json, which we’re just dumping into the <div> for now.
If you’re having trouble, check each file independently through your browser and make sure it is accessible.
It’s been a long road but we’re finally ready to test this code!
Just make sure you’ve got the HTML, JavaScript, JSON—and don’t forget your CSS—files on the server.
We had to understand how to do HTTP requests and also.
We’ve done a lot of  heavy lifting to get this app working, and that’s great, but Mighty Gumball is going to be a lot more impressed if  it looks good too.
At the moment we’re just dumping a JSON array right into the browser.
And what a waste, there is a whole data structure just waiting to be used more effectively!
Here we’ve used the JSON array and created a nice display from it.
It’s that last 10% that can make the difference between amateur and professional, don’t ya think?
First we need to take the data we got back from our XMLHttpRequest object (which is just a JSON string) and convert it into a true JavaScript object.
Here’s what we need to do to improve our display:
Then we can walk through the resulting array and add new elements to the DOM, one per sales item in the array.
First we need to take the data we got from the XMLttpRequest object (which is just a JSON string) and convert it into a true JavaScript object.
To do that, let’s update the updateSales function by first deleting the line that sets the <div> content to the responseText string, and convert the responseText from a string to its equivalent JavaScript using JSON.parse.
Now let’s walk through the resulting array and add new elements to the DOM, one per sales item in the array.
In this case we are going to create a new <div> for each item:
Reworking our code to make use of JSON Let’s follow those two steps and get this code in shape:
Take the response and use JSON.parse to convert it into a JavaScript object (in this case it will be an array), and assign it to the variable sales.
For each item create a <div>, and give it the “saleItem” class (used by CSS)
You already know what this one is going to look like, but go ahead and make these changes.
Take one more careful look at the code on the previous page and make sure you’ve got it all down.
Moving to the Live Server Mighty Gumball asked us to test locally, and we have.
Now we’re ready to move on to testing against the real server.
This time, rather than retrieving a static JSON data file, we’ll be retrieving JSON that is generated dynamically from the Mighty Gumball servers.
We do need to update the URL that XMLHttpRequest is using and change it to point to Mighty Gumball.
Testing has gone well, you guys are ready to use Mighty Gumball’s live production servers now.
Make sure your URL change is saved in your mightygumball.js file on your server, if  you want to keep retrieving your HTML from there, or to your local hard drive if  you are using localhost.
From there you know what to do: point your browser to your HTML file and watch the live, beautiful, real data from all those people around the world buying Mighty Gumballs!
Houston, we have a problem! Come quick, we’re getting no sales data since we changed to the live servers!
Yikes! And everything was looking so good; we figured by this time we’d be sipping Perrier and celebrating another successful project with Mighty Gumball.
Okay, we’re getting a little overly dramatic, but what the heck? This should have worked!
Note to Editor: actually we thought we’d be cashing a fat advance check and shipping this book! Now we’ve got to write our way out of another fine mess!
It was all working fine until we moved to the live server...
And in the meantime, see if you can come up with ideas for what went wrong and how we can fix it.
To get HTML files or data from a server, the browser sends an HTTP request.
An HTTP response includes a response code that indicates if there was an error with the request.
The HTTP response code 200 means the request had no errors.
To send an HTTP request from JavaScript, use the XMLHttpRequest object.
The XMLHttpRequest object's onload handler handles getting the response from the server.
The JSON response to an XMLHttpRequest is placed in the request's responseText property.
To convert the responseText string to JSON, use the JSON.parse method.
XMLHttpRequest is used in applications to update content, such as maps and email, without requiring a page reload.
XMLHttpRequest can be used to retrieve any kind of text content, such as XML, JSON, and more.
XMLHttpRequest Level 2 is the most recent version of XMLHttpRequest, but the standard is still in development.
To use XMLHttpRequest, you must serve files and request data from a server.
You can set up a local server on your own machine for testing, or use a hosting solution.
You can write code to check for the browser version and provide an alternative for older browsers.
Head First: Welcome back to the second part of  the interview, XMLHttpRequest.
I wanted to ask you about browser support—are you available in only the newer browsers only?
Head First: Well, what about obsolescence, do you worry about that?
XMLHttpRequest: I’m someone who reinvents himself  every decade or so.
XMLHttpRequest: Well, for one thing, support for more event types, so you can do things like track the progress of  a request, and write more elegant code (in my opinion)
Head First: We’ve heard through the grapevine that you and IE don’t really get along...
XMLHttpRequest: ...and there it is...if  you want the answer to that, all you have to do is read every interview I’ve ever given.
Are you kidding me?  This whole XMLHttpRequest business started with IE.
Head First: Yeah, but what about ActiveXObject and XDomainRequest? Have you heard those names before?
XMLHttpRequest: Those are my nicknames! That’s what they call me at Microsoft! Okay, I agree it is a pain that we have different names for me, but they all do the same thing.
It’s easily handled with a little more code, and in terms of the recent Microsoft browsers, version 9 and later, everything is good.
If  this is news to your readers, I’m happy to stay after the interview to make sure their code works on older versions of  IE.
Head First: That’s very kind, we’ll make sure that makes it into this chapter somewhere.
XMLHttpRequest: Hey, I’m a nice guy, I wouldn’t leave your readers hanging on this.
Another question: you mentioned JSON and that you are a big fan of  it.
Head First: Word on the street is a lot people are using it in place of  you.
XMLHttpRequest: Okay, sure, with JSONP you can retrieve data, but it’s just a clever hack.
I mean, think of  the convoluted code you have to write, and what about security?
Head First: Hey, I’m not overly technical, all I know is a lot of  people say it gets them around problems you can’t solve.
XMLHttpRequest: Heh, well at least you got the “not overly technical” part right.
Most of the code to use XMLHttpRequest Level 1 is the same...
And then check the readyState to make sure the data has completed loading.
You could also check for other readyState and status values if you want to check for various errors.
We’ve been using request.onload to define a function that is called when the request finishes getting the data from the server.
XMLHttpRequest Level 2 is still pretty new, so many users may still be using browsers that don’t support it.
The XMLHttpRequest onload property isn’t supported by older versions of browsers, but there’s an easy workaround.
We had all the code working just fine using our local server, but as soon as we moved to the live server on the Web, it failed!
Here’s what our page looks like when we run the code using our local server to serve the sales data from http://localhost/gumball/sales.json.
Here’s what our page looks like when we run the code using the live Mighty Gumball server to serve the sales data from http://gumball.wickedlysmart.com.
So, what do we do now?! Why, let’s do what we always do, pull the crew together for a quick cubicle conversation.
We’re sure that together, all of  us (including a few fictional characters) can figure this out! Frank? Jim? Joe? Where are you? Oh, there you are on the next page...
Frank: Yep, and in fact, I typed it into the browser to make sure I see the sales data we’re expecting, and it worked fine.
Joe: I peeked at the JavaScript console in Chrome and I see something about access control and origins or domains.
I don’t know what’s going on with this code, Jim, but it just isn’t working for me.
Guys, where were you on the Starbuzz Coffee project? Remember we had a problem with the same behavior.
I bet you’ve got cross-domain issues because you’re requesting data from a server that is different than where your page came from.
Hmmmm, maybe you could refresh our memory on the browser security issues?
First the user (through the browser) makes a request for an HTML page (and, of course, any associated JavaScript and CSS):
The page needs some data from GoodDomain.com so it makes a XMLHttpRequest for the data:
Your browser makes a request for a page from GoodDomain.com.
What Browser Security Policy? Okay, it’s embarassing to hit this kind of  snag—just think of  the position we’re putting you readers in—but Judy’s right, the browser does enforce some security around your XMLHttpRequest  HTTP requests and that can cause some issues.
So what is this policy? Well, it’s a browser policy, and it says you can’t retrieve data from a domain that is different from the domain the page itself was served from.
Sounds bad right? Well, to stop that sort of  thing, browsers prevent you from making XMLHttpRequests to domains other than the original domain the page was served from.
Let’s take a look at what is okay, and what isn’t:
Just like before, the browser makes a request for a page on GoodDomain.com.
This may include JavaScript and CSS files that are also hosted at GoodDomain.com.
But now we have code that wants data from another source, that is, BadDomain.com.
Let’ s see what happens when the page requests that data using XMLHttpRequest:
Now let’s see what happens when your page hosted at GoodDomain.com tries to make a request for data using XMLHttpRequest to BadDomain.com instead.
Your browser makes a request for a page from GoodDomain.com.
The browser sees this request is to a different domain than the page, and shuts it down.
The BadDomain.com server never sees a request; your browser’s security policy stops it before it ever happens.
Nice job, all this code and this won’t even work? Can’t we just copy our files.
Say you were a developer working on code for Mighty Gumball, then you’d typically have access to their servers (or to people who could deploy files to the servers for you), and you could place all your files there and avoid any cross-domain issues.
In this case, however (and we do hate to break your suspension of  disbelief), you’re not actually working for Mighty Gumball, you’re readers of  this book, and we can’t think of  a way to have a couple hundred-thousand people copy their files to the Mighty Gumball servers.
So where does that leave us? Have we reached a dead end? No, we’ve still got a few options.
At least not on the budget the editor has given us!
So, what are our options? We gotta be honest with you, we knew all along that the XMLHttpRequest cross-origin request would fail.
But, as we just said, when you’re building apps you’ve often got access to the server and so this isn’t an issue (and if  you’re building apps largely dependent on your own data, using  XMLHttpRequest is usually the best way to do it)
But at this point we can hear you saying “that’s great, but how can we get this code working already?” Well, we’ve got a couple ways to make that happen:
We’ve already put files on our server for you and placed the files at:
Go ahead and give it a try by pointing your browser to this URL and you’ll be able to see the same code you typed in so far in action and working.
So, XMLHttpRequest is a great way to get data into your apps when that data is hosted at the same domain as your app, but what if  you need to really get data from a third party? Say you need data from Google or Twitter for instance? In those cases we really do have to break through this problem and find another approach.
As it turns out there is another way, based on JSON, known as JSONP (if  you’re curious it stands for “JSON with Padding”; we agree that sounds weird, but we’ll walk through it in just a sec)
Get your jetpack on because the way it works is a little “from another planet” if  you know what we mean.
Sorry, Ma’am, I can’t allow that, you’re from a different domain.
Jim: Sounds like it is another way to get data from web services into our apps.
I quickly google’d JSONP and basically it is a way of  getting the <script> tag to do the work of  retrieving the data.
Jim: Totally legit—a lot of  big services are supporting it, like Twitter.
I mean, how can using the <script> tag be a kosher way of  getting data? I don’t even get how that would work.
Jim: I’m only a little way into understanding it myself.
But think about it this way: when you use a <script> element, it is retrieving code for you right?
Jim: Well, what if  you put data in that code?
JSONP, guys, this is our chance to get ahead of Judy, for once.
Web Developer: When you evaluate it, assuming it is running in a browser, it will display an alert saying “woof”
Create your own simple HTML file and put a <script> element in it, in the body, like this:
Guru: So a JavaScript file, served from another domain, can call a function within your browser?
Web Developer: Well, now that you put it that way, yes Guru, I guess that is what is happening.
Guru: You’ll find another file at: http://wickedlysmart.com/hfhtml5/chapter5/dog2.js with the JavaScript:
Web Developer: It’s similar to dog.js, but it calls a function animalSays.
It also has two arguments not one: the animal type, and the animal sound.
Web Developer: I get an alert that says “dog says woof”
Web Developer: I get an alert that says “cat says meow”
Guru: So not only can a JavaScript file that was served from another domain call any function it wants in your code, but it can also pass us any data it wants?
Web Developer: I don’t see any data really, just two arguments.
Guru: And arguments aren’t data? What if we change the arguments to look like this:
Web Developer: Now the function animalSays is passing one argument that happens to be an object.
Hmm, I can certainly see how that object starts to look like data.
Guru: Can you rewrite animalSays so it uses the new object?
Web Developer: Yes, both work as you would expect with my new function.
Guru: What if you change the name of animalSays to updateSales?
Web Developer: Guru, I don’t see how animals are related to gumball sales?
What if we rename dog3.js to sales.js, and rewrite it like this:
We are passing data through the JavaScript file we’re referencing, rather than using XMLHttpRequest to retrieve it ourselves.
Are we not also getting it from another domain? Something that is forbidden by XMLHttpRequest.
Guru: There is no magic, the <script> element has always worked like this.
Now please go meditate on how this works to make it stick.
Using JavaScript to retrieve data is something you have to become one with.
Grab a sheet of paper or use the inside cover of this book.
Draw a server that hosts your HTML & JavaScript files.
Now go through the steps the browser uses to get and use the object in each file.
When you think you’ve got it, we’ll go through it all again together.
Meet JSONP You’ve probably figured out that JSONP is a way to retrieve JSON objects by using the <script> tag.
It’s also a way of  retrieving data (again, in the form of  JSON objects) that avoids the same-origin security issues we saw with XMLHttpRequest.
Let’s step through how JSONP works over the next few pages:
The source for this script is actually the URL of a web service that is going to supply us with JSON for our data, like our Mighty Gumball sales data.
The server treats the request like any HTTP request, and sends back.
Any data types are turned into real JavaScript object and values, and any code will be executed.
Remember this is just a string representation of the object at this point!
But what is the “P” in JSONP for? OK, the first thing you need to know about JSONP is it has a dumb and non-obvious name: “JSON with Padding.”  If  we had to name it, we’d call it something like “JSON with a Callback” or “get me some JSON and execute it when you get it back” or, well, really just about anything other than JSON with Padding.
But, all the padding amounts to is wrapping a function around the JSON before it comes back in the request.
Before the server sends back the JSON string, it first wraps it in a function call, like a call to updateSales.
The source for this script is the URL of a web service that is going to supply us with JSON data.
And so that function is called, and the object created from the JSON string is passed to it.
This time the JSON is wrapped in a function call.
What if I have another service and I want it to call, say, updateScore, or alert, or whatever?
In general, web services allow you to specify what you want the function to be named.
Although we didn’t tell you, Mighty Gumball is already supporting a way to do this.
Here’s how it works: when you specify your URL, add a parameter on the end, like this:
And here we’ve added a URL parameter, callback, that says to use the function updateSales when the JavaScript is generated.
MightyGumball will then use updateSales to wrap the JSON formatted object before sending it back to you.
Typically, web services name this parameter callback, but check with your web service documentation to make sure that’s what they’re using.
Try these URLs: what do you see in the response?
Note: Firefox will ask you to open or save a file.
You can open with TextEdit, Notepad, or any basic text editor.
It took us a while to wrap our heads around using a <script> element to hit a web service, but now it almost seems easier.
Joe: I think this actually allows us to delete some code.
Frank: And I'm ready to make it all look good when you’re done.
Jim: So Joe, code-wise, what do you have in mind?
Using JSONP, the script tag is going to parse and evaluate the code coming back, so by the time we get our hands on the data it will be a JavaScript object.
Jim: Right, and with XMLHttpRequest we were using JSON.parse to convert the string into an object.
Joe: Well obviously we need to insert the <script> element.
Joe: Well, the browser is going to control when it loads, and we want the page to be loaded first, so we can update the DOM when updateSales is called.
The only way I can think of  dealing with that is to put the <script> at the bottom of  the page in the body of  the HTML.
Joe: Okay, I want to get this code working!  Let’s get this code in!
Frank: You guys better hurry, I bet Judy’s already got her own version in the works.
Other than removing the existing code that deals with the XMLHttpRequest call, all the changes are minor.
Make sure the updateSales function is ready to receive an object, not a string (as it was with the XMLHttpRequest)
Add the <script> element to do the actual data retrieval.
All the code in our onload function was code involved in the XMLHttpRequest, so we can just delete it.
We’ll keep the onload function around in case we need it a little later.
For now, just delete all the code in this function.
This is the link to the Mighty Gumball web service.
We’re using the callback parameter and specifying our function, updateSales, so the web service wraps the JSON in a function call to updateSales.
Next, remember that when we use the <script> element, we’re telling the browser that it needs to retrieve JavaScript, and so the browser retrieves it, parses it and evaluates it.
That means by the time it gets to your updateSales function, the JSON is no longer in string form, but is a first-class JavaScript object.
When we used XMLHttpRequest, the data came back in the form of a string.
Right now, updateSales assumes it is getting a string, so let’s change that so that it handles an object, not a string:
Remove responseText and rewrite the line with a parameter named sales.
And that’s it: we’ve now got a function ready to handle our data.
Test drive your new JSONP-charged code If  you’ve made all your changes, it’s time for a test drive.
You’re now loading Mighty Gumball sales data using your web app and JSONP.
The page should look the same as when you were getting the sales data from the local file, but you know that it’s using a whole different method of  getting the data.
Here’s what we see when we reload the Mighty Gumball page.
You’ll get different cities and sales because this is real data.
It’s not any more or less secure than using <script> to load JavaScript.
It’s true: if  you make a JSONP request to a malicious web service, the response could include JavaScript code you’re not expecting and the browser will execute it.
But it’s no different than including JavaScript by linking to libraries hosted on other servers.
Any time you link to JavaScript, whether it’s to a library in the <head> of  your document, or using JSONP, you need to be sure you trust that service.
And if you’re writing a web app that uses authentication to give the user access to sensitive data, it’s probably best not to use third party libraries or JSON data hosted on other servers at all.
If you’re using an API like Google, Twitter, Facebook or one of  the many other well-known web services out there, you’re safe.
In our case, we know the Mighty Gumball engineers personally and we know they’d never put anything malicious in their JSON data, so you’re safe to proceed.
Tonight, we have two popular methods of retrieving data from your browser.
No offense meant, but aren’t you kind of  a hack? I mean your purpose is to retrieve code, and people are using you to do requests for data.
But all you’re doing is throwing some data in with code.
And there’s no way for you to make your requests directly from JavaScript code; you’ve got to use an HTML <script> element.
Hey XML is still in wide use, don’t knock it.
At least with me you’re in control of  what data gets parsed into JavaScript.
After all, people are working on making me more flexible while still secure.
We can use the same means of retrieving code and data.
Hey, it works, and it allows people to write code that retrieves JSON from services like Twitter and Google and a lot of  others.
How are you going to do that with XMLHttpRequest given your security restrictions.
I mean you’re still stuck on the old days, “XML,” heh.
That’s an advantage—by the time my users get their data, it’s all nicely parsed for them.
Look, I have a lot of respect for you, you made this whole way of  writing apps happen, but the problem is you’re too restrictive.
Today, in this world of  web services, we need to be able to make requests to other domains.
Sure people are working on new ways, but my users have real needs today—they can’t wait for you to figure out all your cross-domain issues.
I had nothing to do with the name Ajax, so don’t ask me! By the way, you never said how you are secure?
All I can say is if  you don’t need to go get someone else’s data, like Twitter or Google, and you’re writing your own web service and client, stick with me.
I’ve got more security and I’m more straightforward to use.
Come on, it doesn’t take that much code to support me going all the way back to IE5
Yeah, well there’s more to it than that, and have you ever tried to do something iterative, where you need to retrieve something over and over? Like that Mighty Gumball thing they’ve been working on.
Here’s my impression of  your readers having just heard the sentence you just said: “Say what?”
And there’s nothing dumb about “padding,” it just means that when a user makes a web service request it also asks it to add a little prefix, like “updateSales()”, on to the result.
And what were they calling you for a while? Ajax? Isn’t that a bathroom cleaner?
If  you’re retrieving code from another server, yeah you need to know what you’re doing.
But the answer isn’t to just say “don’t do it.”
Hello? No one is writing services that don’t use outside data.
Hey, at least I’m consistently supported everywhere, I’d hate to have to write XMLHttpRequest code that worked across old browsers.
You just need to use write a new <script> element into the DOM to do another request.
Sure, I could hit refresh on my browser, but then I see only the newest.
He’s right, we need to change our app so that it is updating the display with new sales at some regular interval (say, every ten seconds)
Right now we’re just putting a <script> element into the page that initiates the request to the server only one time.
Can you think of any way to use JSONP to continually retrieve new sales reports?
Hint: using the DOM we can insert a new <script> element into the page.
Jim: Yeah, he wants the data to be continually updated in the display.
I mean one big advantage of  a web app is you don’t have to refresh it like a web page.
Joe: Fair enough, and obviously we know how to replace old sales data with new sales data in the page using the DOM.
But we’re not sure yet how to handle the JSONP part.
Judy: Remember, you can use the DOM with the <script> element too.
In other words, you can create a new <script> element in the DOM any time you want to retrieve more data.
Right now, we’re putting the <script> element statically in the HTML markup by just typing it in.
We could instead create a new <script> element with JavaScript code, and add it to the DOM.
The only part I’m not sure of  is, will the browser do another retrieval when we create the new <script> element?
Jim: I see, so we’re creating a new <script> element any time we want the browser to do a JSONP-type operation for us.
And you know how to do it over and over?
Jim: Well, uh, we’re not there yet, we were still thinking about the JSONP.
Judy: You know all about handler functions by now, you know like onload or onclick.
You can set up a timer to call a function handler at a specified interval using the setInterval method in JavaScript.
Joe: So, let’s get that set up and get the dynamic JSONP working ASAP for the Gumball CEO.
Jim: Oh, is that all you want? We better get on it!
Guys, I just heard the Mighty Gumball CEO isn’t exactly happy with your first version?
Then we need to implement our JSONP code in the handler, so that each time it is called it makes a request to get the latest Mighty Gumball sales reports.
We're going to remove the JSONP <script> element from the Mighty Gumball HTML, because we won’t be using that any more.
We need to set up a handler to handle making the JSONP request every few seconds.
We’re going to be using a new way to invoke our JSONP requests, and so let’s go ahead and remove the <script> element from our HTML.
Improving Mighty Gumball As you can see we have a little more work to do, but it’s not going to be too bad.
Basically, we wrote our first version so that it grabs the latest sales reports from Mighty Gumball and displays them, once.
Our bad, because almost any web app these days should continuously monitor data and update the app in (near) real time.
You can go ahead and delete this element from your HTML file.
Okay, we’re progressing from retrieving the sales reports once, to retrieving them every so often, say every three seconds.
That might be too fast or slow depending on the application, but for Mighty Gumball we’re going to start with three seconds.
Now, to do something every three seconds we need to have a function we can call every three seconds.
And, as Judy mentioned, we can use the setInterval method in the window object to do this; here’s what it looks like:
The setInterval method takes a handler and a time interval.
Here’s our handler function, which we’ll define in a sec.
Let’s give this a try and then when we know it’s working—that is, when we see our our handler being invoked every three seconds—we’ll implement the JSONP code.
And all we need to do is add our call to setInterval, which, when the init function is run, will start a timer that fires every three seconds and calls our function handleRefresh.
So every 3,000 milliseconds JavaScript will invoke your handler, in this case the handleRefresh function.
Let’s write a simple handler and give it a try:
Every time this is called (which will be every three seconds), we’ll throw up the alert “I’m alive.”
Now we just need some code to set up the setInterval call, which we’ll add to the onload function so it gets set up right after the entire page is loaded:
This is our old onload function, which had nothing in it after we deleted the XMLHttpRequest code.
Make sure you’ve typed in the handleRefresh function and also made the changes to the onload handler.
You’ll see a stream of  alerts, and you’ll have to close your browser window to stop it!
Now that you know about setInterval (not to mention XMLHttpRequest and JSONP), think of ways you could use them in other web applications.
Check and update progress on a task and display it.
See if any new comments have been posted on a topic.
Update a map if any friends have shown up nearby.
Here, we’re setting up the JSONP URL and assigning it to the variable url.
We still want to use JSONP to retrieve our data, but we need a way to do it whenever our refresh handler is called, not just at page load time.
That’s where the DOM comes in—the great thing about the DOM is that we can insert new elements into the DOM at any time, even <script> elements.
So, we should be able to insert a new <script> element any time we want to make a JSONP call.
Let’s work up some code using everything we know about the DOM and JSONP to do this.
First, let’s set up the JSONP URL This is the same URL we used with our previous script element.
Here we’ll assign it to a variable for later use.
Delete the alert out of your handler and add this code:
We need to create the element, and then set its src and id attributes:
And we'll give this script an id so we can easily get it again, which we'll need to, as you'll see.
The setAttribute method might look new to you (we’ve only mentioned it in passing so far), but it’s pretty easy to see what it does.
The setAttribute method allows you to set the attributes of an HTML element, like the src and id attributes or a number of others including class, href and so on.
How do we insert the script into the DOM? We’re almost there, we just need to insert our newly created script element.
Once we do that the browser will see it and do its thing, causing the JSONP request to be made.
Now, to insert the script requires a little bit of  planning and forethought; let’s see how this is going to work:
We start with out with a DOM, with no "jsonp"
In our code we’re going to need to get a reference to.
And then we’re going to insert the new <script> element into.
Now except for the first time handleRefresh is called, there’s.
In that case we’ll, again, grab a reference to the.
Once we've inserted the script, the browser will see the new script in the DOM and go retrieve what's at the URL in the src attribute.
And this time we’ll replace the existing element with our new one, rather than appending the new script to the DOM.
It would work to append the new script—that is, the browser would invoke the JSONP call—but, over time, we’d build up a huge collection of <script> elements in the DOM, which can have performance implications.
Now let’s write the code to insert the script into the DOM Now that we know the steps, let’s check out the code.
We’ll do this in two steps too: first we’ll show the code to add a new script, then the code to replace a script:
We’re first going to get the reference to the <script> element.
Next we’re going to get a reference to the <head> element using a new document method.
Okay, let’s check out the code that replaces the script element if it already exists.
We’ll just show the conditional if statement, which is where all the new code is:
If there is already a <script> element in the head, then we just replace it.
You can use the replaceChild method on the <head> element and pass it the old and new scripts to do that.
We’ll look a little more closely at this new method in a sec.
Here’s our conditional again, remember it is just checking to see if a <script> element already exists in the DOM.
The replaceChild method tells the <head> element to replace one of its children, oldScriptElement, with a new child, newScriptElement.
Let’s also look at the replaceChild method because you haven’t seen that before.
Call the replaceChild method on the element in which you want to replace a child, passing in the references to both the new and old children.
The method simply replaces the old child with the new one.
It’s similar to getDocumentById, except that it returns an array of  elements that match a given tag name.
In this case it returns an array of head elements.
Once you have the array, you can get the first item in it using index 0:
Returns the first head element in the array (and there should be only one, right?)
We get the array and then index into the array to get the first item in one step.
And usually you’ll get more than one of those back on the array.
Q: Why can’t I just replace the data in the src attribute instead of replacing the whole <script> element?
A: If you replace just the src attribute with the new URL, the browser doesn’t see it as a new script, and so it doesn’t make the request to retrieve the JSONP.
To force the browser to make the request, we have to create this whole new script.
Q: What happens to the old child when I replace it?
What happens from there depends on you: if you’ve still got a reference to it stored in a variable somewhere you can continue to use it (in whatever way might make sense)
However if you don’t, the JavaScript runtime might eventually reclaim the memory the element is taking up in your browser.
Q: What if there is more than one <head> element? Your code seems to depend on there being only one head when you index by zero in the array returned by getElementsByTag?
A: By definition, an HTML file has only one <head> element.
That said, sure, someone could type two into an HTML file.
Q: Can I stop the interval timer after I start it? A: You sure can.
The setInterval method actually returns an id that identifies the timer.
By storing the id in a variable you can then pass it to the clearInterval method at any time to stop the timer.
Q: How can I know the parameters a web service uses? And if it supports JSON and JSONP?
A: Most web services publish a public API that includes the ways you can access the service as well as all the things you can do with the service.
If you’re using a commercial API you might need to get this documentation directly from the provider.
For many public APIs you’ll most likely find the information you need through a web search or on the organization’s developer section of their web site.
So, when we say HTML = Markup + JavaScript APIs + CSS, well, JSON and JSONP are very much part of that picture (as are requests using HTTP with XMLHttpRequest)
A: One truism in the computer industry is that nothing ever dies, and so we’re sure we’ll have XML for a long time to come.
That said, we’d also say JSON has momentum right now and so lots of new services are being created using JSON.
You’ll often find that many web services support a variety of data formats including XML, JSON and many others (like RSS)
We almost forgot: watch out for the dreaded browser cache We’re almost ready to go here, but there’s a small detail we need to take care of, and it’s one of  those “if  you’ve never done it before, how would you know you need to address it” kind of  issues.
Most browsers have an interesting property in that if  you retrieve the same URL over and over (like our JSONP request will), the browser ends up caching it for efficiency, and so you just get the same cached file (or data) back over and over.
Luckily there is an easy and old-as-the-Web cure for this.
All we do is add a random number onto the end of  the URL, and then the browser is tricked into thinking it’s a new URL the browser’s never seen before.
Let’s fix our code by changing the URL line above to:
We create a new Date object, use the getTime method of the Date object to get the time in milliseconds, and then add the time to the end of the URL.
We’re adding a new, “dummy” parameter on the end of the URL.
The web server will just ignore it, but it’s enough to fake out the browser.
With this new code, the generated URL will look something like this:
You’ll find this code at the top of your handleRefresh function.
Go ahead and replace the url variable declaration in your handleRefresh function with the code and then we’ll be ready for a test drive!
How to remove duplicate sales reports If  you take a quick look back at the Gumball Specs on page 228, you’ll see that you can specify a last report time parameter in the request URL, like this:
That’s a great, but how do we know the time of  the last report we’ve retrieved? Let’s look at the format of  the sales reports again:
You can also add a lastreporttime parameter to the end of the URL and you’ll get only the reports since that time.
One more TIME test drive Alright, surely we’ve thought of  everything this time.
Make sure you’ve got all the code in since the last test drive, and reload the page.
Maybe we’re retrieving too fast and getting reports we’ve already retrieved?
And to keep track of  the last sales report received we’re going to need to make some additions to the updateSales function, where all the processing of  the sales data happens.
First, though, we should declare a variable to hold the time of  the most recent report:
And let’s grab the time of  the most recent sale in updateSales:
If you look at the sales array, you’ll see that the most recent sale is the last one in the array.
The time can’t be less then zero, so let’s just set it to 0 for starters.
We need to make sure there IS an array though; if there are no new sales, then we’d get back an empty array and our code here would cause an exception.
Put this at the top of your JavaScript file, outside any function.
I see where you’re going with this; we can keep track of the time of the last report, and then use that when we make the next request so that the server doesn’t give us reports.
Now that we’re keeping track of  the last reported sales time, we need to make sure we’re sending it to Mighty Gumball as part of  the JSON request.
To do that, we’ll edit the handleRefresh function, and add the lastreporttime query parameter like this:
We’ve split up the URL into several strings that we’re concatenating together...
Test drive lastReportTime Let’s take the lastreporttime query parameter for a test run and see if  it solves our duplicate sales reports problem.
Make sure you type in the new code, reload the page, and click that refresh button.
Nice! Now we get only new sales reports, so all the duplicates are gone!
You’ve outdone yourselves! This works great and now I can totally keep up with sales at my desk or when I’m mobile.
XMLHttpRequest does not allow you to request data from a different server than the one from which your HTML and JavaScript are being served.
This is a browser security policy designed to prevent malicious JavaScript from getting access to your web pages and a user’s cookies.
An alternative to XMLHttpRequest for accessing data hosted by web services is JSONP.
Use XMLHttpRequest when your HTML and JavaScript are hosted on the same machine as your data.
Use JSONP when you need to access data hosted by a web service on a remote server (assuming that web service supports JSONP)
A web service is a web API that is accessed by HTTP.
The function call that wraps the JSON data in JSONP is referred to as a “callback.”
Specify the callback function as a URL query parameter in a JSONP request.
Use a random number on the end of your JSONP request URL if you are making the request multiple times so the browser doesn't cache the response.
The method replaceChild replaces an element in the DOM with another element.
You can use setInterval to make repeated JSONP requests to a server to retrieve new data.
HTML5cross Wow, you got your apps talking to the Web in this chapter! Time for some left‑brain activity to help it all sink in.
The pattern of using XMLHttpRequest to get data from servers is sometimes called ______
The Guru teaches Grasshopper that function arguments are also _______
We were ___________ to get twenty-five pages into the chapter before discovering the browser security policy.
It’s easy to set up a local server on a ______
The pattern of using XMLHttpRequest to get data from servers is sometimes called ______
The Guru teaches Grasshopper that function arguments are also _______
We were ___________ to get twenty-five pages into the chapter before discovering the browser security policy.
It’s easy to set up a local server on a ______
While we’ve got you thinking about JSONP, we’d love to.
We’re working with Twitter’s JSONP API and building out a service that.
We like to say “if it’s worth tweeting, it’s worth printing on a t-shirt.”
The pattern of using XMLHttpRequest to get data from servers is sometimes called ______
The Guru teaches Grasshopper that function arguments are also _______
We were ___________ to get twenty-five pages into the chapter before discovering the browser security policy.
It’s easy to set up a local server on a ______
With HTML5’s new canvas element, you’ve got the power to create, manipulate and destroy.
In this chapter we'll use the canvas element to bring out.
Yeah, sure, markup is nice and all, but there’s nothing.
Our new start-up: TweetShirt Our motto is “if  it’s worth tweeting on Twitter, it’s worth wearing on a t-shirt.”
After all, half  the battle of  calling yourself  a journalist is being willing to put your words in print, so what better place than printing on your or someone else’s chest? At least that’s our start-up pitch, and we’re sticking to it.
Now, there’s only one thing that stands in the way of  getting this start-up off  the ground: we need a nice web app that lets customers create a custom t-shirt design, featuring one of their recent tweets.
We like to say “if it’s worth tweeting, it’s worth printing on a t-shirt.”
What we need is a t-shirt web app that lets our users create a hip presentation of their favorite tweet.
Just like they use Twitter while mobile, our customers will be ordering.
Well, come on then, we'll get this start-up off the ground by the end of this chapter.
Oh, and if you actually go out and do this and make money, we're not claiming any intellectual property or anything, but at least send us a free t-shirt!
Checking out the “comps” After exhaustive iterative design and extensive focus group testing we’ve got a comp (otherwise known as an initial visual design) ready for you to review, let’s take a look:
User can also choose circles, squares, or nothing in the background.
No two shirts are alike, so these need to be randomly placed!
And the web app should look just like this page, if possible!  In other words we want to display the shirt design and allow the user to interactively change it with the user controls.
Yeah right, come on we're a start-up, we did this on a napkin at Starbuzz Coffee.
The user can select the background color, circles or squares, the text color and the tweet.
Take another look at the requirements on the previous page.
How do you think you can accomplish this using HTML5? Remember, one requirement is making sure your site works across as many device formats and sizes as possible?
Check all the possibilities below (and then circle the best answer):
Q: Well seriously, why not Flash, or a custom application for that matter?
A: Flash is a great technology, and you certainly could use it.
Right now, though, the industry is heading toward HTML5, and as we write this, you’d have trouble running your Flash app on all devices, including some very popular ones.
An app may be a great choice if you really need an experience that is totally customized to the device.
Keep in mind that developing a custom application for a variety of devices is expensive.
With HTML5 you get great support across mobile devices and the desktop, and you can often create an application by using a single technology solution.
Q: I like the idea of creating the image on the server.
That way I can write one piece of code and images work on all devices.
I know a little PHP so I should be able to pull this off.
A: That’s another way you could go, but the disadvantages are that if you have a zillion users, you are going to have to worry about scaling those servers to meet the demand (versus each user’s client dealing with generating the preview of the t-shirt)
You’re also going to have a much more interactive and seamless experience if you write it for the browser instead.
Take a look at HTML5 and see if there are any new technologies that might help (hint: there might be one named canvas)
Write a custom application for every device, that way you know the exact experience you’re going to get.
Just compute the image on the server side and deliver a custom image back to the browser.
Joe: I thought this was going to be simple until I saw those circles in the background.
Judy: No no, the founder wants those circles to be random; so the circles on my shirt will be different from yours.
Frank: That’s okay, in the past we’ve done it by generating an image on the server side.
Joe: Yeah, I know, but that didn’t work out so well; remember having to pay all those server fees to Amazon?
Joe: And in any case, we want this thing to be instant gratification, you know, no long trips back to the server.
So, let’s do it all on the client-side if  we can.
Judy: Guys, I think we can, I’ve been looking at the canvas stuff  in HTML5
Frank: Canvas? Remember I’m just the design guy, fill me in.
We just place it on the page with a width and height and the browser does the rest.
Judy: Not a bad comparison, we do define a width and height for the canvas, but in this case what gets drawn on the canvas is specified with JavaScript code.
Joe: Well, where does markup come into that? Can we tell the canvas in JavaScript to “put this <h1> element here”?
Judy: Nope, after you place the canvas in the page you leave the markup world behind; in JavaScript we’re placing points, lines, paths, images and text.
Joe: Well, as long as it can pull off  those random circles I’m good.
You've heard the requirements and you’ve got a basic design for.
Let’s listen in and see where this is all going...
How to get a canvas into your web page Frank was right, in some ways a canvas is like an <img> element.You add a canvas like this:
And the browser allocates some space in the page for the canvas, with the width and height you specified.
The canvas element is a normal HTML element that starts with an opening <canvas> tag.
The width attribute defines how many horizontal pixels it occupies in a web page.
Likewise, the height defines the vertical area of the page it occupies, here 200 pixels.
We’ve added an id so we can identify the canvas, you’ll see how to use this in a bit...
We'll use this point to measure everything else in the canvas (as you'll see in a bit)
The canvas has a bit of space around it - that's the default margin of the body element.
Test drive your new canvas Time for you to get this working in your own web page.
Go ahead and type in the code below into a new file and then load it in your browser:
We drew these lines to explain how the canvas fits in a page, for illustration purposes only.
We've added a style for the canvas that just puts a 1px black border on it, so we can see it in the page.
How to see your canvas Unless you draw something in the canvas, you’re not going to see it.
It is simply a space in the browser window for you to draw in.
We’re going to draw in the canvas very soon, but for now, what we really want is evidence that the canvas is actually in our page.
Let’s add a simple style that adds a 1-pixel-wide black border to the canvas.
You might have noticed that the canvas element didn’t have any content inside it.
If you were to place text between the tags, what do you think the browser would do when the page is loaded?
Q: Can I only have one canvas per page? A: No, you can have as many as you like (or that the browser or your users can handle)
Just give each a unique id and you can draw on each as a separate canvas.
You’ll see how to use the canvas id in a moment.
Q: Is the canvas transparent? A: By default, yes, the canvas is transparent.
You can draw in the canvas to fill it with colored pixels; you’ll see how to do that later in the chapter.
Q: If it’s transparent, that means I could position it on top of another element to, say, draw something over an image or anything else on the page, right?
A: That’s right! That’s one of the cool things about canvas.
It gives you the ability to add graphics anywhere on your page.
Q: Can I use CSS to set the width and height of the canvas instead of the width and height attributes on the element?
A: You can, but it works a little differently from how you might expect.
If you don’t specify the width and height attributes in the canvas tag, that’s what you get.
It’s just like scaling an image by specifying a new width and height that is larger or smaller than the real width and height of the image.
If you scale it up, you’ll get some pixelation in the image, right?
So, we recommend specifying the width and height in the tag attributes, and not setting those properties in CSS unless you really mean to scale the canvas.
Here’s our onload handler; we’ll start drawing after the page is fully loaded.
We're using the 2d context to draw a filled rectangle on the canvas.
These numbers are the x, y position of the rectangle on the canvas.
Drawing on the Canvas Right now we’ve got a blank canvas staring us in the face.
To do that we’ve got to decide where it goes and how big to make it.
To draw on the canvas we need a reference to it.
And we've also got the width and height (in pixels)
Also interesting that a rectangle fill method doesn't take a fill color...
A closer look at the code That was a great little test run, but let’s dive in a little deeper:
In our markup, we define a canvas and give it an id, using the <canvas> tag.
The first thing you need to do to draw into that canvas is to get a handle on the canvas object in the DOM.
Assuming you’re using a modern browser you should see something like we do:
This is a bit of protocol we have to follow before we can start drawing on the canvas.
Try this out and you should see a black rectangle appear.
Try changing the values for x, y, width, and height and see what happens.
With a reference to the canvas element assigned to the canvas variable, we now have to go through a bit of  “protocol” before we draw on the canvas.
We need to ask the canvas to give us a context to draw on.
And in this case, we specifically want a 2D context.
The context returned by the canvas is assigned to the context variable:
Now, with the context in hand, we can use it to draw onto the canvas, which we do by calling the fillRect method.
Can you think of a way to use a canvas element if your browser supports it and if not, to just display a message like “Hey, you, yes you, upgrade your browser!!”?
Note, we’re calling the fillRect method on the context, not the canvas itself.
Q: How does the canvas know to make the rectangle black?
A: Black is the default fill color for a canvas.
Of course, you can change this using the fillStyle property, as we’ll show you shortly.
Q: What if I wanted a rectangle outline, not a filled rectangle?
A: To get just the outline of a rectangle, you’d use the strokeRect function instead of fillRect.
Q:What is a 2d context, and why can’t I just draw right on the canvas?
A: The canvas is the graphical area displayed in the web page.
The context is an object associated with the canvas that defines a set of properties and methods you can use to draw on the canvas.
You can even save the state of the context and then restore it later, which comes in handy at times.
You’ll see many of these context properties and methods in the rest of this chapter.
By using a context, we can work with different interfaces within the same element, canvas.
You can’t draw right on the canvas because you need to specify which interface you’re using by choosing a context.
Q: Does that mean there is a “3d” context too?
There are a few competing and emerging standards for this, but nothing that looks like a frontrunner yet.
Stay tuned on this one; in the mean time take a look at WebGL and the libraries that use it, like SpiderGL, SceneJS and three.js.
Wondering how you can detect whether your browser supports canvas or not, in code?
Well of course you can, and we should point out that so far we’ve just been assuming our browser supports canvas.
But in any production code you should test to make sure you have support.
All you have to do is test to see if the getContext method exists in your canvas object (the one you get back from getElementById):
First we grab a reference to a canvas element in the page.
Then we check for the existance of the getContext method.
Note, we’re not calling it, we’re just seeing if it has a value.
Be sure to check out the appendix for information about an open source library you can use to test for all the functionality in HTML5 in a consistent way.
Here’s the deal: if  you really really need to support canvas functionality in Internet Explorer (again, pre-version 9), then you can check out the Explorer Canvas Project and other similar efforts as a way to use a plug-in to get this functionality.
For now though, let’s just assume you’d like to let your users know they are missing out on your great canvas content.
Let’s take a look at how to do this ...
And perhaps you can suggest that they upgrade to IE9!
So, the truth is, out there somewhere, in another place and time, a user is going to visit your site and not have support for the canvas element.
Would you like to send them a kind message saying that they really should upgrade? Here’s how:
Put the message you want displayed to your users who don’t have a canvas-capable browser.
How does this work? Well, any time a browser sees an element it doesn’t recognize it displays any text contained within it as a default behavior.
So, when non-capable browsers see the <canvas> element, they just display “Hey you, yes YOU, upgrade your browser!!” Capable browsers, on the other hand, conveniently ignore any text between the canvas tags and so won’t display the text.
Thank you HTML5 standards guys (and girls) for making this easy!
And, as you already know, another way to handle browsers that don’t support canvas is to use JavaScript to detect if  the browser knows about the element.
This gives you a bit more flexibility to give your users a different experience in case their browsers don’t support it; for instance, you could redirect them to a different page or display an image instead.
Frank: Sure, but also we need the user interface for the user to specify all this.
I mean we’ve got the mock-up, but we need to implement it.
But, given we’re trying to do this all on the client-side, how is this going to work?  For instance, where does the form get submitted? I’m just not sure I understand how this all fits together.
Joe: Frank, we can just call a JavaScript function when the user clicks the preview button, and then we can display the shirt design in the canvas.
Frank: That makes sense, but how do we access the values in the form if  it is all client side?
Now that we know how to make rectangles, we can use that.
TweetShirt: the Big Picture Before we jump into a big implementation job, let’s step back and look at the big picture.
We’re going to build this web app out of  a canvas element along with some form elements that act as the user interface, and behind the scenes we’re going to make everything happen with JavaScript and the canvas API.
The preview button will invoke JavaScript to do its thing and create the t-shirt preview.
JavaScript will do the heavy lifting of getting the user input from the form and drawing with the canvas API.
We'll use JavaScript to draw the canvas graphic for the t-shirt.
Here's the user interface, which is basically a form element.
At some point we're going to need some server-side support for ecommerce and fulfilling the t-shirts, but hey, we have to leave some work for your start-up! Don’t forget to send us a free t-shirt.
Your job is to play like you’re the browser and to render the interface.
Draw the web page as it will look with the form elements on the left.
Check your answer with our solution at the end of the chapter.
Assume you've used the interface to pick the values for your t-shirt.
First, let’s get the HTML in place Enough talk! Let’s build this thing.
Before we do anything else, we just need a simple HTML page.
Let's put all our JavaScript code in a separate file so it's a little easier to manage.
And this is the form that will hold all the controls for the tweetshirt app.
And we've left a little message for users on old browsers.
What else do you need to know to replace the CSS border on your canvas with a border drawn on the canvas using JavaScript? And, if you could, which method would you prefer (CSS versus JavaScript), and why?
Now, let’s add the <form> Okay, let’s now add the user interface so we can start writing some code to create t-shirts.
You’ve seen this code before, but we added some annotations just to make everything clear; as you type in the code, make sure you check out our annotations:
All this code goes in between the <form> tags you set up on the previous page.
Here’s where the user selects the background color for the tweet shirt design.
We’re using another selection control here for choosing circles or squares to customize the design.
The user can also choose neither (which should result in a plain background)
If you're used to forms, you might have noticed that this form doesn’t have an action attribute (which means the button won't do anything when it's clicked)
We’re going to handle all that in just a bit...
Time to get computational, with JavaScript Markup is great, but it’s the JavaScript that brings the TweetShirt web application together.
Right now, we want to take the baby step of  just putting random squares on the shirt.
But before we even get to that, we need to enable our preview button, so it calls a JavaScript function when you click it.
Start by getting the canvas element and asking for its 2d drawing context.
Now we need to see what shape you chose in the interface.
First we get the element with the id of “shape”
Then we find out which item is selected (squares or circles) by getting the index of the selected item, and assigning its value to the variable shape.
And if the value of shape is “squares”, then we need to draw some squares.
To draw each square we’re relying on a new function named drawSquare, which we’re going to have to write.
Notice that we’re passing both the canvas and the context to drawSquare.
You’ll see in a bit how we make use of those.
So now when the preview button is clicked, the previewHandler function is going to be called, and that’s our chance to update the canvas to represent the shirt the user is designing.
Add a click handler to this button so that when it is clicked (or touched on a mobile device), the function previewHandler is called.
Pseudo-code Magnets Use your pseudo-magical coding powers to arrange the pseudo code below.
We need to write the pseudo-code for the drawSquare function.
This function takes a canvas and context and draws one randomly sized square on the canvas.
Check your answer at the end of the chapter before you go on.
Q: How does the selectedIndex work? A: The selectedIndex property of a selection form control returns the number of the option you have chosen from the pulldown menu.
Every list of options is turned into an array and each option is in the array in order.
So, say you have an selection list with these options:
Now, you probably don’t want just the index; you want the value of the option at that index (in our case, “doughnut”)
To get the value of the option, you first use the index to get the element of the array; this returns an option object.
To get the value of that object, you use the value property, which returns the string in the value attribute of the option.
Writing the drawSquare function Now that you’ve done all the hard work of  figuring out the pseudo-code, let’s use what we already know to write drawSquare:
The width and height of the square (remember, on a square, those values are the same)
We’re going to make the squares a nice light blue using the fillStyle method, we'll look at this method more closely in a sec...
We’re using Math.random() to create random numbers for the width and the x,y position of the square.
We chose 40 as the largest square size so the squares don’t get too big.
How did we figure out what numbers to multiply each Math.random value by to get our square width and x, y position?  In the case of  the width of  the rectangle, we chose 40 because it’s a nice small size with respect to the canvas size.
Because this is a square, we used the same value for the height.
And, we chose the width and height of  the canvas as the basis for choosing x and y values so our square stays within the boundaries of  the canvas.
Here’s our function, which has two parameters: the canvas and the context.
Here we need a random width, and x and y position for the square.
The x & y coordinates are based on the width and height of the canvas.
We choose a random number between 0 and the width and height respectively.
Feel free to specify a value other than 40 in your own code!
The x, y coordinate is for the top left corner of the square.
Time for a test drive! Okay, after all that typing, let’s give all this code a test run.
Go ahead and open your TweetShirt index.html file in your browser.
Uh, wait a sec, if you keep pressing the preview button you get a LOT of squares.
Press your preview button a bunch of times and you’ll see something like this.
Why are we seeing the old squares and the new squares when we preview? This is actually kind of  a cool effect...
We want the new squares to replace the old squares each time we press preview (just like we’ll also want the new tweet to replace the old tweet when we get the tweets working, too)
The key here is to remember that we’re painting pixels on the canvas.
When you press preview, you’re getting the canvas and drawing squares on it.
Whatever is already on the canvas just gets painted right over with the new pixels!
You already know everything you need to know to fix this right now.
Get the selected background color from the “backgroundColor” select object.
Fill the background color of the canvas using fillStyle and fillRect, each time before we start drawing squares.
To make sure we see only new squares in the canvas each time we click preview, we need to fill the background of the canvas with the background color the user has selected from the “backgroundColor” select menu.
First, let’s implement a function to fill the canvas with that color.
Check your answer with our solution at the end of the chapter before you go on.
Hint: we want to fill the WHOLE canvas with the color!
Hint: What you get out of the selected option will be a string color you can use just like you used “lightblue” for the squares.
Do you ever see less than 20 squares? You might.
Why would this happen? What could you do to fix this problem? (After all, you don’t want customers cheated out of their 20 squares, do you?)
Add the new code to your tweetshirt.js file, reload your browser, select a background color, select squares, and click preview.
This time you should see only new squares each time you preview.
Now we get only the new squares for each preview.
We’re going to add that as the very first thing we do so we get a nice, clean background before we start adding anything else to the canvas.
Q: I was expecting we’d set the background color of the squares and the canvas by passing in a color value to fillRect.
This is a little different from how you might be used to thinking of things.
Remember, the context is an object that controls access to the canvas.
So anything you fill with color (like with fillRect) after setting the fillStyle will use that color, until you change the color again by setting fillStyle to a different color.
Q: Why does the color need quotes around it, when the property values in CSS don’t? I don’t use quotes when I’m setting the background-color of an element, for instance.
A: Well, CSS is a different language from JavaScript, and CSS doesn’t expect quotes.
But if you don’t use quotes around the color, JavaScript will think that the color name is a variable instead of a string, and will try to use the value of the variable for the color.
You’ll know you’ve made this mistake because you’ll get a JavaScript error that says something like “Can’t find variable: black”
Don’t worry, we all make that mistake at least once.
A: The x, y and width of the squares are all random.
Or you might generate two squares of exactly the same size and location.
But for this application it’s all part of the randomness, so we think it’s fine.
For another application we might need to ensure this doesn’t happen.
A JavaScript CloseUp Let’s take a closer look at fillStyle since this is the first time you’ve seen it.
Just like fillRect, fillStyle is something we control through the context.
But unlike fillRect, fillStyle is a property, not a method.
You can use the same color formats you use in CSS.
Note that unlike in CSS, you must put quotes around the value if you’re not using a variable.
Jim: I know, and I’m impressed with how little code this took.
Just think if  we did this the old, server-side way, we’d still be getting our server up.
Frank: And it seems like we’re in a good position to knock out the circles in the design too; after all, they are just like the squares.
Jim: I agree, where’s Judy? She probably knows the API for the circles already.
Then again, it’s probably just a matter of  calling the fillCircle method.
Frank: Sounds right to me! Who needs Judy, we’ve got this!
Not bad, you know this is already starting to look like the boss’s design.
Frank: I don’t know what’s going on, I’ve double checked everything, but, no matter what I do, when I call fillCircle, I get nothing on the canvas.
Frank: What do you mean by my method? I don’t have one, I’m using the method in the canvas’s API directly.
Frank: Er, I assumed it did because we have a fillRect...
Judy: Yeah, well you know what that ass-u-me stuff  gets us.
Come on, pull up a browser—you can always find the API at: http://dev.w3.org/html5/2dcontext/
Jim, entering: Judy, did Frank tell you about how we nailed the circle?
Before digging into circles, we need to talk about paths and arcs.
If  we want to draw a triangle on the canvas, there’s no fillTriangle method, but we can create a triangle anyway by first creating a path in the shape of  a triangle, and then stroking over it to draw a triangle on the canvas.
What does that mean? Well, say you wanted to be really careful drawing on the canvas, you might take a pencil and trace a light shape (let’s just call it a path) on the canvas.
You trace it so lightly that only you can see it.
Then, after you’re satisfied with your path, you take a pen (with a thickness and color of  your choosing) and you use that to stroke over the path so everyone can see your triangle (or whatever shape you traced with the pencil)
That’s just how drawing arbitary shapes with lines works on the canvas.
We use the beginPath method to tell the canvas we’re starting a new path.
The lineTo method traces a path from the pencil’s current location to another point on the canvas.
We use the moveTo method to move the “pencil” to a specific point on the canvas.
You can think of the pencil as being put down at this point.
So you have a path! Now what? You use the path to draw lines and fill in your shape with color, of course! Go ahead and create a simple HTML5 page with a canvas element and type in all the code so far.
We’ve got the first side of the triangle, now we need two more.
We’re almost there! All we need to do now is to trace one more line to finish the triangle.
And to do that, we’re just going to close the path with the closePath method.
There’s our triangle! But remember, it is still only a path, so it’s not visible to the user, yet.
Go ahead and annotate this with what you think it does.
Were you right? Check your answers at the end of the chapter.
Do you happen to remember from geometry class that the circumference of a circle = 2 R? Just put that in the back of your mind for a sec...
Just to keep us on track here, I thought we were trying to draw.
We’re about to show you how to trace a circle as a path.
And, once you know how to do that, you can make any kind of circle you like.
You know how to start a path, right? Like we’ve been doing, you use this code:
Now, what we haven’t told you yet is there is another method in the context object named arc:
What does that do? Ah, we’ll spend the next page or so finding out the details.
But, as you might expect, it traces a path along a circle.
This is the x, y position of the center of your circle.
Let’s dive right into the arc method and check out its parameters.
The whole point of  the arc method is to specify how we want to trace a path along a circle.
The start angle is the angle between the x axis and the starting point of the arc.
The end angle is the angle between the x-axis and the stopping point of our arc.
If direction is true, we go counterclockwise; if it’s false, we go clockwise.
If direction is true, we trace the arc going counter-clockwise.
An angle measured going counterclockwise from the x-axis is negative.
An angle measured going clockwise from the x-axis is positive.
Angles can be measured in the negative direction (counterclockwise from the x-axis) or in the positive direction (clockwise from the x-axis)
And, the path you want to trace is just 1/4 of the circle, like this:
It just converts degrees (which we’re used to), into radians (which the context seems to prefer)
Now let’s create an arc method call that traces this path:
Finally, we’re tracing the arc in a counterclockwise direction, so we use true.4
The end angle is the angle between the x-axis and the stopping point of  our arc.
Note that if  we’d measured in the negative, or counterclockwise direction instead, our end angle would be -90 degrees.
Notice we're measuring the end angle going clockwise from the x-axis, so the end angle is positive.
The only problem is, we think in degrees, but the canvas context thinks in radians.
Use this function whenever you want to think in degrees, but get radians for drawing an arc.
Or, if  for some reason you’d rather not do that in your head, here’s a handy function that will do the work for you:
Annotate this circle with all the arguments and then draw the path this method call creates.
Hint: what is left in the pie after eating this?
You might remember seeing this briefly in the Geolocation chapter.
Now that you know how to draw circles, it’s time to get back to TweetShirt and add a new function, drawCircle.
We want to draw 20 random circles, just like we did for squares.
To draw those circles we need to first determine that the user has selected circles from the shape menu.
Edit your tweetshirt.js file and add the new code below.
This code looks almost identical to the code to test for squares.
If the user has chosen circles rather than squares then we draw 20 circles with the drawCircle function (which we now need to write)
We’re passing the canvas and context to the drawCircle function, just like we did with drawSquares.
What start angle and end angle do you use to draw a complete circle?
What direction do you use: counterclockwise or clockwise? Does it matter?
Remember, here we just need to draw one random circle.
The other code is already handling calling this function 20 times.
Here’s what we see (given these are random circles—yours will look a little different):
Just like we did for squares, we’re using 40 for the maximum radius size to keep our circles from getting too big.
And, again, the x & y coordinates of the center of the circle are based on the width and height of the canvas.
We choose random numbers between 0 and the width and height respectively.
We’re using “lightblue” as our fillStyle again, and then filling the path with context.fill()
Whew! That was a fun set of pages we just went through.
We don’t know about you, but we’re ready for some cookies.
How about taking a short cookie break? But, don’t think we aren’t going to give you something fun to do while you’re having them (check on the exercise to the right)
So, sit back, have a little break, and nibble on this while you give your brain and stomach something else to do for a bit.
Then come on back and we’ll finish off the TweetShirt code!
You might want to make some real chocolate chip cookie smiley faces while you’re at it...
To the right you’ll find a smiley face (or a chocolate chip cookie smiley face if you prefer)
The code below to draw the smiley face is almost done; we just need your help to finish it up.
With all the work you’ve done in this chapter, you’ve got all you need to complete this.
You can always check your answer at the end of the chapter when you’re finished.
You’re back, you’re rested, refreshed, and we’re on the home stretch to getting this start-up off  the ground.
When you look at all the work we’ve done, all we really have left is to display the tweets and the other text in the canvas preview.
Now, to get a get a tweet on the canvas we first need some of  your recent tweets to choose from, and we’re going to use JSONP to do it.
If  you remember Chapter 6, you already know how to do this.
If  you need to, go back to Chapter 6 for a quick refresher.
Type this all on one line in your text file (it’s too long to fit on one line in the book)
We’re asking for a user timeline which will give us recent statuses.
Speaking of goodies, remember that JSONP code we baked in Chapter 6? It’s.
Imagine your head element here, and your form here (we wanted to save a few trees)
Here's our JSONP call; this works by retrieving the JSON created by calling the Twitter URL, and then passing that JSON to the callback function (which we'll define in just a sec)
Change this to your username, or someone else's if you like.
We’re going to ask for the most recent status updates of  a specified user.
Implement a callback to get the tweets that Twitter sends back.
And here’s the callback function where the JSON will be passed back.
Getting your tweets We’ve already done the hard work, which is getting the tweets from Twitter.
Just to review again: when the callback function is called (in our case, the function updateTweets), Twitter hands it a response that contains JSON formatted tweets.
Edit your tweetshirt.js file and add the updateTweets function at the bottom.
Which is passed a response containing the tweets from the user timeline as an array of tweets.
We grab a reference to the tweets selection from the form.
And set its value to the same text, only we've processed the string a little to replace double quotes with single quotes (so we can avoid formatting issues in the HTML).We then take the new option, and add it to the tweet selection in the form.And, finally, we make sure the first tweet is the selected tweet by setting the selectedIndex of the <select> to 0 (the first option element contained within it)
After we've done this for each tweet, we have a <select> element that contains an option for each tweet.
Each tweet has a ton of data in it; the piece we’re going to use is the text of the tweet.
Make sure you’ve got all the code added to tweetshirt.js and index.html.
We need to nail down all the text we need to display.
We’ve got the two messages: the “I saw this tweet” and “and all I got was this lousy t-shirt!” and also the tweet the user has chosen to display.
Now we’ve got to figure out how to display it, not to mention apply some styling to the text.
Frank: I’m assuming we can throw some text in the canvas and then apply some CSS to it?
The canvas is a drawing area, I don’t think we can place text and style it, we have to draw text onto the canvas.
Jim: Well, this time I learned my lesson and I’ve already checked out the API for text.
Joe: Good, I haven’t looked yet; how does it look?
Jim: Remember that arc method? We have to custom draw all our text using that.
Frank: Are you kidding me? I guess I’ll be working all weekend now.
Jim: Gotcha! No seriously, there is a fillText method that takes the text to draw on the canvas along with the x, y position of  where to draw it.
What about the differences in style? If  I remember the comp, the tweet text is italic, and the rest of  the text is bold.
Jim: We need to look a bit more, there are various methods for setting alignment and fonts and fill styles, but I’m not not quite sure how to use them.
Frank:  And to think maybe I could have helped, but no CSS?
Jim: Sorry, like Joe said, this is an API for drawing onto a canvas, it doesn’t make use of HTML or CSS styling in any way.
Joe: Well, lets pull up the API and take a look and then we can try getting the “I saw a tweet” text on the canvas.
Come on Frank, join us, this can’t be too bad and I’m sure we can use your knowledge of  fonts, styles and all that.
And then we draw “and all I got was this lousy t-shirt” at the bottom right below the text of the tweet.
We need to draw the text “I saw this tweet” above the actual tweet, up at the top-left corner.
We’ll grab the foreground color selection to use as the color of the text.
Now let’s work through why it’s set up this way.
Remember that canvas is designed to give you a way to present graphics within the browser.
So while you usually think of text—and certainly tweets—as content, in this case, you’ve got to think of  it as presentation.
Like an artist who uses letterforms as part of  her artwork, you’re using tweets as part of  the artwork of  your t-shirt design.
One of  the main reasons that separating presentation and content is a good idea is so that the browser can be smart about how it presents the content in different situations: for example, an article from a news web site is presented one way on a big screen and a different way on your phone.
For our t-shirt design, we want what’s in the canvas to be more like an image: it should be displayed the same way no matter how you are viewing it.
So, let’s get the text on the canvas and get this start-up rolling!
One thing that confuses me about drawing text in canvas is that we’ve always stressed that content is separate from presentation.
What I mean is, they don’t seem to be separate.
Get the selected tweet from the tweets menu // Draw the tweet.
Hint: we want to position the text in the bottom-right corner.
Hint: We’ll be using an italic serif font for the tweet, but we want this one to be bold sans-serif.
For right now, we're just putting comments in where the code to draw the tweet text will be.
Hint: This is the x, y position for the “I saw this tweet” text.
Code Magnets It’s time for your first experiment with canvas text.
Below we’ve started the code for drawText, the method we’re going to call to draw all the text onto the preview canvas.
See if you can finish up the code to draw “I saw this tweet” and “and all I got was this lousy t-shirt!” on the canvas, we’ll save drawing the actual tweet for later.
Make sure you check your answer with the solution at the end of the chapter before you go on.
Canvas Text Up Close Now that you’ve had a chance to draw your first text in the canvas, it’s time to take a closer look at the text methods and properties available in the canvas API.
As you found out in the exercise this is a fairly low-level API—you have to tell the context what text to draw, what position to use, and what font to use.
In this Up Close segment we’ll examine the alignment, font, and baseline properties, and the fill and stroke methods in detail so you’ll be a canvas text expert by the time you turn the page!
Start and end mean the same as left and right in leftto-right languages, like English, and are reversed in.
Just like for rectangles, we can stroke and fill text.
We provide the text to draw, the x, y position and an optional parameter, maxwidth, that causes the text to scale if  it is wider than maxwidth.
If the text gets wider than 200, it is automatically scaled to fit.
The textBaseline property sets the alignment points in the font and determines the line your letters sit on.
To see how the line affects the text, try drawing a line at the same x, y point you draw a text.
Possible values are: top, hanging, middle, alphabetic, ideographic, and bottom.
Experiment with the different values to find what you need (and check out the spec for more details)
To set the font properties, you can use the same format you’re used.
Giving drawText a spin Now that you’ve got more of  the API in your head, go ahead and get the code you created in the Magnet Code exercise typed in— here it is with the magnets nicely translated to code:
This is the last step before we see the TweetShirt!
We’ve got sans-serif text in bold at the correct location.
We're going to put the code that draws the tweet text here in a sec...
After you’ve got it typed in, update your previewHandler function to call the drawText function, and give it a test drive by loading it in your browser.
How does it compare to yours? If  you haven’t already typed your code in, go ahead and type in the code below (or your version if  you prefer), and reload your index.html.
We’ll show you our test drive on the next page.
Set the font to italic serif, just a tad bigger...
We don’t need to align the tweet text to the left; the alignment is still set from up here.
Guys, I hate to burst your bubble, but you’re not done yet.
You’re supposed to put an image of the Twitter bird on the t-shirt too!
We’ve put an image named twitterBird.png in the TweetShirt folder.
To get that into the canvas we first need a JavaScript image object.
And set its source to be the image of the Twitter bird.
The next part should feel pretty natural by now; we need to draw the image on the canvas using a context method named, you guessed it, drawImage.
And we specify the x, y location, width and height.
Uh guys, I sorta did a little work on my own and I have the image code already for.
There’s one other thing to know about images: they don’t always load immediately, so you need to make sure that the image has fully loaded beford you draw it.
How do we wait until something is loaded before we take action? We implement an onload handler:
Here, we’re saying: when the image has loaded, then execute this function.
We draw the image to the canvas using the context’s drawImage method.
Yet another test drive Double check your code and get in another test drive! Wow, this is really looking polished now.
Give it a few tries; try it with circles or squares.
You’ll notice that we used a png with a transparent background so that the circles and squares work if  they’re behind the bird.
This rocks and we’re well on our way to developing a cool app.
But like we said, we’re counting on you to implement the ecommerce and fulfillment and all that.
See if you can put together the drawBird function from all the pieces Judy gave us.
The drawBird function takes a canvas and context, and draws the bird onto the canvas.
We’ve written the method declaration and the first line for you.
You’ll find our solution at the end of the chapter.
Make sure you add a call to the drawBird function in the previewHandler function.
You used it when you added an image to the canvas.
The JavaScript Image constructor is arguably a more direct way to create images from JavaScript and gives us a little more control over the loading process (like giving us the ability to easily use a handler to be notified when the image is loaded)
So, our goal here is to create an image, and to make sure it’s loaded before we draw it on the canvas.
The Image object gives us the best path to doing that.
Anything more complicated than basic shapes must be really difficult to do.
A: There’s no doubt about it, you’re writing graphics code when you’re programming canvas.
Unlike the browser, which takes care of a lot of details for you, like flowing elements onto the page so you don’t have to worry about drawing everything yourself, you have to tell canvas where to put everything.
Canvas gives you a lot of power to do almost any kind of graphics (currently, 2D) you can imagine, however.
And we’re in early days of canvas; it’s likely that libraries of JavaScript code will make it easier to write graphics for canvas in the future.
Q: I noticed that for very long tweets, the tweet just disappears off the edge of the canvas.
A: One way to fix it is to check to see how many characters the tweet contains and if it’s greater than a certain number, split it into multiple lines and draw each line separately onto the canvas.
A: The Twitter API that we’re using to get tweets as JSON converts characters that people post in their tweets to HTML entities.
If we were displaying the tweets in HTML, those entities would be displayed in the browser as the characters you’re meant to see, just like entities you add to your own page are displayed correctly in the browser.
However, as you saw, in the canvas they don’t look so great.
Unfortunately, right now there is no function in the canvas API that will convert those entities back to their characters, so you’d have to do that yourself.
Q: Can you do anything fancy in canvas, like put dropshadows on text or shapes?
A: Yes! There are lots of fancy things you can do with canvas and dropshadows is certainly one of them.
As you’d expect, you create a shadow by setting properties on the context.
Other things you can do with canvas you might want to check into are things like drawing gradients, rotating shapes, and putting rounded corners on rectangles.
Q: What other interesting things can I do with canvas? A: A lot! We’ll cover a couple more ways to use canvas in later chapters, and you’ll definitely want to check out the canvas API for more: http://dev.w3.org/html5/2dcontext/
Q: Is all this canvas stuff going to work on my mobile device too? Or am I going to have to rewrite it for mobile users?
The nice thing about canvas is, because you’re drawing with raw pixels, what you draw will look the same everywhere (or, everywhere on browsers that support canvas)
Fortunately, modern smart devices like Android, iPhone and iPad all have sophisticated browsers that have most of the functionality of desktop browsers.
The canvas is really meant to be a simple drawing surface.
When you draw a shape, the canvas just sees it as pixels.
The canvas isn’t aware of  the specifics of  what you’re drawing, and it doesn’t keep track of any shapes.
It simply creates the pixels you ask it to create.
If  you’d like to treat the rectangles in your canvas as a set of  objects that you can save and maybe even move or manipulate, you need to maintain the information about the shapes and paths as you create them on the canvas.
For instance, if  you’re keeping track of  the random circles we’ve drawn on the TweetShirt canvas, you’d need to save the x, y location, the circle radius and color in order to be able to recreate that circle.
I was thinking it would be great to be able to save a t-shirt and the location.
Congrats team, you did it! And it even works on my iPad, so this is perfect for customers on the go.
The TweetShirt founder also wanted to pass along that she’s happy to see the web app works on her iPad and iPhone too! If she’s happy, we’re happy.
Canvas is an element you place in your page to create a drawing space.
The canvas has no default style or content until you provide it (so you won’t see it on the page until you draw something in it or add a border with CSS)
You can have more than one canvas on your page.
Of course, you’ll need to give each one a unique id to access each using JavaScript.
To specify the size of the canvas element, use the width and height attributes on the element.
To draw on the canvas, you first need to create a context.
Currently, a 2D context is your only option, although other context types may exist in the future.
You’ll be able to choose from more than one kind of interface to draw on a canvas.
You access the canvas by using context properties and methods.
To draw a rectangle in the canvas, use the context.
To create a rectangle outline, use strokeRect instead of fillRect.
Use fillStyle and strokeStyle to change the default fill and stroke color, which is black.
Remember to put quotes around the value of the fillStyle.
To draw a circle in canvas, you need to draw an arc.
To create arbitrary shapes or arcs, you first need to create a path.
A path is a invisible line or shape you create that defines a line or area on the canvas.
You can’t see the path until you stroke or fill it.
To create a triangle, create a path using beginPath, then use moveTo and lineTo to draw the path.
To draw a circle, create an arc that is 360 degrees.
Angles are specified in canvas using radians, not degrees, so you need to convert from degrees to radians to specify your start and end angles.
When you draw text in canvas, you need to specify the position, style, and other properties using context  properties.
When you set a context property, it applies to all the drawing that follows until you change the property again.
For example, changing the fillStyle will affect the color of shapes and text you draw after setting the fillStyle.
Add an image to your canvas with the drawImage method.
To add an image, you first need to create an image object and make sure it’s completely loaded.
Drawing on canvas is like doing “bitmap” drawing in graphics programs.
Well, who would have guessed? I guess we’ve got some interesting things in store ahead from the partnership that is <canvas>+<video>! The fallout from this revelation can be expected to continue well into the video chapter, when the budding relationship will be exposed to public scrutiny.
Local resident Heidi Musgrove was shocked to learn the truth about the two elements.
In the meantime, cement your new canvas knowledge with a quick crossword and perhaps a cup of tea.
We _______ aligned the “and all I got was this lousy t-shirt!” text.
The property we set to fill a shape with a color.
You can tell when something has finished loading using an ________ handler.
The non-existent context method Jim tried to use to create circles.
Want to know which option is selected? You might need this property.
The property we set to fill a shape with a color.
Notice that for each menu option value, we get the select element the option is contained in, find the selected option with the selectedIndex property, and the get the value of the selected option.
Remember that the value of the option may be different than the text you see in the controls; in our case, it's just the case of the first letters of the text.
Look at the HTML again to see the values of the options if you need to.
Assume you've used the interface to pick the values for your t-shirt.
Pseudo-code Magnets Solution Use your pseudo-magical coding powers to arrange the pseudo code below.
We need to write the pseudo-code for the drawSquare function.
This function takes a canvas and context and draws one randomly sized square on the canvas.
All we’re doing to create a background color is drawing a rectangle that fills the entire canvas with a color.
To make sure we see only new squares in the canvas each time we click preview, we need to fill the background of the canvas with the background color the user has selected from the “backgroundColor” select menu.
First, let’s implement a function to fill the canvas with that color.
So you have a path! Now what? You use the path to draw lines and fill in your shape with color, of course! Go ahead and create a simple HTML5 page with a canvas element and type in all the code so far.
Set the width of line to draw over the path.
Set the color to fill the triangle with to red.
Time to practice your new arc and path drawing skills to create a smiley face.
Fill in the blanks below with the code you need to complete the smiley face.
We’ve given you some hints about where the eyes, nose and mouth should go in the diagram.
We stroke the path so we get the outline of the circle (but no fill)
We use counterclockwise (true) for the direction (it doesn’t matter for a complete circle)
The direction is clockwise (false) because we want the mouth in a smile.
Remember, the starting point is to the right of the mouth center.
Hint: This is the x, y position for the “I saw this tweet” text.
Hint: we want to position the text in the bottom-right corner.
Hint: We’ll be using an italic serif font for the tweet, but we want this one to be bold Helvetica.
For right now, we're just putting comments in where the code to draw the tweet text will be.
Code Magnets Solution It’s time for your first experiment with canvas text.
Below we’ve started the code for drawText, the method we’re going to call to draw all the text onto the preview canvas.
See if you can finish up the code to draw “I saw this tweet” and “and all I got was this lousy t-shirt!” on the canvas, we’ll save drawing the actual tweet for later.
See if you can piece together the drawBird function from all the pieces Judy gave us.
The drawBird function takes a canvas and context, and draws the bird onto the canvas.
We’ve written the method declaration and the first line for you.
Don’t forget to add a call to drawBird in your previewHandler!
We _______ aligned the “and all I got was this lousy t-shirt!” text.
The property we set to fill a shape with a color.
You can tell when something has finished loading using an ________ handler.
The non-existent context method Jim tried to use to create circles.
Want to know which option is selected? You might need this property.
So, you’ve made the perfect TweetShirt preview—now what? Well, if  you really want to make a t-shirt out of  your design, you can! How? Here’s a little extra bonus to add to your code—a TweetShirt “easter egg” if  you will—that will make an image out of  your design, all ready for you to upload to a site that will print an image on a t-shirt for you (there are plenty of  them on the Web)
How can we do this? It’s simple! We can use the toDataURL method of  the canvas object.
We’ve made a new function, makeImage, to add this functionality.
And add an event handler so that when you click on the canvas, it creates the image.We set the browser window.
We’re asking canvas to create a png image of the pixels drawn on the canvas.
Call makeImage to add the click event handler to the canvas, and your easter egg is complete.
Some browsers won’t let you grab an image from the canvas if you’re running the code from file://
Run this code from localhost:// or a hosted server if you want it to work across all browsers.
After all, video is now a first-class member of the HTML family—just throw a <video> element in your page.
Come on, you’re going to be amazed what you can do with.
What else would you expect in Webville? But that’s just the content, on the technology side would you expect anything less than HTML5 video?
Of  course, that’s just the vision, we have to build Webville TV if  we want it to be a reality.
Over the next few pages we’re going to build Webville TV from the ground up using HTML5 markup, the video element and a little JavaScript here and there.
Hey this is Chapter 8, no lollygagging around! Let’s jump right in and create some HTML:
Don't forget the CSS file to make it all look nice.
Just a little image to help make it look like a television set.
You need to make sure of  a few things here: first, make sure you’ve got the code above typed into a file named webvilletv.html; second, make sure you’ve downloaded the CSS file, and finally, make sure you’ve also downloaded the video files and placed them in a directory named video.
After all that, load the page and sit back and watch.
Notice if you hover your mouse over the screen you get a set of controls, which you can use to pause, play, set the audio or seek around in the video.
For instance if  you are on Safari, H.264 format is favored, if  you’re on Chrome, WebM is favored, and so on.
If  you’re using another browser then look in your video directory and you’ll see three different types of  video, with three different file extensions: “.mp4”, “.ogv”, and “.webm” (we’ll talk more about what these mean in a bit)
For Google Chrome, use the .webm format by replacing your src attribute with:
If  you’re using Firefox or Opera, then replace your src attribute with:
I’ve triple checked the code and I have the video in the right.
By the time you read this, these formats could be more widely supported across all browsers.
Always check the Web to see the latest on this unfolding topic.
And we’ll come back for more on this topic shortly.
At this point you’ve got a video up and playing on your page, but before we move on, let’s step back and look at that video element we used in our markup:
Good Video Etiquette: The autoplay property While autoplay may be the best thing for sites like YouTube and Vimeo (or WebvilleTV for that matter), think twice before setting it in your <video> tag.
Often, users want to participate in the decision of whether or not video is played when they load your page.
If present, the controls attribute causes the player to supply controls for controlling the video and audio playback.
The autoplay attribute causes the video to start playback upon page load.
The width and height of the video in the page.
A poster image to show when the movie is not playing.
An id for the video element so that we can access it later from JavaScript.
The src attribute is just like the <img> element’s src—it is a URL that tells the video element where to find the source file.
The width and height attributes set the width and height of  the video display area (also known as the “viewport”)
If  you specify a poster, the poster image will be scaled to the width and height you specify.
You should try to match the native dimensions of  the video if  you want the best performance (so the browser doesn’t have to scale in real time)
The autoplay boolean attribute tells the browser to start playing the video as soon as it has enough data.
For the videos we’re demoing with, you’ll probably see them start to play almost immediately.
The boolean attribute preload is typically used for fine-grained control over how video loads for optimization purposes.
Most of  the time, the browser chooses how much video to load, based on things like whether autoplay is set and the user’s bandwidth.
You can override this by setting preload to none (none of the video is downloaded until the user “plays”), metadata (the video metadata is downloaded, but no video content), and auto to let the browser make the decision.
The browser will typically display one frame of  the video as a “poster” image to represent the video.
If  you remove the autoplay attribute you’ll see this image displayed before you click play.
It’s up to the browser to pick which frame to show; often, the browser will just show the first frame of  the video...
If  you want to show a specific image, then it’s up to you to create an image to display, and specify it by using the poster attribute.
Another boolean attribute, loop automatically restarts the video after it finishes playing.
Let’s look more closely at some of  the more important video attributes:
Yes, the controls in each browser are different with HTML video.
The look and feel of  your controls is dictated by those who implement the browsers.
They do tend to look different in different browsers and operating systems.
In some cases, for instance, on a tablet, they have to look and behave differently because the device just works differently (and it’s a good thing that’s already taken care of for you)
That said, we understand; across, say, desktop browsers, it would be nice to have consistent controls, but that isn’t a formal part of  the HTML5 spec, and in some cases, a method that works on one OS might clash with another operating system’s UI guidelines.
So, just know that the controls may differ, and if  you really feel motivated, you can implement custom controls for your apps.
We wish everything was as neat and tidy as the video element and its attributes, but as it turns out, video formats are a bit of  a mess on the Web.
What’s a video format? Think about it this way: a video file contains two parts, a video part and an audio part, and each part is encoded (to reduce size and to allow it to be played back more efficiently) using a specific encoding type.
And to make all this even more complicated, the file that holds the video and audio encoding (which is known as a container) has its own format with its own name.
Anyway, while it might be a big, happy world if  all browser makers agreed on a single format to use across the Web, well, that just doesn’t seem to be in the cards for a number of  technical, political, and philosophical reasons.
But rather than open that debate here, we’re just going to make sure you’re reasonably educated on the topic so you can make your own decisions about how to support your audience.
Let’s take a look at the popular encodings out there; right now there are three contenders trying to rule the (Web) world...
It is the browser implementation that determines what formats are actually supported.
Your mileage may vary by the time you read this book, as favored encodings tend to change over time.
Three different video formats in use across the major browsers.
VP8, the contender, backed by Google, supported by others and coming on strong...
There is more than one kind of H.264; each is known as a “profile.”
WebM was designed by Google to work with VP8 encoded videos.
Video encoded with Theora is usually contained in an Ogg file, with the .ogv file extension.
The reality is, if  you’re going to be serving content to a wide spectrum of  users you’re going to have to supply more than one format.
On the other hand, if  all you care about is, say, the Apple iPad, you may be able to get away with just one.
Today we have three main contenders—let’s have a look at them:
So we know it’s a messy world with respect to video format, but what to do? Depending on your audience you may decide to provide just one format of  your video, or several.
The container is the file format that’s used to package up the video, audio and metadata information.
The codec is the software used to encode and decode a specific encoding of video or audio.
The browser decides what video it can decode and not all browser makers agree, so if you want to support everyone, you need multiple encodings.
This is what the browser shows if it doesn’t support video.
Notice we’re removing the src attribute from the <video> tag...
Telling the browser the location of  your source files gives it a selection of different versions to choose from, however the browser has to do some detective work before it can truly determine if  a file is playable.
You can help your browser even more by giving it more information about the MIME type and (optionally) codecs of  your video files:
If  and when you do your own video encoding, you’ll need to know more about the various options for the type parameters to use in your source element.
You can get a lot more information on type parameters at http://wiki.whatwg.org/wiki/Video_type_parameters.
The file you use in the src is actually a container for the actual video (and audio and some metadata)
The codecs parameter specifies which codecs were used for encoding the video and audio to create the encoded video file.
If you don’t know the codecs parameters, then you can leave them off and just use the MIME type.
It will be a little less efficient, but most of the time, that's okay.
Type is an optional attribute that is a hint to the browser to help it figure out if it can play this kind of file.
How to be even more specific with your video formats.
We can update our <source> elements to include the type information for all three types of  video we have, like this:
So, to get those right, you’ll need to know more details about how your video was encoded.
This means we need to use single quotes around the type attribute.
Q: Is there any hope of getting to one container format or codec type in the next few years? Isn’t this why we have standards?
A: There probably won’t be one encoding to rule them all anytime soon—as we said earlier, this topic intersects with a whole host of issues including companies wanting to control their own destiny in the video space to a complex set of intellectual property issues.
So, while in principle HTML5 supports (or is at least agnostic to) all of these formats, it is really up to the browser makers to decide what they do and don't support.
Keep an eye on this topic if video is important to you; it will surely be an interesting one to watch over the next few years as this is all sorted out.
And, as always, keep in mind what your audience needs and make sure you’re doing what you can to support them.
Q: If I want to encode my own video, where do I start?
A: There are a variety of video capture and encoding programs out there, and which one you choose is really going to depend on what kind of video you’re capturing and how you want to use the end result.
Entire books have been written on video encoding, so be prepared to enter a world of all new acronyms and technology.
If you’re getting into serious video work with Final Cut Pro or Adobe Premiere, these software programs include their own production tools.
And, finally, if you are delivering your videos from a Content Delivery Network (CDN), many CDN companies also offer encoding services.
So you’ve got a wide variety of choices depending on your needs.
Q: Can I play my video back fullscreen? I am surprised there isn't a property for this in the API.
A: That functionality hasn’t yet been standardized, although you’ll find ways to do it with some of the browsers if you search the Web.
Some of the browsers supply a fullscreen control (for instance, on tablets) that give the video element this capability.
Also note that once you’ve got a way to go fullscreen, what you can do with the video, other than basic playback, may be limited for security reasons (just as it is with plug-in video solutions today)
Q: What about the volume of my video? Can I use the API to control the volume level?
Just use your video object to set this at any time: video.volume = 0.9;
I think Flash video is still important and I want to make sure I have a fallback if my users’ browsers don’t.
There are techniques for falling back to another video player if  your preferred one (whether that be HTML5 or Flash or another) isn’t supported.
Obviously this is an area that is changing fast, so please take a look on the Web (which is updated a lot more often than a book) to make sure you’re using the latest and greatest techniques.
You’ll also find ways to make HTML5 the fallback rather than Flash if  you prefer to give Flash video priority.
As you can see, you can do a lot using markup and the <video> element.
But the <video> element also exposes a rich API that you can use to implement all kinds of interesting video behaviors and experiences.
Here’s a quick summary of  some of  the methods, properties and events of  the <video> element you might be interested in (and check the spec for a comprehensive list):
And these are all events you can handle if you want by adding event handlers that are called when the event you’re listening for occurs.
A little content “programming” on Webville TV So far we’ve got one single video up and running on Webville TV.
What we’d really like is a programming schedule that serves up a playlist of  videos.
Let’s say we want to do this on Webville TV:
Show a little preshow to the audience, you know, the Coke and popcorn ads, the audience etiquette, and so on...
Show our first feature, titled Are you Popular? Trust us, you'll enjoy it.
And then show our featured presentation, Destination Earth, presented in full technicolor.
Created by the American Petroleum Institute, what on earth could be their message? Watch and find out.
If you were on a desert island and had to implement a playlist with only the browser, the <video> element, the src property, the load and play methods, and the ended event, how would you do it (you can use any JavaScript data types you like):
Just a hint: the ended event happens when a video reaches the end and stops playing.
Like any event, you can have a handler called when this happens.
If you were on a desert island and had to implement a playlist with only the browser, the <video> element, the src property, the load and play methods, and the ended event, how would you do it (you can use any JavaScript data types you like)?  Here’s our solution:
Every time a video finishes playing the ended event occurs...
When the page loads we set up a playlist array, start the first video playing, and set up an event handler for when it stops.
When we get to the end of our playlist we can either stop, or loop around to the first video.
Here’s how we’re going to store the playlist, as an array.
Now we’re going to use JavaScript and the video API to implement the Webville TV playlist.
Let’s start by adding a link to a JavaScript file in webvilletv.html; just add this into the <head> element:
Now, create a new file webvilletv.js, and let’s define a few global variables and a function that will be called when the page is fully loaded:
First let’s define a variable to keep track of which video we’re playing; we’ll name this position.
And we need a variable to hold the video playlist array.
And also a variable to hold a reference to the video element.
Yes, this looks different than what we’re used to—hold on one sec, we’ll talk about this on the next page.
We’re removing the autoplay and src attributes from the <video> tag.
Also remove any <source> elements you might have been experimenting with.
Now we just need to write the handler for the video’s ended event.
This handler is going to be called whenever the video player hits the end of  the current video file.
Here’s how we write the nextVideo function (add it to webvilletv.js):
And if we hit the end of the list, we’ll just loop back around by setting the position to zero again.
Now let’s set the source of the player to the next video.
And finally, let’s load and start the new video playing.
So what’s up with that event handler code? In the past we’ve always just assigned a handler function to be called when an event occurs to a property (like onload or onclick) like this:
However, this time we’re going to do things a little differently.
Why? Because at the time we’re writing this, support for all the event properties on the video object are a little spotty.
That’s okay; that deficiency is also going to allow us to show you another way of registering for events: addEventListener, which is a general method supported by many objects for registering for various events.
You can use the addEventListener method to add an event handler.
Notice we don’t put an “on” before the event name like we do with handlers that we set with properties (like onload)
This is the function we’re going to call when the event happens.
The third parameter controls some advanced methods of getting events if it is set to true.
Unless you’re writing advanced code you’ll always set this to false.
Other than the fact the addEventListener method is a little more complicated than just adding a handler by setting the property to a function, it works pretty much the same way.
This is the object on which we’re listening for the event.
Note the handler won’t be called if the user pauses the video or if the video is looping (which you can do by setting the loop property)
When we were using multiple source tags we could count on the browser to sort through one or more video formats and decide if  it could play any of  them.
Now that we’re using code we’re just giving the video element a single option.
So how do we test to see what the browser supports to make sure we supply the best format?
We do that using the canPlayType method of  the video object.
There are three confidence levels: probably, maybe or no confidence.
Let’s take a closer look and then rework the playlist code to use this.
It works! But how do we decide which video format.
Are you scratching your head saying “probably? maybe? why doesn’t it return true or false?” Us too, but we’ll go through what this means in a sec...
Can you believe we’re ready for a test drive? All we did was use the API to set up a video to play, then we made sure we had an event listener ready to handle the situation when the video ends, which it does by starting the next video in the playlist.
Make sure you’ve got the changes made to your HTML file, type in your new JavaScript code and give it a test drive.
The video object provides a method canPlayType that can determine how likely you are to be able to play a video format.
The canPlayType method takes the same format description you used with the <source> tag and returns one of  three values: the empty string, “maybe” or “probably”
Notice that the browser is only confident beyond “maybe” if  you include the codec parameter in the type.
Also notice that there’s no “I’m absolutely sure” return value.
Even if  the browser knows it can play a type of  video, there’s still no guarantee it can play the actual video; for instance, if  the bitrate of  the video is too high, then the browser won’t be able to decode it.
We’re going to use canPlayType to determine which video format to use for Webville TV videos—you already know that we have three versions of  each file: MP4, WebM and Ogg, and depending on which browser you’re using, some will work and some won’t.
Let’s create a new function that returns the file extension (“.mp4”, “.webm” or “.ogv”) that is appropriate for your browser.
We’re going to use only the MIME types ("video/mp4", "video/webm" and "video/ogg") and not the codecs, so the only possible returns values are “maybe” and the empty string.
Here’s the code: We know we’ll only get “maybe” and.
We try each of the types, and return the corresponding file extension if the browser says, “Maybe I can support that.”
For most use cases, if you don’t know the codecs, it’s good enough to be “maybe” confident.
Empty string if the browser knows it can’t play the video.
The string “maybe” if the browser thinks it can possibly play the video.
The string “probably” if the browser is confident it can play the video.
If we pass just the short form of a format then we can only get “” or “maybe” as a result.
But if we pass the specific type with a codec, we might then get “”, “maybe” or “probably” as an answer.
Bitrate is the number of bits the browser has to process per unit of time to decode the video and display it correctly.
Now, we need to make some changes to the window.onload and nextVideo functions to use getFormatExtension.
First, we’ll remove the file extensions from the filenames in the playlist (because we’re going to figure those out using getFormatExtension instead), and then we’ll call getFormatExtension where we set the video.src property:
And concatenate the result of getFormatExtension to the filename for the new video src.
Add the canPlayType function and make the changes above, then reload your webvilletv.html file.
Work? Now your code is figuring out the best format.
If  you want to know which video the browser chose, try adding an alert to the window.onload and nextVideo functions; add it at the bottom of  each function, after video.play():
Same thing here; we concatenate the result of getFormatExtension to the video src.
These security restrictions will prevent you from doing some video+canvas operations if you loaded the web page as a file (i.e., your URL will show file:// rather than http://), like we’ll be doing in the rest of this chapter.
If you try, the app won't work and you'll get no indication of why.So, for this chapter, we recommend either using a different browser, or running your own server and running the examples from http://localhost.
Make sure your server is serving video files with the co rrect.
Whether you're using your own local server, or running an app using video.
If you're on a Mac or Linux using a local server, you're most likely using Apache.
This tells the server how to serve files with those file extensions.
You can install Apache on Windows, and do the same thing.
Q: If I’m programmatically setting the source of my video, and canPlayType says its a “maybe”, but yet the playback fails, how can I deal with that?
A: There are a couple of ways to approach this.
One is to catch the error and give the video object another source (we’ll talk about catching errors at the end of this chapter)
We’re not going to do that in this chapter, but it’s a way of giving your video object multiple choices and doing it through code, not markup, if you have advanced needs.
Building web apps is about markup, CSS, and JavaScript and its APIs.
At some point we have to treat you like a real developer.
In this book we’ve (hopefully) helped you every step of  the way—we’ve been there to catch you before you fall and to make sure that, in your code, your i’s were dotted and your t’s were crossed.
But, part of  being a real developer is jumping in, reading other peoples’ code, making out the forest despite all the trees, and working through the complexity of  how it all fits together.
Don’t worry, we’re still here and we’re going to tell you what everything does, but we want you to start to learn how to take code, read it, figure it out, and then augment it and alter it to do what you want it to do.
So, over the next three chapters, we want you to dig into these examples, study them, and get the code in your head.
What on earth is that? Oh, just the latest HTML5-enabled video messaging booth—a customer enters an enclosed video booth and shoots their own video message.
They can then enhance their video using real movie effects; there’s an old-time western sepia filter, a black & white film noir filter, and even an otherwordly sci-fi alien filter.
Then the customer can send their message to a friend.
We went ahead and commited us all to building the video interface and effects processing system for it.
The video booths won’t be available for another six weeks, and when they arrive the code has to be done.
So, in the meantime, we’re going to get a partly functional demo unit and a few test video files, and we’ll write all our code using those.
Then when we’re done, the Starring You folks can just point the code to the just-captured real video.
And of  course, remember that all this has to be done using HTML5
So, we hope you’re in, because we signed the contract!
Step in, cut a video, give it a style, and send it to your friends!
Below you’ll see our demo unit complete with a user interface.
What we’ve got is a video screen where users will see their video played back.
They’ll be able to apply a filter like “old-time western” or “sci-fi,” see how it looks, and when they’re happy, send it off  to a friend.
We don’t have record capability yet, so we’ve got the test videos to play with.
Our first job is going to be to wire everything up so the buttons work, and then write the video filters.
Before we get into all that, check out the interface:
Apply your favorite effect: old-time western (sepia), film noir (extra dark) or sci-fi (inverted video)
It’s got a video player right in the middle for viewing videos.
Unpacking the Demo Unit The demo unit just arrived via next day air and it’s time to unpack it.
It looks like we’ve got a functioning unit with some simple HTML markup & JavaScript written so far.
By the way, sit back; we’ve got a few pages of  factory code to look through, and then we’ll get cracking on the real code.
And all the styling is done for us! Here’s the CSS file.
And here’s the JavaScript file, we’re going to need to write most of this.
We’ll take an in-depth look, but it looks they’ve just written the code to control the buttons on the interface so far...
Here’s the main interface, we’ve got the console itself, which looks like it is divided into the video display and a dashboard, with three sets of buttons grouped into “effects”, “controls” and “videoSelection”
We’ll see how we tie into these in a sec...
It looks like all the interface buttons work, they just don’t do anything interesting, yet.
But it’s important that we understand how these are set up because the buttons are going to invoke the code we have to write (like, to play a video or to view a video with an effect filter)
Below you’ll find the function that is invoked when the page is loaded.
For each set of  buttons (effects, controls, and the video selection), the code steps through the buttons and assigns click handlers to the anchor links.
Now let’s take a look at all the JavaScript code that shipped from the factory, including the code that sets up the buttons (which we just looked at in the HTML) and the code for each button handler (which, right now, just makes sure the right buttons are depressed)
We’ll review it all before we start adding our own code.
Here’s the function that is invoked when the page is fully loaded.
Each for statement loops over the elements of one group of buttons.
The onclick handler for each button in the player controls is set to the handleControl handler.
And finally the handler for video selection is set to setVideo.
Once we’ve done all the ground work we use a helper function to visually depress the “video1” button, and the “normal” (no filter) button in the interface.
The method returns an array of  element objects that match the CSS selector argument.
OK, so far the JavaScript code takes care of  setting up all the buttons so that if they are clicked on, the appropriate handler is called.
Next, let’s take a look at the actual handlers, starting with the handler for the player buttons (play, pause, loop and mute), to see what they are doing:
The first thing we do in this handler is see who called us by retrieving the id of the element that invoked the handler.
Once we know the id, we know if the element was play, pause, loop or mute.
Depending on which button it was, we alter the interface to reflect the button that was pushed.
For instance if pause was pushed then play shouldn’t be.
We’re using a helper function to make sure the onscreen button states are taken care of, it’s called pushUnpushButtons, and it takes a pushed button along with an array of unpushed buttons and updates the interface to reflect that state.
For instance play and pause are like true radio buttons (pushing one in pops the other one out), while mute and loop are like toggle buttons.
Now that’s great and all, but where does our code come in? Let’s think through this: when a button, like play, is pushed, not only are we going to update the interface (which the code already does), we’re also going to add some code that actually does something, like make the video start playing.
Let’s go ahead and look at the other two handlers (for setting the video effects and for setting the test video), and it should be pretty obvious (if it isn’t already) where our code is going to go...
All this code so far is cosmetic, it just changes the look of the buttons from pressed to depressed.
There is no code to do anything real, like play a video.
The setEffect handler handles your choice of  effect, like no effect (normal), western, film noir or sci-fi.
Likewise the setVideo handler handles your choice of  test video one or two.
This works the same as the handleControl handler: we grab the id of the element that called us (the button that was clicked on) and then update the interface accordingly.
We’ll be adding code to each case to handle implementing the appropriate special effect filter.
The same is true of setVideo; we see which button was pressed and update the interface.
We’ll also be adding code here to implement switching between the two test videos.
And for the sake of  completeness (or if  you’re on a 11-hour flight to Fiji without Internet access and you really want to type all this in):
First, check to make sure the id of the button to push is not empty.
We “press” the button by adding the “selected” class to the anchor, and ...
To unpush buttons, we loop through the array of ids to unpush, grabbing each anchor...
We haven’t done much writing code, but we are reading and understanding code, and that can be just as good.
So load the videobooth.html file into your browser and check out the buttons.
For extra credit, add some alerts into the handler functions.
When you come back, we’ll start writing some code to make the buttons work for real.
Give all those buttons a try, notice some are like radio buttons, some are like toggle buttons.
Radio buttons, play and pause can’t be selected at the same time.
Loop and Mute are toggle buttons, they can be used independently of any other buttons.
Mark the buttons below with whether they are like toggle buttons (independent) or like radio buttons (pushing one in pops the other ones out)
You’ll find the solution just a couple of pages on...
But seriously, this is the power of  markup for structure and CSS for presentation (and if  that is a new topic to you, check out Head First HTML with CSS & XHTML)
What we’re doing isn’t that complex; here it is in a nutshell for the curious:
We set the background image of the console <div> to the booth console (no buttons)
Each button group <div> gets a background image for all the unpushed buttons.
Each “button” anchor is positioned within the <div> for the group, and given a width and height to match the button it corresponds to.
When you click on a “button”, we give that anchor a background image of a pushed in button to cover up the unpushed button.
Then, the <video> element is absolute positioned so it sits in the middle of the console.
Check out the CSS in detail if you want: videobooth.css.
Radio buttons, play and pause can’t be selected at the same time.
Loop and Mute are toggle buttons, they can be used independently of any other buttons.
All these are radio buttons; we allow just one effect to be applied to video at a time.
The video selectors are radio buttons too, we can be watching only one video at a time.
Mark the buttons below with whether they are like toggle buttons (independent) or like radio buttons (pushing one in pops the other ones out)
Before we implement the button controls, we need video to test them with, and as you can see from the buttons, Starring You Video has sent us two demo videos.
Let’s go ahead and create an object to hold the two videos and then add some code for our onload handler to set up the source of  the video object (just like we did for Webville TV)
Now before we get sloppy, remember the getFormatExtension function is in Webville TV, not this code! So open up  webvilletv.js and copy and paste the function into your video booth code.
One other small thing: in the video booth code we aren’t keeping a global video object, so add this line to the top of  your getFormatExtension function to make up for that: Add this line to your.
We'll create this object to hold the two demo videos.
Here, we're getting the video element, and setting its source to the first video in the array with a playable extension.
Then we go ahead and load the video so if the user clicks play, it's ready to go.
Implementing the video controls Alright, time to get to those buttons!  Now, it’s important to point out that for this project, we’re going to implement our own video controls.
That is, rather than use the built-in video controls, we’re going to control the experience ourselves—so when the user needs to play, pause or mute the video, or even to loop the playback, they’re going to use our custom buttons, not the built-in controls.
It also means we’re going to do all this programmatically through the API.
Now, we’re not going to go all the way, which would mean implementing our own video scrubber, or perhaps next and previous buttons, because those don’t make sense in this application, but we could if  we needed to.
You’ll find that just by implementing our small control panel you’ll get the idea and be in perfect shape to take it further if  you want to.
How about if  we start with the play button and then move to the right (to pause and then to loop and then to mute) from there? So find the handleControl handler and add this code:
If the user has pressed play, then call the play method on the video object.
But we’ll warn you, there’s one edge case here about to bite us, so let’s go ahead and take care of it: If we've played a video, and let that video play through to the end, then to start it playing again, we have to load it again first.
We check to make sure the video ran through to the end (and wasn't just paused), because we only want to load again in that case.
Implementing the rest of the video controls Let’s knock out the rest of  the controls—they’re so straightforward they’re almost going to write themselves:
For looping we’ve got a boolean property named loop in the video object.
If the user pauses the video, then use the video object’s pause method.
And mute works the same way: we just flip the current value of the mute property when the button is pressed.
Make sure you’ve got all the code changes typed in.
Load videobooth.html into your browser and give your control buttons a test.
You should see video start playing, be able to pause it, mute it, or even put it in a loop.
Of  course, you can’t select the other demo video yet or add an effect, but we’re getting there!
There’s a little loose end we need to take care of  to really make these buttons work like they should.
Here’s the use case: let’s say you’re playing a video and you don’t have loop selected, and the video plays to completion and stops.
As we have things implemented now, the play button will remain in the pressed position.
Wouldn’t it be better if  it popped back up, ready to be pressed again?
Let’s start by adding a listener for the ended event.
Add this code to the bottom of  your onload handler:
Now let’s write the handler, which will be called any time the video playback stops by coming to the end of  the video:
All we need to do is “unpush” the play button.
Now start a video and let it play to its conclusion without the loop button pressed, and at the end you should see the play button pop back out on its own.
The play button should pop right back out after the video finishes playing.
Switching test videos We already added an object to hold our two test videos, and we’ve even got two buttons for selecting between them.
Let’s work through writing that now so we can switch between our videos:
Then we still update the buttons in the same way we were, no changes there.
Then we use the source id of the button (the id attribute of the anchor) to grab the correct video filename, and add on our browser-aware extension.
Notice we're using the [ ] notation with our videos object, using the id string as the property name.
Once we have the correct video path and filename, we load and play the video.
And we make sure the play button is pushed in because we start the video playing when the user clicks on a new video selection.
Make these changes to your setVideo function and then load your page again.
You should now be able to easily switch between video sources.
Here's our object with the two videos, we're showing this again as a reminder, so you can see how we're going to use it...
I’m going to jump right to the topic on everyone’s minds, and that would be YOU and the Canvas element.
Head First: Allegedly nights out on the town, early morning breakfasts together.
Video: What is there to say, Canvas and I have a great relationship.
She displays her content in a very, let’s say, visually appealing manner, and I’m a video workhorse.
I crunch through codecs and get that video content to the browser.
Head First:  Well, that’s not what I was getting at, but I’ll go with it.
Okay, she’s great at 2D display, you’re great at video display.
Video: Like any relationship, when you put two things together and get out more than the sum of  the parts, that’s when you have something special.
Head First: Okay, well, can you put that in more concrete terms?
If  you want to do anything other than just basic video playback—that is, if  you want to do any processing on your video, or custom overlays or display mulitple videos at oncethen you want to use Canvas.
Head First: That all sounds great, but video requires heavy-duty processing, I mean that’s a lot of  data coming through.
How is JavaScript, a scripting language, going to do anything real? Writing JavaScript code isn’t like writing in a native language.
The industry’s brightest virtual machine jockeys are working the problem and kicking butt.
Head First: Can you give us some examples of  things you can do with JavaScript, canvas and video?
Video: Sure, you can process video in real time, inspect the video’s characteristics, grab data from video frames, and alter the video data by, say...
Head First: Can you walk us through how you might do that in code?
Video: Uh, I’ll have to get back to you on that, just got a call from Canvas...
It’s time for special effects Isn’t it about time we add those movie effects? What we want to do is take our original video and be able to apply effects, like film noir, western, and even an otherworldly sci-fi effect.
But if  you look at the video API, you won’t find any effects methods there, or any way to add them directly.
Take a little time to think through how we might add effects to our video.
Don’t worry that you don’t know how to process video yet, just think through the high level design.
Use this engineering note to draw a picture, label it, or write out pseudo-code for any code for your video effects.
Think of this as a warm up, just to get your brain going...
How will you get your hands on the pixels that make up each frame of the video?
Once you’ve got the pixels, how do you process them to apply the effect?
Say you were to write a function to implement each effect, what would it look like?
How can you display the video once you’ve processed all its pixels to apply the effect?
We want to take our original video and be able to apply film noir, western, and sci-fi effects.
We know we’ve still got to hook up those buttons that control the effects.
We’re going to learn a little about video processing and check out the “scratch buffer” technique for adding our effects.
We’re going to implement the scratch buffer, which is going to give us a chance to see video and canvas together in action.
The FX plan We don’t know exactly how to implement the effects yet, but here’s a high level plan of  attack:
We’re going to implement one function for each effect: western, film noir, and sci-fi.
Finally, we’re going to put it all together and test!
Implement the scratch buffer, using canvas (believe it or not)!
We’ll display the altered pixels in a, you guessed it, canvas.
Now you know we’re going to implement a function that will handle each effect.
How are you going to take a color pixel from the video and make it black and white? Hint: every pixel has three components: red, green, and blue.
If we could get our hands on those pieces, what could we do?
Time to get those effects buttons working Alright, the easy part first: we’re going to get those effects buttons wired up and working.
This variable is going to hold a function that can take data from the video, and apply a filter to it.
That is, depending on which effect we want, the effectFunction variable will hold a function that knows how to process the video data and make it black and white, or sepia, or inverted for sci-fi.
So add this global variable to the top of  your file:
Now we’re going to set this variable anytime an effects button is clicked on.
For now, we’ll use function names like western, noir and scifi, and we’ll write these functions in just a bit.
For each button press we set the effectFunction variable to the appropriate function (all of which we still need to write)
If the effect is no effect, or normal, we just use null as the value.
Otherwise we set effectFunction to an appropriately named function that will do the work of applying the effect.
So, let’s see how we process video so we can apply effects to it!
Remember this is called whenever the user clicks on a effect button.
Okay, with that out of  the way, we’re going to learn about that “scratch buffer” and then come back and see how these functions fit in, as well as how to write them!
How video processing works What we’ve done so far is given ourselves a way to assign a function to the effectsFunction global variable as a result of  clicking on the effects buttons in the interface.
For now, just take that knowledge and tuck it in the back of  your brain for a little while, because we’ve got to work through how we’re actually going to take video and process it in real time to add an effect.
To do that we need to get our hands on the video’s pixels, alter those pixels to achieve our desired effect, and then somehow get them back on the screen.
Now, does the video API offer some special way to process video before it is displayed? Nope.
But it does give us a way to get the pixels, so we just need a way to process and display them.
Wait, pixels? Display? Remember Chapter 7?  The canvas! Ah, that’s right, we did mention something about the “special relationship” that the video element and canvas have.
So, let’s walk through one of  the ways the video and canvas elements can work together:
The video player decodes and plays the video behind the scenes.
In a nutshell, we’re taking each frame of video and changing it from color to B&W, and then displaying it.
Then we copy the processed frame from the buffer to the display canvas.
After a frame is processed, it is copied to another display canvas to be viewed.
How to process video using a scratch buffer Behind the Scenes.
The browser decodes the video into a series of frames.
Each frame is a rectangle of pixels with a snapshot of the video at a given point in time.
Now, you might ask why we’re using two canvases to process and display the video.
Why not just find a way to process the video as it is decoded?
The method we’re using here is a proven technique for minimizing visual glitches during intensive video and image processing: it’s known as using a “scratch buffer.” By processing a frame of  video in a buffer and then copying it all in one fell swoop to the display canvas, we minimize visual issues.
Let’s step through how our scratch buffer implementation is going to work.
As each frame is decoded we copy it into the canvas that is acting as a scratch buffer.
We iterate over scratch buffer, pixel by pixel, passing each pixel to our effects function for processing.
After all the pixels in the scratch buffer are processed, we copy them from the scratch buffer canvas to the display canvas.
And then we repeat the process on every frame as it is decoded by the video object.
After getting the pixel data from the canvas, we access it one pixel at a time, and process it by manipulating the RGB values in each pixel.
And of course, this is the canvas you actually see!
Implementing a scratch buffer with Canvas As you already know, to implement a scratch buffer in canvas we need two canvases: one to do our computation in, and one to display our results.
To create those canvases, we’ll start back in our HTML file videobooth.html.
We’re adding two canvas elements, one for the buffer and one to display.
Now you might be wondering about positioning these elements; we’re going to position them right on top of  each other.
So at the bottom will be the video element, on top of  that is the buffer, and on top of  that, the display canvas element.
We’re using CSS to do it, and although we don’t talk much about CSS in this book, if  you open videobooth.css you’ll see the positioning for the three elements:
We set the background to black so that if we have letter-boxing or pillar-boxing, the space is black.
Writing the code to process the video We’ve got a video element, a buffer that’s a canvas, and a canvas that is going to display the final video frames.
And we’ve also got them stacked on one another so we see only the top display canvas, which will contain the video with the effect applied.
To process the video we’re going to use the video element’s play event, which is called as soon as a video begins playing.
When the video begins playing it will call the function processFrame.
The processFrame function is where we’ll process the video pixels and get them into the canvas for display.
We’ll start by making sure we have access to all our DOM objects:
If it isn’t then we’ve got no work to do, just return.
Then grab a reference to both canvas elements and also to their contexts, we’re going to need those.
How to create the buffer To create the buffer, we need to take the current video frame, and copy it to the buffer canvas.
Once we have it on the canvas, we can process the data in the frame.
So, to create that buffer we do this (add this to the bottom of  processFrame):
It takes an image and draws that image onto the canvas, at an x,y position for a given width and height.
By specifying the video as the source, drawImage gets one frame of the video as image data.
Then we grab the image data from the canvas context and store it in a variable, frame, so we can process it.
Here, we’re just saying we want all the image data in the canvas.
How to process the buffer We’ve got our hands on a frame of  video data, so let’s do some processing on it!  To process the frame, we’re going to loop over every single pixel in the frame data and pull out the RGB color values that are stored in each pixel.
Actually, each pixel has 4 values, RGB and Alpha (the opacity), but we’re not going to use the Alpha.
Add this code to the bottom of  your processFrame function:
We’ve processed one frame, what next? Yes, that’s one single frame we just processed, and we want to keep processing them all as the video continues to play.
We can use setTimeout and pass it a value of  zero milliseconds to ask JavaScript to run processFrame again as soon as it possibly can.
JavaScript won’t actually run the function in zero milliseconds, but it will give us the next soonest time slot we can get.
To do that, just add this to the bottom of  your processFrame function:
First, we find out the length of the frame data.
Notice that the data is in a property of frame, frame.data, and length is a property of frame.data.
The length is actually four times longer than the size of the canvas because each pixel has four values: RGBA.
Now we loop over the data and get the RGB values for each pixel.
Each pixel takes up four spaces in the array, so we grab r from the first position, g from the second, and b from the third.
Then, we call the effectFunction (if it’s not null, which it will be if the “Normal” button is pressed), passing in the position of the pixel, the RGB values, and the frame.data array.
The effect function will update the frame.data array with new pixel values, processed according to the filter function assigned to effectFunction.
At this point the frame data has been processed, so we use the context putImageData method to put the data into the display canvas.
This method takes the data in frame and writes it into the canvas at the specified x, y position.
Tells JavaScript to run processFrame again as soon as possible!
You’re absolutely right: what we’d love to do is have our handler called once for every frame, but the video API doesn’t give us a way to do that.
It does give us an event named timeupdate that can be used to update a running time display of  your video, but it doesn’t tend to update at a granularity that you can use for processing frames (in other words, it runs at a slower rate than the video)
When you pass zero to setTimeout, you’re asking JavaScript to run your timeout handler as soon as it possibly can—and this leads to your handler running as frequently as it possibly can.
But might that be faster than the frame rate? Wouldn’t it be better to calculate a timeout close to what is needed for the frame rate? Well, you could, but it’s unlikely that the handler is going to actually get to run in lockstep with the frames of  your video, so zero is a good approximation.
Of course, if  you are looking to enhance the performance characteristics of  your app, you can always do some profiling and figure out what the optimal values are.
But until we have a more specific API, that’s our story.
It’s interesting you are using setTimeout with a time of zero.
What’s going on there? Shouldn’t we be doing something that’s tied to a.
Now we need to write some effects Finally, we’ve got everything we need to write the video effects: we’re grabbing each frame as it comes in, accessing the frame data pixel by pixel and sending the pixels to our effect filter function.
Let’s look at the Film Noir filter (which, in our version, is just a fancy name for black and white):
The filter function is passed the position of the pixel...
So the first thing we do is compute a brightness value for this pixel based on all its components (r, b and g)
And then we assign each component in the canvas image to that brightness.
This has the affect of setting the pixel to a grey scale value that corresponds to the pixel’s overall brightness.
Add this function to videobooth.js and then reload your page.
As soon as the video starts rolling press the Film Noir button and you’ll see a brooding black & white film look.
Not bad, eh? And all in JavaScript, in real time!
Remember this function is called once per pixel in the video frame!
This book isn’t really about video processing and effects, but it sure is fun.
Look through the code and make notes on the right as to how each works.
Oh, and we added an extra one—what does it do?
This is it! We have this code wrapped up and ready to ship off  to Starring You Video.
Go ahead and double check that you’ve got all the code typed in, save, and load videobooth.html.
Go ahead and think up a few, implement them, and document them here.
B&W Cartoon is just one of many other fun things you can do with effects.
Hey I know its almost the end of the chapter, but I keep meaning.
You can substitute a web URL for any of  the sources we been defining locally.
Keep in mind there is more room for bad things to happen when you are delivering on the Web (and we’ll talk about how to handle those things in a moment)
Also, the bitrate of  your videos starts to matter a lot more when delivering to a browser or a mobile device over the network.
Like with video formats, if  you’re going down this road, seek out experts and educate yourself.
The term streaming often gets used like the term xerox or kleenex—as a generic term for getting video from the Web to your browser.
But “progressive video” and “streaming video” are actually technical terms.
In this book we’ve been using progressive video, which means when we retrieve the video (either locally or over the network) we’re retrieving a file using HTTP, just like an HTML file or an image, and we try to decode and play it back as we retrieve it.
Streaming video is delivered using a protocol that is highly tuned to delivering video in an optimal way (perhaps even altering the bitrate of  the video over time as bandwidth becomes more or less available)
Streaming video probably sounds like it would provide your user with a better experience (it does), and is perhaps more efficient in terms of  your user’s connection and your bandwidth charges (it is)
On top of  all that, streaming video makes it easier to do things like protect the content of  your video if  you need that kind of  security.
As a matter of  fact the problem isn’t HTML5, there isn’t really a supported standard for streaming video anywhere—but there are plenty of proprietary ones.
Why? There are a number of  reasons ranging from the money to be made with streaming video to the fact that many people in open source don’t want to work on a protocol that could be used for DRM or other protection technologies.
Like the situation with video formats, we’re in a complex world with streaming video.
There are lots of  legitimate uses for streaming video technologies, and if  you have a large audience, or you have content you think needs to be protected, you should check them out: Apple’s HTTP Live Streaming, Microsoft’s Smooth Streaming and Adobe’s HTTP Dynamic Streaming are good places to start.
There’s good news on the horizon too: the standards bodies are starting to look closely at HTTP-based video streaming, so keep an eye out for developments in this area.
So what do I do if I need to stream?
But it’s not: we have all those nasty network issues, incompatible devices and operating systems, and an increasing chance of  asteroids hitting the earth.
That last one we can’t help with, but for the first two actually knowing you have an error is half  the battle, then you can at least do something about it.
Let’s take a look at what kinds of  errors we can detect:
Used whenever a network retrieval of  the video is interrupted by a network error.
Used any time the process of getting the video over the network is aborted by the browser (possibly at a user’s request)
This could happen because the encoding uses features the browser can’t support or because the file is corrupt.
Used when the specified video source cannot be supported because of  a bad URL or because the source type isn’t decodable by the browser.
Each error type also has an associated number that is the error code produced by the error event, we’ll see this in just a sec...
Dealing with errors is complex business and how you deal with errors depends a lot on your application, and what would be appropriate for the app and your users.
That said, we can at least get you started and point you in the right direction.
Let’s take Webville TV and give it the ability to know it has encountered an error—and if  it does encounter one, give the audience a PLEASE STAND BY message.
We want to be notified when there’s an error message, so we need to add a listener for the error event.
Here’s how we do that (add this to the onload handler in webville.js):
Now we need to write the function errorHandler, which will check if  there is an error, and if  so, place our “please stand by” image on the video display by making it the poster image:
If the handler is called, we make sure there is an error by checking video.error and then we place a poster up on the video display.
Optionally add this line to be able to see the error code (see the previous page for the integer stored in the code property)
There are many ways for the playback of  the video to fail, and to test this code you’re going to make it fail.
Give the player a video you know it can’t decode.
Give the player a URL that isn’t even a video.
Use software to reduce your bandwidth (it’s out there, just look for it)
This is where it gets exciting, because think of  all you know how to do with HTML markup, with the video element and, of  course, the canvas...not to mention web services, geolocation...
Sure, we did some cool video processing with canvas, but you can apply everything you know how to do with canvas to video.
Here are just a few ideas we had, please add your own.
And give yourself  a pat on the back from us, you’ve earned it!
Use all those graphics and text APIs you know how to use from canvas, right on top of the video.
You can play video by using the <video> element with a few simple attributes.
The autoplay attribute starts playback on page load, but use only when appropriate.
The controls attribute causes the browser to expose a set of playback controls.
You can supply your own poster image with the poster attribute.
The src attribute holds a URL to the video to be played.
Three formats are in common usage, WebM, MP4/H.264 and Ogg/Theora.
Know your audience to know what formats you need to supply.
Use fully specified types in your <source> tag to save the browser work and time.
You can continue to support other video frameworks, like Flash, by adding a fallback <object> tag in the video element.
The video object provides a rich set of properties, methods and events.
Video supports play, pause, load, loop and mute methods and properties to directly control the playback of the video.
The ended event can be used to know when video playback has ended (for instance, to implement a playlist)
You can programmatically ask the video object if it can play a format with canPlayType.
The canPlayType method returns empty string (no support for format), maybe (if it might be able to play the format) or probably (if it confidently thinks it can play the format)
Canvas can be used as a display surface for video to implement custom controls or other effects with video.
You can use a scratch buffer to process video before copying it to the display.
You can use a setTimeout handler to process video frames; while it isn’t linked directly to every frame of the video, it is the best method we have right now.
You can use a URL as a video source to play network-based videos.
Some browsers enforce a same origin policy on video so that you need to serve the video from the same origin as your source page.
Errors are always possible, if not probable, with video, especilly when a network is involved.
The error event can be used to notify a handler when video retrieval, decoding or playback errors occur.
Currently there is no HTML5 standard for streaming, although the standards bodies are looking at HTTP-based streaming solutions.
There is currently no standard way of protecting video delivered through the video element.
HTML5cross Before you sit back and watch some more Webville TV, do a quick crossword to make it all stick.
Use __________ if you want a built-in way to control video.
What you should do if an asteroid is going to hit the earth.
Use __________ if you want a built-in way to control video.
What you should do if an asteroid is going to hit the earth.
This book isn’t really about video processing and effects, but it sure is fun.
Look through the code and make notes on the right as to how each works.
Oh, and we added an extra one—what does it do? Here’s our solution.
The Western filter emphasizes the red and green components of the pixel while de-emphasizing the blue component, to give the video a brownish tinge.
The scifi filter reverses the amounts of RGB components of each pixel.
So if a pixel had a lot of red, it now has a little.
If a pixel had a little green, it now has a lot.
Use __________ if you want a built-in way to control video.
What you should do if an asteroid is going to hit the earth.
This will change fast! So check the latest support on the Web.
I’m done with this small closet and wearing the same pantsuit over and.
With HTML5 I’ve got enough local storage to wear a new suit every day!
Browser storage gives us a way to persistently store data that we can use in building a web experience.
Up until now there’s been one game in town—the browser cookie—for storing information on the browser.
We’ve got a key of “pet” with a value of “dog”, and a key of “age” with a “5”, and so on...
The browser saves the cookie locally and will send it back to the server the next time it makes a request.
While I’m serving a web page to you, I’m also going to give you some key/value pairs to store for me.
When your browser retrieves a web page, say from “pets-R-us.com,” the server can send a cookie along with its response.
Cookies are sent back and forth in each HTTP request and response.
Cookies are associated with a domain, like “pets-R-us.com” and are only sent to that domain.
Cookies can be used for all kinds of purposes, like customizing the user’s exerience, storing data, say in a shopping cart, or maintaining the state of game.
The next time the browser makes a request to “pets-R-us.com,” it sends along any cookies that were sent previously:
The server can then use the cookie to personalize the experience, in this case promoting relevant items to the user, but there are many other ways cookies can be used too.
You gave me this cookie the last time I talked to you.
Just wanted to let you know we have a big sale on products for middle-aged dogs that go great with black.
Cookies have been with us a long time, but you might be able to think of some ways they could be improved on.
Check all the items below that you think make cookies problematic:
There’s only 4k to work with, my app needs more storage than that.
Sending the cookie back and forth every time seems really inefficient, especially if I’m on a mobile device with not a lot of bandwidth.
They sound like a good way to transmit viruses and other malware to my browser.
I’ve heard the way the key/value pairs are done as part of the HTTP request is a pain to deal with in code.
Aren’t we potentially sending personal data back and forth every time we make a request?
They don’t seem well matched to all the client-side development we’ve been doing.
They seem to assume everything in happening in the server.
For the record, and despite news reports to the contrary, cookies are quite safe and not a haven for virus writers.
I’m hoping that HTML5 provides a simple, client-side API to storage that is.
You’re not limited to four stingy kilobytes of  storage either; all browsers today will gladly offer you five to ten megabytes of  storage in every user’s browser.
Let’s check out how it works (and then we’ll jump head first into the API):
Storage is persistent, even if you close your browser window or quit the browser.
Like cookies, your page can store and retreive only items that were created by pages served from the same domain.
NOTE: The server still serves your pages, and you may even send a bit of the data in your local store to the server for some server-side computation, but the client is dealing with the details of local storage, not the server (as is common with cookies)
A page can store one or more key/value pairs in the browser’s local storage.
And then later use a key to retrieve its corresponding value.
Need a system for getting things done? It’s hard to improve on the old Post-it note system (more commonly known as stickies)
You know how it works: you jot down your “to do” item, stick it somewhere, and once you’ve done the task, you throw the sticky in the trash (or recycle it)
How about we build one using HTML? Let’s see, we need a way to store all those stickies, so we’re going to need a server, and some cookies...
No fooling around, we’re going to jump right in and start using the local store.
To do that you should create a simple html page with all the basics: a head, a body, and a script (or just use the starter file notetoself.html in the code examples)
Follow along by typing the code into your <script> element (typing it in helps it stick):
The Web Storage API is available to you through the localStorage object.
You’ll find this already defined for you by the browser.
When you use it you’re making use of the underlying local storage system.
The setItem method takes two strings as arguments that act as the key/value pair.
The first string argument is a key that the item is stored under.
Name it whatever you want as long as it is a string.
The second string is the value you’d like to store in local storage.
The Web Storage API is simple, fun and instantly gratifying.
We’re starting simple, but before you know it, we’ll have a whole Stickies app up and running.
You can’t directly store numbers or objects (but we’ll find a way to overcome this limitation soon)
There’s not much more to a sticky than the text you write on it, right? So, let’s start by storing a sticky for “Pick up dry cleaning”:
Like we said already, you can use any key you like as long as it is a string, but you can only store one value per key.
We’re getting the value associated with the key “sticky_0” from the local store...
And to make this a little more interesting, let’s use the alert function to pop the sticky note’s value up on the screen.
Time for a test drive! Make sure you’ve got all this code into your script element and load it into your browser.
What’s cool about this is that this value was stored in and retrieved from the browser’s localStorage! You could quit your browser, go on vacation to Fiji for a month, come back, and it will still be there waiting on you.
Okay, okay, we agree the example could have been a little more exciting, but work with us here, we’re getting there...
That was easy enough; let’s add a second item to the local store:2
Now that we have two values stored safely in our browser’s local storage, you can now use one of the keys to retrieve its corresponding value from localStorage.
Here it is in a nutshell: your browser provides you with a local store—space on your own computer, in your browser—that a page can make use of  to store key/value pairs.
You created a few key/value pairs, stored them away using the local storage API, and then you retrieved one of  them for use in your app.
Now, while that might not be the most exciting example, there are lots of  interesting things you can do with a bit of  storage in every user’s browser (and we’re sure you can think of  at least a few)
So now that you’ve got an answer in a nutshell, let’s step through in detail what just happened:
That was cool, but can we walk through it? I’m not 100% sure what.
Every modern browser has local storage behind the scenes ready for you to use to store key/value pairs.
First, remember every browser has a bit of local storage that you can use to store key/value pairs.
We use the setItem method to store a key/value pair.
The key is “sticky_0” and the value is “Pick up dry cleaning”
Now there are two values stored under two unique keys.
Note that by getting an item we don’t remove it from the store, it’s still there.
With that local storage you can take a key and a value (both in the form of strings) and you can store them.
We then called setItem again and stored a second key/value pair, this time with a key of “sticky_1” and a value of “Cancel cable tv, who needs it now?”
And when we call getItem with a key of “sticky_0”, it returns the value of the key/value pair.
Q: First you said “Web Storage” and then you started talking about “local storage.” Are they the same?
A: The Web standard is named “Web Storage” but most people just call it local storage (in fact, the browsers even expose the API through the localStorage object)
Web Storage is actually not the best name for the standard (because items are stored in your browser, rather than on the Web)
You’ll see us use the term local storage more than the standard name of “Web Storage.”
Q: At the very beginning of the chapter you mentioned 5MB of storage on each browser.
Q: You said the server didn’t need to be involved, but then you started talking about domains.
A: Right, all the storage is managed in the client.
The domain comes in because five megabytes is allocated to all the pages from the same domain for storage.
Q: How does this compare to Google Gears [or insert your favorite proprietary local storage technology here]?
A: There’s nothing wrong with other browser storage technology, but HTML5’s local storage is now the standard (and Google, Apple, Microsoft and others now recognize Web Storage as the standard way to store content locally in the browser)
Q: What happens if I perform a setItem on the same key multiple times.
Keys are unique in localStorage, so setItem will overwrite the first value with the second value.
Q: Who can see the data in my local store? A: Local storage is managed according to the origin (you can just think of the origin as your domain) of the data.
Q: When I’m loading a page from my computer, like we are in these exercises, what is my origin?
In that case your origin is known as the “Local Files” origin, which is great to use for testing.
If you have access to server you could test your files there too, and then you’ll be in your domain’s origin.
Local Storage may not work properly in all browsers if.
This is another case where some browsers require that you serve pages.
It’s true, with localStorage you can only use strings as keys and values.
You can store the string “5” instead, and then convert it back to an integer when you retrieve it from the local store.
Let’s take a look at how you’d do this for integers and floats.
Say you want to store an integer with the key “numitems”
Okay, it might look like you’re storing an integer here, but JavaScript knows this needs to be a string, so it coerces the integer value into a string for you.
What setItem actually sees is the string “1”, not an integer.
JavaScript isn’t as smart when you retrieve a value with getItem:
In this code, numItems is assigned the string “1”, not an integer as we’d like.
To make sure numItems is a number, you need to use the JavaScript function parseInt to convert a string to an integer:
If  you’re storing floating point values, you’ll want to use the parseFloat function when you get the price items from localStorage instead:
We can add 1 to it because it’s a number.
Same thing here, we store a float value which is coerced into a string.
We wrap the value in a parseInt call, which converts the string to an integer.
Then we store it again, with JavaScript taking care of the conversion again.
And we convert it back to a float with parseFloat.
So, I can store strings in localStorage, but what if I want to store a number? I was thinking I might use localStorage to store integer item counts and floating point prices for a.
Not only does localStorage provide the getter and setter methods (that is, getItem and setItem), it also allows you to treat the localStorage object as an associative array.
What does that mean? Well instead of  using the setItem method, you can assign a key to a value in the store like this:
Here, the key looks like an index for the storage array.
And here’s our value sitting over here on the righthand side of an assignment statement.
We can also retrieve the value stored in a key this way too.
Not bad, huh? So, use either syntax, they are both valid.
But if  you are used to using associative arrays in JavaScript, this syntax may be more concise and readable for you.
But wait, there’s more! The localStorage API also provides two other interesting things: a property, length, and a method, key.
The length property holds the number of  items in the local store.
Big picture: we’re using the length to iterate over the contents of localStorage (just like an array), and accessing each key (like “sticky_0”) as we go.
We can then use that key to extract its corresponding value.
The length property tells us how many items are in localStorage.
Then with the key name we can retrieve the value.
Go ahead give it a try…do you get an alert for each item?
Ready to try your luck? Or should we say skill? We’ve got a game for you to test your command of localStorage, but you’ll need to be on your toes.
Use your knowledge of getting and setting key/value pairs in localStorage to keep track of the pea as it shifts from shell to shell.
You can type it in to check your answer and see which shell the pea is in.
Feel free to use this space to keep track of the state of localStorage.
What does that mean? It means you’ll see every key/value in the store by iterating, but you shouldn’t count on any specific order in your code.
In fact, different browers may give you different ordering for the same code and items.
Tonight we have the incumbent browser storage technology, the “Cookie” along with the new front runner, Local Storage.
I’ve been in this business for over a decade and you think you can come along like you know something.
Do you have any idea how many pages I’m used on? Ever looked at your stats?
Hey, I’m ubiquitous, pervasive, everywhere! I don’t think there is a browser on a desktop, device or mobile browser no matter how old, where you won’t find me.
Just what exactly do you think you offer over me?  My storage works just fine.
Sure, you could look at it that way, or, you could say I was built from all the experience gained from your mistakes.
The reality is I’m helping to enable a whole new generation of  web applications in the browser.
A lot of  those pages you mention, are just pages.
Of  all the HTML5 technologies, I’m one of  the best supported.
Well, I’m not sure I want to mention this in public, but you do have a size issue.
Come on, I’m an open book, just pure storage to put whatever you want in.
Yeah yeah, call me in ten years, we’ll see if  you’ve stood the test of  time.
You’ll see, you’ll be calling me crying when they say “Haha, 5 megabytes, is that all you got?”
Have you ever talked to a web developer? You’re anything but agile.
Statistics, do you have the stats on the number of  developer hours lost to stupid mistakes and misconceptions using cookies?
What you really mean is you essentially have no data format at all, so developers have to reinvent a new scheme for storing data in cookies.
We don’t need great innovation on storage; key/ value pairs work great, are straightforward and fit many computing applications.
You can get a lot of  mileage out of  strings, and if you need something more complex there are ways.
Now that you’ve had a little time to play with Web Storage, let’s take this implementation further.
We’re going to create a Sticky Notes application so you can see your stickies and add new ones.
Let’s take a peek at what we’re going to build before we build it.
If we have existing stickies in storage, we want to see them when we load the page.
So we’ll create a form with an input and a button.
We’ll style the stickies using CSS so they look like real sticky notes!
We’ll also see the display updated with any new stickies, and we’ll accomplish that by adding a new element to the DOM for each sticky.
The Sticky Notes app will show us notes in localStorage and let us add new ones.
To display stickies, we’ll iterate through all the stickies in localStorage, and add them to the DOM.
When you click Add Sticky Note to Self, a new sticky will be added to localStorage.
To start, we need a way to enter the text of  our sticky notes.
And it would be great if  we could see them in the page, so we need an element to hold all the notes in the page.
We’ve added a form as a user interface to enter new stickies.
And we’ve got to have somewhere to place our stickies in the interface, so we’re going to put them in a unordered list.
The CSS handles making each list item look a little more like a Post-it note.
We’re going to move all our JavaScript to the file “notetoself.js”
We’ve thrown in a little CSS to make things look a little more like real stickies.
This book isn’t about CSS, but feel free to check out the source!
We’ve got everything we need in the page now, and we’ve got a couple sticky notes in localStorage waiting to be displayed.
Let’s get them on the page by first reading them from localStorage and then placing them inside the unordered list element we just created.
So now we need to write the addStickyToDOM function, which is going to insert the notes into the <ul> element:
When the page is loaded we’re going to call the init function...
To do that we iterate over all items in the store.
And then we make sure this item is a sticky by testing to see if its key begins with “sticky”
Why do we do that? Well, there might be other items stored in localStorage other than our stickies (more on this in a bit)
We need to create a list item for the unordered list and then insert it.
Create a list element, and give it a class name of “sticky” (so we can style it)
And add the span to the “sticky” li, and the li to the “stickies” list.
Set the content of the span holding the text of the sticky note.
If it’s a sticky, then grab its value and add it to our page (via the DOM)
Time for another test drive! Go ahead and get this code into your script element and load it into your browser.
Here’s what we got when we loaded the page in our browser:
Now all we need to do is enable the form so we have a way to add new notes.
To do that we need to add a handler for when the “Add Sticky Note to Self ” button is clicked, and also write some code to create a new sticky.
Add this new code to your init function: Let’s grab a reference to the “Add Sticky Note to Self” button.
The rest of the code in init stays the same, we’re saving a few trees by not repeating it here.
And the code to create a new sticky note: When the button is clicked, this handler is invoked.
Then we add a new sticky to localStorage using our key.
And finally, we add the new text to the DOM to represent the sticky.
Then we need to create a unique key for the sticky.
Let’s use “sticky_” concatenated with the length of the entire store; it will keep increasing, right?
Yet another test drive! Now we’re truly interactive! Load this new code in your browser, enter a new “sticky note to self ” and click or tap the “Add Sticky Note to Self ” button.
You should see the new sticky note appear in your list of  stickies.
Make sure you try closing your browser window and then opening the file again.
You can take that trip to Fiji now, and when you come back, your stickies will still be there waiting for you!
Q: Why do we test to see if each item’s key begins with the string “sticky”?
A: Remember that all the pages from one domain (like apple.com) can see every item stored from other pages in that domain.
That means if we aren’t careful about naming our keys, we could clash with another page that is using the same keys in a different way.
So, this is our way of checking to make sure an item is a sticky (as opposed to say an order number or a game level) before we use its value for a sticky note to self.
Q: What if there are lots of items in localStorage, including lots of items that aren’t stickies?  Wouldn’t it be inefficient to iterate through the entire set of items?
A: Well, unless you are talking about a very large number of items we doubt you’d notice a difference.
That said, you’re right, it isn’t efficient and there may be better ways to approach managing our keys (we’ll talk about some of them shortly)
A: We need some way to create new keys that are unique.
We could use something like the time or generate an integer that we increase each time.
Or, as we did, we can use the length of the store (which increases each time we add an item)
If you are thinking this might be problematic, we’ll come back to that.
And if you hadn’t thought about it being problematic, no worries, we’ll still come back to it.
Q: I created a bunch of stickies in Safari and then switched to Chrome, and I don’t see any of my stickies in Chrome.
So if you create stickies in Safari, you will only see them in Safari.
Q: I just reloaded my page and now my stickies are in a different order!
A: When you add a new sticky note, we add the new sticky note item by appending it to the notes list, so it always goes at the end of the list.
When you reload the page, the notes are added in the order they’re found in localStorage (which, remember, isn’t guaranteed to be in any particular order)
You might think that the order would be the same order that the items were added to the store, or some other reasonable ordering, however, you can’t count on that.
Why? Well one reason is the spec doesn’t specify an ordering, so different browsers may implement this in different ways.
If your browser does appear to return items in an order that makes sense to you, consider yourself lucky, but don’t count on that ordering because your user’s browser may order your items another way.
Q: I often use the “for in” form of the for loop.
Q: What if I don’t want a sticky any more? Can I delete stickies?
A: Yes, we can delete items from localStorage using localStorage.
You can also remove items from localStorage directly using the browser console.
Given the way stickies are implemented, there would be a problem with our naming scheme if a user could delete a sticky at will.
Wouldn’t it be great if  there were a tool to directly view the items in your localStorage? Or a tool to delete items or even clear the whole thing out and start over when you are debugging?
Well, all the major browsers ship with built-in developer tools that allow you to directly examine your local store.
As you might expect, these tools  differ between browsers, so rather than covering them all here, we’re going to point you in the right direction, and then you can dig in and figure out the specifics of  your own browser.
Here we’re using local files served from http://localhost, but this might also be a domain name if you are testing on a hosted server.
The key/value pair for each item in the store is here.
By right-clicking on one of the storage items you can edit or delete the item right in the tool.
In Safari, we can use these tools to reload the Storage view, and delete a selected item.
Clicking will show you the storage associated with this origin.
To enable or access the developer tools, as we said, you’ll need to do different things for different browsers.
Point your browser to http://wickedlysmart.com/hfhtml5/devtools.html to see how to do this on your specific browser.
Not to mention new versions of the browsers are popping up faster than we can write pages!
Do-It-Yourself maintenance There’s another way to clear out your items (and as we we’ll see in a bit, to delete them one by one), which requires doing a little maintenance on your own, right from JavaScript.
The localStorage API includes a handy method, clear, that deletes all items from your local store (at least, the ones from your domain)
Let’s take a look at how we can use this call in JavaScript by creating a new file named maintenance.html.
Once you’ve done that, add the code below, and we’ll step through how it works.
We’ve added one button to the page, and this code adds a click handler for the button.
When you click the button, the clearStorage function is called.
Use with caution as it will delete all the items associated with the origin of this maintenance page!
Use this file whenever you need to erase everything in localStorage (good for testing)
After you’ve typed in the code, go ahead and load it in your browser.
It’s safe (with regards to our Sticky Notes app) to go ahead and clear your localStorage now, so give it a try! Make sure you’ve figured out your developer tools first so you can observe the changes.
If you’ve got a super valuable local store related to another project in the same domain, you’ll lose all your items by running this code.
Alright, it’s time to come clean: we’ve built a great little app so far, and it should work perfectly for years to come as long as you don’t introduce any other items into the localStorage (like Joel did with his shopping cart)
Once you do that, our whole scheme of  tracking stickies no longer works, or, at least, no longer works well.
First of all, our sticky notes are numbered from zero to the number of stickies (minus one):
To add a new sticky, we count the number of items in the local store and create our new key from that number:
And to display all the stickies, we iterate from zero to the length of the local store (minus one):
While I’ve been doing the exercises in the book, I’ve also been using my knowledge to create.
When I look at localStorage with the Safari dev tools, I see that my.
I have a feeling this is happening because I’m creating other items in localStorage at the same time as the stickies.
If you’re willing to live with that, cool; otherwise you better keep reading.
Put a check next to the ways our current implementation could cause problems:
Displaying stickies is inefficient if there are a lot of items in localStorage that aren’t stickies.
It’s hard to quickly tell how many stickies there are; you have to iterate through every item in localStorage to get all the stickies.
A sticky could be overwritten by setItem if the size of the localStorage gets smaller when another app deletes its own items.
Use a cookie, it has to be easier than all this!
Now let’s add Joel’s items from his shopping cart to localStorage:
When we need to iterate through the stickies to display them, we’re in trouble:
Here are Joel’s items that he’s using in his shopping cart code.
When we create our new sticky, the local store’s length is now nine, so we create a note named “sticky_9”
We haven’t been lying, it is true that you can store only strings as the values of localStorage items, however that isn’t the whole truth because we can always convert an array (or an object) into a string before we store it.
Sure, it seems like cheating, but it’s a totally legit way to store your non-String data types in localStorage.
We know you’re dying to jump into the nitty-gritty of  how to store arrays, but before we do, let’s first step through how an array would actually solve our (and Joel’s) problems.
Let’s rewind and say we’ve got six stickies in localStorage:
Why such a crazy number? Because we’re not going to care what it is called anymore as long as it is unique.
So, to add the sticky, we just add “sticky_815” to the array and then store an item for the sticky, just like we have been.
Seven stickies: their keys no longer matter, they just need to be unique.
The stickies and the stickies array are both stored in localStorage.
Each element of the stickies array is a key to a sticky in localStorage.
Okay, we know roughly how we’re going to keep track of  our stickies using an array, but let’s take this a little further and make sure we can iterate through and display all the stickies.
In the current code we display all the stickies in the init function.
Can we rewrite that using an array? We’ll look at the existing code first, and then see how it changes (hopefully for the better) with an array.
Don’t type in this code yet; we’re focusing on the changes we need to make for now and not making this code bulletproof.
We’ll bring on the bulletproof  stuff  in just a bit.
As we now know, this might break because we can’t depend on all stickies to be there if we’re naming them based on the count of the items in localStorage.
NOTE: you still don’t know how to store and retrieve arrays in localStorage, so treat this as pseudo-code until we show you.
We’ll have to make a very small addition for this to work.
Each element of the array is the key of a sticky, so we’re using that to retrieve the corresponding item from localStorage.
We need to make sure there is an array in localStorage.
If there isn’t one, then let’s create an empty one.
And then we add that value to the DOM just like we have been.
All we need to do is to rework the createSticky method, which, as you’ll remember, just gets the text for the sticky from the form, stores it locally, and then displays it.
Rather than using the localStorage length to create a key, which we’ve seen can cause problems, we’re going to need to create a more unique key.
We’re also going to need to add the sticky to our stickies array and save the array in localStorage.
We still need to figure out how to actually store an array in localStorage.
You might have already guessed that we can use JSON to create a string representation of an array and if so, you’re right.
And once you have that you can store it in localStorage.
Recall that there are only two methods in the JSON API: stringify and parse.
Let’s put these methods to work by finishing the init function (check the solution at the end of the chapter before moving on):
We added this else clause because you’ll need to do something if you get the array from localStorage (because it’s a string not an array)
What needs to change? We have two things that need to change in createSticky.
First, we need a new way to generate a key for each sticky that is unique.
We also need to alter the code so that it stores the sticky in the stickiesArray in localStorage.
Why 1970? That behavior is inherited from the Unix operating system, which defined time that way.
While it isn’t perfect (for instance, it represents times before 1970 with negative numbers), it does come in handy when you need a unique number or to track time in JavaScript code.
Q: Isn’t all this parsing and stringifying of JSON types rather inefficient? And if my array gets really large isn’t that also going to be inefficient to store?
But for typical web page programming tasks it usually isn’t an issue.
That said, if you’re implementing a serious application with very large storage requirements, you could see issues using JSON to convert items to and from strings.
Create a Date object, then get the current time in milliseconds.
And then create the key by appending the milliseconds to the string “sticky_”
Rather than repeat all that code to get and check the stickiesArray, just like we did in init (on the previous page), we’re going to create a new function to do it.
We then store the key with its value like we always did (only with our new key)
We then use the array method push, which appends the key onto the end of the stickies array.
And store the array back in localStorage, stringifying it first.
We need to create a unique key for the sticky There are lots of  ways to create unique keys.
We could use the date and time, or create fancy random 64-bit numbers, or hook our app up to an atomic-clock API.
Hmm, the date and time sounds like a nice, easy way to do this.
JavaScript supports a date object that returns the number of  milliseconds since 1970; that should be unique enough (unless you’re going to create your stickies at a really fast rate):
We need to store the new sticky in the array Now that we have a way to create a unique key, we need to store the text of  the sticky with that key, and add the key to the stickiesArray.
Let’s work through how to do that, and then we’ll put all this code together.
Putting it all together It’s time to integrate all this new array-based code, including the init and createSticky functions.
To do that we’re first going to abstract a small bit of  code that’s needed in both functions—it’s the code that retrieves the stickies array from localStorage.
You’ve seen it in init, and we need it again in createSticky.
If this is the first time we’ve loaded this app, there might not be a “stickiesArray” item.
And if there isn’t an array yet we create an empty array, and then store it back in localStorage.
Otherwise, we found the array in localStorage, and we need to parse it to convert it to a JavaScript array.
In either case, we end up with an array, and we return it.
Excellent, once I’ve got this working I’m going to rework my shopping cart the same way and these two apps are going to be able to work.
I also love using an array; it makes everything much.
With getStickiesArray written, let’s look at the simplified, final versions of  the init and createSticky functions.
Remember we also set up the button events here in the init method.
Next we grab the array with the stickies’ keys in it.
Each item in the array is a key to a sticky.
And add it to the DOM just like we’ve been doing.
Then let’s create that unique key for our new sticky.
Test Drive! Get all this code in and clear out your localStorage to make a nice clean start.
Load this code, and you should see exactly the same behavior as last time.
Q: We’re using “sticky_” as the prefix for our localStorage item names.
If your web app is on a small site at a domain that you have control over, then naming shouldn’t be an issue since you’ll be aware of all the names being used by all the different pages at the site.
We think it’s probably a good idea to use a name that indicates the page or web app relying on that item.
So “sticky_” helps us remember that those items are related to the Sticky Notes app.
Q: So if my sticky notes app is just one of many apps at a domain, I have to worry about potential conflicts right?
In that case, it would be a good idea for you (or someone who manages the web sites at the domain) to put together a plan for how to name items.
Q: If I have a lot of stickies, my stickiesArray is going to get very long.
Q: So just to be clear, we can store any object in localStorage, just by stringifying it first with JSON?
That includes arrays (as you’ve seen) as well as objects containing property names and values, as you’ll see shortly.
Pick a naming scheme for your localStorage items that won’t conflict with those of other applications at the same domain.
If you need to store arrays or objects in localStorage, use JSON.stringify to create the value to store, and JSON.parse after you retrieve it.
It’s hard to manage my busy life if I can’t get rid of these stickies after I’m done with them.
Deleting sticky notes She’s right, this app isn’t going to be very successful if  we can’t remove stickies.
The removeItem method takes the key of  an item, and removes that item from localStorage:
This method removes the item in localStorage with the given key.
Let’s delete a sticky! Below you’ll see the contents of localStorage.
You’ve got all the JavaScript you want along with the removeItem method.
After you’ve sketched it out, go ahead and write some pseudo-code below to show how you’re going to write your code.
Let’s delete a sticky! Below you’ll see the contents of localStorage.
You’ve got all the JavaScript you want along with the removeItem method.
After you’ve sketched it out, go ahead and write some pseudo-code below to show how you’re going to write your code.
The deleteSticky function You made a plan for how to delete the sticky notes, so let’s take a look at the deleteSticky function:
I get the code, but I don’t see how we’re getting the key to pass to.
Come to think of it, how is the user choosing the note to delete.
We’re using the getStickiesArray function to get the stickiesArray from localStorage.
We make sure we have a stickiesArray (just in case), and then iterate through the array looking for the key we want to delete.
When we find the right key, we delete it from the array using splice.
First, we remove the sticky note from localStorage using removeItem, passing in the key of the sticky to delete.
Finally, we save the stickiesArray (with the key removed) back to localStorage.
We need a way for the user to select a sticky note to delete.
We could get all fancy and add a little delete icon to each note, but for our Sticky Notes app, we’re going to do something much simpler: we’re going to just delete the sticky note if  the user clicks on it.
That may not be the best implementation in terms of  usability, but it’s straightforward.
To implement this, we first need to change the stickies so that we can detect when a sticky is clicked on, and then we’ll pass that along to the deleteSticky function.
A lot of  this needs to happen in the addStickyToDOM function, let’s see how:
When we click on a sticky note, it will get deleted.
We’re adding a unique id to the <li> element that represents the sticky in the DOM.
We’re doing this so deleteSticky will know which sticky you clicked on.
Since we already know the sticky’s key is unique, we’re just using that as the id.
When you click on a sticky, deleteSticky will be called.
Big picture: we’re going to use the key of the sticky note, which, remember, is “sticky_” + time, to uniquely identify the note.
Your job now is to update all the code so that everywhere we’re calling addStickyToDOM, we’re passing in the key as well as the value.
But after you’ve finished , check the solution at the end of the chapter to make sure.
Don’t skip this, or the upcoming test drive won’t work!
How to get the sticky to delete from the event.
We’ve now got an event handler on each sticky note listening for clicks.
When you click on a sticky, deleteSticky will be called and an event object will be passed into deleteSticky with information about the event, like which element was clicked on.
We can look at the event.target to tell which sticky was clicked on.
Let’s take a closer look at what happens when you click on a sticky note.
Either way, the event generated by your click gets passed into deleteSticky.
The <li> is the element with the id that is the key we need.
If you click on the yellow part of a sticky, the event target is the <li> element.
This is what we want, because the <li> now has an id with the key of the sticky note.
This is the HTML for the sticky note that we create in addStickyToDOM.
Now we can use the key to remove the item from localStorage, and from the stickiesArray.
We also need to remove the <li> holding the sticky from the page, so it disappears when you click it.
Get all that code in, load the page, add and delete some stickies.
Quit your browser, load it again, and give it a real run through!
But of course we can! Come on, given your level of  experience with this we’re going to be able to knock this out.
How do we do it? Well, we’re going to create an object to store the text of  the note and its color, and then we’re going to store that as the value of  the sticky item, using JSON.stringify to convert it to a string first.
You updated the addStickyToDOM function earlier to add the key of  the sticky as the id of  the <li> element holding the sticky in the DOM, so we can use document.
We get the parent node of  the sticky, and use the removeChild method to delete the sticky:
Pass in the key (also the id) of the sticky element we’re looking for.
Wouldn’t it be nicer if  we could have a whole range of  sticky note colors?
We could add a selection menu up here so you can choose the color you want for your note.
Update the user interface so we can specify a color.
Let’s tackle the easy part first: updating the HTML so we have a selection menu of  colors to choose from.
Edit your notetoself.html file and update your form to add the colors like this:
We’re only changing the form, the rest stays the same.
Notice the id of the <select>; we’ll need that to grab the value of the selected option in the JavaScript.
We’ll add a label for the sticky text so the user knows what that field is for.
We’ve been using CSS to define the default color for the notes.
Now we want to store a note’s color with the note itself.
So, now the question is: how are we going to store the color for the sticky note in localStorage?
The value of each option is the name of a color we can just plug right into the style for our stickies.
JSON.stringify, it’s not just for Arrays To store the color of  the sticky with the text of  the sticky, we can use the same technique we used for stickiesArray: we can store an object that contains the text and the color as the value for the sticky in localStorage.
We’re going to take the values the user enters for the color and the sticky note text and package them up into a simple object.
And we’ll store that in localStorage with the sticky’s key.
We do the usual thing to grab the value of the selected color option.
Let’s rewrite the createSticky function to store the color with the sticky note text.
To represent the text and the color, we’ll use our handy object:
Then we use that color to create stickyObj: an object that contains two properties, the text of the sticky, and the color the user selected.
And, we JSON.stringify the stickyObj before we put it in localStorage.
Now, we’re passing the object instead of a text string to addStickyToDOM.
We need to change the parameter here to be the stickyObj rather than the text value of the sticky.
Using the new stickyObj Now that we’re passing stickyObj to addStickyToDOM, we need to update the function to use the object instead of  the string we were passing in before, and to set the background color of  the sticky.
It’s a fairly easy change though; let’s take a look:
And then we need to get the text value we’re going to use in the sticky note from the object.
There is one other place we need to update the code, and that is in init, where we are getting the stickies from localStorage and passing to addStickyToDOM when we first load the page.
Now when we get the value of the sticky note from localStorage, we need to JSON.parse it, because it’s an object, not a string anymore.
And we pass that object to addStickyToDOM instead of the string (the code looks the same, but the thing we’re passing is different)
Notice that when we set the background color property in JavaScript, we specify it as backgroundColor, NOT background-color, like in CSS.
We get the color from the stickyObj we’re passing into addStickyToDOM.
Test drive sticky note colors Before running the Note to Self  app again, you’ll need to clear out your localStorage first because the previous version of  our stickies didn’t have any color stored in them, and now we’re using a different format for our sticky values.
So empty out your localStorage, reload the page, and add some stickies, selecting a different color for each one.
Here are our stickies (and we’ll also check out localStorage too):
We picked yellow, pink, and blue for our sticky notes when we added them.
Each sticky note’s value is now a (JSON stringified) object containing the text value of the sticky and the color of the sticky.
You can use your maintenance.html file to clear out your localStorage, or use the console.
I was thinking, if we can store objects and arrays, why don’t we just store all the notes in the array itself, why do we need all these other items?
It seems to make it all complicated when it could just be embedded in one item in.
Knowing what we know now, we certainly could design the stickies so that they were objects embedded in an array.
And going forward you might decide to do just that.
The only downside is that the JSON.stringify and JSON.parse methods have to do a lot more work anytime you make a change, for instance to add a note we have to parse the entire set of  notes, add the note, and then stringify all the notes again before writing them back in to the store.
But, for the amount of  data in Stickies, that shouldn’t be a problem in general (although do think about mobile devices with limited CPUs and the effect of  the CPU usage on battery life)
So whether you want to pack everything into one object or array in localStorage, really depends on how many data items you need to store, how big each one is, and what type of processing you’re going to do on them.
While our implementation here may be a bit of  overkill for a limited number of  Stickies, we hope you agree it gave us a great way to think about the localStorage API and how to deal with items in it.
We’ve told you that you have five whole megabytes of storage on every user’s browser, but while five megabytes sounds like a lot, remember that all your data is stored in the form of a string rather than in a byte-efficient data format.
Take a long number, say, the national debt—when expressed in floating point form it takes up very little storage, but when expressed in the form of a string, it takes up many times that amount of memory.
So, given that, the five megabytes might not hold as much as you think.
A try/catch captures any exceptions that are thrown within the try block.
Here’s a setItem call in the middle of the try block; if anything goes wrong and setItem throws an exception, the catch block will be invoked.
We’re testing to see if this is a storage quota error (as opposed to some other type of exception)
You’ll most likely want to do something more meaningful than just an alert.
Don’t Try this at Home (or blowing up your 5 megabytes)
But they still throw a exception when you exceed your limit, so you may want to handle the general case of an exception occuring when you set an item.
This is one JavaScript area we haven’t covered, you might want to add it to your list of things to look into.
We don’t see any reason not to push your browser to the limit, see what it’s made of, see how far it can go, see what its behavior is under pressure.
Let’s write a little code to push your browser over its storage limit:
Let start with a one-character string, with the key “fuse”
If it blows up, we’re done! We’ll alert the user and get out of this loop.And let’s not l eave a.
Go ahead and type this in, light the fuse by loading it, and have fun!  Try this on a few different browsers.
I’ve been beta testing my shopping cart app and users don’t want their shopping cart sticking around in the browser.
How can I remove all the shopping cart items when the user closes the browser?
It turns out that localStorage has a sister, named sessionStorage.
If  you substitute the global variable sessionStorage everywhere you’ve used localStorage then your items are stored only during the browser session.
So, as soon as that session is over (in other words, the user closes the browser window), the items in storage are removed.
The sessionStorage object supports exactly the same API as localStorage, so you already know everything about it you need to.
I take keys and values and write them into the localStorage.
Now keep in mind if  there’s an item with that key already in the localStorage, I’m not going to warn you, I’m just going to overwrite it so you better know what you’re asking for.
If  you overstay your welcome in localStorage and use too much space you’ll get an exception and you’ll be hearing from me.
Need to knock off  an item?  I’ll get the job done discreetly.
Just give me a key and I’ll go out and find the item with that key and hand its value to you.
When you’ve had it with all the items in your localStorage, I clean up all those items and throw them away, leaving you with a nice fresh and empty localStorage (keep in mind I can only clean up my own origin)
Need to know how many items are in your localStorage? That’s me.
Give me an index, and I’ll give you a key from that index in localStorage.
Below you’ll find all the main characters of the API sitting with their masks on.
We’ve gone ahead and done one for you to get you started.
I’m a short term kinda guy, I’ll store your stuff  just as long as you have the browser open.
Close your browser, and poof, all your stuff  is gone.
Now that you know localStorage, how are you going to use it?
I’m going to store playlists with metadata for my users.
They’ll be able to store their favorite clips along with the timecode where they left off viewing.
I’m using sessionStorage for my new ecommerce library’s shopping cart.
If the user closes the browser, I want the shopping.
There are many ways to make use of  localStorage—the Stickies app used them so we didn’t need a server, but even with a server, localStorage can be quite helpful.
In my new Twitter client, I’m going to cache Twitter search results for efficiency.
When my users search, I’m going to check the local results first.
This gives me a new way to store user state.
I used to need some kind of server-side based session and backend storage.
Now I can just store my users’ state locally, and bring in the.
I’ve got a really cool game that works in two different browser windows, and I’m using localStorage to.
I’m storing lots of local data to make my clients’ apps fast on their mobile.
Having a large store on the client side is a huge.
Web Storage is a store in your browser and an API you can use to save and retrieve items from the store.
Most browsers provide at least 5 megabytes of storage per origin.
Local storage is persistent, even if you close your browser window or quit the browser.
Items in session storage are removed when you close your browser window or quit the browser.
Session storage is good for temporary items, not longer term storage.
Both local storage and session storage use exactly the same API.
Each domain has a separate storage, so items stored in one origin are not visible to web pages in another origin.
You can use the same syntax as associative arrays to set and retrieve items to and from the store.
Use the console in your browser to see and delete items in localStorage.
You can delete items directly from localStorage by right-clicking on an item and choosing delete (note: may not work in all browsers)
You can delete items from localStorage in code using the removeItem(key) method and the clear method.
Note that the clear method deletes everything in localStorage at the origin where you do the clear.
If you use the same key as an existing item, you’ll overwrite the value of that item.
One way to generate a unique key is to use the current time in milliseconds since 1970, using the Date object’s getTime() method.
It is important to create a naming scheme for your web app that will still work if items are removed from the store, or if another app creates items in the store.
Web Storage currently supports storing strings as values for keys.
You can convert numbers stored in localStorage as strings back to numbers using parseInt or parseFloat.
If you need to store more complex data, you can use JavaScript objects and convert them to strings before storing using JSON.stringify, and back to objects after retrieving using JSON.
Local storage may be particularly useful on mobile devices to reduce bandwidth requirements.
Session storage is just like local storage, except that what’s saved in the browser’s store doesn’t persist if you close the tab, the window, or exit the browser.
Session storage is useful for short term storage, such as for a shopping session.
HTML5cross Take some time to test your own local storage.
When we used the _________ of localStorage to create key names, we ran into a problem: gaps in the names of our sticky notes.
We have to _________ an object before we store it in localStorage.
We can detect which sticky note the user clicks on by looking at the event _________
We thought it would be just a fantasy to store an _______ in localStorage but it turns out you can, with JSON.
Use a try/_______ to detect quota exceeded errors in localStorage.
We used the _____________ to hold the keys of all our stickies so we could easily find them in localStorage.
We create an _______ to store the sticky note text and its color in one localStorage item.
If you store something in your browser and fly to ________ , it will still be there when you come back.
We thought it would be just a fantasy to store an _______
Ready to try your luck? Or should we say skill? We’ve got a game for you to test your command of localStorage, but you’ll need to be on your toes.
Use your knowledge of getting and setting key/value pairs in localStore to keep track of the pea as it shifts from shell to shell.
Your job was to update all the code so that everywhere we’re calling addStickyToDOM, we’re passing in the key as well as the value.
You should have updated all the calls to addStickyToDom in init and createSticky, to look like this:
If there isn’t an array in localStorage, then we create an empty array and assign it to the variable stickiesArray.
If we had to create a new array, we use JSON.
If the stickies array is already stored in localStorage (as a string), then we need to parse it using JSON.
After this we’ll have an array of keys assigned to the stickiesArray variable.
Just to be clear, we’re taking the string pointed to by stickiesArray, parsing it into an array, and then assigning that array back to the stickiesArray variable.
We still need to figure out how to actually store an array in localStorage.
You might have already guessed that we can use JSON to create a string representation of an array and if so, you’re right.
And once you have that you can store it in localStorage.
Recall that there are only two methods in the JSON API, stringify and parse.
Let’s put those methods to work by finishing the init function:
Put a check next to the ways our current implementation could cause problems:
Displaying stickies is inefficient if there are a lot of items in localStorage that aren’t stickies.
It’s hard to quickly tell how many stickies there are; you have to iterate through every item in localStorage to get all the stickies.
A sticky could be overwritten by setItem if the size of the localStorage gets smaller when another app deletes its own items.
Use a cookie, it has to be easier than all this!
We’ve told you that you have five whole megabytes of storage on every user’s browser, but while five megabytes sounds like a lot, remember that all your data is stored in the form of a string rather than in a byte-efficient data format.
Take a long number, say, the national debt—when expressed in floating point form it takes up very little storage, but when expressed in the form of a string, it takes up many times that amount of memory.
So, given that, the five megabytes might not hold as much as you think.
A try/catch captures any exceptions that are thrown within the try block.
Here’s a setItem call in the middle of the try block; if anything goes wrong and setItem throws an exception, the catch block will be invoked.
We’re testing to see if this is a storage quota error (as opposed to some other type of exception)
You’ll most likely want to do something more meaningful than just an alert.
Don’t Try this at Home (or blowing up your 5 megabytes)
But they still throw a exception when you exceed your limit, so you may want to handle the general case of an exception occuring when you set an item.
We don’t see any reason not to push your browser to the limit, see what it’s made of, see how far it can go, see what its behavior is under pressure.
Let’s write a little code to push your browser over its storage limit:
Let start with a one-character string, with the key “fuse”
If it blows up, we’re done! We’ll alert the user and get out of this loop.And let’s no t leave a.
Go ahead and type this in, light the fuse by loading it, and have fun!  Try this on a few different browsers.
I take keys and values and write them into the localStorage.
Now keep in mind if  there’s an item with that key already in the localStorage, I’m not going to warn you, I’m just going to overwrite it so you better know what you’re asking for.
If  you overstay your welcome in localStorage and use too much space you’ll get an exception and you’ll be hearing from me.
Need to knock off  an item?  I’ll get the job done discreetly.
Just give me a key and I’ll go out and find the item with that key and hand its value to you.
When you’ve had it with all the items in your localStorage, I clean up all those items and throw them away, leaving you with a nice fresh and empty localStorage (keep in mind I can only clean up my own origin)
Need to know how many items are in your localStorage? That’s me.
Give me an index, and I’ll give you a key from that index in localStorage.
Below you’ll find all the main characters of the API sitting with their masks on.
I’m a short term kinda guy, I’ll store your stuff  just as long as you have the browser open.
Close your browser and, poof, all your stuff  is gone.
When we used the _________ of localStorage to create key names, we ran into a problem: gaps in the names of our sticky notes.
We have to _________ an object before we store it in localStorage.
We can detect which sticky note the user clicks on by looking at the event _________
We thought it would be just a fantasy to store an _______ in localStorage but it turns out you can, with JSON.
Use a try/_______ to detect quota exceeded errors in localStorage.
We used the _____________ to hold the keys of all our stickies so we could easily find them in localStorage.
We create an _______ to store the sticky note text and its color in one localStorage item.
If you store something in your browser and fly to ________ , it will still be there when you come back.
Okay I can't do EVERYTHING around here, this is going to.
The Dreaded Slow Script One of  the great things about JavaScript is it does only one thing at a time.
When you have lots of  threads of  execution happening at the same time, writing a program that works correctly can become quite a challenge.
The downside of  being single-threaded is that if  you give a JavaScript program too much to do, it can get overwhelmed, and we end up with “slow script” dialogs.
The other ramification of  having only one thread is if  you have JavaScript code that is working really hard, it doesn’t leave a lot of  computational power for your user interface or your user’s interactions, and your application can appear to be sluggish, or unresponsive.
How JavaScript spends its time Let’s see what this all means by taking a look at how JavaScript handles the tasks of  a typical page:
I get done by just handling all of this one thing at a time.
JavaScript steps through everything it has to do, one after the other.
For a lot of web apps this works really well.
Everything gets done and the user interface seems fast and responsive.
Yikes, processing a big array is taking a lot of time!
We give up, throw in the towel, bring up the slow script dialog.
When single-threaded goes BAD It’s true, for a lot of  uses, this single-threaded mode of  computing by JavaScript works great, and as we’ve said, it makes programming straightforward.
But, when you’ve written code that is so “computationally intensive” it starts to impact JavaScript’s ability to get everything done, the single-threaded model starts to break down.
Everything works great until a bit of JavaScript code starts requiring a lot of processing time, which takes away from JavaScript’s job of interacting with the user in the user interface.
Adding another thread of control to help Before HTML5, we were stuck with one thread of  control in our pages and apps, but with Web Workers we’ve now got a way to create another thread of  control to help out.
So, if  you’ve got code that takes a long time to compute, you can create a Web Worker that will handle that task while the main JavaScript thread of control is making sure everything is good with the browser and the user.
This time everything keeps moving smoothly, the Web Worker is taking care of the long running computation...
Now, we’ve made a big deal out of  the fact that one thread of  control keeps things simple and easy to program, and that is true.
But, as you’re going to see, Web Workers have been carefully crafted to make sure things stay simple, easy and safe for the programmer.
Rather than slowing things down with our compute-intensive JavaScript, we can instead create a Web Worker, which runs in a separate thread, and have it do all the hard work.
And when it’s done, the worker can even send us the data it’s been working on and we can incorporate that in our app.
You guys keep the user happy, I’ve got this one!
JavaScript: Glad to be here, as long as we stick to my schedule, lots to do.
Head First: That is actually where I thought we might focus our time today.
You’re a super successful guy, you have so much going on—how do you get it all done?
JavaScript: Well, I have a philosophy: I do one thing at a time, and I do it really well.
Head First: How do you do only one thing at a time? To us it looks like you’re retrieving data, displaying pages, interacting with the user, managing timers and alerts, and on and on...
JavaScript: Yes, I do all that, but whatever I’m doing, I do only that.
So if  I’m dealing with the user, that’s all I do until I’m done with that.
Head First: How can that be true? What if  a timer goes off, or network data arrives, or whatever, don’t you stop and do that?
JavaScript: When an event occurs, like the ones you’ve mentioned, that event is added to a queue.
I don’t even look at it until I’ve finished whatever I’m working on.
That way I do everything correctly and safely and efficiently.
Head First: Are you ever late getting to one of  those tasks on the queue?
Luckily I’m the technology behind browser web pages, so how bad can it be if  I get a little behind? You should talk to the guys that have to run code for spacecraft thrusters or nuclear power plant controllers, those guys have to live by different rules—that’s why they make the big bucks.
Head First: I’ve always wondered what’s going on when I get the “Slow script, do you want to continue” dialog on my browser.
That’s when someone has structured their page such that I’ve got so much work to do, I can’t do it all! If  you write a bit of  JavaScript that hogs all my time, then your interaction with your user  is going to suffer.
JavaScript: Well thanks to HTML5, I have help now because that’s where Web Workers come in.
If  you really need to write compute-intensive code, use Web Workers to offload some of  the work—that way I can keep my focus, and workers can do some of  the heavy lifting for me (without getting in my way)
Oh, wait, he’s gone, looks like he’s off  to his next task.
Let’s take a look at a day in the life of  a Web Worker: how workers are created, how they know what to do, and how they get results back to your main browser code.
To use Web Workers, the browser first has to create one or more workers to help compute tasks.
Each worker is defined with its own JavaScript file that contains all the code (or references to code) it needs to do its job.
Now, workers live in a very restricted world; they don’t have access to many of  the runtime objects your main browser code does, like the DOM or any of  the variables or functions in your main code.
Geez, I can’t access the DOM or anything in the main browser code.
Good, I feel a lot safer that way, you don’t.
To get a worker to start working, the browser typically sends it a message.
The worker code receives the message, takes a look at it to see if  there are any special instructions, and starts working.
When the worker completes its work, it then sends a message back, with the final results of  what it’s been working on.
The main browser code then takes these results and incorporates them into the page in some way.
Your message says you need me to compute a 200x200 pixel section of a ray traced image.
Why not allow workers to access the DOM? I mean this seems like a lot of trouble to pass messages back and.
One reason the DOM and JavaScript have been so successful is that we’re able to highly optimize DOM operations because we have only one thread with access to the DOM.
If  we let multiple threads of  computation concurrently change the DOM, then we’ll seriously impact its performance (and browser implementors would have to go to great effort to make sure making changes to the DOM is safe)
The truth is, allowing a bunch of  changes to the DOM at the same time can easily lead to situations where the DOM is in an inconsistent state, which would be bad.
Take a look at all the potential uses for workers below.
Which ones might improve the design and the performance of an app?
Processing large amounts of data in arrays or large JSON responses from web services.
Polling web services and alerting the main page when something happens.
Managing a database connection along with adding and removing records for the main page.
All answers are good uses, although you could debate a couple: spell checking & syntax checking may be better done in the main page code; race track betting may be better not done at all.
But rather than worrying about IE specifically, here’s how you can easily check to see if any browser supports Web Workers:
If workers are supported, the property Worker will be defined in the global scope, window.
And if Worker isn’t defined, then we’ve got no support in the browser.
You’ll want to handle that condition in a way that is appropriate for your app.
Here, we’re just letting the user know by putting a message in an element with id=“status”
Google’s Chrome browser has some extra security restrictions that will prevent you from.
If you try, your page won’t run and you’ll get no.
Let’s get down to the business of  creating a worker to see how this all works.
To do that we need a page to put everything in.
We’ll go with the simplest HTML5 markup we can get away with; type this into pingpong.html:
This JavaScript code is going to create and manage all the workers.
How to create a Web Worker Before we start implementing manager.js, let’s look at how you actually create a Web Worker:
And we’re assigning the new worker to a JavaScript variable named worker.
So that’s how you create one worker, but of  course you don’t have to stop there; you can create as many workers as you like:
We can easily create two more workers that make use of the same code as our first worker.
Or we can create other workers based a different JavaScript file.
We’ll see how to use multiple workers together in a bit...
To create a new worker, we create a new Worker object...
And we’ll be putting some output from the worker here.
Now that you know how to create a worker (and how easy it is), let’s start working on our manager.js code.
We’ll keep this code simple and create just one worker for now.
And we’re using the worker's postMessage method to send it a message.
The postMessage method is defined for you in the Web Worker API.
That’s a great start, but now we want to get the worker to actually do some work.
As we’ve already discussed, one way we tell a worker to do some work is by sending it a message.
To send a message we use the worker object’s postMessage method.
Let’s look at everything you can send in a message:
Receiving messages from the worker We’re not quite done with our manager.js code yet—we still need to be able to receive a message from the worker if  we’re going to make use of  all its hard work.
To receive a worker’s message we need to define a handler for the worker’s onmessage property so that anytime a message comes in from that worker, our handler will be called (and handed the message)
Here we’re defining a function that will get called whenever we receive a message from this worker.
The message from the worker is wrapped in an event object.
When we get a message from the worker we’ll stuff it in a <p> element in the HTML page.
The event object passed to our handler has a data property that contains the message data (what we’re after) that the worker posted.
Let’s take a quick look at the message our onmessage handler is receiving from the worker.
As we’ve said, this message is wrapped in an Event object, which has two properties we’re interested in: data and target:
This is the object that is sent from the worker to the code in your page when the worker posts a message.
The data property contains the message the worker sent (e.g., a string, like “pong”)
And the target is a reference to the worker that sent the message.
This can come in handy if you need to know which worker it’s from.
When the worker receives a message from the main code, the pingPong function will be called, and the message will be passed in.
And if the message contains a string that says “ping”, we’ll send back a message that says “pong”
The worker's message goes back to the code that created the worker.
Let’s write the worker’s message handler, pingPong, and we’re going to start simple.
Here’s what it’s going to do (you might have already guessed from the name pingPong): the worker’s going to check any message it gets to make sure it contains the string “ping”, and if  it does, we’re going to send a message back that says “pong”
So, in effect, the work of  the worker is just to get a “ping” and to answer with a “pong”—we’re not going to do any heavy computation here, we’re just going to make sure the manager and worker are communicating.
Oh, and if  the message doesn’t say “ping”, we’re just going to ignore it.
So the function pingPong takes a message and responds with “pong”
For that we’re also going to make use of  another onmessage handler, the one in the worker itself.
Every worker is ready to receive messages, you just need to give the worker a handler to process them.
Here’s how we do that (go ahead and create a file worker.js and add this code):
We’re going to write the function pingPong to handle any messages that come in.
We’re assigning the onmessage property in the worker to the pingPong function.
Make sure you’ve got pingpong.html, manager.js and worker.js typed in and saved.
Now keep those files open so you can review them and let’s think through how this works.
First, manager.js creates a new worker, assigns a message handler to it, and then sends the worker a “ping” message.
The worker, in turn, makes sure pingPong is set up as its message handler, and then it waits.
At some point, the worker receives a message from the manager, and when it does it checks to see that it contains “ping”, which it does, and then the worker does a lot of  very little hard work and sends a “pong” message back.
At this point the main browser code receives a message from the worker, which it hands to the message handler.
The handler then simply prepends “Worker says ” to the front of  the message, and displays it.
Now, our calculations here say the page should display “Worker says pong”...okay okay, we know, you can’t take the suspense any more...
For each bit of code below, act like you’re the browser and write its output in the.
You can assume this code is using the same worker.js we just wrote:
You can check the solutions at the end of the chapter.
Careful if you try these; you might have to kill your browser to escape...
There is a light at the end of every tunnel...
While workers typically get their work orders through a message, they don’t have to.
Check out this nice, compact way to get work done with workers and HTML.
You can check your solution with ours at the end of the chapter.
Q: Can I just pass a function instead of a JavaScript file when I create the worker? That would seem easier and more consistent with how JavaScript usually does things.
Here’s why: as you know, one of the requirements of a worker is that it not have access to the DOM (or to any state of the main browser thread for that matter)
If you could pass a function to the Worker constructor, then your function could also contain reference to the DOM or other parts of your main JavaScript code, which would violate that requirement.
So, the designers of Web Workers chose instead to have you just pass a JavaScript URL to avoid that issue.
Q: When I send a worker an object in a message, does it become a shared object between my main page and the worker?
A: No, when you send an object the worker gets a copy of it.
Any changes the worker makes will not affect the object in your main page.
The worker is executing in a different environment than your main page, so you have no access to objects there.
The same is true of objects the worker sends you: you get a copy of them.
We’re creating three workers, and storing them in an array, workers.
Here, we’re adding the new worker to the workers array.
Let’s add a couple of workers to our pingPong game.
Your job is to fill in the blanks to complete the code so we have three pings sent to the workers, and three pongs back from the workers.
Let’s add a couple of workers to our pingPong game.
Your job was to fill in the blanks to complete the code so we have three pings sent to the workers and three pongs back from the workers.
We use the data property to get the contents of the message.
We set up the message handler in our main page code by using the onmessage property of the worker.
Web Workers have a global function named importScripts that you can use to import one or more JavaScript files into your worker.
To use importScripts just give it a comma separated list of  files or URLs you’d like to import, like this:
Then when importScripts is invoked, each JavaScript URL is retrieved and evaluated in order.
Notice that importScripts is a full-fledged function, so (unlike import statements in a lot of  languages) you can make runtime decisions about importing, like this:
I’ve been wondering how to include additional JavaScript files in.
I’ve got some financial libraries I’d like to make use of and copying and pasting them into my worker would result in a huge file that’s not very maintainable.
Because importScripts is a function, you can import code as the task demands.
Virtual Land Grab Explorers of  the Mandelbrot Set have already grabbed areas of  the virtual countryside and given them names like the lovely “Seahorse Valley,”  “Rainbow Islands,” and the dreaded “Black Hole.” And given the value of  physical real estate these days, the only play left seems to be in the virtual spaces.
So, we’re going to build an explorer for the Mandelbrot Set to get in on the action.
Actually, we have to confess, we already have built it, but it’s slow—navigating around in the entire Mandelbrot Set could take a very long time —so we’re hoping together we can speed it up, and we have a hunch Web Workers may be the answer.
Just click anywhere and you’ll zoom into an area of  the map.
Keep clicking to explore different areas, or reload to start over.
Watch out for areas with black holes, they tend to suck you in.
We don’t know about you, but while the scenery is beautiful, our viewer could be a little faster...
Like some beach front property right on the edge of the Azure Vortex?
Well, if you happen to be a mathematician then you know the Mandelbrot Set is the equation:
You also know that it’s simply a set of complex numbers (numbers with a real part, and an imaginary part) generated by this equation.
If, on the other hand, you’re not a mathematician, the best way to think about the Mandelbrot Set is as an infinitely complex fractal image—meaning an image that you can zoom into, to any level of  magnification, and find interesting structures.
Just look at some of  the things you can find by navigating into the set:
And why are we so interested in it? Well, the set has a few interesting properties.
First, it’s generated by a very simple equation (the one above) that can be expressed in just a few lines of  code; second, generating the Mandelbrot Set takes a fair number of  computing cycles, which makes it a great example for using Web Workers.
And finally, hey, it’s cool and a trip to work with, and what a great app to end the book with, don’t you think? RIP Benoit Mandelbrot.
How to compute a Mandelbrot Set Let’s take a look at how you’d typically structure your code to compute a Mandelbrot Set before we get workers involved.
We don’t want to focus much on the nitty-gritty of  computing Mandelbrot pixel values; we’ve already got all that code taken care of, and we’re going to give it to you in a sec.
For now, we just want you to get sense of  the big picture view of  how to compute the set:
To compute the Mandelbrot Set we loop over each row of the image.
And for each row we compute the pixels for that row.And then we draw each row on the screen.
You can probably see the row-by-row display when you run the test code in your browser.
Now this code is just meant to be simple pseudo-code—when it comes to writing the code for real, there are a few more details we need to get into: for instance, to compute a row we need to know the width of  the row, the zoom factor, the numerical resolution to which we want to compute it, and a few other small details.
We can capture all those details in a task object like this:
The taskForRow object holds all the data needed to compute a row.
And we pass taskForRow into computeRow, which returns the computed row.
Now the trick is going to be taking this and reworking it to divide up the computation among a number of  workers, and then adding the code that handles giving tasks to workers, and handles dealing with the results when the workers complete the tasks.
To get started, the browser first creates a bunch of  workers to help (but not too many—workers can be expensive if  we create too many of  them—more on this later)
The browser code needs to break up the job of computing this image into a number of small tasks for the workers to compute.
We’re going to dole out regions to workers to compute.
The browser JavaScript code creates a bunch of workers to perform some work.
Next, the browser code doles out a different part of the image for each worker to compute: The first.
The browser hands out pieces of the image to be computed by each worker.
Workers send back the the pieces of the image they’ve computed when they’re done.
Each worker works on its own piece of  the image independently.
As a worker finishes its task, it packages up the result and sends it back.
All the pieces of the image created by the workers are aggregated into the final image.
As pieces of  the image come back from the workers they are aggregated into the image in the browser, and if  there are more pieces to compute, new tasks are handed out to the workers that are idle.
The image is complete, and the workers can rest until there is more work.
With the last piece of  the image computed, the image is complete and the workers sit idle, until the user clicks to zoom in, and then it all starts again...
What does it matter if I break up the task and distribute it to workers? I.
First consider an application that has a lot of  “computing” going on that also has to be responsive to the user.
If  your application is hogging a lot of  JavaScript time, your users are going to experience a sluggish interface that feels slow (again, because JavaScript is single-threaded)
By adding workers to such an app you can immediately improve the feel of  the app for your users.
Why? Because JavaScript has a chance to respond to user interaction in between getting results from the workers, something it doesn’t have a chance to do if  everything’s being computed on the main thread.
So the UI is more responsiveand your app’s just going to feel faster (even if  it isn’t running any faster under the hood)
Don’t believe us? Give it a try and put some real users in front of  your app.
Almost all modern desktops and devices today are shipping with multicore processors (and perhaps even multiple processors)
Multicore just means that the processor can do multiple things concurrently.
With just a single thread of  control, JavaScript in the browser doesn’t make use of  your extra cores or your extra processors, they’re just wasted.
However, if  you use Web Workers, the workers can take advantage of  running on your different cores and you’ll see a real speedup in your app because you’ve got more processor power being thrown at it.
If  you’ve got a multicore machine, just wait, you’re going to see the difference soon.
Web Workers aren’t intended to be used in large numbers—while creating a worker looks simple in code, it requires extra memory and an operating system thread, which can be costly in start-up time and resources.
So, in general you’ll want to create a limited number of  workers that you reuse over time.
Take our Mandelbrot example: in theory you could assign a worker to compute every single pixel, which would probably be much simpler from a code design perspective, but given that workers are heavy-weight resources, we would never design our app that way.
Instead, we’ll use a handful of  workers and structure our computation to take advantage of  them.
Let’s get a little further into the design of  the Fractal Explorer and then we’ll come back and play with the number of  workers we’re using to understand the performance implications.
You’ve certainly got a lot of background now on building Web Worker apps, how to create and use workers, a bit about how you can solve big computations by breaking them down into small tasks that can be computed by your workers, and you even know a little about how Mandelbrot sets are computed.
Try to put it all together and think through how you’d take the pseudo-code below and rewrite it to use workers.
You might first assume you have as many workers as you need (say a worker for every single row), and then add the constraint that you have a limited number of workers (fewer workers than the number of rows):
Let’s build the Fractal Explorer app Here’s what we need to do:
Creating the Fractal Viewer HTML Markup First we need to set up an HTML page to hold our app.
You’ll want to create an HTML file named fractal.html and add the following markup.
If you’re wondering where the worker code is going to go, remember, we don’t link directly to a.
Here’s all the we’ve got for you, this contains all the numerical code as well as some code for handling graphics.
And here’s the JavaScript code we’re going to be writing...
Set up our HTML page to hold the Mandelbrot App.
Create some workers and get them set up to compute.
Process the worker results as the workers complete their tasks.
We have to tell you we were planning on an entire chapter on the wonders of computing the Mandelbrot Set...
I guess we were running a bit late on this book, so our apologies, but we’re going to have to give you some Ready Bake Code code to do the low-level computation of the Mandelbrot graphics.
Here’s the good side though: we can focus on how to use Web Workers without spending the next couple of days on math and graphics.
That said, we encourage you to explore those topics on your own!
Anyway, first we’ve got the code used to manage tasks and draw the rows for the fractal images.
Start by typing this code into a file called “mandellib.js”:
These are the global variables the Mandelbrot graphics code uses to compute the set and display it.
This function packages up all the data needed for the worker to compute a row of pixels, into an object.
You’ll see later how we pass this object to the worker to use.
Ready Bake Code Reminder: you can download all the code from http://wickedlysmart.com/hfhtml5
We’ll use this palette in drawRow (below) to convert the value we get back from a worker to a color for the graphic display of the set (the fractal image)
It uses this rowData variable to do it; rowData is a one-row ImageData object that holds the actual pixels for that row of the canvas.
Here’s where we use the palette to map the result from the worker (just a number) to a color.
And here’s where we write the pixels to the ImageData object in the context of the canvas!
This code should be familiar; it’s similar to what we did in Chapter 8 with video and canvas.
Here’s where we grab the canvas and the context and set the initial width and height of the canvas.
Here, we’re initializing the rowData variable (used to write the pixels to the canvas)
And here we’re initializing the palette of colors we’re using to draw the the set as a fractal image.
This Ready Bake Code is what the worker will use to do its mathematical computation of the Mandelbrot Set.
This is really where the magic of the computation happens (and if you explore the Mandelbrot Set more deeply, this is where you’ll want to focus)
It’s given an object with all the packaged up values it needs to compute that row.
Notice that for each row of the display, we’re doing two loops, one for each pixel in the row...
This inner loop is where the computational complexity is, and this is why the code runs so much faster when you have multiple cores on your computer!
The end result of all that computation is a value that gets added to an array of named values, which is put back into the task object so the worker can send the result back to the main code.
We’ll take a closer look at this part in a bit.
With the Ready Bake Code out of  the way, let’s now turn our attention to writing the code that is going to create and hand tasks to the workers.
We iterate through the array, and create a task for each idle worker:
We continue to iterate, looking for the next idle worker to give a task to.
Writing the code Now that we know how we’re going to create and manage our workers, let’s write the code.
We really need an initial function for this, so let’s create a function in mandel.js named init—we’ll place a few other things in it as well, to get the app up and running (like making sure we have the graphics intialization out of  the way):
First let’s define a variable that holds the number of workers we want.
We’re choosing 8, feel free to play with this when you’ve got the app working.
Let’s set up an onload handler that calls init when the page is fully loaded.
This function is defined in the Ready Bake Code and handles getting the canvas context, resizing the canvas to your browser’s size, and a few other graphic details.
We then set each worker’s message handler to a function that calls the processWork function, and we’ll pass it the event.target (the worker that just finished), and the event.data (the results from the worker)
To do that we’ll add an “idle” property to the worker.
This is our own property, not part of the Web Worker API.
Right now we’re setting it to true since we haven’t given the workers anything to do.
And we add the worker we just created to the array of workers.
And finally, at some point we need to start these workers working.
We’ll put that code in a function named startWorkers, which we need to write.
Getting the workers started Okay we’ve got a few things to knock out: we need to start the workers, we need to write the function that can process the work that comes back from the workers and, well, we need to write the code for the worker too.
Let’s start by writing the code to start the workers:
The first is nextRow, which keeps track of which row we’re.
Every time the user zooms into the Mandelbrot image we start a new image computation.
The generation variable keeps track of how many times we’ve done this.
Now, we loop over all the workers in the workers array...
If it is, we make a task for the worker to do.
This task is to compute a row of the Mandelbrot Set.
Now, we’re about to give the worker something to do, so we set the idle property to false (meaning, it’s busy)
And here’s where we tell the worker to start work, by posting a message containing the task.
The worker is listening for a message, so when it gets this message, it will start working on the task.
And finally, we increment the row, so the next worker gets the next row.
The startWorkers function is going to start the workers, and also restart them if the user zooms into the image.
So, each tme we start the workers we reset nextRow to zero and increment generation.
How both of these are used will become clearer in a bit...
We’re using importScripts to import the workerlib.js Ready Bake Code so the worker can call the computeRow.
All the worker does is set up the onmessage handler.
It doesn’t need to do anything else, because all it does is wait for messages from mandel.js to start working!
It gets the data from the task, and passes that to the computeRow function, which does the hard work of the Mandelbrot computation.
The result of the computation, saved in the workerResult variable, is posted back to the main JavaScript using postMessage.
Implementing the worker Now that we’ve got the code to get our workers started by passing each a task, let’s write the worker code.
Then all we need to do is come back and process the results from the worker, once the worker has computed its part of  the fractal image.
Before we write the code for the worker though, let’s quickly review how it should work:
The worker takes the task and passes it to a Ready Bake function to compute the row.
The computed row is completed and we need to send it back to the main page code.
So let’s implement this: go head and type the following code into your worker.js file.
That was a lot of  code in just a few pages.
Let’s take a quick pit stop, and refuel our tanks and stomachs.
We also thought you might want to get a quick peek behind the scenes and see what the worker tasks and results look like (they look remarkably similar as we’ll see)
So, grab a bottle of  sarsaparilla and let’s take a look while you’re resting...
The task contains all the values the worker needs to do its computation.
So you’ve looked at the call to createTask and postMessage, which uses the task:
And you might be wondering what that task looks like.
Well, it’s an object made up of propeties and values, let’s take a look:
And what about the results we get from computing the row in the worker?
What does this look like? Remarkably similar to the task:
That’s great because when we get it back from the worker we know everything about the task.
These are the values of each pixel, which still need to be mapped to colors (which happens in drawRow)
The worker takes the task passed to it and then adds a values property to it that contains the data needed to draw the row on the canvas.
Thanks for taking some time with us to check out the tasks and results.
You better take a last swig of  that sarsaparilla—we’re hitting the road again!
We hand the results to drawRow to draw the pixels to the canvas.
And our worker is all free, so we can reassign it to another task.
Back to the code: how to process the worker’s results Now that you’ve seen how the worker’s results work, let’s see what happens when we get them back from the worker.
Recall that when we created our workers, we assigned a message handler named processWork:
Our message handler calls processWork, passing it the data from the worker, and also the target, which is just a reference to the worker that sent the data.
When a worker posts a message back to us with its results, it’s the processWork function that’s going to handle it.
As you can see, it is passed two things: the target of  the message, which is just a reference to the worker that sent it, and the data of  the message (that’s the task object with the values for a row of  the image)
So our job now is to write processWork (enter this code in mandel.js):
We’re almost there, so let’s just knock out reassignWorker while we’re at it.
Here’s how it works: we check the row we’re computing by using our nextRow global variable, and as long as there’s more to compute (which we can determine by looking at how many rows are in our canvas), we give the worker a new assignment.
Otherwise, if  there’s no more work to do, then we just set the worker’s idle property to true.
We’re going to give this worker the next ro w that needs.
If the row is greater than or equal to the height of the canvas, we’re done! We’ve filled the entire canvas with results from the Mandelbrot Set workers.
But if we’ve still got rows to do, we create a new task for the next row to do, make sure our worker’s idle property is false, and post a message with the new task to the worker.
Canvas is a global variable that was assigned when we called setupGraphics in our init function.
Load the fractal.html file into your browser and see your workers going to work.
Depending on your machine, your Fractal Explorer should run a little faster than before.
We haven’t written any code to handle resizing your browser window, or clicking to zoom into the fractal for that matter.
So, for right now, all you’ll be able to see is the image on the right.
Handling a click event We’ve got our workers busy working to compute the Mandelbrot Set and returning results to us so we can draw them on the canvas, but what happens if you click to zoom in? Fortunately, because we’re using workers to do the intense computation in the background, the UI should be snappy in dealing with your click.
That said, we need to write a little code to actually handle the click.
Add this code below the call to setUpGraphics in the init function of “mandel.js”
If the canvas is clicked on, we call the function handleClick with the x and y position of the click.
The first thing we need to do is add a handler to take care of mouse clicks, and remember, the clicks are happening on our canvas element.
To do that we just add a handler for the canvas’s onclick property, like this:
Before we do let’s think about this a second: when a user clicks on the canvas it means they want to zoom into the area they’re clicking on (you can go back to the single-threaded version at http://wickedlysmart.com/hfhtml5/chapter10/singlethread/fractal.html to see this behavior)
So when the user clicks, we need to get the coordinates of where they want to zoom, and then get all the workers working on creating a new image.
Remember too, we’ve already got a function to assign new work to any idle workers: startWorkers.
There it is! Too bad we can’t zoom, and too bad it doesn’t fill the whole window yet, but we’ll get to that...
We pass in the x, y position of the click so we know where they clicked on the screen.
This code resizes the area of the fractal we are computing, with the x, y position at the center of the new area.
It also makes sure the new area has the same aspect ratio of the existing one.
This is where we set the global variables that are used to create tasks for workers: the zoom level determines how far zoomed in we are into the fractal, which determines which values of the Mandelbrot Set are being computed.
Reload fractal.html in your browser and this time click somewhere in the canvas.
When you do you’ll see the workers start working on the zoomed-in view.
Hey, you should be able to start exploring now! After you’ve played around a bit, let’s make a few final changes to get this implementation all the way there.
Nice! We can zoom, but we still need to resize the canvas to fit our window fully.
There’s one administrative detail that uses a global variable we haven’t told you about: rowData.
So, when we resize the canvas, we need to recreate the rowData object so that it is the same width as the new width of the canvas.
Check the function drawRow in mandellib.js to see how we use rowData to draw pixels into the canvas.
It also updates the values that the worker will use to do its computation based on the new width and height (we make sure the fractal will always fit the canvas and maintain the aspect ratio of the window)
We said we wanted the fractal image to fill the browser window, which means we need to resize the canvas if  the window size changes.
Not only that, but if  we change the canvas size we should also fire off  a new set of  tasks to the workers so they can redraw the fractal to fill up the new canvas size.
Let’s write the code to resize the canvas to the size of  the browser window, and we’ll also restart the workers while we’re at it.
Now we need to do one more thing: install resizeToWindow as a handler for the browser window’s resize event.
You’ll want to place this code in the init function of  mandel.js, just below the call to setUpGraphics.
The anal-retentive chef coder There’s just one more thing, and we could let this one go, but the code just doesn’t seem correct without it.
Think through this with us: you’ve got a bunch of  workers happily working on their rows and all of  the sudden the user has to go and click on the screen to zoom.
Well isn’t that great, because the workers have been working hard on their rows, and now the user wants to go and change the entire image, making all that work useless.
Even worse, the workers have no knowledge that the user has clicked, and they’re going to send back their results anyway.
And far worse, the code in the main page is gladly going to receive and display that row! And not to get all doomsday and everything, but we’ve got exactly the same problem if  the user resizes the window.
Now, you’d probably never notice any of  this because there aren’t that many workers, and the workers very quickly compute the same rows for the new image, overwriting the previous, incorrect rows.
Not only that, it’s so easy to fix we just have to.
Of  course we have a little confession to make: we knew this was coming, and you might remember a little variable we stuck in named generation.
Remember, every time we restart our workers we increase the value of  generation.
Also remember the results object that comes back from the worker: every result has its “generation” as a property.
So we can use generation to know if  we’ve got a result from the current or the previous visualization.
Let’s look at the code fix, and then we can talk about how it works; edit your processWork function in mandel.js and add these two lines:
Note to Editor: Apologies for the little rant here, but, hey, after this many pages, well, it can get to you...
We’re checking the worker’s result to see if its generation matches the current one.
If it does match we draw the row, otherwise it must be old and we ignore it.
In either case we get the worker reassigned to new work!
So all we’re doing here is checking to make sure the current generation we’re working on matches the generation of  the result that comes back from the worker.
If  it does, great, then we need to draw the row.
If  it doesn’t, well that means it must be old, and so we just ignore it—it’s too bad our worker wasted its time on it, but we don’t want to draw an old row from the previous image on the screen.
So, really, that’s it, we promise, it’s time to make sure you have the changes above typed in, and get ready for...
That’s it! You should be ready to go with all your code.
Load the fractal.html file into your browser and see your workers going to work.
This version should be faster and more responsive than the original, single-threaded version; if  you’ve got more than one core on your computer, then it will be a lot faster.
One core is maxed out and can’t compute any harder.
Now our eight cores are really working hard, and our fractal computation is WAY faster.
And you can see in our activity monitor, all 8 cores are being used to the max.
Give it a try on your machine and see what values work best for you.
If you’re writing high performance code you’ll want to check out how the number of workers can impact your app’s runtime.
To do that, you can use the task monitor on either OS X or Windows.
You’ve done it!  You’ve got a fully functional Fractal Explorer that’s all ready for exploring the Mandbelbrot territory.
So what are you waiting for—dig in and find your little slice of  the virtual universe.
Once you’ve found it, print it, paste it in here, and give your new little homestead a name.
What happens if  something goes terribly wrong in a worker? How can.
Now before you take off, would you believe there’s even more to know about Web Workers? Check out the next couple of pages to see everything we didn’t cover in this chapter.
Remember your JSONP? Include your callback function in the URL query, and it will be called with the JSON results passed into the response parameter.
Use setInterval in your workers You might have missed this (it went by fast, we used it in only one example), but you can use setInterval (and setTimeout) in your workers to do the same task repeatedly.
For instance you could update the quotes worker (quote.js) to post a random quote every 3 seconds, like this:
Subworkers If  your worker needs help with its task, it can create its own workers.
A worker creates subworkers just like the code in your page creates a worker, with:
Remember that subworkers, just like workers, are fairly heavy-weight: they take up m emory.
So, be cautious about how many subworkers you c reate.
Without Web Workers, JavaScript is singlethreaded, meaning it can do only one thing at a time.
If you give a JavaScript program too much to do, you might get the slow script dialog.
Web Workers handle tasks on a separate thread so your main JavaScript code can continue to run and your UI remains responsive.
The code for a Web Worker is in a separate file from your page’s code.
Web Workers don’t have access to any of the functions in the code in your page or the DOM.
The code in your page and the Web Worker communicate via messages.
You can send strings and objects to a worker via postMessage.
Receive messages back from workers by setting the worker’s onmessage property to a handler function.
A worker receives messages from the code in your page by setting its onmessage property to a handler function.
When a worker is ready to send back a result, it calls postMessage and passes the result as the argument.
Worker results are encapsulated in an event object and placed in the data property.
You can find out which worker sent the message using the event.target property.
Messages are copied, not shared, between your main page code and the worker.
You can use multiple workers for large computations that can be split into multiple tasks, such as computing a fractal visualization or ray tracing an image.
Each worker runs in its own thread, so if your computer has a multicore processor, the workers are run in parallel, which increases the speed of the computation.
You can set this to an error handling function that will be called if your worker has a script error.
To include and use JavaScript libraries in your worker file, use importScripts.
Implement the callback you pass in the URL query in the worker file.
While workers do not have access to the DOM or functions in your main code, they can use XMLHttpRequest and Local Storage.
Sit back, relax and make it stick by working the rest of your brain a little.
Capability of a processor to do more than one thing at a time.
The property used to register a handler to receive messages.
A lovely area of the Mandelbrot countryside is _________ Valley.
The guy who wrote the original version of Fractal Viewer.
The guy who wrote the original version of Fractal Viewer.
This sends five ping messages to the worker, which responds with five pongs, so we get five “Worker says pong” alerts.
This sends five pong messages to the worker, which ignores them since they aren’t pings.
This sends a ping and then each time a pong comes back, sends another, so we get an infinite loop of pong alerts.
This sends a ping every second, so we get a pong back each time it sends a ping.
In our HTML, we have a script that creates a worker, which executes immediately.
The worker chooses a quote randomly from the quotes array, and sends the quote to the main code using postMessage.
The main code gets the quote from event.data and adds it to the page in the “quote” <p> element.
While workers typically get their work orders through a message, they don’t have to.
Check out this nice, compact way to get work done with workers and HTML.
Capability of a processor to do more than one thing at a time.
The property used to register a handler to receive messages.
A lovely area of the Mandelbrot countryside is _________ Valley.
The guy who wrote the original version of Fractal Viewer.
Wouldn’t it be dreamy if this were the end of the book? If there were no bullet points or.
We’ve covered a lot of  ground, and you’re almost finished with this book.
We’ll miss you, but before we let you go, we wouldn’t feel right about sending you out into the world without a little more.
We can’t possibly fit everything you’ll need to know into this.
Modernizr One thing you’ve probably noticed in this book, is that when you want to detect browser support for an API, there is no uniform way of  doing so; in fact, almost every API is detected in a different way.
For geolocation, for instance, we look for the geolocation object as a property of  the navigator object, while for web storage we check to see if  localStorage is defined in the window object, and for video we check to see if  we can create a video element in DOM, and so on.
Modernizr is an open source JavaScript library that provides a uniform interface for detecting browser support.
Modernizer takes care of  all the details of  the different means of  detection, even factoring in all the edge cases around older browsers.
Modernizr has gained a lot of  developer support so you’ll see it used widely around the Web.
Here’s an example of detecting for geolocation, web storage and video, all in a consistent manner.
Including Modernizr in your page To use Modernizr, you need to load the JavaScript library into your page.
To do that you first visit the Modernizer site at http://www.modernizr.com/download/, which allows you to custom configure a library that contains just the detection code you need (or you can always grab everything while you’re there)
After you’ve done that, stash the library in a file of  your choice and load it into your page (visit Modernizr’s web site for addition tutorials and documentation on best practices for doing this)
How to detect support Once you’ve got Modernizr installed, detecting HTML5 elements and JavaScript APIs gets a lot easier and more straightforward:
Note: Modernizr goes far beyond simple API detection and can also detect support for CSS features, video codecs and many other things.
In addition to the <audio> element, there is also a corresponding Audio API that supports the methods you’d expect, like play, pause and load.
If  this sounds familiar, it should, because the audio API mirrors (where appropriate) the video API.
Audio also supports many of  the properties you saw in the video API, like src, currentTime and volume.
Here’s a bit of  audio code to get a feel for using the API with an element in the page:
Also like video, each browser implements its own look and feel for player controls (which typically consist of  a progress bar with play, pause and volume controls)
Despite its simple functionality, the audio element and API give you lots of  control.
Just like we did with video, you can create interesting web experiences by hiding the controls and managing the audio playback in your code.
And with HTML5, you can now do this without the overhead of  having to use (and learn) a plug-in.
A Standard for Audio Encodings Sadly, like video, there is no standard encoding for audio.
You’ll find that support for these formats varies across the browser landscape with different levels of  support for the various formats in each browser (as of  this writing, as of  this writing, Chrome is the only browser that supports all three formats)
Look familiar? Yes, audio  supports similar functionality as video (minus video, obviously)
Get a reference to the audio element, then lower its volume to 1/2 and start playing.
Now, there’s nothing you can do in jQuery that you can’t do with JavaScript (as we said, jQuery is just a JavaScript library), however it does have the power to reduce the amount of  code you need to write.
Let’s check out a few things you can do in jQuery and we encourage you to take a closer look if  you think it might be for you.
For starters, remember all the window onload functions we wrote in this book? Like:
A working knowledge of jQuery is a good skill these days on the job front and for understanding others’ code.
Just like our version, when the document is ready, invoke my function.
This is cool, but as you can see it takes a little getting used to at first.
So what about getting elements from the DOM? That’s where jQuery shines.
Let’s say you have an anchor in your page with an id of  “buynow” and you want to assign a click handler to the click event on that element (like we’ve done a few times in this book)
So what's going on here? First we're setting up a function that is called when the page is loaded.
Next we're grabbing the anchor with a “buynow” id (notice jQuery uses CSS syntax for selecting elements)
And then we're calling a jQuery method, click, on the result to set the onclick handler.
That’s really just the beginning; we can just as easily set the click handler on every anchor on the page:
To do that, all we need to do is use the tag name.
Compare this to the code you’d write to do this if we were using JavaScript without jQUery.
Or, we can do things that are much more complex:
Like find all the <li> elements that are children of the element with an id of playlist.
Actually this is jQuery just getting warmed up; jQuery can do things much much more sophisticated than this.
There’s a whole ’nother side of  jQuery that allows you to do interesting interface transfomations on your elements, like this:
As you can see, there’s a lot you can do with jQuery, and we haven’t even talked about how we can use jQuery to talk to web services, or all the plug-ins that work with jQuery.
If  you’re interested, the best thing you can do is point your browser to http://jquery.com/ and check out the tutorials and documentation there.
Why would you want to?  Well, you might need to validate or transform your documents as XML, or you might want to support XML technologies, like SVG (see #5), that work with HTML.
Let’s look at a simple XHTML document and then step through the high points (we couldn’t possibly cover everything you need to know on this topic, as with all things XML; it gets complicated, fast)
All elements have to be well formed; note the trailing /> here to close this empty element.
We can embed XML right in the page! Kinda cool.
Now here’s a few things you need to consider for your XHTML pages:
Make sure and include the XHTML namespace in your <html> element (which we’ve done above)
Closing all your elements, quotes around attribute values, valid nesting of elements, and all that.
Like we said, with XML there’s a lot more to know and lots of  things to watch out for.
And, as always with XML, may the force be with you...
We’re using SVG to draw a rectangle into our page.
Unlike canvas, which, as you know, is an element that allows you to draw pixels into a bitmap drawing surface in your page with JavaScript, SVG graphics are specified with XML.
Let’s take a look at a very simple SVG example:
If  you have more complex shapes to draw, you can also specify paths with SVG—of course, at that point things start getting more complex (as you already saw with paths in canvas)
However, there are graphical editors that will let you draw a scene and export it as SVG, saving you the headache of  figuring out all those paths yourself !
What’s so great about SVG? Well, one nice aspect of  SVG is that you can scale your graphics as big or small as you want and they don’t pixellate, like a jpeg or png image would if  you scaled it.
And because SVG is specified with text, SVG files can be searched, indexed, scripted and compressed.
We’ve barely scratched the surface of  what you can do with SVG, so explore more if  this topic interests you.
You can grab this circle element just like any other element from the DOM and do stuff with it...
Offline web apps If  you’ve got a smartphone or tablet, you’re probably accessing the Web on the go, and with WiFi and cellular networks, you’re connected almost all the time.
But what about those times when you’re not? Wouldn’t it be great if  you could keep on using those great HTML5 web apps you’ve been building for yourself ?
Offline web applications are supported by all modern desktop and mobile browsers (with one exception: IE)
So how do you make your web application available offline? You create a cache manifest file that contains a list of  all the files your app needs to work, and the browser will download all those files, and switch to the local files if  and when your device goes offline.
To tell your web page that it has a manifest file, you simply add the filename of  the cache manifest file to your <html> tag, like this:
This file says: when you visit the web page that points to this file, download all the files listed in the CACHE section of  the file.
You can also add two other sections to the file, FALLBACK and NETWORK.
Now, before you run off  to go play with this, you need to know two things: first, you need to make sure your web server is set up to serve the mime type for cache manifest files correctly (just like we had to do for video files in Chapter 8)
For example, on an Apache server, add this line to your .htaccess file at the top level of  your web directory:
The other thing you need to know is that testing offline web applications is tricky! We recommend checking out a good reference on the topic and reading the HTML5 offline web applications specification.
Once you’ve got basic caching working, you can use JavaScript to be notified of  cache events, such as when a cache manifest file is updated and the status of  the cache.
To be notified of  events, you add event handlers to the window.
With offline web apps, you can use your favorite web apps when you're not connected!
List all the files you want to cache in the CACHE section: html, css, javascript, images, etc.
Implement the errorHandler to be notified if there's an error with the cache.
Web Sockets We looked at two ways of  communicating in this book: XMLHttpRequest and JSONP.
In both cases we used a request/response model based on HTTP.
That is, we used the browser to make a request for the initial web page, CSS and JavaScript, and each time we needed something else, we made another request using XMLHttpRequest or JSONP.
We even made requests when there was no new data for us, which happened sometimes in the Mighty Gumball example.
Web Sockets is a new API that allows you to keep an open connection with a web service so that any time new data is available the service can just send it to you (and your code can be notified)
Think of  it like an open phone-line between you and the service.
Here’s a high-level overview of  how you use it: first, to create a web socket we use the web socket constructor:
You can be notified as soon as the socket is open with the open event, which you can assign a handler for:
You can send a message to the web service with the postMessage method:
And to receive messages you register another handler, like this:
There’s a little more to it than this, of  course, and you’ll want to check out some tutorials online, but there’s not much more to the API.
This API has been lagging behind some of  the other HTML5 API development, so check out the latest browser compatibility guides before you undertake a major project.
Notice this URL uses the ws protocol, not the http protocol.
And remember you or someone else is going to have to write the server code so you have something to talk to!
Here we supply a handler that is called when the socket is fully opened and ready for communcation.
Here's we're sending the server a string; binary is coming but not widely supported yet.
By registering a handler, we receive all messages, which are contained in the event's data property.
More canvas API We had fun with the canvas in Chapter 7, building our TweetShirt startup.
But there are lots of  other fun canvas-related things you can do and we wanted to touch on a few more of  them here.
We mentioned very briefly that you can save and restore the canvas context.
Why would you want to do that? Let’s say you’ve set some properties of  the context, like the fillStyle, strokeStyle, lineWidth and so on.
And you want to then temporarily change those values to do one thing, like draw a shape, but not have to reset them all to get back to the property values you had previously.
You can use the save and restore methods to do that:
These methods come in particularly handy when you want to translate or rotate the canvas to draw something and then put it back to its default position.
What do the translate and rotate methods do? Let’s take a look...
Now, we’ll pick up the canvas and move it 200 pixels to the right, and.
We set up a bunch of properties in the context and do some drawing.
What if we rotate the canvas before we draw the rectangle? The canvas.
Now let’s put all that together! You can use the translate and rotate methods together to create some interesting effects.
We’re saving the context here so we can easily restore it to its normal grid position after we’re done.
When you translate or rotate the canvas, it’s moved on a grid that’s positioned with respect to the top left corner of the browser window.
If you’ve positioned your canvas using CSS, those values are taken into account.
With HTML5, we now have a new way of  selecting elements from the DOM, inspired by jQuery.
Now, let’s use the selectors API to ask for the “avatar” <p> element:
And that’s it!  Those are the only two methods in the API.
The selectors API is small, but adds powerful new functionality for selecting elements.
Take a close look at the structure of this HTML.
We’re going to use the selectors API to select elements from the page.
Now we’re using the tag name and the class to select it.
Okay, we really wanted to keep it to the ten things we didn’t tell you, but it looks like we’ve got a ways to go, and instead of  standing between you and your reading of  the index, we’re going to give you a bunch more in a single page.
Here they are (keep in mind some of  these areas are still evolving, but we knew you’d want to know about them for future reference):
If  you’re looking for something more industrial than the Web Storage API to store your data locally, keep an eye on the web database space.
Two competing visions are out there right now: Web SQL and IndexedDB.
Ironically, Web SQL is the more widely supported of  the two, but was recently deprecated by the standards bodies (meaning they don’t recommend adopting it as a standard, and you probably shouldn’t base your next startup on it)
IndexedDB, on the other hand, isn’t widely implemented yet, but has support from Google and Firefox.
IndexedDB provides fast access to a large collection of  indexed data, while Web SQL is a small SQL engine that runs in the browser.
Keep an eye out for where these technologies go; they are changing fast!
Drag and Drop Web developers have been doing drag and drop with jQuery for a while now, and now this functionality is native in HTML5
With the HTML5 Drag and Drop API, you specify something to drag, where you can drop it, and JavaScript handlers to be notified of  the various events that occur while dragging and dropping.
To make an element draggable, just set the draggable attribute to true.
Just about any element can be dragged: images, lists, paragraphs, and so on.
You can customize the dragging behavior by listening for events like dragstart and dragend and even change the style of  an element to look like you want while it’s being dragged.
You can send along a little bit of  data with your dragged element using the dataTransfer property; access this through the event object to know if, say, the element is being moved or copied.
As you can see, there are lots of  great opportunities to build new UI interactions with HTML5 Drag and Drop.
Cross-document Messaging In chapter 6, we used a communication pattern known as JSONP to get around the cross-domain communication issues with XMLHttpRequest.
There’s another way you can communicate between documents—even documents in different domains.
The Cross-document Messaging API specifies that you can post a message to a document you’ve loaded using an iframe element.
This document could even be at a different domain! Now, you wouldn’t want to load just any document into your iframe; you’ll want to make sure it’s from a domain you trust and set it up to receive your messages.
But the upshot is that this is a way to get messages back and forth between two HTML documents.
The exciting thing about HTML5 is that there are so many new capabilities being developed at a fairly fast pace; there’s even more we could put on the this page, but we’re out of  room.
So keep up to date with us on the Web at http://wickedlysmart.com for all the latest developments in HTML5!
Here in Webville we’ve recently made a few additions to our building codes and we’ve prepared a handy guide to any new construction you might be considering.
In particular we’ve added a bunch of  new new semantic elements that give you even more power to architect your pages.
So if  you need a quick tutorial on the semantic additions to HTML5, take one—they’re FREE (for a limited time only)
You could use <section> to mark up, oh, say a Guide to HTML.
And remember, use <div> if you’re just grouping elements together for styling purposes.
An <article> is a self-contained chunk of content that you might want to share with another page or web site (or even your dog)
Webville Guide to HTML5 Semantic Elements Here in Webville we’ve made some recent changes to our building code and we’ve prepared a handy guide for all your new construction.
If you’ve been using <div>s for common construction like headers, navigation, footers, and blog articles, then we have some new building blocks for you.
No need to rush; take your time and do it rightyou’ll need to study up a bit on the valid formats for <time>
Use with a little CSS and JavaScript for some nice effects.
Hey Mr., make sure you use an abbreviation for that long word! Great for search, because search engines aren’t always as smart about abbreviations as we are.
Use <mark> to mark words, for highlighting or editing, say.
Webville Guide to CSS3 Properties Now that you’ve got your new building blocks into place, it’s time to think about some interior design.
You’ll want to make all your new construction look good, right?
There are quite a few new properties in CSS3, many of which do what web page authors have been doing for years with various contortions of HTML, images, and JavaScript.
There are a couple of powerful new ways to lay out your page with CSS that go beyond positioning and are much easier to use.
This gives you a table layout without the HTML tables.
With flexbox you have greater control over how the browser flows boxes, like <div>s onto the page.New animations With animations, you can animate between property values.
For instance you can make something disappear by transitioning the opacity from opaque to translucent:
The transition property specifies a property to transition into and out of, (in this case opacity), how long to take to do the transition and the easing function, so it’s gradual.
By setting opacity to 0, say on a hover event, we can create a disappear/reappear animation.New selectors.
There are a whole slew of new selectors, including nth-child, which lets you target specific child elements enclosed in an element.
Finally, you can set the background color of alternating rows in a list without going crazy.
Apache telling to serve video files with certain file extensions.
Ready Bake Code not working in some browsers  104 security restrictions in Chrome preventing running of.
Web Workers from file  482 server required to test geolocation code on mobile.
Kathy Sierra and Bert Bates created the look & feel of the Head First series.
Interior design and production all happened exclusively on Apple Macintoshes—two Mac Pros and two.
Roach, Beyman Brothers, Pogo, all the people at turntable.fm, and a heck of a lot more 80s music than.
Don’t you know about the web site? We've got answers to some.
Table of Contents How to use this book: Intro Who is this book for? We know what you’re thinking.
And we know what your brain is thinking Metacognition: thinking about thinking The technical review team Acknowledgments.
Getting access to the “Add Song” button Giving the button a click handler A closer look at what just happened...
Getting the song name How do we add a song to the page? How to create a new element Adding an element to the DOM Put it all together...
Expanding your vocabulary How to add your own functions How a function works Anatomy of a Function Local and Global Variables Knowing the scope of your local and global variables Oh, did we mention functions are also values? Did someone say “Objects”?! How to create an object in JavaScript Some things you can do with objects Let’s talk about passing objects to functions Objects can have behavior too...
How the Geolocation API determines your location Just where are you anyway? How it all fits together Revealing our secret location...
Writing the code to find the distance How to add a Map to your Page Displaying the Map Sticking a Pin in it...
The other cool things you can do with the Google Maps API Can we talk about your accuracy? “Wherever you go, there you are” Getting the app started Reworking our old code...
Mighty Gumball wants a Web app A little more background on Mighty Gumball So how do we make requests to web services? How to make a request from JavaScript Move over XML, meet JSON A quick example using JSON Writing an onload handler function Displaying the gumball sales data How to set up your own Web Server Impressing the client...
Reworking our code to make use of JSON Moving to the Live Server It’s a cliffhanger! Remember, we left you with a cliffhanger? A bug.
Drawing with Geeks Breaking down the arc method A little taste of using the arc I say degree, you say radian Back to writing the TweetShirt circle code Writing the drawCircle function...
Not your father’s TV: Video...with special guest star “Canvas” Meet Webville TV Plug that set in and test it out...
How does the video element work? Closely inspecting the video attributes...
What you need to know aboutvideo formats How to juggle all those formats...
Your Next Mission: Video Reconnaissance I was told there would be APIs? A little content “programming” on Webville TV Implementing Webville TV’s playlist So what’s up with that event handler code? How to write the “end of video” handler How the canPlayType method works We need your help! Step inside the booth, let’s take a look...
Unpacking the Demo Unit Inspecting the rest of the factory code The setEffect and setVideo handlers And here are the helper functions Getting our demo videos ready Implementing the video controls Taking care of a loose end...
Switching test videos It’s time for special effects The FX plan Time to get those effects buttons working How video processing works How to process video using a scratch buffer Implementing a scratch buffer with Canvas Writing the code to process the video How to create the buffer How to process the buffer Now we need to write some effects If only it were a perfect world...
How to use error events Where can you go from here? Bullet Points Exercise Solutions.
Were Local Storage and the Array separated at birth? Getting serious about stickies Creating the interface Now let’s add the JavaScript Completing the user interface We need to stop for a little scheduled service Do-It-Yourself maintenance We have the technology...
Reworking our app to use an array Converting createSticky to use an array What needs to change? Putting it all together Deleting sticky notes The deleteSticky function How do you select a sticky to delete? How to get the sticky to delete from the event Delete the sticky from the DOM, too Update the user interface so we can specify a color JSON.stringify, it’s not just for Arrays Using the new stickyObj Test drive sticky note colors Don’t Try This at Home (or Blowing Up Your 5 Megabytes) Now that you know localStorage,how are you going to use it? Bullet Points Exercise Solutions.
Writing the code Getting the workers started Implementing the worker Back to the code: how to processthe worker’s results Fitting the canvas to the browser window The anal-retentive coder IN THE LABORATORY Bullet Points Exercise Solutions.
