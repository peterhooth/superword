If  you thought Ajax was rocket science, this book is for you.
Head Rush Ajax is the book if  you want to cut through all the hype and learn how to make your web apps sparkle...
If  you know some HTML, a dollop of  CSS, a little JavaScript, and a bit of  PHP, but you’re mystified about what all the Ajax hype is about, this is the book for you.
Head Rush Ajax cuts through the hype and explains how to take your beginner web applications to the next level.
Before you know it, you’ll be writing next-generation web applications, and you’ll actually understand how they work!
By the time you’ve reached the end of this book, all those web technologies that didn’t quite fit together in your head will all snap into place and you’ll have The Ajax Power! You’ll know the secrets behind some of  the most popular web applications on the Internet.
You’ll impress your friends and co-workers with your knowledge of  how those interactive maps and web forms really work.
This book has humor, and charm, but most importantly, it has heart.
I know that sounds ridiculous to say about a technical book, but I really sense that at its core, this book (or at least its authors) really care that the reader learn the material.
This comes across in the style, the language, and the techniques.
Learning – real understanding and comprehension – on the part of  the reader is clearly top most in the minds of  the Freemans.
And thank you, thank you, thank you, for the book’s strong, and sensible advocacy of  standards compliance.
It’s great to see an entry level book, that I think will be widely read and studied, campaign so eloquently and persuasively on behalf  of  the value of  standards compliance in web page code.
You made an XHTML book simple enough a CEO can understand it.
She’s never done any web design, so she needed a book like Head First HTML with CSS & XHTML to take her from beginning to end.
She now has a list of  web sites she wants to build – for our son’s class, our family, ...
If  you’re someone who reads at night before falling asleep, you’ll have to restrict Head First HTML with CSS & XHTML to daytime reading.
From the awesome Head First Java folks, this book uses every conceivable trick to help you understand and remember.
Not just loads of  pictures: pictures of  humans, which tend to interest other humans.
This book is close to perfect, because of  the way it combines expertise and readability.
It’s one of  the very few software books I’ve ever read that strikes me as indispensable.
I’d put maybe 10 books in this category, at the outside.
A Nose Dive into the realm of  patterns, a land where complex things become simple, but where simple things can also become complex.
Just the right tone for the geeked-out, casual-cool guru coder in all of  us.
Wouldn’t it be wonderful if there was an Ajax book.
O’Reilly Media books may be purchased for educational, business, or sales promotional use.
Many of  the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks.
Where those designations appear in this book, and O’Reilly Media, Inc., was aware of  a trademark claim, the designations have been printed in caps or initial caps.
While every precaution has been taken in the preparation of  this book, the publisher and the authors assume no responsibility for errors or omissions, or for damages resulting from the use of  the information contained herein.
In other words, if  you use anything in Head Rush Ajax to, say, manage and monitor your atomic weapon shipping lanes, you’re on your own.
We do, however, encourage you to visit the Head First Labs, where we’re creating our own world-changing concoctions.
Despite the ominous nature of  the PROJECT: CHAOS organization, no applications were irreparably harmed in the making of  this book.
To my boys, Dean and Robbie, for reminding me that books can indeed be fun and enjoyable...
Brett is a guitar player who is still struggling with the realization that you can’t pay the bills if you’re into acoustic fingerstyle blues and jazz, and high-end custom instruments.
He’s just recently discovered, to his delight, that writing books that help people become better programmers does pay the bills.
He’s very happy about this, as are his wife Leigh, and his young kids, Dean and Robbie.
When that became fairly mundane, Brett took on application servers, working on the internals of  the Lutris Enhydra servlet engine and EJB.
Along the way, Brett got hooked on open source software, and helped found several cool programming tools, like Jakarta Turbine and JDOM.
When Lutris folded, Brett decided to take on writing and editing full-time, and has been an editor at O’Reilly Media, Inc., ever since.
Now that he’s found the Head First series, he doesn’t plan on ever going back to a “normal” career again.
Brett manages the bestselling Head First series, and writes Head First and Head Rush books on the side.
As if  that’s not enough, by the time you’ve got this book in your hands, Brett will probably have already started his next Head First book...
If  Brett’s not teaching his kids to play an instrument or watching “24” or.
Thanks to Harold Davis, another HF author, for the great pic.
Here you are trying to learn something, and your brain is doing you a favor by making sure the learning doesn’t stick.
Tired of clunky web interfaces and waiting around for a page to reload? Well, it’s.
JavaScript and XML—and your ticket to building rich Internet applications that are.
Didn’t you say that Ajax will let me update the screen without all that reloading? Something about updating just part of the page?
This request comes from the browser, and not directly from your JavaScript code.
If you’re planning on writing the next killer application, you need to understand.
In this chapter, you’ll get the inside scoop on asynchronous.
JavaScript: you’ll learn how to send requests on different browsers, master ready.
By the time you’re done, you’ll be making requests and handling responses.
Waiting room? I’m sorry, we don’t have one of those.
This is the Web, not a doctor’s office, and nobody wants to sit around reading.
In this chapter, you’ll learn how to send your users’
It’s time to take things into your own hands, and start writing code that updates your.
Using the Document Object Model, your pages can take on.
By the time you’re done with this chapter, you’ll be able to add, remove, and.
Hungry for more DOM? In the last chapter, you got a crash course in the coolest way to update.
You asked for it, and now you’re going to get it: we’re finally going to ditch.
Ever feel like nobody is listening to you? Sometimes plain old English just doesn’t cut it when you’re trying to.
You’ve been using text for all of your requests and responses so.
As if that’s not enough, you’ll teach your requests XML, too, even.
Remember the days when differences were resolved with harsh words, flying.
Get your scorecard ready, and let’s take it to the ring!
Just for you: a parting gift from Head First Labs.
In fact, you’ll find five special bonus gifts in this appendix.
Within the pages of this appendix, you’ll find some of the utility code that was.
In this section, we answer the burning question: “So, why DID they put that in an Ajax book?”
You won’t believe the things I learned from reading Head.
Do you want to learn, understand, and remember Ajax, with a goal of developing more responsive web applications?
If not, go get a copy of Head First HTML and CSS, today, and then come back and get this book.
If  you can answer “yes” to any one of  these:
Are you a kick-butt Ajax developer looking for a reference book?
Do you prefer stimulating dinner party conversation to dry, dull, academic lectures?
Are you afraid to try something different?  Would you rather have a root canal than mix stripes with plaid? Do you believe that a technical book can’t be serious if browsers are anthropomorphized?
It was built that way, and it helps you stay alive.
So what does your brain do with all the routine, ordinary, normal things you encounter? Everything it can to stop them from interfering with the brain’s real job—recording things that matter.
It doesn’t bother saving the boring things; they never make it past the “this is obviously not important” filter.
How does your brain know what’s important? Suppose you’re out for a day hike and a tiger jumps in front of  you; what happens inside your head and body?
Or trying to learn some tough technical topic your boss thinks will take a week, ten days at the most.
It’s trying to make sure that this obviously non-important content doesn’t clutter up scarce resources.
Resources that are better spent storing the really big things.
And there’s no simple way to tell your brain, “Hey brain, thank you very much, but no matter how dull this book is, and how little I’m registering on the emotional Richter scale right now, I really do want you to keep this stuff  around.”
We think of a “Head Rush” reade r as a learner.
It’s actually the web browser that is “running” all your JavaScript code.
Your brain pays attenti on to things that are ou.
If  you really want to learn, and you want to learn more quickly and more deeply, pay attention to how you pay attention.
Most of  us did not take courses on metacognition or learning theory when we were growing up.
We were expected to learn, but rarely taught to learn.
But we assume that if  you’re holding this book, you want to learn Ajax.
And you probably don’t want to spend a lot of  time.
And since you’re going to develop applications, you need to remember what you read.
To get the most from this book, or any book or learning experience, take responsibility for your brain.
The trick is to get your brain to see the new material you’re learning as Really Important.
Otherwise, you’re in for a constant battle, with your brain doing its best to keep the new content from sticking.
So just how DO you get your brain to treat Ajax like it’s a hungry tiger?
There’s the slow, tedious way, or the faster, more effective way.
You obviously know that you are able to learn and remember even the dullest of  topics if  you keep pounding the same thing into your brain.
With enough repetition, your brain says, “This doesn’t feel important to him, but he keeps looking at the same thing over and over and over, so I suppose it must be.”
The faster way is to do anything that increases brain activity, especially different types of  brain activity.
The things on the previous page are a big part of  the solution, and they’re all things that have been proven to help your brain work in your favor.
For example, studies show that putting words within the pictures they describe (as opposed to somewhere else in the page, like a caption or in the body text) causes your brain to try to makes sense of  how the words and picture relate, and this causes more neurons to fire.
More neurons firing = more chances for your brain to get that this is something worth paying attention to, and possibly recording.
A conversational style helps because people tend to pay more attention when they perceive that they’re in a conversation, since they’re expected to follow along and hold up their end.
The amazing thing is, your brain doesn’t necessarily care that the “conversation” is between you and a book! On the other hand, if  the writing style is formal and dry, your brain perceives it the same way you experience being lectured to while sitting in a roomful of  passive attendees.
I wonder how I can trick my brain into remembering.
We used pictures, because your brain is tuned for visuals, not text.
As far as your brain’s concerned, a picture really is worth 1,024 words.
And when text and pictures work together, we embedded the text in the pictures because your brain works more effectively when the text is within the thing the text refers to, as opposed to in a caption or buried in the text somewhere.
We used repetition, saying the same thing in different ways and with different media types, and multiple senses, to increase the chance that the content gets coded into more than one area of your brain.
We used concepts and pictures in unexpected ways because your brain is tuned for novelty, and we used pictures and ideas with at least some emotional content, because your brain is tuned to pay attention to the biochemistry of  emotions.
That which causes you to feel something is more likely to be remembered, even if  that feeling is nothing more than a little humor, surprise, or interest.
We used a personalized, conversational style, because your brain is tuned to pay more attention when it believes you’re in a conversation than if  it thinks you’re passively listening to a presentation.
We included more than 40 activities, because your brain is tuned to learn and remember more when you do things than when you read about things.
We used multiple learning styles, because you might prefer step-by-step procedures, while someone else wants to understand the big picture first, and someone else just wants to see a code example.
But regardless of  your own learning preference, everyone benefits from seeing the same content represented in multiple ways.
We include content for both sides of  your brain, because the more of  your brain you engage, the more likely you are to learn and remember, and the longer you can stay focused.
Since working one side of  the brain often means giving the other side a chance to rest, you can be more productive at learning for a longer period of  time.
And we included stories and exercises that present more than one point of  view, because your brain is tuned to learn more deeply when it’s forced to make evaluations and judgments.
We included challenges, with exercises, and by asking questions that don’t always have a straight answer, because your brain is tuned to learn and remember when it has to work at something.
Think about it—you can’t get your body in shape just by watching people at the gym.
But we did our best to make sure that when you’re working hard, it’s on the right things.
That you’re not spending one extra dendrite processing a hard-to-understand example, or parsing difficult, jargon-laden, or overly terse text.
In stories, examples, pictures, etc., because, well, because you’re a person.
And your brain pays more attention to people than it does to things.
We assume that if  you’re going for a Ph.D in Ajax, this won’t be your only book.
It’s the browser that stores variable values and gives your code access to network requests and responses.
Here’s what we’ve been talking about these last several pages.
These tips are a starting point; listen to your brain and figure out what works for you and what doesn’t.
Here’s what YOU can do to bend your brain into submission.
The more you understand, the less you have to memorize.
When the book asks you a question, don’t just skip to the answer.
The more deeply you force your brain to think, the better chance you have of learning and remembering.
We put them in, but if  we did them for you, that would be like having someone else do your workouts for you.
There’s plenty of evidence that physical activity while learning can increase the learning.
Read the “Frequently Asked Questions.” That means all of  them.
They’re not optional side-bars—they’re part of  the core content! Don’t skip them.
It’ll help your brain (and body) feel something, and keep your learning from being too connected to a particular place.
Remember, you won’t be taking the exam in your bedroom.
Part of  the learning (especially the transfer to long-term memory) happens after you put the book down.
Your brain needs time on its own, to do more processing.
If  you put in something new during that processing-time, some of  what you just learned will be lost.
Your brain works best in a nice bath of  fluid.
Dehydration (which can happen before you ever feel thirsty) decreases cognitive function.
Beer, or something stronger, is called for when you pass the exam.
If  you’re trying to understand something, or increase your chance of  remembering it later, say it out loud.
Better still, try to explain it out loud to someone else.
You’ll learn more quickly, and you might uncover ideas you didn’t know were there when you were reading about it.
If  you find yourself  starting to skim the surface or forget what you just read, it’s time for a break.
Once you go past a certain point, you won’t learn faster by trying to shove more in, and you might even hurt the process.
Feel something! Your brain needs to know that this matters.
Groaning over a bad joke is still better than feeling nothing at all.
Read Me This is a learning experience, not a reference book.
We deliberately stripped out everything that might get in the way of  learning whatever it is we’re working on at that point in the book.
And the first time through, you need to begin at the beginning, because the book makes assumptions about what you’ve already seen and learned.
It would take an entire book to teach you HTML and CSS (in fact, that’s exactly what it took: Head First HTML with CSS & XHTML)
We chose to focus this book on Ajax programming, rather than rehash lots of  markup and style that you could learn about in other places.
Seriously, JavaScript is a lot more than a simple scripting language, and we aren’t going to cover all the ways you can use JavaScript in this book.
You’ll learn about all the ways that JavaScript is related to Ajax programming, and learn how to use JavaScript extensively to add interaction to your web pages and make requests to a server.
However, if  you’ve never written a line of  JavaScript, aren’t at all familiar with functions or curly braces, or have never programmed in any language before, you might want to pick up a good JavaScript book and browse through it.
If  you want to plow into this book, feel free—but we will be moving fairly quickly over the basics.
It’s now common to find server-side programs written in Java, PHP, Ruby, Python, Perl, Ruby on Rails, C#, and a whole lot more.
Ajax programming works with all of  these languages, and we have tried to represent several of  them in this book’s examples.
To keep you focused on learning Ajax, though, we do not spend much time explaining the server-side programs used; we’ll show you the server-side code with some notes, but that’s as far as we go.
We believe that your Ajax applications can be written to work with any kind of server-side program; we also believe that you’re smart enough to apply the lessons learned from an example that uses PHP to one that uses Ruby on Rails or a Java servlet.
We encourage you to use more than one browser with this book.
As much as it sucks, different web browsers handle your HTML, your CSS, and your JavaScript in completely different ways.
If  you want to be a complete Ajax programmer, you should always test your asynchronous applications on lots of  modern browsers.
All the examples in this book were tested on recent versions of  Firefox, Opera, Safari, Internet Explorer, and Mozilla.
The exercises and activities are not add-ons; they’re part of  the core content of  the book.
Some of  them are to help with memory, some are for understanding, and some will help you apply what you’ve learned.
Our readers tell us that it’s frustrating to wade through 200 lines of  an example looking for the two lines they need to understand.
Most examples in this book are shown within the smallest possible context, so that the part you’re trying to learn is clear and simple.
Don’t expect all of  the examples to be robust, or even complete—they are written specifically for learning, and aren’t always fully functional.
We’ve placed all the example files on the Web so you can download them.
For some of  them, there is no right answer, and for others, part of  the learning experience of  the Brain Power activities is for you to decide if  and when your answers are right.
In some of  the Brain Power exercises you will find hints to point you in the right direction.
One distinct difference in a Head First book is that we want you to really get it.
And we want you to finish the book remembering what you’ve learned.
Most reference books don’t have retention and recall as a goal, but this book is about learning, so you’ll see many of the concepts come up more than once.
Tech Reviewers I’m so phenomenally lucky to have a killer team of  reviewers.
Johannes de Jong probably thinks that he didn’t do much, and of  course he’d be very, very wrong.
Johannes started the review, kept it running, and made jokes about whiskey at all the right times.
Pauline McNamara manages to be in every Head First (and now Head Rush) book, probably because she’s such an uber-reviewer.
She co-managed the review, and was always technically correct and yet still “cool.” Go figure! Valentin Crettaz found every grammatical mistake I’ve ever made, and even kept my diagrams technically accurate.
Kristin Stromberg came to the fray late, and just devoured the chapters.
Her feedback was right on point, and really helped make the book more fun, engaging, and enjoyable.
Nice work, Andrew! And a special thanks, and shout out, to Bear Bibeault.
Bear, I know life got in the way, but I appreciate your involvement all the same, man!
I hope you like this book, guys—this book is yours as much as it is mine.
It seems like these books end up being as much about friendships as about writing and teaching.
If it weren’t for Beth Freeman and Eric Freeman, my life wouldn’t be as rich as it is.
They brought me into the Head First family, trusted me, and taught me (about strange faux meat as well as ferries and crazy stories)
Beth wrote Chapter 3, and Eric worked on the cover and a lot of the new Head Rush elements.
Guys, more than your help, I really value your friendship.
Mike Hendrickson has managed to be the guy who kept this project going, through every conceivable obstable.
You’ve seen me through some ragged times, and I’m sure there are more coming.
Good to know you’ll be there for me when things get tense.
Sometimes you know that a chapter is almost right, but there’s some nagging detail that is missing.
Those are the times when I turn to my editor, Mike Loukides; he always sees to know just what’s missing.
This is our fourth book together, and we’re already planning the fifth and sixth.
My heartfelt thanks go out to my team of  O’Reilly co-conspirators: Greg Corrin led the way on marketing, and in particular kicked butt the last week of  writing.
Ellie Volkhausen did that first cover design so long ago, and Mike Kohnke and Karen Montgomery took the cover to another level for Head Rush.
Thanks to Colleen Gorman for doing another amazing copyedit—you just keeping doing these Head First books, and I love that.
Sue Willing, Ron Bilodeau, and Marlowe Shaeffer took care of  making sure the printer was happy, and that’s no small task.
It’s really no accident that the name “O’Reilly” is on the cover.
Tim O’Reilly took a chance, and keeps taking chances, on this series.
Tim, you’ll never know how honored I am to be a part of  this series.
The large number of acknowledgments is because we’re testing the theory that everyone mentioned in a book acknowledgment will buy at least one copy, probably more, what with relatives and everything.
If you’d like to be in the acknowledgment of our next book, and you have a large family, write to us.
You simple can’t do one of  these books without spending serious time talking to Kathy Sierra and Bert Bates, the geniuses who created the Head First series.
Bert and Kathy both did hard time the last week of  this project, staying up late chatting with me on how to make each page just that little bit better.
The book wouldn’t be the same without you guys, and your friendship is worth even more than that!
Tired of clunky web interfaces and waiting around for a page to reload? Well, it’s.
What are we talking about? Just the newest thing to hit the Web:
So, grab your trial-size Ajax, included with every copy of Head.
Rush Ajax: we’re about to put some polish on your web apps.
The Web, Reloaded Are your customers tired of  waiting around when they place an order on your site? Are you getting complaints that every time a button is pushed, the page reloads? Then it’s time to get with the program, and take your programming to the next level.
Welcome to the next generation of  web apps, where JavaScript, some dynamic HTML, and a little bit of  XML can make your applications feel like dynamic, responsive desktop apps.
Let’s take a look at the kind of  applications you (and your customers) are used to:
Not only do you have to wait on the server, but each request/response means the entire page is redrawn.
Wouldn’t it be great if there was a better way?
Welcome to the new millenium! Anybody can program using the same old request/response model.
But if  you want faster apps that feel like you’re working on a desktop, you need something new—you need Ajax, a completely different approach to web programming:
For the web server, nothing has changed; it still responds to each request, just as it did before.
The web page sends its requests using a JavaScript function, which handles talking to the server.
If  you haven’t guessed by now, we’re talking about how you can use Ajax to build killer web apps.
So far, you’ve seen how Ajax applications can talk to a web server without the browser reloading and redrawing the entire page all the time.
But there’s a lot more to Ajax than improved user interfaces.
On top of  ditching those annoying page reloads, the JavaScript in an Ajax application talks to the web server asynchronously.
In other words, the JavaScript makes a request to the server, but you can still type in web forms, and even click buttons—all while the web server is still working in the background.
Then, when the server’s done, your code can update just the part of  the page that’s changed.
That’s the power of asynchronous requests! Combine that with updating pages without reloading them, and you’ve got Ajax applications.
Don’t worry if you didn’t get all this; we’ll talk a lot more about asynchronous programming in the coming chapters.
A: Actually, your pages are still making requests and getting responses.
You’re just using a different approach in how you make those requests and handle the responses—now you use JavaScript to make the actual request, instead of just submitting a web form.
Q: Why not just submit the form normally? What does using Ajax really do for us?
Even better, JavaScript can also work with the server’s response, instead of reloading the entire page when the server is finished with your request.
Q: So how does the page ever get back a response?
When the server sends back a response, JavaScript can update a page with new values, change an image, or even take the user to a whole new web page.
And the user never has to wait around while all this is going on.
Q: So I should use Ajax for all of my requests?
For instance, when a form is totally filled out, you can let the user click a Submit button, and then send the entire form to your web server, without using Ajax.
But, you’ll use Ajax for most of your dynamic page processing, like changing images, updating fields, and responding to users.
If you only need to update part of a page, then Ajax is the way to go.
Q: You said something about XML? a: Sometimes, your JavaScript will use XML to talk back and forth with the server.
But you don’t always need to use XML for your requests.
We’ll spend a lot more time looking at when and how you’ll use XML in later chapters.
Well, don’t ask us, we didn’t come up with the term!
Now that I’m selling my custom snowboards online, I put together a web form that.
But every time I want an update, the whole screen reloads.
You think all this Ajax stuff can help? Katie, snowboard.
Here’s the current, non-Ajax version of Katie’s app, which is just a web form that submits requests to a PHP script.
Then the PHP script uses the price Katie sells her boards for, and what each board costs her, to figure out how much money she’s made.
In Katie’s report, only a few numbers are changing, but the entire page has to be redrawn.
First, let’s figure out why all that reloading is going on...
The browser loads the page that the server sends back, and shows it on the screen.
Ajax to the rescue Do you see what the problem is? Every time Katie wants to find out the latest number of  boards sold, the entire screen is redrawn, and she’s left with the Internet version of  snow blindness.
Didn’t you say that Ajax will let me update the screen without all that reloading? Something about updating just part of the page?
Let’s change Katie’s report to use Ajax to send the request for updated board sales.
Then we can get the response from the server, and update the web page using JavaScript and dynamic HTML.
No more page reloading, and Katie will be a happy snowboarder again.
You’re going to need a couple of JavaScript functions to turn Katie’s report into an Ajax-powered app.
Draw a line connecting each function name to what you think it will do in the final version of the Boards app.
With Ajax, we can get rid of  all those page reloads, and cut down on how much data the server has to send to the report.
Here’s what you’re going to do in the rest of  this chapter:
First, you’ll need a JavaScript function to create an object that will let you make requests to the server, and get a response back.
Create a new object to make requests to the server.
Next, you’ll use the object you just created in Step 1 to make a request to the web server.
We can put this code in another function, called getBoardsSold(), and run it when Katie clicks the “Show Me the Money” button.
Write a JavaScript function to request new board sales totals.
You’ll add this JavaScript into the head of your HTML.
This is the same request that the server got in the non-Ajax version...
Now you can update the report with the current number of  boards sold, and figure out how much cash Katie’s made.
Let’s take care of  this another new JavaScript function that we’ll write; we’ll call this function updatePage()
Don’t worry if  you don’t understand everything that’s going on...
We’re going to cover all of  this in detail in this book.
For now, just get an idea of  the basics of  how an Ajax application works.
Pay careful attention to how the web page uses JavaScript to make a request, and how the server only returns a single number, and not HTML.
The highlight reel: Chapter 1 So you’re probably thinking, “What’s a highlight reel doing at the beginning of  the chapter? That’s not normal.” You’re right...
Then, go on to the next page, and get ready to load these concepts into your brain.
We’ll work through each of  these in detail throughout this chapter.
Asynchronous applications make requests using a JavaScript object, and not a form submit.
Your requests and responses are handled by the web browser, not directly by your JavaScript code.
Once the web browser gets a response to your asynchronous request, it will “call back” your JavaScript with the server’s response.
Katie already has a web page, so let’s take a look at it.
Then you can begin to add in all the JavaScript code we’ve been talking about.
Right now, it submits the form, but you’re going to change that soon.
Download the examples for the book at http://www.headfirstlabs.com, and find the chapter01/boards/ folder.
First up, you need a function that creates a new object to make requests to the server.
This turns out to be a bit tricky, because different browsers have different ways of  creating this object.
To help you out, we’ve written some “pre-assembled” JavaScript for you.
Whenever you see the                       logo, it means you’ll have to take some code on faith, like this code below that creates an object to make requests to the server.
Trust us though—you’ll learn all about this code in more detail in the chapters to come.
For now, just type it in and see what it can do.
These two lines try and create the request object, too, but in a way that works on Internet Explorer.
It will help your brain get used to writing and thinking about Ajax apps.
Go ahead and add this code into the <head> element of your HTML in boards.html.
Q: Am I supposed to understand exactly what that code does yet?
Q: What is null? I saw that in the pre-assembled JavaScript, and wasn’t sure what that means.
A: null is a special value, and actually means an empty value, or a nonexistent reference.
But don’t confuse null with “0” or “false”—those both are non-empty values, and aren’t the same as a null value.
We’ll talk a lot more about this in the next chapter, but the short answer is that you have to use different object names for different types of web browsers.
Q: So do my users have to use a certain browser to use my Ajax apps?
Q: What if someone has JavaScript disabled in their browser?
So users who have JavaScript disabled aren’t going to be able to use your Ajax applications.
JavaScript is usually enabled in browsers by default, so anyone who has disabled JavaScript probably knows what they’re doing, and could turn it back on if they wanted to use your Ajax app.
Now that you can get a request object with createRequest(), you’re ready for the next step: writing the getBoardsSold() JavaScript function.
This function will use the new object to request the total number of  boards sold from the server.
Here’s what you’ll need to do to make getBoardsSold() work:
Figure out what URL you need to connect to so you can get updated board sales.
Create a new request object by calling the createRequest() function.
You can use the pre-assembled JavaScript from the last two pages to take care of this.
Here’s where you’ll use that request object you created in createRequest()
Open up your boards.html file, and add a new JavaScript function called getBoardsSold(), right after createRequest()
Then, see if  you can add a line of  JavaScript in getBoardsSold() to create a new request object (that’s Step “a” from above)
Be sure and make these changes to your copy of  boards.html before you go to the next page.
If  you did the exercise on the previous page, you should have some code in your boards.html page that looks something like this:
Here’s createRequest(), which you should have added a few pages back.
So what’s next? You’ve got an object that you can use to request the board sales from the server, but how do you make that request? First, you need to tell the object where to send the request—in other words, it needs to know what program on Katie’s server to send the request to.
So you need to tell it the URL of  the script running on the web server.
And where do we get that URL? You can find it in Katie’s web form:
But doesn’t the PHP script return a bunch of HTML right now? I thought we only wanted the number of boards sold for the Ajax version of the app.
Here’s the URL of the PHP script we need to make a request to.
Remember, we’re not going to explain how this all works...
The first part of the script makes a connection to the Boards ‘R’ Us database.
The amount of profit on each board is figured out here.
This is bonus credit for those of you who are into PHP.
Lots and lots more HTML output by the PHP script...
All this code does is look up how many boards have been sold, figure out the total cash Katie’s made, and then return an HTML form with the updated totals sales and cash figures.
It’s also OK if  you don’t know PHP, or haven’t worked with databases before.
In just a few pages, we’ll give you a version of  the script that runs without a database, so you can run Katie’s web report for yourself.
Remember how the non-Ajax version of  Katie’s report works? Every time a request is made to the PHP script, it has to return the number of  boards sold, along with an entirely new HTML page.
Flip back a page, and notice that over half  the PHP script is just HTML! Here’s another look at what’s going on:
All of this HTML, and the only thing that changed is the number of boards sold, and the updated cash total!
That’s all the server sends back now? I’ll bet my report will run faster with Ajax!
I’ll have my PHP guy take care of changing the server-side script right away.
Katie’s server doesn’t have nearly as much information to send back to her web form.
When you’re writing Ajax apps, the server doesn’t need to send all that HTML back in its response.
Since you’ll use JavaScript to update the web page, all you need from the server is the raw data.
In Katie’s app, that means that all we want is the number of  boards sold.
Then, you can figure out the cash that Katie has made with some simple JavaScript.
Almost everything in the first part of the script is the same as the old version.
Notice that the code figuring out the cash that Katie made went away.
This is the URL of the Ajaxready version of the PHP script.
It’s time to give Katie’s PHP script an Ajax upgrade.
It also works without a database, so you don’t need to set one up to use this PHP script.
Make sure this file is in the same directory as your boards.html file; we’ll be using this new version of  the script in just a moment.
The new script’s URL Now that you’ve got a PHP script that only returns the number of  boards sold, instead of  a bunch of  HTML, we just need to make a request to that script.
Remember, you want to send your request to the new version of  the PHP script, and only returns the sales total, not an entire HTML page.
Store the URL of  this new PHP script in a JavaScript variable, like this:
Initializing the connection You’ve got a request object, and a variable with the URL to connect to.
Now you just need to tell the request object how to connect to the server, and give it that URL as the address to connect to.
Q: I thought that it was better to use “POST” for web page requests.
A: POST is usually used when you are sending a server lots of data, or are completing a form submit that involves money, or placing an order.
Since we’re not sending any data to the PHP script, and there’s no purchase being made here.
Q: Should I ever use open() to make a synchronous request, and set that last value to “false”?
Sometimes you don’t want the user to be able to keep using your page while the server is answering a request.
For instance, if a user is placing an order, you probably don’t want to let them do anything else until you confirm that their order was accepted.
This is the URL for the PHP script running on Katie’s web server.
This line handles initializing the connection, and tells the request object how to connect to the server.
In an effort to save programmers time and prevent confusion, code fragments are marrying their comment counterparts across the globe, providing love, companionship, and self-documentation for all.
Pair each line of code up with the comment that describes what it does.
Create a new variable and assign it the URL to a Java servlet */
Create a new object to talk HTTP to a web server */
So how’s it coming? Are we any closer to getting my web report back online? I’d love to know how.
Figure out what URL you need to connect to so you can get updated board sales.
Create a new request object by calling the createRequest() function.
Remember our checklist for getBoardsSold()? You’re making pretty good progress in your code.
Did you pair up the happy couples? Make sure you got all of these right, and if not, take your time and figure out what you missed, and why.
Create a new variable and assign it the URL to a Java servlet */
Create a new object to talk HTTP to a web server */
All right! You’ve got a request object, a URL, and your connection is initialized and ready to go.
Now you just need to make the connection, and request the updated number of  boards sold.
To do that, just call send() on the request object:
The script doesn’t need any data; it just returns the total board sales, every time it’s run.
In this particular app, you don’t need to provide the server with any information.
Each request to the PHP script asks for the same thing: a single number, the total number of  boards that Katie has sold.
So you don’t need to send the server anything but null in your request.
Are you kidding me? We did all this work, and you’re telling me I’m sending null to the server? This is what you call nextgeneration programming?
Figure out what URL you need to connect to so you can get updated board sales.
Create a new request object by calling the createRequest() function.
Remember, null means an “empty value”, which is exactly what you want to send the server: nothing.
Rotate your brain (and this page) a bit, and don’t miss this key point.
We’ve still got plenty left to do, but let’s take a moment to see what’s already done.
Grab a cup of  joe, let your brain relax, and review the first two steps.
You added a new function, called createRequest(), that creates a new request object.
Create a new object to make requests to the server.
This function used createRequest() to create a new request object.
Then, you set up a variable pointing to the Ajax version of  a PHP script on Katie’s server, initialized the connection, and sent the request to the server.
Write a JavaScript function to request new board sales totals.
You’ll added this JavaScript into the head of your HTML.
We’ve got to make sure that Katie’s web form no longer gets submitted to the non-Ajax version of  her PHP script, or she’s going to end up with more page reloads, and all our hard work won’t be noticed!
And not only that, but we’ve got to make sure that our new getBoardsSold() function gets called from the web form.
It looks like we’re definitely not ready to start updating the page yet...
STOP! Don’t go on to the next page until you’ve written something in these blanks.
Do you see what you need to do? When Katie clicks the “Show Me the Money” button, the web form submits everything to the PHP script.
But we don’t want the web form to get submitted, because we’re using Ajax to handle requests to the server.
Let’s go back to the HTML for the Boards ‘R’ Us report:
Q: Couldn’t we remove the action from the <form> tag, instead of changing the button type?
A: That’s a good idea, in addition to changing the button type.
If you only remove the action, though, the “Show Me the Money” button will still try and submit the form...
So be sure to also change the button type from “submit” to “button”
The JavaScript’s ready, and the button no longer tries to submit the form...
Can you help us out? Oh, well I’m incredibly flexible when it comes to calling functions from a web page.
Just use one of  my event handlers in your HTML.
You can use onBlur() for when someone leaves a field, or onClick(), for when a user clicks...
Any time Katie clicks the “Show Me the Money” button, the getBoardsSold() function should run.
You can use a JavaScript event handler to take care of  this.
An event handler connects a piece of  JavaScript code—like the getBoardsSold() function—to a certain event, like when someone clicks a button on a web page.
In the Boards app, let’s use an event handler to connect the “Show Me the Money” button to the getBoardsSold() function.
Since you want to attach the event to a button click, use the onClick handler, like this:
Since this form should never get submitted in the Ajax version of the report, you can remove the  “action” attribute if you want.
Your requests and responses are handled by the web browser, not directly by your JavaScript code.
Once the web browser gets a response to your asynchronous request, it will run a callback function.
Reviewing the highlight reel Remember our highlight reel? Have you been keeping up with what we’ve covered, and what you’ve still got to look forward to? Let’s take a quick look at what you’ve learned in this chapter so far:
This is why we changed the “Show Me the Money” button to call a JavaScript function, instead of having it submit Katie’s web  form.
Asynchronous applications make requests using a JavaScript object, and not a form submit.
So now you’ve taken care of  talking to the server, and you’re ready to get the server’s response, and update the Boards report with new numbers.
That means Katie shouldn’t have to wait around while the server is getting new sales totals.
So how does updatePage() get the response from the server? Think about this for a minute or two, and then turn the page.
You’ve uncovered the trickiest part of asynchronous web programming: if asynchronous code doesn’t wait around for a response from the server, how do we use that response? And where does the server’s response go in the first place?
You already know about web pages, which can use event handlers to call JavaScript functions.
And you’ve seen how asynchronous JavaScript can make requests to a web server.
To complete the asynchronous picture, though, there’s another important piece of  the puzzle...
So if getBoardsSold() finishes running before the server responds, where does.
That means that the JavaScript doesn’t wait around for an answer from the server.
I think we should call the updatePage() function at the end of getBoardsSold()
To figure out what’s going on, we’re going to have to step back a bit, and.
When you think about a web appl, you probably think about an HTML page, some JavaScript code, a bit of  CSS for style, and maybe a web server running some scripts or a servlet.
The HTML and CSS get combined into what we actually see—the web page.
The web server waits on requests, and then sends data back to your web page.
There’s an important character in the Ajax play that you haven’t met yet, and he’s ready to make his grand entrance.
See if you can upstage this new character by figuring out who he is before you turn the page.
We’ve managed to collect a few quotes from the mystery character to help you out.
Yes, our mystery character tends to be a bit overly dramatic at times.
Write who you think the mystery character is in this.
Singing? Well, a lot of people don’t realize this, but I am classically trained.
Behind the scenes, something has to connect all these pieces together.
The browser takes your HTML and CSS, and turns those angle brackets and semicolons into a page with graphics, buttons, and text.
It’s also the web browser that runs your JavaScript code...
It’s the browser that stores variable values and gives your code access to network requests and responses.
Here’s what we’ve been talking about these last several pages.
When your JavaScript needs to make a request, you write code like this:
All the browser does is handle the low-level network stuff  that makes this code work.
Since network connections work differently on each operating system (think Linux and Windows and Mac OS X), the browser handles the stuff  specific to each system.
Take a look back at page 40, and notice that it’s the browser that actually handles sending requests and getting responses from the server.
Your code tells the browser what to do, and then the browser takes care of  actually doing it.
So now you’re telling me that my code isn’t making requests to the server?
That it’s really the web browser doing all that? I’m so confused...
Your requests and responses are handled by the web browser, not directly by your JavaScript code.
Why do you think it’s so important that the web browser handle requests in asynchronous applications? Remember, a web server can only respond to whomever made the original request to that server.
Since the browser handles sending requests, it’s also responsible for getting responses back from the server.
Let’s see what the browser is doing in the Boards app:
Katie can keep using the report (even though there’s not much she can do)
At least she isn’t staring at a spinning beach ball or an hourglass!
This request comes from the browser, and not directly from your JavaScript code.
So what does the browser do with the response? You’ll find out on the next few pages...
The browser gets the response from the server, but won’t do anything with that response unless you tell it to.
So we need to figure out a way to let the.
Somehow, we need to tell the browser to run updatePage() when it gets a response from.
The browser gets the response, but doesn’t know what to do with it.
In just a few pages, you’ll learn about how to use the DOM-the Document Object Model-to make changes like this to your web page, all without any page reloads.
It seems people must be reading up on using CSS in their pages...
Although it does mean I have to do some extra work, since I’ve got to take two files and combine them together.
I don’t see what any of this has to do with you.
Browser: Boy, you just don’t have a clue, do you? People can “see” HTML with a text editor...
Yeah, I’m sure people are beating down your door to see how many different ways you can display the same web page.
Yeah, I just love web browsers, and how they’re always screwing up how I look.
Browser: The browser wars are coming to an end, you big uninformed bucket of brackets.
Besides, if people would just write standardized web pages, there’d hardly be any problems.
He was just complaining the other day about having to use two different types of objects for making a simple request to a server.
Browser: Hey, two is a lot better than five or six...
Browser: Maybe not all the answers, but I do have all the responses.
And that’s just one more thing you need me for.
Browser: Maybe you should ask your friend JavaScript about that.
Everyone seems to think that it’s web pages and code that make requests...
Browser: ...but it’s really me, behind the scenes, making sure that pages look right, requests get sent, and responses are heard.
Without me, you’d just be a bunch of funny characters in a text file.
Remember, we’ve got to tell the browser what to do with the server’s response to our request before we make the request...
Fortunately, the request object we’ve been using has a property just for this purpose:
Be sure you set this property before you call send(), or this function won’t get run.
Time to go back to getBoardsSold(), now that we’ve learned a little more about web browsers.
So how do we talk to the browser? So far, all the code we’ve written just deals with that JavaScript request object.
JavaScript requires that you leave off the parentheses on the function name here.
Q: The server talks to the browser, the browser talks to the JavaScript, the JavaScript updates our page...
When your code tells the browser to send a request to the server, the server has to respond with an answerbut your code doesn’t wait around to find out what that answer is.
So when the server responds, it’s left to the web browser to figure out what to do next.
Since there’s no running code waiting for a response, the browser runs the function you assigned to the request object’s onreadystatechange property.
Q: Remind me again what onreadystatechange is all about? That seems sort of confusing to me.
A: It’s actually not as difficult as it might look.
That property just tells the browser that when the request’s state changes—like when the PHP script responds to the browser—the browser should call the JavaScript function indicated in the request object.
Q: So are there things besides the script finishing up that can result in updatePage() being called?
Web requests can be in several different “ready states”, and each time the ready state changes, updatePage() is called.
We’ll dig into this much more in the next chapter, so keep this in mind.
Once the web browser gets a response to your asynchronous request, it will “call back” your.
I see how we can get the browser to run updatePage() when the server responds, but what about the data that the server responds with? How do we get access to.
You’ve already seen how to tell the browser to run the updatePage() function when the server responds, but the browser—and that request object you’ve been using—does even more to help you out.
Once the browser gets a response from the server, it figures out what to do next by checking the request object’s onreadystatechange property.
And, since you’re going to want the data the server returned, the browser puts that data in another property of  the request object: a property called responseText.
So any time you want to figure out what the server returned in its response, just access the request object’s responseText property.
You can get the server’s response using the responseText property of your JavaScript request object.
You’ve already seen two of the properties from the request object we’ve been using.
Now it’s time to put what you’ve learned to the test.
Below on the left are several properties of a request object, and on the right are descriptions of these properties.
See if you can match the property name to its purpose.
The browser stores the server’s response in the request object, and then runs updatePage()
First: Get the updated number of boards sold The server returns this number to the browser, and then the browser puts this value in the request object’s responseText property:
This is the property of the request object that the browser uses to pass on response data from the server.
Second: Get the HTML elements you need to update There are two elements you have to update: the number of  boards sold, and the cash that Katie has made.
You can use JavaScript’s getElementById() method to grab each of  these based on their id attributes.
These are the names of the HTML elements we want to get.
Third: Add a reference to Katie’s text utilities Now you’re ready to update the total number of  snowboards sold.
It’s going to take a little bit of  advanced JavaScript to update the text in those <span> elements.
We’ll cover these techniques in Chapter 4, when we talk about the Document Object Model, but for now, Katie has some                       in a JavaScript utility file, called text-utils.js.
This file has some handy functions you can use, but you need to let the Boards app know where to find these utilities first.
You can add in a reference to Katie’s JavaScript utilities using the <script> tag in your HTML, like this:
Add this line, and then you can use all the utility functions from text-utils.js in your updatePage() function.
The text-utils.js file has a function in it called replaceText()
You can use this utility function to update Katie’s report with the new number of  boards sold:
You can find textutils.js in the chapter01/boards directory of this chapter’s examples.
Update the cash for the slopes on the form */
You’re ready to finish up the updatePage() function on your own.
Below is the code for updatePage(), but there are plenty of blanks left to be filled in.
Try and figure out the code that belongs in each blank, and write in your answers.
Once you think you’ve got all the code filled in, be sure to compare your answers to ours on the next page.
It will take any element, and return the text within that element.
Update the cash for the slopes on the form */
You’re ready to finish up the updatePage() function on your own.
It will take any element, and return the text within that element.
What’s that? And what does it have to do with Katie’s web report?
A: The Document Object Model, called the DOM for short, is how web browsers store and represent HTML pages.
By working with the DOM, you can dynamically update a web page, like you’re doing with Katie’s report.
We’ll look at the DOM in detail in Chapter 4, but for now, you can just use the text-utils.js utility file, and not worry too much about the details of the DOM.
Right now, your updatePage() function assumes that the server is finished when it runs...
Your request object has a ready state that tells the browser quite a bit about what state the request is in.
Do you remember the property you used in getBoardsSold() to tell the browser what to do when the server sent back a response? Take a look to refresh your memory:
Ready states are connected to your request object’s onreadystatechange property.
This property affects every ready state, not just the one indicating that the server is finished with a request.
All done! The server’s response is ready to be used.
When the request object’s readyState is set to 4, the server is done with the request.
You already know that the browser will run your updatePage() function when it gets a response from the server.
But, there’s a twist: the browser actually runs updatePage() every time the ready state changes, and not just when the server is finished sending back a response.
Look at the diagram on page 54 again, and notice that as the request is progressing, the ready state number changes.
It looks like when the server is finished with our request, the ready state is “4”, so we can check for that number in our code.
That way, we can make sure that we only try and update Katie’s report when we know that the server has sent us back a response.
This function will get run every time the ready state changes.
The server is returning the new sales numbers, which the PHP script figured out.
All this code only runs when the request’s ready state is 4, and the server’s done with the reqest.
A: JavaScript can be a little weird about multiplying numbers.
A lot of times, it will add a bunch of decimal places to a product.
That’s clearly not what Katie wants to see on her report.
You pass it an element from a web page, and it will return the text within that element.
In Katie’s report, getText() gets the price Katie sells her boards for, and how much it costs Katie to make a board, both from <span> elements in Katie’s HTML.
Q: So what about all those utility functions in text-utils.js? Do I need to worry about those?
We’ve also included all the code from text-utils.js in Appendix I, but don’t worry if you don’t understand it all now.
By the time you’re done with this book, all those utility functions will make sense to you.
Q: And the DOM is how we work with an HTML page?
Web browsers use the DOM to represent an HTML web page.
Your JavaScript can use the DOM to update values in a page on the fly.
In fact, you’ve already been using the DOM a bit! Every time you use the JavaScript document object, or call the getElementById() function, you’re using the DOM.
We’ll spend a lot of time on this in the next chapter, but for now, you just need to know that when the readyState is 4, the server is finished with your request.
Open up your boards.html file, and add in all this new JavaScript.
Make sure your updatePage() function has the JavaScript that checks the request object’s ready state, as well as code to update the total board sales and figure out how much cash Katie has made.
It’s time to see what all this hard work has done for Katie’s web report.
Make sure you’ve added all the JavaScript we’ve talked about in this chapter, and double-check that the “Show Me the Money” button runs getBoardsSold(), instead of  submitting the form.
Then, load up boards.html in your web browser, and let’s see what Ajax can do!
You did it! You took a boring sales report, and turned it.
Katie’s web report is back online, Katie knows how much cash she’s makingwithout having to wait on her server or suffer a bunch of  page reloads—and with all that profit, Katie’s even offered to give you free snowboarding lessons.
Asynchronous applications make requests using a JavaScript object, and not a form.
Your requests and responses are handled by the web browser, not directly by your JavaScript code.
Once the web browser gets a response to your asynchronous request, it will “call back” your JavaScript with the server’s response.
Everything works on Katie’s Mac, but on my Windows machine, I only get new sales totals the first time I click “Show Me the Money”
Here’s the report after clicking “Show Me the Money” once...
For answers to these questions and more, you’ll have to wait for Chapter 2...
Users can keep using a page, even while the server is still working on the request.
Open up your boards.html file, and add a new JavaScript function called getBoardsSold(), right after createRequest()
Then, see if  you can add a line of  JavaScript in getBoardsSold() to create a new request object (that’s Step “a” from page 18)
There’s an important character in the Ajax play that you haven’t met yet, and he’s ready to make his grand entrance.
See if you can upstage this new character by figuring out who he is before you turn the page.
We’ve helped you understand what each quote refers to with a few notes below.
Singing? Well, a lot of people don’t realize this, but I am classically trained.
You’ve already seen two of the properties from the request object we’ve been using ; now it’s time to put what you’ve learned to the test.
Below on the left are several properties of a request object, and on the right are descriptions of these properties.
See if you can match the property name to its purpose.
We’re going to need a couple of JavaScript functions to turn Katie’s report into an Ajax-powered app.
Draw a line connecting each function name to what you think it will do in the final version of the Boards app.
If you’re planning on writing the next killer application, you need to.
By the time you’re done, you’ll be making requests and handling.
Try Break Neck Pizza, revolutionizing high speed pizza delivery through its patented “just in time” cooking process along with its distributed network of  bicycle messengers.
Better yet, Break Neck only takes orders via its web site (no human interaction required)
Next time you need a pizza in under ten minutes, they’re the ones to call.
Hit “Order Pizza”, and your order is sent to the ovens and printed out for the bike delivery boy.
When customers submit their orders, there’s nothing that makes sure that their address is correct—the order is just sent straight to Alex.
If  the customer makes a mistake and types his address incorrectly, Alex ends up at the wrong house, and then wastes a lot of  time looking for the right one.
On top of  that, the pizza gets cold, and customers get angry.
Somehow, we need to be able to get the customer’s correct address to Alex.
But we can’t count on the customer to enter his address correctly every time.
How would you make sure Alex gets the right address?
Ten minutes? I’m lucky if I can deliver a pizza in an hour when customers enter the wrong address in the order form.
Solving the pizza delivery problem Fortunately, web developers have been solving these sorts of  problems for years.
Instead of  letting users enter their own address (and type something incorrectly), let’s look up the customer’s address in the Break Neck customer database.
A customer enters his phone number, and the phone number gets sent to Break Neck’s web server.
The server fills in the customer’s details The server sends back a new form, with the customer’s name, phone number, and address already entered into the HTML.
The customer can make sure his address is right, but shouldn’t have to type it in manually, and run the risk of making mistakes.
The customer enters their order With the customer’s details filled in, he can enter his pizza order into the form, and click “Complete Order”
The server sends a delivery request The customer’s name, address, and phone number are sent to Alex, the delivery guy, along with the customer’s pizza order, ready for delivery.
No kidding! It looks like Ajax is just the thing to help out Break Neck.
Let’s look up that address without making the customer wait around for the server...
Break Neck Pizza, Ajax-style Instead of  starting with old 1990s development ideas, let’s look at what the Break Neck app should do.
Then you can use your new asynchronous programming skills to make sure Break Neck’s order form is a responsive, customer-friendly means of getting great pizza, fast.
The order form then fills in the customer’s address automatically.
Once the customer has entered in his order, he clicks “Order Pizza”...
Below on the left are the names of two JavaScript functions, and on the right are several lines of JavaScript.
Draw arrows from the lines of code to the function each line of code should go into.
Diagramming the Break Neck app Now that you know how customers will use the Break Neck app, let’s take a look at what actually has to happen behind the scenes.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Once the customer enters their phone number, a JavaScript function is called.
While the server is looking up the customer’s address, the customer types in his pizza order.
The browser calls a JavaScript function, which then updates the web page with the customer’s address.
Be the Architect You’ve seen what the Break Neck order form should do, and you’ve also got an idea of what has to happen behind the scenes to turn Break Neck into a customer-friendly web app.
Below is the basic flow diagram for the Break Neck app.
Your job is to add notes to this diagram, indicating what steps you need to take to turn this diagram into reality.
Write what functions you might need to write, and relate them to the drawing.
We’ve added a few notes of our own to help you get started, and given you some sample notes at the bottom to give you some ideas.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Our callback function should update the order form with the customer’s address.
Step 1: Get the customer’s phone number It looks like the first thing we need to do with the Break Neck app is make sure we can get the customer’s phone number.
That’s going to take some HTML, a bit of  JavaScript, and a lot of  help from the web browser.
Next, we need to setup the phone number field so that when it’s changed, a new JavaScript function gets called.
In Step 2, we’ll send the phone number on to the Break Neck web server.
The browser can run a function when events occur in a web page, and give your JavaScript access to user-entered information in the page.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Here’s the part of the Break Neck app we’re focusing on in the next few pages.
Let’s take a quick look at the HTML for the order form, and then figure out how to connect this HTML to the JavaScript you’ll be writing:
This is the URL for placing the pizza order once the form is completely filled out.
Event handlers connect HTML to JavaScript Remember event handlers from Chapter 1? You used the onClick handler to connect a button on an HTML page to a JavaScript function.
Remember this? We used event handlers to connect the “Show Me the Money” button in the Boards app to a JavaScript function.
We need to use one of these event handlers to connect the phone number field to a JavaScript function.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Looking for answers to the Be the Architect exercise back on page 73? You’ll find them...
As you read through the chapter, you’ll see how we decided to build the Break Neck Pizza order app.
See how your decisions match up with ours, and think about how you might do things differently.
Sometimes, it’s better to do a little planning before you jump in and start writing code.
In this case, we can go ahead and decide what we’ll call the JavaScript function that makes a request to the Break Neck server, even though you haven’t started coding it yet.
Let’s name this function getCustomerInfo(), since that’s exactly what the function is going to do: ask the server for the customer’s information.
And now that you know the name of  this function, you can go ahead and update the HTML in the Break Neck form to run getCustomerInfo() when a phone number is entered...
Aren’t you getting a little ahead of things? How can we write an event.
The onChange event is triggered any time the value in a form field changes, like when you type in a new value, or clear the existing one.
Any JavaScript attached to the onFocus event is run when a field or other page component gets the focus, by tabbing into the field or by clicking on the component.
Event handler roundup You have lots of  different ways to attach your JavaScript code to your HTML pages.
Here are just a few of  the more popular event handlers, and a brief  review of  how each works.
Take a close look; you’ll be using one of  these on the next page...
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
By now, you should be ready to update the Break Neck pizza form.
First, you need to add an event handler to run the getCustomerInfo() function that you’ll write in just a few pages.
Remember, this function should run every time a customer enters a new phone number.
Next, you need to add id attributes to the order form; you’ll need these later, when you want access the form’s fields in your JavaScript.
While you’re at it, why don’t you clear the form every time it’s loaded, too?
Below is the HTML for the current version of the web form.
To update this form, attach the HTML and JavaScript magnets from the bottom of the page to the correct blanks in the markup.
Here’s how we finished off the Break Neck web form.
Make sure your answers match ours before going on to the next page.
This clears the first form (forms[0]) in the HTML document.
But with onBlur, getCustomerInfo() will get run even if the customer didn’t change the phone number.
On to the JavaScript Now you’re ready to dig into some JavaScript.
You know the name of the function that you’ll be using to get the customer’s phone number: getCustomerInfo()
This function needs to send the customer’s phone number to Break Neck’s server, and ask for that customer’s address.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Open up the examples for Head Rush Ajax that you downloaded from http://www.headfirstlabs.com.
This is the Break Neck order form, but you need to make some changes to bring it up to speed.
Finally, go ahead and enter in the empty getCustomerInfo() function.
We’ll be filling this function in over the next several pages.
Use the DOM to get the phone number You can use the Document Object Model, or DOM, from your JavaScript to get the phone number that the customer entered into the Break Neck order form.
For now, just think of the DOM as the way you ask the web browser to get information from, or send information to, a web page.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Your JavaScript uses the DOM to ask the web browser for information in a web page.
The browser can access a web page, including its fields, values, and even display properties.
Once you’ve found an <input> element, you can get the text in the field with the “value” attribute of the field.
Connecting the DOM dots Let’s use the DOM to get the customer’s phone number.
Below, we’ve connected the pieces of  DOM code you saw on the last page, and added them to the empty getCustomerInfo() function:
Go ahead and add this line of code into your version of pizza.html.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
You can use the request object to send the customer’s phone number to the Break Neck server.
We’re on to the next part of our Break Neck diagram.
Is the browser involved at all in this step? If you think it is, add a note to this page saying what you think the browser does.
It’s OK if  you’ve still got some questions about this code.
We’re going to look at each line in detail throughout the chapter, so don’t feel like you have to understand it all now.
Creating a request object This step is all about making a request to the Break Neck server.
For that, we need a request object that our JavaScript function can use.
Luckily, though, you already wrote code that creates a request object back in Chapter 1, in the createRequest() function.
Let’s take a look at that JavaScript again, and make sure it’s ready to use in the Break Neck app:
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Remember your plans for the Break Neck app from page 73? Well, you’ve learned a lot since then, and now’s your chance to make a few changes.
Flip back to your original plans, and see if there are any changes you might want to make...
Use the space below to write updated notes about what you think needs to happen to ensure Break Neck crushes its competitors.
If you still like what you had back on page 73, you can write those notes in on these plans, and give yourself a pat on the back for getting things right the first time.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
First, we declare a new variable to represent the request object, so we can use that variable in the rest of  our JavaScript.
The first thing this function does is try and create a new request object using the XMLHttpRequest type, which works on almost all browsers except Internet Explorer:
At the end of all this, spit out an erro r.
It’s time to break into this pre-assembled JavaScript, and figure out exactly what’s going on.
Let’s walk through exactly what each piece of  createRequest() does, step-by-step.
Since this variable isn’t declared inside a function, any of your JavaScript functions can use it.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
It’s time to get a taste of the browser wars for yourself.
Add the getCustomerInfo() and createRequest() JavaScript from the last several pages into your copy of pizza.html.
Then, comment out the parts of createRequest() that create the request object for the type of browser you’re using.
If you’re using InternetExplorer, comment out the code that deals with ActiveXObject; if you’re using a non-Microsoft browser, comment out the lines that create the XMLHttpRequest type.
Now load pizza.html in your browser, and enter in a phone number.
Here’s Internet Explorer, reporting an error because the ActiveXObject part of createRequest() was commented out.
Does this give you any ideas about how you could let customers know about any problems before they start using the Break Neck order form?
I just tried this, and it really sucks that I had to enter my phone number in to find out that.
Couldn’t you have told me that before I bothered typing my number in?
In the Break Neck app, customers only have to fill out one field before getCustomerInfo() gets called, and your code tries to create a new request object.
Then, if  something’s wrong, the customer gets an error message.
But imagine how annoying it would be to fill out an entire form, and then find out that something’s wrong...
It looks like we need to find a way to let users know about any problems much earlier...
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Well, we’ve got to run the createRequest() function somehow, right? How else can we.
Remember how we declared the request variable, but didn’t put that line of  code in a function?
Any JavaScript in your web page that’s not in a function gets run statically.
That means that as the web browser is loading your page, it will automatically run any JavaScript it finds that is not in a function, before anyone can type into your form or click any buttons on the page.
So if  we move all of  the code in createRequest() out of  a function, all the code that tries to create the request object will run as soon as the Break Neck form loads.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Now that you’ve learned about static JavaScript, creating request objects, and better error handling, you need to make some more changes to pizza.html.
Open up your HTML, and move all the code in createRequest() outside of the function, right after the line of JavaScript that looks like this:
Q: So the browser runs any JavaScript that’s not in a function before the HTML in the page is displayed?
However, you can insert JavaScript anywhere in an HTML page...
JavaScript in those sections runs when the browser gets to that part of the page.
But, all static JavaScript will get run before anyone can actually use your page, and that’s what’s important here.
Q: And tell me again why we have to use ActiveXObject to make Break Neck work on Internet Explorer?
Fortunately, Internet Explorer 7.0 is supposed to move to a standard naming scheme, and replace their ActiveXObject object with a new object, called XMLHttpRequest.
Of course, you’ll still have to support those older versions of Internet Explorer, so your code won’t change too much.
Next, remove the createRequest() function altogether, and also remove the line in getCustomerInfo() that ran the createRequest() function.
You can test your changes by commenting out the JavaScript that creates a request object for the type of browser you’re using.
If there are any errors, they should show up immediately, before you get a chance to use the Break Neck order form.
Once you’re done testing, remove all your comments, and make sure pizza.html runs on both Microsoft and non-Microsoft browsers.
Save your changes, and you’re ready to turn the page.
All the code that is in createRequest() should go here.
Back to getCustomerInfo() With the request object taken care of, let’s get back to coding getCustomerInfo()
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Talking to the server-side guys Here’s what we need to have the server-side guys take care of  for us:
Next up is getting the PHP script working on the Break Neck server.
Create a new PHP script to lookup a customer’s address based on their phone number.
Figure out how the script will accept the customer’s phone number.
Break Neck’s PHP script Let’s ask Frank over in the server-side group to write us a PHP script to look up customer addresses.
Then you can send the customer’s phone number to this script, and get the customer’s address as a response.
I’ve got a customer’s phone number from an order form.You think you could write a script that gives me that customer’s address based on their number?
This is a PHP script that will run without a database server; keep this file on your computer, or FTP it to your web site—you’ll be using it in just a sec.
No, I’m making an asynchronous request, so I won’t need anything but the raw data...
Sure, just send over the phone number as a request parameter.
You want me to return their information as part of a new HTML page?
Using the phone number you sent as part of the request, the script looks up the customer’s address...
This bit of code removes any special phone characters, like.
Use a “?” to separate the script from any parameters.
Oh, right, we can just tack that parameter onto the URL, can’t we?
Yeah, you can add a name/value pair to your request URL, and my PHP script can read the phone number from that.
OK, I understand how we’re getting the customer’s phone number...
But how do we send the script the customer’s phone number? You said something about request parameters?
Using the escape() function makes sure none of the tricky characters in the phone number cause problems for the web browser when it sends this request.
The “?” symbol tells the server that anything after the “?” should be passed on to the target of the URL.
This data is sent on to t he PHP script.
The server figures out exactly what program it should send the request to, using the first part of the URL.
The simple little request URL in getCustomerInfo() has a lot of  responsibility.
Let’s take a closer look, and see exactly what that request URL is doing:
Remember, the server passes on everything after the “?” to the program indicated in the request URL.
Next we need to tell the browser what to do when it gets a response from the server.
Remember, the browser will run the function we tell it about every time the ready state changes.
Here’s the name of the function that the browser should run whenever the ready state of the request object changes.Be sure you set the.
Now that you’ve got the request URL figured out, you can initialize a connection using.
Below is the line of  JavaScript that initializes a connection, with each parameter you give to open() on a separate line.
In each blank, write in what the parameter for that line tells the request object to do.
Q: If we aren’t calling createRequest() in our getCustomerInfo() method anymore, how can we be sure that there’s a request object available?
A: Remember, all the JavaScript code that creates the request object is run statically, before the browser lets customers start entering information in the order form.
If there are problems, the browser will display an error to the customer.
By the time getCustomerInfo() is called, the request object has been created and is available through the request variable, or the customer will already know there’s a problem.
So all you need to do in your code is use the t variable.
Q: Why are we sending the phone number as part of the URL? Couldn’t we use the send() method to pass the phone number on to the PHP script on the server?
A: You can definitely use the send() method to pass data to a server, but that requires using the POST method for your request, as well as specifying a content type for your data.
Then you’ll need to format your request as a name/value pair in the send() method.
If that sounds like a lot of extra work just to send a simple phone number, then you’re right! For the Break Neck order form, it’s much easier to use a GET request, and simply add the phone number onto the request URL.
That way, you don’t need to worry about POST requests or content types.
Remember, POST requests are usually best for sensitive data like a credit card, or requests that involve a lot of data.
Q: Can you tell me a little bit more about these “tricky characters” that we need to worry about in the request URL’s phone parameter?
In addition to the numbers, dash, and parentheses in the entry, there are also spaces.
When the request object sends this data to the web server, it uses a request URL; it’s the same as if you typed that URL right into the address line of your web browser.
But if you try and enter spaces as part of a URL in a web browser, you’re going to get errors, or part of your URL will be ignored.
The JavaScript escape() function solves this problem, by replacing characters like a space with something that will work as part of a request URL.
Scripts and server-side programs know when they see %20 to convert that back to a space, so your data gets sent correctly.
All that’s left to complete this step is to actually send the request.
This sends the request to the Break Neck web server.
Make sure you’re keeping your version of pizza.html up to date.
Open up pizza.html, and add the getCustomerInfo() function if you haven’t already.
So I’m still waiting to find out more about when that ready state changes.
Make sure you set up the function for the browser to run when the ready state changes before you call send()
Browser, we’ve been really looking forward to talking with you today.
HeadRush:  Let’s begin by talking about requests and ready states.
We get more questions on that topic than almost anything else these days.
In fact, ready states are one of  the few areas where people actually notice me.
Most of  the time, everyone would rather talk about JavaScript and PHP.
Web Browser:  Sure, sure, but what good is JavaScript without me and Callback? I mean, without us, JavaScript is just a bunch of  funny looking lines of  text.
Callback? Who’s that? I’m not really familiar with that term.
Web Browser:  Callback? Oh, I bet you’ve heard of  him, and just don’t realize it.
You know that function I’m supposed to run whenever a request’s ready state changes?
HeadRush:  Yeah, that’s the one you assign to the request object’s onreadystatechange property, right?
But I usually just say, “Callback!”, and he comes running.
I find out that something’s happened with the request, and I “call back” that function.
Then he can take care of  all the details of  handling the server’s response.
In fact, I have to give Callback a holler several times for a typical request.
And not only that, but I make sure he knows about anything the server said.
I use the responseText property to let Callback know what the server said.
I take care of  the responseXML property, too, but I think that might be another chapter...
HeadRush:  Yes, we’re not quite there yet, but we’ll get to that later.
So when a callback function runs, it can get the server’s response by using the responseText property?
I let Callback know every time something goes on in the request, not just when I’ve got a response.
Callback knows better than to just use the request object without making sure the request is finished up.
Web Browser:  ...and I haven’t put the server’s response into the request object.
Speaking of  which, I’ve got to take care of  a ready state changing right now.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Then, we can have the browser run a JavaScript function once it has a response from the Break Neck server, and pass along the address from the script.
The Break Neck PHP script looks up the customer by his phone number, and returns his address.
The browser runs your callback function every time the ready state of your request object changes.
So when exactly does the ready state of a request change? Here’s a close-up look at the ready state of a request, and how it changes as a request is processed by a web server.
The JavaScript function you assigned to the onreadystatechange property is run, and can use the server’s data.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
With the connection initialized, the request is sent to the server.
This property tells the browser what function to run when the request’s ready state changes.
At this stage, the request knows how to connect, and what to connect to.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
As long as you remember the name of  the property you use to set the callback function, you’ll remember that the callback is run more than one time.
So you need to check the current ready state before trying to update the order form, or the page might end up with bad or missing data.
So that’s why we check to make sure the ready state is 4 before doing anything in our callback function, right? Otherwise, our JavaScript might try and update the page before the server is finished.
Now that you’ve got getCustomerInfo() working, and the browser knows to call updatePage() when the request’s ready state changes, it’s time to write the callback function for the Break Neck app.
Let’s start out by checking that ready state, and making sure the request has been completed before doing anything to the HTML.
Add a new function to your pizza.html file, called updatePage(), and start with this code:
You’ll write code to take care of both of these things over the next few pages.
This if statement makes sure that none of the rest of the code runs unless the ready state is “4”, which means the server’s finished, and it’s safe to use the response data.
Q: How does the server run the callback function when the ready state changes? I didn’t think the server could call JavaScript code that’s in an HTML page.
When the server is done with a request, it lets the browser know.
At that point, the server’s finished, and it’s the browser’s job to figure out what to do next.
The browser looks up the function specified in the onreadystatechange property of the request object, and calls that function.
So it’s the browser running your JavaScript code, not the server.
Q: Will we ever need to write code that does something when the ready state isn’t 4?
Remember, these are asynchronous requests, so your users aren’t waiting around on the server, and don’t really need to know what state the request is in.
You’ve seen what the Break Neck server is doing, and you’re written a lot of  new JavaScript, but what’s the browser doing as all these ready states are changing?
As the request is being worked on, the ready state of the request is changed to reflect what stage of processing the request is in.
When the browser gets a completed response from the server, it stores the server’s response in the request object.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
The browser makes a server’s response available to your code through the.
If  the ready state is “4”, the browser will have put the server’s response in the request object’s responseText property:
The browser will store the server’s reponse in the responseText property.
Blueprints, revisited You haven’t fogotten about the diagram and notes you drew up for developing the Break Neck application, have you? Take a moment to look back at what you wrote down on pages 73, and see how that compares to the steps we’ve taken so far.
This is your chance to make a few more changes before we hit the home stretch.
In the space below, write down what you think still needs to happen to complete the Break Neck application.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Step 4: Update the order form Once you’ve got the customer’s address, you need to update the pizza order form.
You’ll need the browser again, as well as some help from the Document Object Model.
If you make a change to a web page using the Document Object Model, the browser updates the web page immediately.
We’re getting close to being done with the Break Neck app!
With the address from the server, all that’s left is to update the web form.
Q: Why don’t we have to use that JavaScript utility file from Chapter 1 to update the address field?
For form fields, though, you usually do need to enter a value.
To make that easier, you can just use the value property on a form field element, and get and set its text value directly.
Q: Couldn’t we just use a <div> for the customer’s address? Why are we using a field, anyway?
So the customer’s address is filled in for them, but they can still enter a different address if they want.
Make sure you’ve added all the JavaScript we’ve talked about into pizza.html.
Then, open up the page in your web browser, and enter in a phone number.
It looks like everything is working! The server answers your request, and fills in the form with your address from the customer database.
As soon as you leave the phone number field, the page should automatically fill in the customer’s address and order.
The customer’s address, which the Break Neck PHP script looked up, got filled in.
When you’re writing synchronous applications, you can usually put your fields on a form in whatever order you like.
But for synchronous applications like Break Neck, you’re going to have to think a little harder about how your form should look.
In the Break Neck order form, you probably don’t want customers to start entering their address, and then have your callback function overwrite that with the address from the server.
Instead, let’s re-order the form, so customers go from the phone number field to the order field.
That way, customers can start entering their pizza order while their address is being looked up.
I was typing in my address before updatePage() got a response and filled it in.
Now customers will enter their order after typing in their phone number.
By the time they’re done, their address will have already appeared.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Internet Explorer is a pretty smart browser, and tries to do lots of  things to help make your browsing a better and faster experience.
For instance, it will cache a lot of  your images, so if you visit a page with lots of  graphics, and then come back later, you’ll see the graphics come up really quickly.
If you make a request to a server-side program, IE keeps track of  the URL you requested.
Then, if you make a request to the same URL—without any different data—IE figures you’re going to get the same response.
So, instead of  re-sending the request, it just gives you the result from the first time you made the  request.
Since we first saw this problem in the Boards ‘R’ Us app, let’s start by fixing that app on Windows.
Then, we can take what we learned and fix up Break Neck Pizza, too.
And what about that Windows problem from back in Chapter 1? Don’t we need to fix that.
The Opera browser does the same thing that IE does in this situation: it caches URLs.
Most Ajax apps start by running a JavaScript function based on an event (like a phone number being entered in)
The JavaScript builds a request URL, and sends a request to that URL.
This request comes from the browser, and not directly from your JavaScript code.
Let’s take a closer look at exactly what browsers like Internet Explorer and Opera are doing, and figure out why that creates trouble for our  asynchronous apps.
When a response is sent back to the browser, the callback function you specified is run.
But, if the browser is caching request URLs, it takes a note of the URL, and the answer from the server, and saves those two values for later.
Since everyone loves your app, it gets a lot of repeat use.
So in the Boards app, Katie’s boyfriend clicks the “Show Me the Money” button a second time.
The browser sees that it already has an answer for the request URL you supplied, so it figures it can save you some time.
Instead of sending the response to the server, it gives you the response it has in its caching table.
Your JavaScript callback function can update the web page with new values based on the server’s response, all without having to.
Suddenly, your dynamic application is returning the same data, over and over.
Your callback is getting stale data from the server, and your web page isn’t getting updated with fresh information.
So to get around the caching, we have to change our request URL every time.
The browser doesn’t care how the request URL is different; it just cares that it’s different.
So, we can add a dummy parameter onto the request URL, and give it a different value every time we send the request.
And, since we don’t want to write a random number generator, or do any extra work, we can just grab the current time (in seconds), and add that to the request URL.
Let’s take a look at how we can fix up getBoardsSold() from Chapter 1:
Remember back in the old days, when our request object was created in a function?
Our dummy parameter has the current time as its value.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
Q: Can’t I just turn off caching in my browser, and avoid all this extra code?
A: No, most of the options you have in your browser control caching of pages you  directly load, by either typing a URL in the address bar or clicking a hyperlink on a web page.
The requests that your JavaScript make are behind the scenes, and IE and Opera don’t give you much control over how they handle those requests.
And even if you could turn off caching, many of your users will still have caching on in their browser.
So you’ve got to work around caching, even if you can turn it off on your own web browser.
Q: So just by sticking that “dummy” parameter on the end, I can get around caching?
A: It’s more than just the parameter, or the name of the parameter.
We used the name “dummy” to make it clear that the parameter isn’t pointing to any data that’s important to the application, but you could use any name for the parameter that you wanted to.
Q: Won’t there still be a problem if two requests are made within the same minute? The time would be the same for both requests then, right?
So unless you can manage to click “Show Me the Money” twice in the same millisecond, the r equest URL will be different each time.
Q: What happens to the dummy parameter when the PHP script receives the request?
The PHP script doesn’t need that parameter, so it just ignores it.
Q: So now we just need to make this same change to getCustomerInfo() in pizza.html?
Go back to your copy of  boards.html, from the Chapter 1 examples, and update the getBoardsSold() function.
Try your new version of  the Boards app out on Windows using Internet Explorer, or on Opera (on the Mac or Windows)
Do you have any problems with caching using this new version?
I don’t think we don’t need to worry about caching in the Break Neck app.
If the phone number is different, the request URL will be different.
In the Break Neck app, the request URL will be unique for each phone number, so there won’t be any caching problems there.
If  a customer enters the same phone number, caching probably would keep the request  from going to the Break Neck server...
So in that situation, caching actually saves your customer’s time.
Be sure you don’t end up adding code that you don’t need to your applications.
In the Break Neck app, there’s no need to make any changes to the code you’ve already got.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
All that’s left is to let the user submit his order, and get the pizza cooking.
With an order and delivery address, the customer can click “Order Pizza”
The customer now gets his order fast, because Alex knew the right address to deliver the pizza to.
With all the JavaScript sorted out, let’s get back to the pizza order form.
Once the customer enters their phone number, types in their pizza order, and verifies their address, all that’s left is to send the order to Break Neck.
So I hear we’re ready to start taking order again...
There’s nothing like a breakfast of cold pizza, a whipped latte from Starbuzz, and the.
I think it’s time to quit delivering pizzas and start writing Ajax apps.
Below on the left are the names of two JavaScript functions, and on the right are several lines of JavaScript.
Draw arrows from the lines of code to the function each line will go into.
Congratulations! Your wealth of experience and expertise in building web applications have made you a prime candidate for PROJECT: CHAOS.
While the world sleeps on oblivious to our work, we are the men and women who ensure that faulty code will always keep programmers awake late at night, that moonlit walks by the beach will be interrupted by the ring of a cell phone, and that evenings started with a rose and a kiss end at the office, rather than in the bedroom.
We have determined that the Break Neck Pizza order form’s interactivity could provide unprecedented levels of customer satisfaction, and greatly reduce the frustration of pizza lovers throughout this region of the world.
Further, the application’s asynchrony could catch on, turning the Internet into a dynamic, user-friendly place for browsing.
To receive your assignment, and understand how you can aid in combatting the rise of these “next generation” applications, you are to be sitting at a table for two, at precisely 10:14 PM, in your local Starbuzz Coffee Shop.
Place a blue feather between the pages of a paperback copy of Neal Stephenson’s “Snow Crash”
You will be contacted; do not attempt to contact us, or the consequences will be more serious than you can imagine.
The napkin handed to you by the strange looking man with the gun.
It seems that something is going wrong with the Break Neck app.
Try opening pizza.html up in your browser, and enter a phone number.
Even though you entered a phone number, nothing got entered into the address field.
But why didn’t the browser tell us something went wrong with our request?
Even though you probably didn’t realize it, the browser did try to tell you something went wrong.
The browser uses a property of  your request object, called status, that you can use to determine whether something went wrong.
Here’s how you can check the status of  a request:
The server sends a status of “200” when everything is OK.
Add the code shown above to your updatePage() function in pizza.html.
Now reload your page in a web browser, and enter a phone number.
Now fix the request URL in getCustomerInfo() so that it points to the correct script on the Break Neck server.
Remember the first part of  the request URL from getCustomerInfo()?
If there’s a mistake in the request URL, is the server even.
This is a relative URL, and doesn’t include the domain name of  the server that the request should be sent to.
So what domain does the browser send this request to? The browser will automatically use the same domain that it requested the pizza.html web page from.
We’ve left off the “phone” request parameter to make this a little shorter.
So the request gets sent to the same server that your browser downloaded the pizza order form from.
Even if  the program to run on the server is ...
This program could be a Java servlet, or a PHP script, or a Ruby component, or any other bit of code running on the the server.
The browser will always run your callback, because that gives you a chance to respond to whatever the server did to handle your request.
Since you’re using an asynchronous request, the callback is the only way you have to write code that can deal with a server’s response.
To help you out with dealing with that response, the browser gives you both the state of  your request, and the status of  your request.
There’s a different between the state of  your request, and the status of  the same request.
Your request’s ready state tells the browser what stage of  processing the request is in: initialization, processing, completed, etc..
But just because a request is complete doesn’t mean that the request was successful...
A server reports any problems with a request by using a status code.
The status code indicates what happened during the request, and whether things went as you intended.
So even if  a request was completed, you still need to make sure the status code for the request indicates that everything went OK.
OK, so I see how it’s getting to the server.
But if the server can’t find the program in the request URL to run, why does the browser still run our callback?
Your JavaScript request object sends a request to the web server.
The server gets ready to pass on the request and any request data to a program.
The server is sending a lot of  information back in its response...
Here’s a look at how the server returns both a ready state and a status code:
Most of the time, the program in the request URL is a script or program running on the server.
If a program handles the request, and there are no problems, a status of “200” is returned.
The server generates a status code based on whether it found the request resource, and what that resource returned.
Q: I thought the ready state told us the server was finished with our request.
Why do we need to check a status code, too?
A: The ready state lets you know that the server is finished processing your request; that’s why you should always check it before running any code in your callback function.
Then, once you know your request has been completely processed, you need to make sure no errors occurred; that’s what the request’s status tells you.
You need both the ready state and status code to really be sure your request was handled, and it’s safe to update the page with the response data from the server.
Q: Are there any other status codes I need to worry about?
Q: Do I need to write JavaScript to handle each one of those codes?
You  could try and write some fancy JavaScript that retries the request, but if your request failed, it’s usually a problem with your web page or your JavaScript that needs to be fixed.
Printing out messages to the screen is only going to confuse your users.
Q: And even with a bad request URL, the server will respond to my request and my callback will get run?
You can then add anything after the domain name, like directories or the name of a script or web application.
Remember, there’s a difference between the server, and a program running on the server.
As long as your request has your web server’s domain in it, you’ll get a response—even if the response is that the program you asked to run on that server is missing or unavailable.
Before you abandon the ranks of PROJECT: CHAOS, make sure you’ve added code to your updatePage() function that checks your request’s status code.
You should also fix any errors in the request URL from getCustomerInfo()
Save your changes, and then load pizza.html again, and make sure things are working correctly.
Waiting room? I’m sorry, we don’t have one of those.
This is the Web, not a doctor’s office, and nobody wants to sit around reading.
What does asynchronous really mean? Asynchronous means that you don’t have to wait around while a web server is responding to your request.
That means you’re not stuck: you can go on doing what you want, and have the server let you know when it’s finished with your request.
Let’s take a view of  this from 10,000 feet by first looking at what a synchronous request is, and compare it to an asynchronous request.
Hey Rufus, will you go GET me a Head First cola from the store?
This is your request: you’re asking your trusty dog Rufus to go GET you a cola.
Once again, your trusty dog Rufus goes off with your request to get your cola.
Good boy, Rufus!  But I gotta make you an asynchronous dog...
Finally, Rufus is on his way back with your cola...
The difference is that you weren’t completely stuck while you were waiting for it.
You type in your phone number, and then move to the pizza order or address.
The page’s JavaScript then gets your phone number from the form, and sends the request for your address to the web server.
If  your address takes a long time to look up, you’ll notice that you can go ahead and enter your pizza order without having to wait for the server to return your address.
And here’s the callback function that’s run when the response comes back from the server.
Since this is an asynchronous request, from the time the browser sends the request to get your address to the time it gets a response, you can still go on using the web page.
Here’s the JavaScript function in pizza.html that sends a request to the Break Neck web server.
But it was probably too fast for you to notice...
Break Neck Pizza isn’t called “break neck” for nothing—the request to get your address and the response from the server happens so fast that you probably don’t have time to start typing in your order—much less improve your golf  game—before your address pops up.
No time for typing or golf here! The server responds with your address almost immediately.
What does asynchronous get you? Both of  the applications you’ve built so far are asynchronous.
Still, the server responded so fast to your requests that you probably didn’t notice any benefit from the asynchronous part of  these applications.
But what happens if  it takes a really long time to get the data back from the server?  Or what if  you really do need to do two things at one time? You’d like to keep using the application while that’s happening, right?
That’s when you’ll really see the benefits of  the “asynchronous” part of  Ajax.
In fact, you’re going to build another application—an Ajax-powered coffee maker—where being asynchronous makes a big difference.
So what’s the point of an “asynchronous” application if the server responds so fast that it.
What applications do you use on the Web that would be better if they were asynchronous?
As the official “coffee pot manager,” it’s your job to make sure that the caffeine needs of  your officemates are met...
All your mates are caffeine addicts, and they get a bit testy if  there’s no fresh coffee on hand.
Good thing that there are two coffee makers; even if  one order is being brewed, your co-workers can place another order, and have it filled by the second coffee maker.
You’re going to build an Ajax application to allow your co-workers to order their coffee online.
You don’t want anyone coming after you with empty coffee cups, so let’s write an Ajax application for ordering coffee and keeping track of  the status of  both coffee makers.
If an order is brewing in coffee maker #1, this coffee maker will handle any additional orders.
Just like coffee maker #1, it takes a little time to brew a cup.
You enter your name, the size of the cup you want, and what type of beverage you’re interested in.
Three ingredients for asynchronous coffee There are three basic parts to the Ajax-powered coffee maker:
You’ll also need a server-side coffee-making script, which will brew coffee anytime it gets a request.
This script can handle the brewing for both coffee makers, since two cups can be brewing at the same time in the app.
First, you’ll need the HTML for the coffee maker web page.
The page needs to take orders, and report on the status of the two coffee makers.
The Javascript needs to be able to send requests to brew coffee to the coffee maker script on the server and handle the response from the server.
It also needs to update the status of the coffee makers, and let users know when their coffee is ready.
The coffee maker script is really simple: it just takes a request to brew coffee, along with the size and type of coffee, and name of the person who placed the order.
Once the coffee’s brewed, the script sends back a response with the name of the person whose order is ready.
The web page also gives you a few options for.
Connecting the parts of the coffee maker You’ve seen the three basic parts of  the coffee maker app.
But let’s go a little further, and see how these parts combine into a coffee-making wonder.
Obviously, we’ve got an HTML form, some JavaScript, and a coffee-making script on the server.
Let’s say that Jim wants to get a caffeine fix.
He enters his name into the web form, selects Large and Mocha, and then clicks “Order Coffee”
This causes your JavaScript to run, which then sends a request to the first coffee maker.
While the first coffee maker is brewing coffee for Jim, Mary decides she needs some cappucino to keep her going.
Good thing this is an asynchronous application—she can order a drink from the second coffee maker, even though the server is still brewing coffee in response to Jim’s earlier request.
Make Jim a large mocha using the first coffee maker.
Clicking on “Order Coffee” causes the Javascript to send a request to the server to brew a cup of coffee.
How is the coffee maker going to work? You should have a good idea of  what you’ll need to build the coffee-making app.
Now you just need to be sure you know what the app will do.
Before diving into the actual HTML and JavaScript, let’s take a closer look at how the coffee maker will handle requests to make a cup of  coffee.
The coffee maker is finally done brewing Jim’s mocha, and sends a response back to your page.
The browser runs your Javascript callback, which updates the status of  the first coffee maker to “Idle” and lets Jim know that his order is ready.
We’ve already written the PHP for the coffee maker and named the script coffeemaker.php.
You’ll also see an HTML file, coffee.html, and some CSS for the page, in coffee.css.
Your job is to finish off the HTML in coffee.html, and to write the JavaScript to put all this coffee brewing and pouring into action.
But first, turn the page for a little brain teaser...
Now, Jim has has mocha, Mary’s capuccino is almost ready, and the first coffee maker’s available again to brew more coffee.
Even better, nobody had to wait around for their caffeine fix.
Productivity is up, coffee mugs are full, and you’re on your way to scoring a raise for your Ajax expertise.
The server’s still brewing Mary’s coffee, but finished up with Jim’s cup.
Coffee conundrum: can Janice use the second coffee maker while the first coffee maker is still brewing a cup for Sara?
What do you think would happen if you implemented the coffee maker application as a synchronous application instead of an asynchronous application?  Try this exercise and see if you can figure it out.
The answer comes later in the chapter, so you’ll have to keep going to know if you got it right!
In this chapter, we’re going to have to go back and forth a bit between the three parts of  the coffee maker app.
This is called iterative development, because you keep working on the same pieces over and over.
Even when we start working on the JavaScript or PHP, we’ll still have to come back to the HTML to make improvements or changes.
The coffee maker HTML Enough coffee talk; it’s time to build the asynchronous coffee maker application.
First, let’s take a look at the HTML for the coffee maker application, in coffee.html.
We’ve gone ahead and written the HTML for placing and order and the first coffee maker (you’re going to do the second coffee maker later)
The status indicates if the coffee maker is idle or brewing someone’s order.
Notice we’re using a <div> element to hold the status text.
Here’s where you enter your name, so the coffee maker knows who it’s brewing coffee for.
We’ll come back to this and fill in the JavaScript onClick event handler a bit later.
Before we start working on the Javascript, I was thinking...
You know, I think we should actually make two files—one for the JavaScript that’s the same in all our Ajax applications, and one for the JavaScript that’s specific to the coffee maker.
Instead of  putting all the JavaScript for the coffee maker directly in the HTML, let’s put it in a separate file.
Just like separating your HTML and CSS is a good idea, separating your Javascript from your HTML is also a good idea: it keeps the logic (the Javascript) of  your application separate from the app’s structure and presentation (the HTML and CSS)
You’re probably tired of  typing the same JavaScript over and over for each application...
Let’s call the JavaScript file containing the code that’s common to every application ajax.js, and the file containing the code specific to this Coffee Maker application coffee.js.
Go ahead and update your HTML with two <script> elements linking to the two JavaScript files you’re about to create:
Here’s an outline of the Javascript you’re going to need for the Coffee Maker application.
For each bit of JavaScript, indicate whether the code should go into the “ajax.js” file or the “coffee.js” file.
Q: I couldn’t figure out whether to put the sendRequest() function into ajax.js or coffee.js.
On the one hand, we’ll need this function for every Ajax app, but on the other hand, it will have code that’s specific to the coffee maker application.
We decided to do things this way because we like keeping the sendRequest() and serveDrink() functions together.
Since serveDrink() does have some coffee maker-specific code, we put them both into coffee.js.
Q: Why do we need a separate function for getting the drink size and type of beverage?
We like keeping this code separate from the rest of orderCoffee(), which will build the request URL and update the coffee makers’ status text.
Q: It looks like the request object is created in static code.
That way, none of your co-workers get their order entered in, and then find out that something went wrong.
We put all the code that creates and tests the request object into common.js, and then put all the coffee-related functions into coffee.js.
Just make sure you remember where each function is so you know which file to edit as you build the rest of  the application.
We’re depending on the id names in the JavaScript, so make sure you check your answer with ours (on the next page) before moving on.
Now that you know the name of your JavaScript functions, you can finish up the rest of the HTML for the coffee maker.
If you’re stuck, look back at the HTML for the first coffee maker, and use that as a model for filling in the blanks on the second coffee maker HTML.
Now that you know the name of your JavaScript functions, you can finish up the rest of the HTML for the coffee maker.
Sending a request for coffee With the HTML complete, it’s back to our JavaScript.
Let’s write the JavaScript to send a request to the server to make coffee.
By now, you’re a pro at making requests, so orderCoffee() should be a piece of  cake, right?  Let’s think through what this function needs to do:
The onClick event handler for the “Order Coffee” button tells the browser to run your orderCoffee() JavaScript function.
Then it builds a URL using the name of the coffee-making PHP script and the drink order details, and passes this URL to sendRequest()
Writing JavaScript to send the request Now let’s write the JavaScript to send the request to the coffee-making script:
Each coffee maker can only brew one cup at a time, so what if the first coffee maker is already brewing coffee? Somehow we need to find out if  the first coffee maker status is “Idle” before we send a new request.
If  it’s busy, we can try the second coffee maker.
How do you think we can get the status of  each coffee maker? Here’s the HTML for the first coffee maker...
How do you think we can find out the status of the coffee makers? And how can we update the status when one is brewing coffee, and when the coffee maker finishes brewing?
Getting the beverage and size of the order Before we figure out how to get and update the status of  the two coffee makers, you need to write the code for getSize() and getBeverage()
Let’s look back at the coffee order form and see what we’re dealing with:
But how do we find out what size and beverage Jim selected?
Then, “size” is the name of the <input> elements that let users select their drink size.
This line loops through all the elements in the “size” grouping...
Getting the value of a radio group The key to getting the size and beverage that Jim selected is realizing that there are three different <input> elements, all named “size” (and “beverage”)
So you need to figure out which of  these three is currently selected:
First, open up coffee.js and add the orderCoffee(), sendRequest(), and getSize() functions that we’ve looked at over the last few pages.
You should be able to figure this out from the HTML in coffee.html, and the getSize() function you just looked at.
Once you’re done, be sure you save coffee.html, and then turn the page.
Synch: I’m a busy guy, you know? And I don’t let anything get in the way of me paying attention to the user I’m serving.
He was really great; everyone liked him just fine, and he was the strong, silent type, just like me.
Synch: You know, you seem to forget who’s the older sibling here.
Synch: Look, nobody gives their users more time and attention than I do.
Asynch: It sounds to me like you’re trying to please your USER...
Synch: Hey, sometimes it’s much better to take care of one thing at a time, and then move on to other jobs.
Asynch: Sure, maybe if someone submits like 200 pieces of data.
But most of the time, you’re just not needed anymore.
Synch: Just because I don’t let people interrupt me while I’m working...
Asynch: Hey, I can listen and talk, all at the same time.
Asynch: Sure, but what if that takes ten seconds? Or ten minutes? Or an hour? Come on, do you really think people enjoy that little hourglass whirling around?
Asynch: Yeah, well, I’d love to sit around like this all day, but my users don’t like to wait on me.
I’ve seen fads like you come and go a million times.
Asynch: I bet you thought U2 was a one-hit wonder, too.
I’m not going anywhere—except to make the web a hip place again.
What JavaScript do we still need to write? There’s a lot of  JavaScript that you’ll need to write to make the coffee maker work like it’s supposed to.
Let’s take a look at all the functions we’ve got to code, and review what we still need to do:
We can get the user’s order, but still need to check the status of the coffee makers and figure out which one to send the order to.
It needs to get the server’s response, and set the status of the coffee maker that just finished brewing back to “Idle”
Don’t forget, we’ve still got to get a coffee-making script running on the server, too.
Getting and setting the text content in a <div> Let’s get back to orderCoffee()
We need to get the status of  the first coffee maker from the.
On top of  all that, you’ll need to change the status of  whichever coffee maker you use to indicate that it’s busy brewing an order.
To get or set the text content in a <div>, you need to use the browser’s Document Object Model, or DOM for short.
We’re going to go into how to use the DOM in a lot more detail in the next chapter, so for now, just follow along using the so we can finish the coffee maker application.
Just type it in and we’ll explain it all later—promise!
In Chapter 1, you used the text-utils.js JavaScript file to help you update Katie’s web report.
We’re going to use the same JavaScript utility file in the coffee maker.
Start out by adding another <script> element into the head of your coffee.html file referring to text-utils.js, like this:
Add this line, and then you can use all the utility functions from text-utils.js in your JavaScript functions.
Checking a coffee maker’s status Now that you can use the utility functions in text-utils.js, you can easily check the status of  a coffee maker using the getText() function, like this:
We still need to figure out how to update the coffee maker’s status, too.
You can use another utility function in text-utils.js for this, called replaceText()
This will clear out any existing text, so that the text you supply becomes the only text in the element.
We haven’t covered the DOM yet, so just get a general idea of what the JavaScript in text-utils.js does.
We’ll cover the DOM in detail in the next chapter.
We’re going to spend a lot of time on the DOM in the next chapter.
With the help of text-utils.js, sendCoffee() figures out if the first coffee maker is idle, and if it is, uses that coffee maker to brew an order.
But what happens if the first coffee maker isn’t idle? In that case, your JavaScript needs to see if the second coffee maker is idle, and if it is, use that coffee maker to brew the order.
Otherwise, you’ll need to let the user know that they’ll have to wait for one of the busy coffee makers to finish before their order can be brewed.
Your job is to set up the JavaScript to try and use both coffee makers.
Place the correct magnets in each blank, and then turn the page:
The “else” part of this code will ru n when the.
All the code on the facing page is part of the “else” block.
If you’re not sure which magnets to use where, look back at the.
Below is the portion of orderCoffee() that you should have finished off.
Be sure your answers match ours, and save your copy of coffee.js with these changes.
This lets users know when both coffee makers are already busy.
Test drive Even though there is plenty of  work left to do, go ahead and take the coffee maker for a test drive.
Be sure you’ve added the sendRequest(), getSize(), getBeverage(), and orderCoffee() functions to coffee.js, and then load coffee.html in your web browser.
Bob’s order is brewing over on the seecond coffee maker.
Notice that once an order is placed, the person’s name and order details stay filled in.
Could this cause problems? What do you think we should do to avoid any confusion?
I think it’s confusing to have an order brewing, and have the details of that order still showing on the.
Can’t we clear the form when an order is placed?
Right now, your officemates enter their coffee order and click “Order Coffee”
The coffee order is sent to a coffee maker, and brewing begins.
But the order is still shown on the screen, and co-workers could be a little confused by that order still being on the screen.
It would be a lot easier if  once an order got sent to a coffee maker, the details were cleared from the form.
Let’s add some JavaScript to orderCoffee(), in coffee.js, to clear the order form whenever an order is sent to a coffee maker:
In both places, get the first form on the web page, and call reset() on the form.
The script starts by getting all the data sent as part of the request URL.
Once brewing is done, the script returns the number of the coffee maker that finished, and the name of the person whose order is ready.
It’s time to get the server making some coffee so we can start serving drinks to your hard working co-wokers.
What do we do with the server’s response? You’ve completed orderCoffee(), and now coffeemaker.php is done.
When you send a request to brew coffee to one of  the coffee makers, coffeemaker.php runs and then returns the coffee maker that completed the order, as well as the name of  the person who placed the order.
When the browser gets a response from the server, it will run the callback you indicated: serveDrink()
Make Jim a large mocha using the first coffee maker.
Writing the callback function The only function left to write is serveDrink(), which needs to take the response from the server and figure out who placed the order, and which coffee maker was used to brew the order.
Then serveDrink() can set the coffee maker’s status to “Idle” and let the person who placed the order know that their coffee is ready.
Let’s start by checking the ready state, the HTTP status code, and then getting the response from the server.
All of this code should be pretty familiar by now.
You’ll use this same code in almost every callback function you ever write.
Interpreting the server’s response The server’s response looks like this when it’s received by the serveDrink() callback:
Introducing the JavaScript substring() function JavaScript has a function that’s just perfect for taking a string like the coffee maker is returning, and breaking it up into a few parts.
The character at this poisition is not included in the substring.
You can use myString.length to get the length of a string, which will always be one greater than the last position in the string.
You should be ready to write the rest of the JavaScript for serveDrink() on your own now.
Below is part of that function’s JavaScript; your job is to fill in the blanks and get things working.
You’ll need to get the response from the server, then break that response into the number of the coffee maker that brewed this order and the name of the person that placed the coffee order.
Next you should set the status of the coffee maker that just finished to “Idle” and let the person that ordered coffee know that his order is ready.
Here’s where you can put what you just learned about substring() to use.
Finishing up serveDrink() Let’s spend a little time practicing with the JavaScript substring() method, using the string you saw on the last two pages.
The name returned by the server starts in the second position (“1”), and goes to the end of the string.
Q: Why didn’t we just use form <input> elements for the coffee maker’s status?  Wouldn’t that have been a lot easier than using all this DOM stuff?
A: We certainly could have used form elements to display the status of the coffee makers.
The problem with using form elements, though, is that users expect to be able to type into form fields.
The status elements we’re using are for display only—users are not supposed to change those values themselves.
So it makes more sense for them to be non-editable fields that just display text.
Once you understand how the browser really sees your HTML markup, you’ll be writing your own DOM code in no time.
A: Using the innerHTML property is not a good way to get and set the contents of an element.
It’s not part of the DOM specification, and the W3C has deprecated it—future versions of browsers may not even support it.
It’s much safer going with the DOM code we’re using here.
In the next chapter, we’ll get into all the details about how the DOM code works, and once you’ve written a few functions using the DOM, you’ll see it’s pretty easy to use.
Best of all, the DOM is available anytime you’ve got a web browser, on any platform.
So are we done? I’m ready to check this new coffee maker out for myself.
The final test drive (right?) It looks like we’ve got all the JavaScript for the coffee maker app written.
Be sure you’ve followed along with all the examples so far, and saved your changes to coffee.html and coffee.js.
Then load coffee.html in your browser, and take the coffee maker for a test drive.
Click “Order Coffee”, and Bob’s order should start brewing on the second coffee maker.
Bob’s order comes up first, even though it was ordered second.
A closer look at the request object To figure out what’s going on with Jim’s order, let’s take a closer look at each step of  the test drive on the last two pages, and what our request object is actually doing.
Remember, the request object is created by the static JavaScript in ajax.js.
Make Jim a large mocha using the first coffee maker.
Make Bob a medium latte using the second coffee maker.
But what about Jim’s order? Do you see the problem? Jim’s order is still brewing, but now there’s no request object attached to that request! The request for Bob’s order overwrote the information in the request object related to Jim’s order:
There’s no request object set up to indicate a callback to run or receive a server’s response from the browser when the server finishes with Jim’s order.
A request object can be used to make multiple requests, but can only keep track of one response from the server at a time.
We need two request objects! It looks like with just one request object, we can’t keep up with more than one order at a time.
Let’s see if  we can fix the problems we’re running into by using two different request objects:
Creating two request objects First, we need to actually create both request objects.
Open up ajax.js and make the following changes, so that we’re creating two request objects instead of  just one:
Now, turn this code back into a function, so we can run it more than once easily.
Using two request objects With two request objects created and ready for use, you’ll need to change updateCoffee() to use both request objects, instead of  just one.
I think we need to change sendRequest() before we rewrite.
Yes, let’s change sendRequest() first Let’s change sendRequest() to accept a request object as one of  the parmeters you send to it—then, it will use that request object to send the request to the URL you supply.
That way, we don’t have to write the code that sends a request twice...
This is the only addition you need to make to sendRequest()
The only thing different will be the request URL for each.
Updating orderCoffee() Since sendRequest() handles requesting that a coffee maker start brewing an order, you only need to pass in the right request object with orderCoffee()
We always use request2 for requests to the second coffee maker.
Make both of these changes to your version of orderCoffee(), in coffee.js.
We’ve gotten started on this code by filling in all the JavaScript to handle the first request object.
Your job is to finish off the callback by writing the code to handle dealing with the second request object.
The first half of this code all deals with the “request1” object now.
We have to be sure to “clear” the request object once we’re done...
Q: We’re using two request objects so we can send requests to both coffee makers, right?
A: We were actually able to make requests to both coffee makers with just one request object.
The problem, though, was that we can’t get responses from both coffee makers with just a single request object.
When you make a request, and the server works on that request, the browser uses the request object to connect the server’s response with your JavaScript code.
But if you start another request using the same request object before the first request is complete, the browser can’t make that connection anymore.
Q: And that’s why Bob’s coffee got brewed, but Jim’s didn’t, right? Because his order was placed second, so it overwrote Jim’s earlier order?
And even though the coffee-making script on the server finished Jim’s order and returned a response, the browser had no way to connect that response to your JavaScript.
The request object was already being reused to handle Bob’s order.
By using two request objects, we can make sure that both coffee makers can be used, and that the browser can always get the server’s response back to your JavaScript callback function.
Q: So we should always use two request objects in our asyncronous applications?
In fact, in a lot of your asynchronous apps, one request object will be plenty.
The only time you need more than one request object is when your app needs to make more than one asynchronous request at the same time.
Q: And why did we turn the code that created request objects into a function again? Didn’t we just take that code out of a function in Chapter 2?
But remember, in Chapter 2 we only needed that code to run once: for the single request object.
Since we need two request objects for the coffee maker, it was simpler to put the request object creation code in a function, and then call that function twice: once for each request object.
There’s nothing really wrong with this, but we preferred to keep the request object creation code in a single function, and then just call that function as many times as we need it to run.
But even if you use the response, nothing resets the request object’s ready state.
This is a problem if serveDrink() is called when the second coffee maker finishes brewing, though.
To avoid this, we need to reset the request object.
Q: Wouldn’t it be easier to just set the request object’s readyState property to 0 in serveDrink()?
Only the browser can change the readyState property of the request object.
To get around that, we just call createRequest(), which creates a new request object.
Here’s the code we wrote for the part of serveDrink() that deals with the second coffee maker.
Make sure you have the same code, and save your changes to coffee.js.
Welcome to the world of asynchrony! It’s been a long ride, but you should have everything in place to get your co-workers all the caffeine they want, without any waiting.
Be sure you’ve made the changes to ajax.js and coffee.js so that there are two request objects used: one for each coffee maker.
Jim’s order comes back ready from the first coffee maker...
That’s all fine, but I want to see what happens in this application when it’s not asynchronous.
Skeptical? So, you want to see for yourself  how different the Coffee Maker program is as a synchronous application?  That’s easy to do.
All you have to do is change the third argument of  the call to request.open() in the sendRequest() function: switch it from true to false:
Change the argument from true to false to tell your application to send the request to the coffee makers on the server synchronously.
A synchronous test drive When you run the synchronous version of  the coffee maker application, you should notice quite a big difference.
As soon as you click on “Order Coffee”, you’re stuck.
The button stays highlighted, and if  you try to enter another order, you get the spinning beach ball (on Macs) or the hourglass (on Windows), meaning “You’ll have to wait—I’m busy!”
Nothing else can happen until the response comes back from the server.
You won’t even see the status of the coffee maker change, because that code can’t run!
The coffee is finished brewing, the status of the first coffee maker is set to “Idle” (because it’s done brewing again), and you never actually see the “Brewing” status.
Change that baby back to asynchronous! Don’t forget to change sendRequest(), in coffee.js, back to the asynchronous version...
Two coffee makers, asynchrony, and one jittery, wired, happy office.
Synchronous requests wait for a response from the server before anything else is allowed to happen.
Asynchronous requests don’t wait for a response, so users can keep pounding away at an asynchronous application while a request is being handled.
A lot of Ajax applications are asynchronous, but when a web server returns a response quickly, it really doesn’t matter whether the app is asynchronous or not.
Asynchronous applications work best when the server takes a while to send a response back, or when users need to do several things at one time on a web page or form.
When you call a request object’s open() method, the third parameter tells the request whether or not it’s asynchronous.
The DOM allows you to change a web page without reloading the page.
The innerHTML property is deprecated, and isn’t as safe or stable an approach as using the DOM to change a web page from your JavaScript.
Once your requests are asynchronous, you don’t need any special code in the rest of your application.
You write code normally and it runs automatically, without waiting for a server’s response.
It’s a good idea to test an application in “synchronous” mode to see the difference being asynchronous really makes.
Now that you know the name of your JavaScript functions, you can finish up the rest of the HTML for the coffee maker.
It’s time to take things into your own hands, and start writing code that updates your web pages.
Using the Document Object Model, your pages can take on.
By the time you’re done with this chapter, you’ll be able to.
A little pruning here, a bit of snipping there, and my web pages are.
OK, so here’s the thing: I’m really enjoying getting my head around asynchronous.
NetFlix has some nice popups, without requiring any page reloading.
Your JavaScript can work with the DOM much easier than working directly with HTML or CSS.
Here’s the application you’ll be building a little later in this chapter.
The web browser uses the Document Object Model to represent your web page.
When you change this model with your JavaScript code, the web page will automatically change, too.
And here’s some similar code from the Break Neck pizza app:
The document object gives JavaScript access to the DOM tree that the web browser creates.
Under the Microscope: The document object Everything in the web browser’s model of your web page can be accessed using the JavaScript “document” object.
You’ve already seen the getElementById() function, but there’s a lot more that you can do with the document object.
You can grab the <html> root element from an HTML.
The document object gives your JavaScript access to the web browser’s DOM tree.
Now you can add this text node to an element in your markup.
If  you want all the elements with a ce rtain name, you can use.
This looks like just what I need to change my web page on the fly...
This is where that JavaScript request object becomes so important.
Now you can add this text node to an element in your markup.
If  you want all the elements with a ce rtain name, you can use.
Here’s the DOM tree for a web page, and some JavaScript that works on the DOM.
When you’re ready to update a web page, or just want to build a cool.
But your callback still needs a way to actually change the web page that the user is looking at.
Alright, I’m psyched! I want to learn more about the DOM.
Using the DOM without Ajax Since the Document Object Model isn’t tied to your asynchronous programming, there’s nothing preventing you from using the DOM in all your web applications.
The Great Chapter 4 Coding Challenge Write a killer web application that uses the Document Object Model to create a dynamic user interface, without writing any Ajax code.
If you can pull this off, then you’ll know that you can use the DOM to make all your applications better, even if they aren’t making asynchronous requests.
In fact, we get a lot of  requests for that around here.
All you seem to have is a bunch of  trees.
I want to program web pages, and change the way a page looks using JavaScript.
Jenny: Is this some sort of  weird simile? How are web pages like trees?
Every time you give a browser a page full of  HTML, the browser sees that HTML as a tree.
Jenny: How does that work? I guess I can see how HTML has some structure to it, but I’ve never heard anything about web browsers and trees before.
But if  you’re going to change and update web pages with JavaScript, you’ve gotta get ahold of  the tree concept.
I was told I needed to learn about something called the.
When you’re creating a web page, you write HTML to represent the different parts of  your page.
Then you give that HTML to the browser, and the browser figures out how to represent that HTML on the screen.
But if  you want to start changing your web page using JavaScript, you need to know exactly how the browser sees your HTML.
First, let’s take a look at a simple HTML document:
So what in the world does any of this have.
The browser has to make some sense of  all that markup, and organize it in a way that allows the browser—and your JavaScript code—to work with the page.
You can visit us at the corner of Binary Blvd.
Just because you put a picture of a plant behind my markup doesn’t make it a tree.
I still don’t understand where trees come into the picture.
When a browser loads an HTML page, it starts out with the <html> element.
These branch out from the <html> element (starting to get the tree vibe?), and have a whole set of  elements and text of  their own.
Of  course, the elements in each branch can have branches and children of  their own...
These pieces of markup, without anything under them, are called leaves.
So your entire page ends up being one big tree to the web browser.
Let’s look at that tree structure again, but this time with some lines making the connections between the markup a little clearer.
You can visit us at the corner of Binary Blvd.
Eventually, the tree ends in leaves, which often are just pieces of text in the HTML.
Each bit of markup can have any number of children.
Q: Do I need to reference the ajax.js file we’ve been using if I want to write JavaScript code that uses the DOM?
In fact, Ajax and the Document Object Model have nothing to do with each other, other than the fact that most Ajax applications happen to use the DOM.
But there are lots of non-Ajax apps that have been using the DOM for years.
If you’ve got a web browser that has JavaScript enabled, then you’ve got all that you need to start changing web pages using the DOM.
Q: And what about text-utils.js? That file had a bunch of DOM utilities in it, right? Do I need that?
It did contain several utility functions, and those functions used the DOM to make changing a web page fairly easy.
In this chapter, though, we’re going to dig deeper into the DOM, and learn how to work with it directly, rather than using some preassembled JavaScript.
In fact, by the time you’re done with this chapter, you’ll know exactly what’s going on in text-utils.js, and be able to make improvements and add additional utility functions for yourself.
Q: It looks like you called some parts of that markup “children.” So an element can have “child elements”?
When the browser organizes your HTML into a tree, it begins with the root element.
Keep this in mind; we’ll talk a lot more about parents and children in the rest of this chapter.
Q: It seems like you’re using a whole bunch of new terms, like root and branch and child.
How am I supposed to keep up with all of this?
Just keep the idea of a tree in mind, and you shouldn’t have any trouble.
You’ve been using terms like root and branch and leaf for years.
As for parent and child, anytime you’re moving towards the root of the tree, you’re moving towards a parent; anytime you move away from the root, you’re moving towards a child.
The only term that may be totally new to you is “node”, and we’re just about to take a look at that...
Web Dictionary What good is looking at a bunch of definitions? This is Head Rush, and we want your brain working, not just your eyes.
Below are several entries from a Web Dictionary, with some of the words in each definition removed.
Your job is to try and complete each entry by filling in the blanks.
Any piece of markup that is _________ by another piece of markup.
Any _____ piece of markup, such as an element or text.
Here are the words you should use to fill in the blanks.
It’s OK if you used different words than in our version of the dictionary...
A piece of markup that has no children, such as an element with no text content, like <img>, or textual data.
The element in a document that contains all other elements.
Any piece of markup that is contained by another piece of markup.
Any single piece of markup, such as an element or text.
You can visit us at the corner of Binary Blvd.
Now that you’ve got a handy Web Dictionary, it’s time to put it to use.
Below is the tree view of the HTML we looked at a few pages back.
Your job is to take the different tree magnets from the bottom of the page, and attach them to the right parts of this tree.
Be careful: some parts of the tree may have more than one magnet that could apply, and you won’t need to use all the magnets.
When the browser gets your HTML and represents it as a tree, the browser has to keep up with the order of  text and elements in the markup.
Otherwise, paragraphs could appear in the wrong order on the page, and the wrong words might be bolded or underlined.
Let’s take another look at the markup for the welcome text:
Flip back to page 213 to see what Jenny’s talking about.
The <a> element has some text of its own, also.
When you look at the tree view of an HTML page, you usually just read it from left to right, like this:
We’re still learning about CSS, so pardon out plain site.
There’s even a space at the end of this text, since there’s a space before the <a> element in the markup.
The <p> element has three children: two text nodes and one element node.
The tree has to match the HTML exactly, or people looking at the web page could get really confused.
Read it, check out the diagram below, and then read it again.
Your job is to figure out how a web browser organizes this HTML into a tree structure.
On the right is a tree, ready for you to fill in its branches and leaves.
To get you started, we’ve provided spaces for each piece of markup; be sure you’ve filled each space with an element or text from the HTML markup before showing off your tree to anyone else!
We’ve filled in several of the nodes to help you get started.
We’ll look at the answers to this exercise in just a few pages.
Q: The ordering of the elements and text in the HTML matters, right?
If these were reversed, the tree would be different, and as a result, the page would be displayed differently in your web browser.
So always be sure you’re keeping things in the correct order when you’re representing HTML as a tree like this.
Are those two different things, or is text also a type of element?
Text is the actual characters within elements, like “Webville Tree Farm” or “directions”
All of these are considered nodes, but elements, attributes, and text are all different kinds of nodes.
So you could have a text node, but you would never have a text element.
Q: What about attributes? You said that there are attribute nodes, but that they really aren’t “children” of the element they appear on, are they?
Instead, the browser stores the attributes of an element in a special list for each element.
So there are attribute nodes, but they’re not very easy to represent on a tree.
When we look at the DOM in a few pages, you’ll see that it handles attributes in a special list for each element.
Q: Don’t lots of older HTML pages leave off closing tags, like </p>? How does a web browser handle pages with markup like that?
In these cases, web browsers do the best they can in creating a tree structure.
Usually, the browser gets it right, but if you ever see a page that doesn’t appear quite the way you expected, it might be because the browser guessed wrong in creating the tree structure for that page’s HTML.
That’s just one more reason to be careful when writing HTML.
Q: Will different web browsers all represent a page in the same way?
If you start to get sloppy, though, and forget to close an element, or use older, outdated HTML, then web browsers have to do the best they can to represent your markup.
As a result, you’ll start to see differences in the tree between different browsers.
But as long as you write standard, valid HTML pages, this shouldn’t be a problem.
OK, I get all this business about a web browser seeing my pages as trees...
See? If you want to understand web pages, you have to master trees.
Mike: Often, the root must be watered carefully before one can enjoy the leaf.
I read it somewhere, and thought that it might impress you.
Mike: The Document Object Model—usually called the DOM for short—is how you can work on the tree that the browser creates from your web page.
You can manipulate the DOM with  JavaScript, and update the browser’s tree.
And once you update the tree, the page itself  will automatically be changed by the browser, without any page reloading or refreshing.
There’s a group called the World Wide Web Consortium (most people call them the W3C for short) that publishes the specifications and standards for the DOM.
Just a bit of trivia for you standards gurus out there...
Remember, web browsers see your web pages as trees of elements, text, attributes, and other markup:
Browsers see the world upside down Of  course, browsers don’t literally store a picture of  a tree with your markup on it.
If  you want to really understand what the browser stores in memory, you need to learn about the DOM.
Let’s see how the browser takes the tree you just looked at and represents it with objects.
First, the browser flips the entire tree upside down so the <html> element is at the top of  the tree instead of  the bottom:
When you’re working with the DOM, the “top” of the tree is the root element.
Even though we flipped the tree over, we still move from left-to-right when we order nodes.
Once the browser has your markup with the <html> element at the top, it creates a new object for each node in the tree.
The result is a bunch of  objects, all “connected” together, like you see here:
All of these objects are element nodes, because they represent HTML elements.
This entire thing is usually called a DOM tree, because it represents your document using objects and provides a tree model of your markup.
Time to get your dry-erase markers out and dive into the DOM for yourself.
Your job is to take the HTML below and draw the DOM tree that a web browser would create to represent this markup.
Start out by drawing boxes, with the element names and text inside.
Then, connect your boxes together, like this.* Draw what you think the DOM tree will look like here:
One of our reviewers pointed out that you don’t have to draw the boxes before writing in the element names.
HeadRush:  We’re here with the Document Object Model, talking about how web browsers really see HTML, and what JavaScript programmers need to know to update their pages on the fly.
It’s an awful lot of  trouble to go around saying “Document Object Model.”
You’re what a web browser sees when it looks at an HTML page?
DOM: Well, the browser starts out with HTML and CSS and JavaScript files.
But web browsers really don’t like to work with text, which is all that those files are.
It’s hard to apply CSS styles and JavaScript event handlers to a bunch of  text.
Because hardly anyone puts their CSS into their HTML files anymore...
DOM: Right, and most of  the time, the JavaScript isn’t in the same file as the HTML, either.
So the browser uses me, and combines all the HTML, CSS, and JavaScript into one structure.
So, for each piece of  HTML, the browser creates an object.
HeadRush: I can see how that would make it easier for the browser to keep up with all those HTML elements.
But I’m not sure I understand how CSS and JavaScript fit into this picture.
DOM: Well, all my objects that represent HTML have helpful methods you can call, and properties you can set.
So, for example, you could call addEventListener() on a button, and have the button call a JavaScript function every time it’s pushed.
All that is easy if  browsers use me—and the objects I provide—to model web pages.
So do you make it easier to change what’s on a web page, too?
You can add a new text node to an element to make text appear, or remove a <div> element from its parent to make an entire section of  a page vanish.
I exist in memory all on the web browser, so the browser doesn’t need to talk to a server or even be connected to the network to use me.
Time to get your dry-erase markers out and dive into the DOM for yourself.
Your job is to take the HTML below and draw the DOM tree that a web browser would create to represent this markup.
Remember that big huge DOM tree we just looked at?
You can get to this whole thing using the “document” variable in your JavaScript.
You can grab the <html> root element from an HTML.
You’ve already seen several ways to use the document object in your code...
You’ve already seen how getElementById() makes it a piece of  cake to find an element in your web page, using the element’s id attribute.
Moving around in a DOM tree You already know how the document object can help you find an element with a particular id attribute, but there are a lot of  other ways you can get around in a DOM tree.
Since each node has a parent, and most element nodes have children, you can move up and down in the DOM tree using these connections.
If you want to go straight to the first child, use the firstChild property of the <div>’s node object.
Start reading HERE! Everything in this diagram starts with this <div>
Sweet! Now I can find any element I want, move up and down the DOM tree...
Elements and text are special kinds of  nodes, but they’re still nodes.
Anytime you have a node, you can get the name of  the node with nodeName, and the value of  the node with nodeValue.
You’ve got to be careful what type of  node you’re working on, though, or you could end up getting a null value when you’re expecting the name of  an element or a string of  text.
An element node has a name, like “div” or “img”, but won’t have a value.
And a text node won’t have a name, but it will have a value: the actual text stored in the node.
You’ve got to keep up with what type of  node you’re working on, and always know where in the DOM tree your variables are pointing.
To help you get some practice, here’s a bit of  JavaScript code, and some HTML.
Your job is to figure out what each alert() prints out.
Try this first without running the code on your own...
Q: I understand text, and elements, and branches, but I’m still confused about exactly what a “node” is.
A: Everything in a DOM tree is a node: elements, text, attributes, even comments.
Since each piece of markup has some common properties, like a parent, and in most cases a name and children, the DOM groups these common properties into a Node object.
Then, each different type of node adds its own unique properties to the common properties in the Node type.
For example, element nodes have a getAttribute() and setAttribute() method, because only elements can have attributes.
But element nodes get the parent and childNodes properties from the Node object, since that functionality is shared by several different types of nodes.
What happens if you use the nodeName property on something like a text node?
That’s the DOM’s way of telling you that it didn’t know what you meant, or at least that what you meant didn’t match up with the DOM tree the browser created from your markup.
So if you tried to access the nodeName property on a text node, you’d get an undefined value because, unlike elements, text nodes don’t have names.
Or, if you tried to use nodeValue on an element, you’d get an undefined value, because elements don’t have values.
An element can have attributes, but any text within the element will be in the element’s child text nodes, and not available through the element’s nodeValue property.
I like most of this DOM stuff so far, but all this null value and undefined stuff kind of.
Can’t I just ask the node if it’s an element, or text, or whatever?
Every node has a property called nodeType, along with the nodeName and nodeValue proeprties that you’ve already seen.
The nodeType property returns a number, and that number maps to a value stored in the Node class.
There’s a value for each type of  node, so you can use these values to figure out exactly what kind of  node you’re working with, like this:
There are numbers defined for all the node types, including elements, text, and attributes.
Some browsers don’t recognize Node Unfortunately, some web browsers don’t support the Node class in your JavaScript.
Your code won’t run, and you’re back to dealing with errors and null values.
Q: So as long as my users aren’t running Internet Explorer, I can use the Node object, right?
Even if you don’t think your users are running IE, it’s still the world’s most popular browser (by a long-shot)
In the next chapter, you’’ll see that you can get the same results with a little more work, and end up with code that works on all browsers.
Cool! I can definitely see there are some weird things about the DOM, but I think I’m starting.
But what ever happened to that coding challenge you mentioned?
The DOM is a pretty big topic, and it’s taken us almost 40 pages just to explain how it works.
But now you’ve got some mad DOM skills, and are almost ready to take on building a DOM app...
Before you do, though, check out the exercise solutions on the next few pages, and make sure you understsand everything so far.
Then, turn to Chapter 4.5, and we’ll start working on a DOM app all our own.
The Great Chapter 4 Coding Challenge Write a killer web application that uses the Document Object Model to create a dynamic user interface, without writing any Ajax code.
This chapter just got so stinking big that we broke it into two chapters.
So we called the next Chapter 4.5, and now we can still say ...
Who said there couldn’t be drama in a programming book?
You’ve got to keep up with what type of  node you’re working on, and always know where in the DOM tree your variables are pointing.
Did your answers match up with ours? Let’s take a look:
The first (and only) child of <h1> is the text node with the text “I am a cow”
The <span> elements’s last child is its text, which is “tiger”
Did you get that last one? It’s easy to forget that the “element” variable isn’t really an element at all! It’s a text node, and its parent is the <span> element.
If you thought this last line ended up at the <div>, with an “id” attribute of “ranch”, it’s OK...
This just means that there’s not a value for this property.
You can visit us at the corner of Binary Blvd.
Below is how a web browser would view a simple HTML page.
In a lot of cases, a node is both a parent element and a child element.
Hungry for more DOM? In the last chapter, you got a crash course in the coolest way to update your web pages:
Everyone’s a critic If  you enjoy music, you’ve probably got an opinion about what you like to listen to...
Let’s use what we’ve been learning about the DOM to build a web page for rating the Top 5 blues CDs of  all time.
Rather than spend a bunch of  time writing HTML and CSS, we’ve already taken care of  putting a simple page together, and adding some style.
Open up the chapter04/ folder in the source code for the book’s examples.
You’ll see another folder named top5, with some files and a sub-folder:
There are a bunch of images in here, one for each of the CD covers.
We’ve taken care of the CSS for the page, too.
You can click on any of these CD cover images.
When you click on a CD, it should move down into this Top 5 listing area.
You can click “Start Over” to move all the CDs back to the top of the page, and create a new list.
Could you build this application without using the DOM? How would it be different?
Most of  the file is filled with <img> elements to display the CD covers.
You’ll also see some instructions, a form with a button, and a few <div>s:
Here’s where we’ll put the CDs that the user chooses.
With the HTML and CSS already written, all that’s left for you to take care of  is the JavaScript.
Write a function that clears the user’s choices and starts over.
Write a function that adds a CD to the Top 5 list when the CD’s cover is clicked on.
Create a new file to store the page’s JavaScript code.
We’ll have to add an onClick() event handler to each CD cover image to handle this.
You can leave all of  these functions blank for now; we’ll fill.
Be sure you’ve made these changes before you turn the page, and then save your new JavaScript file.
Your new JavaScript file should have something like this inside it.
Remove all CDs from the To p 5 and start over.
We’ll have to add some CSS to this file later.
Which option do you think is best? Remember, after you add a CD to the Top 5 listings, you don’t want anything to happen if someone clicks on that cover again.
Does this make a difference in how you add the onClick event to the CD cover <img> elements?
Use JavaScript to programmatically add event handlers to all <img> elements.
Use JavaScript to programmatically add event handlers to all <img> elements.
This time, there’s nothing in the HTML that sets up an event handler for the CD covers.
Here’s part of the DOM for the Top 5 web page.
Remove all CDs from th e Top 5 and start over.
Seems like it would be easier to just handle adding and removing the onClick event with JavaScript.
Nice thinking! We can write a function that adds the onClick event handler to all the <img> elements in the “cds” div.
But if “Start Over” is clicked, we need to put all the CDs back in the top <div>, the one named “cds”
Then we can run our function again, and add the handlers back to all these images.
If someone clicks “Start Over”, all the CDs go back up top, and need to call addToTop5() if they’re clicked on again.
You’ve already used onClick and onChange in your HTML to assign a JavaScript function to an event.
You can do the same thing with JavaScript code, and get a little practice working with the DOM, too.
All the CD covers we want to add handlers to are nested in the “cds” <div>
Q: What’s the difference between using the onclick property in JavaScript, and the onClick attribute in an HTML page?
We can just loop through all the <img> elements, and add an event handler to each.
Q: Isn’t there an addEventHandler() method that would be better than working with the onclick property directly?
We need to make sure that these event handlers are set up as soon as the page loads.
Fortunately for us, the <body> element has an event handler called onLoad()
We can use that to run a JavaScript function any time the page loads, which is just what we want.
Be sure and make the changes on the last few pages to top5.js, also.
Thanks to the DOM, though, this should be a piece of  cake.
Let’s start by looking at a bit of  the DOM tree for top5.html.
This is the <form> with the “Start Over” button in it.
When someone clicks on a CD cover image, addToTop5() will run.
JavaScript lets you know what part of the DOM tree called your function through a special keyword named this.
Take a look and see how the this keyword works:
There are several ways you can add an element to another element:
You can add a node to the <div> after all of the children it currently has:
As you add CDs to the Top 5 list, you want to add newer CDs to the “end” of the list.
You can remove this event handler by setting the handler property to null.
You’ve learned a lot these last few pages, and now it’s time to put all your new DOM and JavaScript tricks into action.
Go ahead and finish off the addToTop5() function by pinning the code magnets into the blanks below.
Can you click on the CD covers? What happens when you do?
All this code is running in your web browser, with no reloads and no page refreshes.
Did you have any trouble with the Top 5 CDs test drive? If you did, make sure you put the code magnets in the right blanks, and update your JavaScript code to match.
Take a close look at the code for addToTop5() so far.
At that point, the parent of  the <img> is no longer the.
And since elements have only one parent, it gets moved in the DOM tree:
I’ve been thinking about how we handle adding rankings to the CDs...
And now that you know how to loop through an element’s child nodes and how to figure out an element’s name, this should be pretty easy.
Now that you know how many CDs there are in the Top 5, you can start adding a ranking number to each CD as it’s added.
Here’s a look again at how we want the CD ranking to look.
For the current ranking, we can just add one to numCds.
But getting the formatting of  the ranking isn’t a JavaScript thing...
The ranking itself is just a text node with a number.
There are several things left to do in order to finish up addToTop5()
Let’s figure out exactly what needs to be done, and then get to the code on the next page.
Add a new CSS class for CD rankings1 Here’s the CSS you need to overlay the ranking on the CD cover image, and handle the white-on-black coloring.
Create a new <span> element and set up its CSS class.
Create a new text node and set its text to the CD ranking.
Let’s call this class “rank”, and set it up so that CD rankings will overlay the CD cover images with white-on-black text.
Since we have a count of the CDs, this is a simple check to make sure there aren’t more than 5 at any time.
The rest of this all applies to your addToTop5() JavaScript fiunction.
It’s time to fire up your text editor and finish off addToTop5()
See if you can fill in all the missing code blanks.
Be sure to finish this exercise before turning the page.
You may have to flip way back to the first few pages of Chapter 4 if you get stuck on this one.
Make sure your answers match ours, and then add all of  this new code to top5.js.
All the create methods are available through the document object.
Just stick the text node at the end of <span>’s child nodes list.
Testing the CD rankings (again) Once you’ve finished up addToTop5 in your JavaScript, fire up your web browser again.
Load the Top 5 web page, and click on some CD covers.
You should see rankings show up, overlaid on the top left corner of  each CD cover.
The absolute positioning in CSS makes sure these appear on top of  the cover, adding a nice visual bit of  eye candy to the page.
It’s time to exercise your DOM skills one more time.
Any CD cover images need to be added back to the top of the page.
And other elements, like <span>s, need to be removed from the page.
See if you can fill in the blanks, and finish off the JavaScript in top5.js.
Remember, once all the CD covers are back up top, you should be able to click on them and have addToTop5() get called.
Now you just need to update top5.html, and set the “Start Over” button to call your completed startOver() function:
Type in the JavaScript for startOver() from the last page, and don’t forget to add the onClick handler to your HTML’s <input> button.
Then take the Top 5 CD listings page for a final test drive.
Country blues? Electric guitars? The old Delta or the back alleys in Texas...
It’s time to exercise your DOM skills one more time.
Any CD cover images need to be added back to the top of the page.
And other elements, like <span>s, need to be removed from the page.
Start out by getting the two <div>s you’ll need to work with.
Keep working on this <div>’s children until none are left.
If the node is an <img> element, add it back to the top of the page...
You asked for it, and now you’re going to get it: we’re finally going to ditch send(null), and learn how to.
It will take a little extra work on your part, but by.
Remember all the work you did on Break Neck Pizza? Well, it seems like everyone’s been loving the Ajax version of  the pizza order form.
In fact, Break Neck has a few new features they want to add, and they’re depending on you once again.
Break Neck is getting more business than ever since they went asynchronous.
Customers love that when they enter their phone number, their address appears.
Can we do something similar with the “Order Pizza” button? Our customers.
Break Neck doesn’t seem to be asking for anything that complicated.
Let’s see if  we can convert the Break Neck pizza form submission into an asynchronous request.
In this step, you’ll have to write a new callback function.
This will need to take the delivery time that you get from the Break Neck server, and give the customer a confirmation that her order is on its way.
First, we need to change Break Neck’s HTML so that it no longer submits the form when a customer clicks “Order Pizza”
Let’s take a look at the Break Neck order form, and make a few changes:
Instead of submitting the form, clicking “Order Pizza” should run the JavaScript function you’ll be writing next.
Next on the Break Neck task list is writing the submitOrder() JavaScript function.
This function needs to get the customer’s phone number, address, and pizza order from the order form, and send them to the placeOrder.php script on the Break Neck server.
And, to add a little twist to this puzzle, you can use each code magnet as many times as you need...
You may also have to use more than one magnet on the same line.
Next on the Break Neck task list is writing the submitOrder() JavaScript function.
Here’s where you should have placed the magnets to get this function working.
Be sure you don’t have any extra parentheses on your callback functions, and double-check all your dots between terms like “document” and “getElementById”
Make sure you didn’t add any parentheses at the end of the name of your callback function.
It’s time to make Break Neck an even better place for ordering pizza.
You’ll need to open up pizza.html, and change the form to run submitOrder() when “Order Pizza” is clicked, instead of  submitting directly to the placeOrder.php script on the Break Neck server.
As long as you’re making improvements to Break Neck, go ahead and move all of  the JavaScript out of  pizza.html.
You can use ajax.js, which you wrote in Chapter 3, for creating the request object.
Don’t forget to add <script> elements that link to these files in your.
Once you’ve done all of  this, flip to the back of  this chapter, and check page.
You’re moving along pretty quickly now! Let’s get our old pal Frank to update his PHP script.
It doesn’t need to send us back a bunch of  HTML anymore.
Can you make a change to placeOrder.php? It still needs to place the pizza order, but I don’t need it to return an HTML page anymore...
It still places an order, but now it doesn’t need to return any HTML.
Instead, it just gives an estimate for when the pizza will arrive at the customer’s front door.
Frank’s using a couple of other PHP files to handle order and delivery specifics.
We won’t look at those, but all these files are included in the book’s downloadable examples.
The entire order is sent to the delivery boy, who takes care of getting it to the customer.
Make sure we got an order that isn’t an empty string.
This sends a header back to the browser with an error message...
Some web browsers, like Safari, report a status code of “undefined” unless there is some response from the server.
By sending a blank reponse, the correct status code will be reported by those browsers.This makes sure an address was entered.
When things go wrong There are lots of things that can go wrong when a customer uses the Break Neck web app.
Below are several problems that might come up when a customer uses the pizza order form.
In each of the blanks below, write down what you think will happen when each error occurs.
Susan enters her phone number, but accidentally clicks “Order Pizza” before she enters her pizza order.
Maylee enters her phone number and pizza order, but accidentally changes the street number in the address field.
Walt mistypes his phone number into the Break Neck order form, and then enters his address and order manually.
Now that the Break Neck PHP script just returns a delivery estimate, we can write a new JavaScript function to display this to the customer.
Get a reference to the <div> in the page, using its “id” attribute.
Get a reference to the <form> in the page, using its “id” attribute.
Here’s the main <div> for the page, with an id of “main-page”
Let’s look at this step in a little more detail.
The <p> with the order confirmation is now all that the customer sees.
Here’s the <form> we want to replace with an order confirmation.
Let’s take a closer look at exactly what happens when you replace an element in the DOM:
Here’s what’s going on in the browser as we change the DOM tree.
It’s time to take everything you’ve been learning in these last few chapters, and put it all to work.
Below is the showConfirmation() callback function for the new and improved Break Neck pizza order form.
Your job is to complete the code by filling in.
You’ll need to use what you know about asynchronous requests, HTML forms, the DOM, and error handling to get this function working.
HINT: replaceChild() takes two arguments: the first argument is the new node, and the second argument is the node to be replaced.
This callback will get run once the server places the order, and responds with a delivery time.
Make sure you’ve checked your answers to the Just Do It exercise on the last page with ours, and made these changes to your pizza.js JavaScript file.
Then, load up pizza.html, and let’s see how things look.
Alright, let’s let the customers know we’ve made some improvements!
Now, the Break Neck order form is submitted asynchronously, instead of using a form submit.
Below is the completed showConfirmation() callback function; make sure your answers match up with ours...
Be sure you check the ready state before checking the request’s status.
Next, use the DOM to create some new text for a <p> element.
If the PHP script sends back an error code, this will print that code out for the customer to see.
When things go wrong Solutions So what do you think went wrong in each of the cases below? See how your answers compared with ours:
Susan enters her phone number, but accidentally clicks “Order Pizza” before she enters her pizza order.
Maylee enters her phone number and pizza order, but accidentally changes the street number in the address field.
Walt mistypes his phone number into the Break Neck order form, and then enters his address and order manually.
The pizza form will show an alert box with the error code returned from placeOrder.php, which is “400”
Alex will end up delivering the pizza to the wrong address! Nothing we can do about this...
As long as Walt typed his address correctly, there won’t be a problem.
Take a look at the last error, when placeOrder.php returns an error status code to the browser.
Is there anything you could do to make the error message that the customer sees any more helpful?
Flip back to the placeOrder.php script on page 284, and look at those lines at the top that check and make sure the customer’s address and pizza order were received.
If there’s a problem, the script returns a status code of  “400” along with an error message, and stops processing the customer’s order.
Anytime the server sends a response to your request, it can give you information about its response using response headers.
The server provides the web browser information about a response using response headers.
Here’s part of the actual HTTP response that the Break neck server sends back to the web browser.
This part is the “value” of the “Status” response header.
Your JavaScript code can access the response headers through the request object.
You can access any response header, and get its value.
Now that you know how to get a response header from the server, you can improve the Break Neck JavaScript, and let customers know a little more about any errors they run into.
If placeOrder.php reports an error, the status code will be “400”, so the “else” part of this code will run.
This gets the value of the “Status” response header, if there is one.
Team Chat: One more problem to fix...Team Chat: One more problem to fix...
So we probably should use POST for our request instead of GET, huh?
What do you mean? Why mess with something that already works?
You’re using a GET request when you submit the pizza order form, right?
So since we’re adding the customer’s phone number, address, and order to the request URL...
The request URL has to include the customer’s order, and if that order makes the URL too long, part of the order could get cut off!
All the order details get sent as part of the request URL.
Each browser has a different maximum, and some servers have a maximum length that they’ss accept, to.
That’s one of the real limitations with using GET requests instead of POST requests.
I can just see someone placing a huge order during the Super Bowl—20 pizzas, tons of sides, drinks, snacks—and we end up blowing it because part of their order got cut off in the request URL.
I know it seems like everything is working, but I’ve still got a few concerns about the Break Neck order form.
What if someone places a really long order? Their order gets added to the request URL, but if that URL is longer than the browser or server supports...
Losing part of  a customer’s order would definitely be a problem for Break Neck.
But, it looks like using a POST request might help solve the problem.
Let’s take a closer look at both types of  requests:
In an actual request, lots of the special characters in this URL would be encoded by the JavaScript escape() function.
We’ve left it unencoded, though, to make it a little easier to understand.
Data sent with a POST request isn’t part of the request URL.
What do you think happens to the data in the GET request if the URL gets too long for a web browser or a web server to handle?
Once a web server gets a POST request, it figures out what type of  data it has received, and then passes that information on to the program in the request URL.
Since this is a POST request, there’s no data in the actual request URL.
The server takes care of taking the data from the request, and turning it into something a serverside program can use.
It looks like POST is just what we need to make sure those big orders get to Break Neck’s placeOrder.php script intact.
Let’s update the JavaScript in placeOrder() to use a POST request instead of  a GET request:
Start out by removing all the form data from the request URL.
Use name/value pairs in send(), just like you did at the end of the request URL in the GET version of this code.
Go ahead and open up your copy of  pizza.js, and find the submitOrder() function.
Change the function’s code so that it sends the customer’s order to placeOrder.php using a POST request instead of  a GET request.
Once your code matches ours from above, save pizza.js, and go ahead and turn the page for some Q-and-A before we take Break Neck for another test drive.
Don’t lose this semicolon at the end of the line.
Browsers know exactly what data you’re sending them in a GET request...
So when the web browser thinks a request is the same—because the same data is in the URL—it tries to “help out” and return any cached answer it has for that request.
Even worse, the server NEVER gets the new pizza order!
The request never makes it to the Break Neck server.
But isn’t the URL always the same in a POST request? Why doesn’t the.
In a POST request, the browser doesn’t know what data might be a part of  the request, since the data isn’t sent as part of  the request URL.
Since the browser isn’t sure what’s in the request, it sends all POST requests on to their destination server, and doesn’t try and cache responses from the server.
The POST request gets to the Break Neck server.POST request.
Q: Now that we’re using a POST request, does the length of the data we send in the request matter?
You can send as much data in a POST request as you like.
So those big orders for your next bachelorette party will get through to Break Neck with no problems.
Q: Is the length restriction on GET requests the only reason to switch to using a POST request?
While most people agree that POST requests are best for submitting orders and doing other transactions that are “final”, the biggest reason to use a POST request instead of a GET request is because you can send unlimited amounts of data in a POST request.
In a GET request, both the browser and the server have a maximum length for request URLs; anything longer than that gets ignored.
Q: I thought that POST requests were more secure than GET requests?
There’s one additional step that goes into packaging up POST data: an encoding on the browser, and a matching decoding on the server.
Anyone who is looking to get your information can get it from a POST request almost as easily as they can from a GET request.
If you really want to secure your request, you’ll have to use a secure network connection, like SSL.
That’s a little beyond what we’re covering in this book, though.
For the most part, that’s an issue for the server to worry about, and not your Ajax application.
Q: I’ve always heard you should send credit card numbers and personal information using POST.
Remember, most web programmers like to use POST requests for completing orders, paying for an item, or any other transaction that is “final”
So you’re posting a transaction, like you would in your checkbook.
If you want extra security, though, then you still will want to use an SSL connection, or some other form of network security, for your requests.
In the same way, GET requests are usually used to get data (makes sense, doesn’t it?)
And since you’re almost always completing a purchase or transaction when you enter in sensitive information like a credit card number, those end up being sent to the server as POST requests.
But it’s more about the type of the transaction, rather than making the request more secure.
Q: And when you send a POST request, you just put the request data in the send() method of the request object?
You even use the same name/value pairs, like you did when adding the data to your request URL.
The only difference between how you supply the data in a POST request and the data in a GET request is that, in the GET request, you have to put in a ? before the name/value pairs you add to the request URL.
In a POST request, you don’t need a ? before the name/value pairs, since you’re putting them directly into the send() method.
Q: That’s it? There’s nothing else we need to do? a: Well, let’s take our updated Break Neck pizza order form for a test drive and see...
Make sure you’ve taken care of  everything in the Just Do It exercise on page 299, and then load pizza.html in your web browser.
Go ahead and enter a phone number, and while the server is filling in your address, enter in a pizza order.
Q: I tried pizza.html on Safari, and it worked just fine.
Safari tends to do a few things that make a POST request work without a few of the extra steps you need to take for most other browsers.
The POST version of Break Neck fails on Internet Explorer, Opera, and Firefox, so we definitely need to figure out what’s going on, and fix the Break Neck app.
I already told you, there’s no problem with my script.
You must have screwed something up in your JavaScript code.
Jim: Are you sure? I’ll bet you forgot to change your script to accept POST parameters.
Come on, just admit it! Fix the thing, and we can get on with it...
Frank: Look, do you have a hearing problem? I’ve told you twice now, my script accepts GET and POST parameters.
Are you sure you even sent the customer’s order and address?
Once I realized how long someone’s order could get, I updated the part of  my JavaScript that places the order to use a POST request.
I put the customer’s phone number, address, and order in the send() method of  my request object...
So I know the data’s getting to the web server.
When my script gets run by the server, and it checks for the “address” and “order” request parameters, it’s not getting anything.
Frank: ...and I’m asking the server for the data, and getting nothing...
Remember when we talked about the server decoding the POST data from your request? Once the server opens up the POST request data, it doesn’t know what type of  data it should expect...
Let’s take a look, and see what happens with the POST data:
The server has no idea what type of data is in this POST request...
In a GET request, the data is part of the request URL, so it has to be just text.
You can send a lot more than plain text in a POST request...
But when a server receives your POST request, it doesn’t know what kind of  data it’s dealing with, unless you tell the server what to expect.
Once the server knows what kind of  data you’re sending, it can decode the POST data, and handle it properly.
This time, the request includes a content type along with the request URL and POST data.
The server sends back a response header and status code.
You have to set the content type for your POST data before you send the request.
Then, when the request is sent, the server will get the request URL, the POST data, and the type of  data it should expect.
Anytime you need to tell a server something about a request, you’ll use a request header.
Let’s see how we can set a request header for the Break Neck request:
This tells the server the data is encoded like it would be in a request URL, just as if the data came as part of a GET request.
Q: So a request header is sent to the server along with the request?
In fact, the web browser sets some request headers automatically, so you’re really just adding a request header to the existing ones.
Q: And “Content-Type” is used to tell the server what kind of POST data we’re sending?
That particular type tells the server to look for values like it would get from a normal form submission.
Q: Are there other content types I should know about? a: There sure are.
In the next chapter, we’ll look at the content type for XML.
There are tons more, and you can simply Google for “HTTP Content-Type” to find various lists online for all sorts of different file and content types.
Add the line of  JavaScript that sets the “Content-Type” request header in pizza.js, and save your JavaScript.
Then load pizza.html in your web browser, and try to enter an order again.
But you still haven’t told me what the actual maximum length of the request URL.
So the maximum request URL length is different on each browser.
But, for example it’s about 2,000 characters on Internet Explorer...
Did you say two-THOUSAND? Are you kidding me? What are we expecting here, Schwarzenegger is gonna order pizza for the entire state of California? Come on...
There are probably not going to be a lot of  times when the customer’s address, phone number, and pizza order are longer than 2,000 characters...
But there are still good reasons to use POST requests...
I’m getting so many requests these days that I just figured you had headed to Fiji or something.
Besides, I’d much rather be in demand because of what I do, not what people think I do.
GET: Have you actually asked anyone why they’re using you instead of me?
There are tons of reasons to use me instead of you.
Nobody uses you for sending important information, like a credit card number or checking account number.
GET: (Sigh) Just because people believe something doesn’t make it true.
Any junior programmer can break open POST data just as easily as they can read a request URL.
Well, here’s another reason to use me: you don’t have to worry about how long your request data is.
GET: Yup, and if you can tell me 2,000 characters of text that you’re used to getting in name/value pairs, I’ll tell you why that really matters to anyone.
Hardly anyone sending plain old text is really going to need more than that for their data.
Well, who wants to see all their data in the address line of their browser? Huh? How about that, Mr.
GET: Oh, so now it’s a beauty contest? Besides, I thought this was a book on Ajax.
Nobody sees the URL in an asynchronous request, even if it is a GET request.
I’m still waiting for that great reason to use POST requests...
That’s all you’ve got, huh? So let’s mount up on horses, pull out the pantaloons, and start worrying about falling off the edge of the earth...
If everyone in the world jumped off a bridge, I suppose you’d be getting your bathing suit on, wouldn’t you?
What now? Did Howard Stern say POST is better? I’m sure we can all rely on important trend indicators like that to make important development decisions...
I don’t suppose you have much to say about that, do you?
POST: Yeah, that’s what I thought! You’ve got to escape each and every one of those angle brackets, don’t you? And what about your length limitation? That’s a big problem with XML.
I mean, we’re on like page 240 or something, and we haven’t even talked about XML yet...
It’s XML central, baby, and I bet you’re nowhere to be found.
I’m sure they need someone who can handle XML requests!
Customers are happy, I’m getting massive tips, and my boss is just going on and on about Ajax.
You’ve got a lot of tools in your Ajax and asynchronous programming library by now.
Before you dive into Chapter 6, take a moment to relax, and write down what you’ve learned so far.
In the blanks below, list some of the key Ajax concepts you’ve picked up in the first five chapters.
For most browsers, that maximum length is around 2,000 characters.
The request URL only has the name of the program on the server that should be run.
It’s time to make Break Neck an even better place for ordering pizza.
Look in the chapter05/ breakneck/ folder in the book’s examples, and you’ll find the Break Neck order form, complete.
You’ll need to open up pizza.html, and change the form to run submitOrder() when “Order Pizza” is clicked, instead of  submitting directly to the placeOrder.
As long as you’re making improvements to Break Neck, go ahead and move all of  the JavaScript out of  pizza.html.
You can use ajax.js, which you wrote in Chapter 3, for creating the request object.
Don’t forget to add <script> elements that link to these files in your HTML!
There’s no other JavaScript in the HTML in this new version.
You really didn’t think we were gone, did you? One little defeat at the hands.
This time, though, they’ve stumbled onto something a little trickier...
Open up your web browser, and visit the “official” Break Neck Pizza site, at http://www.headfirstlabs.com/breakneck/pizza.html.
Then follow the set of  instructions that PROJECT: CHAOS left you, tucked inside that morning paper.
Enter in the strange sequence of characters you got from PROJECT: CHAOS right here.
Here’s that strange character sequence you entered in to the phone number field.
Wow! It looks like this is a list of ALL of Break Neck’s customers!
What the heck? Suddenly all our customers are complaining about getting all this porn in the mail.
Break Neck has fallen victim to a SQL injection attack, and now all their customers are paying for it.
This doesn’t make a lot of sense, but it sure looks harmless.
To really understand what’s going on, you’re going to have to get into a little SQL.
Your job is to take this query, and then write in the special characters that PROJECT: CHAOS asked you to type into the Break Neck web form.
Then, you’ll know exactly what’s being sent to the Break Neck database...
Here’s what the SQL statement sent to the Break Neck database becomes...
Notice how the single quotes you entered into the phone field work with the quotes already in your SQL query.
This SQL query will be true for every customer! Here’s the problem!
So the query returns all the customers in the database, instead of just the one with a specific phone number.
Hey, I saw some JavaScript code the other day that validates a phone number.
I bet I could add that to the Break Neck form, and help avoid this happening...
Actually, Frank, magic quotes is going away in PHP 6, and a lot of people don’t like that feature.
It’s a better idea to not count on features like that...
So how do we fix this? We’re getting like 10 complaints a day.
I’ll take care of a little validation code, and you add that MySQL thingie you were talking about...
So no matter what the customer’s phone number is, the WHERE clause is going to return true...
Well, I was reading about this thing called “magic quotes” in PHP.
I think if we turn that on, it will protect us against SQL injection attacks.
Sure, SQL injection affects people like Frank and Anne, who work with the Break Neck PHP, more than it does the asynchronous JavaScript programmers.
But if  something goes wrong, you better believe that you’re still going to hear about it!
Besides, with just a little bit of  extra JavaScript, you can really help make your app more secure.
In fact, lots of programmers handle the JavaScript code on a web app, and then work with an entirely different group of people for the server-side part of the application.
The main thing you need to know is that things can go wrong on the server.
Q: So if I don’t understand what’s going on, what’s the point of knowing about SQL injection in the first place?
Now, you can talk your server-side guys, and help make sure nobody is getting your customer’s addresses or phone numbers.
Q: Then this is really all about communication, right? Between me and the other people on the team?
But if you just spend a little time with the other folks on your team, your web app will be much the better for it.
Along the way, you might even pick up some ideas about making your code better...
Here’s how you can add validation to your local version of  Break Neck Pizza:
You can use your version from Chapter 5, or get the latest version from the book’s examples.
Validate the phone number before sending it to the Break Neck web server.
Remember, all the Break Neck-specific JavaScript is in pizza.js now.
You should have getCustomerInfo() at the top of your pizza.js file.
If the phone number isn’t valid, you shouldn’t send a request to the Break Neck server...
Here’s that same weird set of characters that you entered into the Break Neck online form a few pages back...
Even though you added validation to the Break Neck order form, you should still escape strings and tighten up the PHP script running on Break Neck’s web server.
In other words, your validation helps protect your app from someone attaching you from a web front end, but doesn’t do anything to stop someone from going after your script directly.
Besides, putting a little extra work into securing your PHP script is a good idea.
So we’re done, right? Now that we’re validating the phone number, nobody will be able to enter those weird strings, and.
The script loops through all the results it gets, and displays each one...
Even though we get rid of some of the phone number formatting, like (, ), and -, there’s still a problem...
Your validation catches attacks through the Break Neck order form.
This request is OK, and can be handled normally by the PHP script.
Let’s help Frank make a few upgrades to his PHP to help protect the server from SQL injection attacks, too.
Now, no matter what the phone number is, only one customer (at most) is returned in the server’s response.
It only works for MySQL databases, but you can find functions similar to this for all the major databases.
And it’s OK if you’re not really familiar with PHP or these functions.
Remember, the point is that you’re talking to the programmers working on the server-side components of your app.
Just tell them to be sure that they secure their scripts.
Q: And all this is called SQL injection? a: SQL injection is just one type of security risk for web apps.
When you have form fields that are used to build SQL queries, hackers often try and enter special strings—like the one you got from PROJECT: CHAOS—to try and get information out of a database, or insert bad data into the database.
The bad news is that there are lots of other types of attacks you have to worry about...
Ever feel like nobody is listening to you? Sometimes plain old English just doesn’t cut it when you’re trying to communicate.
As if that’s not enough, you’ll teach your requests XML, too, even though.
So vat is on your mind zees week, Meester Server?
I just don’t feel like anyone wants to listen to me.
But in many cases, it is zimply just in your mind.
Server: But in my case, it’s true! I mean, everyone wants to talk to me...
I’ve got plenty of  people saying things to me all the time...
Zigmund: Zee? Zat is very important, to have friends that are zere for you.
When I start to say something back, they barely listen.
In fact, it’s been getting a lot worse just lately.
Server: Well, I used to say a lot of  things.
But now, if  I say anything more than “1012”, I get complaints.
Nobody will let me get more than a word or two into a conversation.
I listen all the time and I never ignore a request...
Time for a quick refresher on what the server’s been saying to our Ajax apps.
Below are the five example applications you’ve developed so far.
Your job is to go back and figure out what the server responded within each app, and write that response on the lines provided.
So did the server have much to say? What about all these complaints about nobody listening? Do you think they’re valid? Check your answers below, and decide for yourself...
Remember, this was how long it would take for the pizza to arrive.
Do you see what I mean? I can’t go on saying nothing more than “7”, or.
I do zee that you got to zay quite a bit in zee Chapter 2 over there.
I mean, I couldn’t send back, say, the customer’s address, and a special coupon for repeat customers.
I just get to say that one thing: their address.
Zigmund: Vell, zey zay that brevity is the zoul of  wit.
Well, whoever “zey” are, they don’t have to sit around all day listening to long requests, now do “zey”?
Have you tried to say more than one thing in your responses?
Like, once I tried to send a customer’s address, phone number, and order back, and I used a semicolon to separate each part of  my response.
Next, you’ll tell me you were using commas or zat strange “pipe” symbol to split your data up.
Zigmund: I think I have just the zing for you, my dear friend.
XML: just what the doctor ordered He may be a bit hard to understand, but it seems like Dr.
Zigmund has some pretty specific ideas about helping web servers say more in their responses.
Keep this in mind, as we’ll be coming back to XML in just a moment.
But, speaking of  help, it looks like an old friend might need some help herself...
She’s got a couple of  new product lines now—snowboarding boots and a new custom line of  bindings—and she’s updated her online report to keep up with all three product lines.
How could XML help out in the Boards ‘R’ Us application?
Boards ‘R’ Us is selling snowboards, snow boots, and bindings.
But the server needs to send back three sales numbers now: the total number of  boards sold, as well as the number of  boots and bindings sold.
This is the same request as in the version of the report that only dealt with snowboards.
How can Katie’s PHP script send back three different numbers at the same time?
Great! Someone finally wants me to say more, and I don’t know how.
Zigmund: Progress, my dear friend! Now people vant to hear you.
Server: But how can I say three things at one time? This is my only chance...
Zigmund: I don’t zink you have been using my pre-zcription, have you?
Server: I could just string the three sales totals together, and a space between them...
Zigmund: Now I wonder who is not listening to whom...
Server: If  I just had a way to send data in a format that I know the Boards report would be able to understand...
I know Katie hates anything that might break in a few months, or isn’t standardized...
Zere is no cure for zee clueless zerver, it zeems.
So far, you’ve used plain text to send responses back to the web browser...
When you need to get more than just a single piece of  information from the server, though, things get a little trickier.
You’ve seen that using proprietary data formats just isn’t the answer:
I’m loving this cute little story, but I’ve got it, OK? The stupid.
Does it separate different numbers? Is this all one number?
Here are some examples of the server sending back data using a “made up” data format.
Even worse: what happens if the order of the data returned changes? Everything breaks!
Filling that XML prescription Trying to come up with a data format that works for the server, that the browser understands, and that won’t have to change if  Katie adds another product line or changes the order of  items on her report...
Zigmund (as well as that rather impatient girl on the last page) seems to have a solution: XML, the extensible markup language.
Using XML, we can come up with a simple response format that is clear, and contains all three updated sales totals.
Q: What’s so great about XML? A: The biggest thing going for XML is that it’s a recognized standard.
And since most people agree to abide by the W3C standard, browsers, servers, and programs like PHP scripts can all use XML without wondering what a bracket or a semicolon means.
Q: I still don’t see why it’s so bad to just make up our own data format.
If you don’t document them, people forget how they work.
Even worse, some of the characters you might use, like a semicolon or comma, can have more than one meaning, and they make the format confusing to programmers.
Q: I get why we should use XML, but do we have to use the same element names you did?
So you might use boardSales instead of boardsales, or totalBindings instead of bindingSales.
As long as both the JavaScript in your browser and the code on your server know what names to use, what those names actually are is really up to you.
There’s no question as to which number is the board sales, which is the boot sales, and which is the bindings sales.
Not too bad, huh? Here’s what the script looks like now:
The Boards ‘R’ Us database now keeps up with three products: boards, boots, and bindings.
Each XML element has the sales number for the related product, from the Boards ‘R’ Us database query.
This tells the browser that the script is returning XML, not HTML markup or text.
Since the first part of this line, <?, is a start tag in PHP, you have to echo this line out using.
Open up the chapter06/boards folder in the examples you downloaded from http://www.headfirstlabs.com.
Open up boards.js, and find the function that gets the server’s response.
For now, go ahead and comment out all the DOM code that updates the form...
For now, you want to check the request’s ready state, make sure the status code is 200 (meaning everything is OK with the response), and then show the server’s response in a JavaScript alert box.
Once you’re done, you should be able to reload boards.html, click.
The alert box shows the server’s response, which is now pure XML.
This is what you want to see on your own screen.
STOP! Don’t turn the page until you’ve done this exercise.
Did you figure out how to display the server’s response? Here’s what we did:
We opened up boards.js, since that has the Boards ‘R’ Us callback function.
We found the callback, updatePage(), and commented out everything except for the two if statements that checked the ready state and the status code from the request.
We got the server’s response, and then used the JavaScript alert() function to show it to the user.
Q: That’s it? The server sends back XML, and we just grab it using the responseText property?
But, as you’re about to see, there’s a lot more we can do with XML than treat it as plain old text.
Q: How do we get the values out of the XML? That seems like it’s going to be a pain in the butt.
Trying to break apart the XML data—called parsing the XML—and getting the values out isn’t very easy.
Fortunately, there’s a better way to work with XML than as plain text.
Q: I remember something from way back in Chapter 2 about a responseXML property.
But before we get to that, it looks like we’ve got a visitor...
Look, I know it’s not my chapter, but I really think you might be.
I’m finally starting to make some progress, and now Paul Bunyan wants to talk about selling me a bush.
And not just any tree; I’ve got a DOM tree you’d just love.
Server: Are you paying attention? Do you see me on this couch, and the nut with a notepad and bad accent? I’m not really looking to go into landscaping.
Mike: Well, I couldn’t help but overhear you mention that you’re sending XML back in your responses now.
I really have communication issues, and Ziggy here thinks XML will help browsers allow me to say a lot more and still be understood.
But how’s a browser supposed to do anything with your XML? It’s not that easy to parse an XML document, you know.
Server: What? Are you serious? You mean, all this work, and I’m still not going to be understood? Let me just find a toaster and a bathtub, and be done with it all!
Any code that needs to read your XML response can just work with it using the DOM...
Trees, trees, everywhere I look You’ve already seen how the Document Object Model makes working with HTML easy.
But the DOM is a lot more versatile: you can use it to work with XML documents as well.
For example, you can read an XML DOM tree and update an HTML DOM tree, all at the same time.
Using responseXML in your code You’ve already seen that the responseText property of  your request object lets you read the XML that the server responds with.
But we don’t want a bunch of  text that looks like XML; we’re DOM experts now, right? Using the responseXML property, you can get the DOM tree for the server’s response, and then work with that XML using the DOM.
And since the HTML for Katie’s Boards report is another DOM tree, we just want to grab values from the XML DOM and stick them in the HTML DOM.
Even if you don’t feel like an expert, you’re kicking butt! And by the time you finish this chapter, you’ll be even better at the DOM than you are now.
We need to take the values from the XML DOM tree and use them to update the values in the HTML DOM tree.
So far, you’ve been using getElementById() to find a specific element in an HTML DOM tree.
You can use this to find all the elements in a DOM tree with a certain name, like this:
I’m with you so far, but how can we get to those three “sold” elements in the.
XML? They don’t have id attributes like the <span> elements in Katie’s HTML.
This will return an array of  all the elements named “boards-sold” in the xmlDoc DOM tree.
Then, you can get elements from the list using an index, like this:
Q: I still don’t see what responseXML has to do with any of this.
A: The browser puts the plain text version of a server’s response in the request object’s responseText property—whether that’s a single value, name/value pairs, or the text version of an XML document.
But if the server returns XML, and sets a Content-Type response header of “text/xml”, the browser creates a DOM tree to represent that XML, and puts a reference to that DOM tree in the request object’s responseXML property.
Q: So if I want to use the DOM to work on the XML, I should use responseXML instead of responseText?
There’s nothing wrong with getting the XML through responseText, but then you have to deal with parsing the XML yourself...
I thought that the DOM represented attributes separately from elements.
The id attributes on those <span> elements are actually represented in the HTML DOM tree as separate nodes.
We broke the rules a bit, though, and showed the id attribute as part of the element name, just to make things a little easier to understand.
It’s not quite how the DOM does it, but we thought it made our point a lot clearer.
Q: And there’s no difference between an HTML DOM tree and an XML one?
But you work with both DOM trees in the same way, they have the same methods, and you can change both trees easily.
It’s time to put everything you’ve learned so far into action.
Below is the updatePage() callback function for the Boards app.
To finish the code up, you’ll need to use what you’ve learned about asynchronous requests, the DOM, XML, and dynamic HTML.
Figure out how much cash Katie has made on boards.
Figure out how much cash Katie has made on boots.
Figure out how much cash Katie has made on bindings.
Update the cash for the slopes on the web form.
You’re on your own here, but this shouldn’t be any problem for you at this stage of the game.
Trying things out Ready to take Boards ‘R’ Us for a little test drive? Make sure you’ve finished the exercise on the last two pages, and made those changes to your copy of boards.js.
Then save your changes, fire up your web browser, and load boards.html.
I’ve finally found a way to say so much more...
Server: Well, at first, I was sending back XML—which was great, I’m telling you, nobody was asking me about comma-separated values or anything like that anymore—and browsers totally understood what I was saying.
But it seemed that people were having trouble using what I was saying.
Server: Well, it turns out they were using the plain text version of  my XML response.
So they were trying to break up the XML on their own.
Sheesh, what a pain that must have been! And lots of  people were screwing things up.
Server: Well, I took my Prozac first—thanks a lot, everyone says I’m so much calmer now—and told them to use the DOM tree representation of  my XML.
The browser even made it available through a simple property of  the request.
I’m finally getting a chance to really say what’s important.
And nobody’s cutting me off, plus I hardly ever have to send back a bunch of  HTML, either.
That means that when you say XML, everyone knows what you mean.
But XML is really a metalanguage: a language for defining other languages.
So, in the Boards app, you used XML, but you defined your own elements that had names that worked well with the Boards ‘R’ Us app.
The code on your server and the JavaScript code that you write must use the same element names, or nothing is going to work.
You keep saying XML is better because it’s not proprietary, and that it’s a “standard.” But that.
You have to use elements and attributes according to the XML standard, but you can define your own element and attribute names to create your own XML language, just for your app.
I still think XML is better than some weird made-up format.
I mean, there will always be tools to work with XML, like the DOM, right?
You don’t have to worry about the order of  elements in an XML document when you’re using the DOM, and you don’t need any special parsing code.
But XML has its dark side, too: it takes a lot of  text to say just a little in XML.
All those angle brackets can really add up! And, as you’ll see in the next chapter, there are plenty of  other good options, like JSON.
Hey, I bet it’s just as easy to send an XML request as it is to receive an XML response.
It turns out that you’ve got to do a good bit of work to send XML...
Most of  the time, the effort you’ll have to put into sending XML just isn’t worth it.
First, you’ll need to send the XML in a POST request...
Because XML can get pretty long, and there’s that maximum.
It doesn’t take a lot of  data before an XML document gets pretty long.
Additionally, you’ll need to let the server know that you’re sending it XML, not name/value pairs.
I bet we can use a different Content-Type request header, right?
You can use the setRequestHeader() method on your request object to tell the server that you’re sending it XML, like this:
This tells the server that the co ntent type of the.
And now I can just use the DOM to work with my XML, and send.
Look at the “Content-Type” request header on the last page...
That tells the server that it can expect XML, but in a text format.
In fact, there’s no easy way to send a DOM tree to a web server.
You’d basically have to write code that parses the DOM tree in reverse; it would need to take each node in the DOM tree and write it out as text.
After all the work you’ve done to learn how to use the DOM, it seems sort of  silly to go back to text, doesn’t it? In fact, it’s pretty easy to make a mistake writing XML manually; that’s part of  why the DOM is so powerful.
It helps keep you from making mistakes in your XML document’s structure.
And besides, what exactly are you getting out of  all the extra work involved in sending XML to a server instead of  name/value pairs using plain old text?
You are back? I zought you were cured! What zeems to be the problem?
But now everyone is trying to talk to me in XML.
Server: Well, yes! What was wrong with text? What happened to the days of simple name/value pairs? Now everyone is sending me these long XML documents, but they’re saying the same things as when they were using simple name/value pairs.
Server: Make me feel? It makes me feel bloated, and beaten down! Now I’ve got to parse the XML just to get the same values out of  it that I could get instantly before.
And then I’ve got to make sure there aren’t any errors.
Just the tiniest little mistake in the XML, and everything blows up.
Server: No! No, I love being able to say so much when I respond to a request, and XML lets me do that.
I just don’t understand why everyone thinks that they have to speak XML to me.
Zigmund: It zeems to me that it’s best to zend you zee plain text, and leave zee XML to you.
Q: If we want the server to return XML in its response, shouldn’t we use XML to make our request, too?
The format you use for making your request has nothing to do with the format the server uses in its response.
You could use plain text for the request and response, text for the request and XML for the response, XML for both the request and response, or even XML for the request and text for the response.
Q: And if we’re sending XML, we just need to set the request header, right?
Other than those few special steps, you’ll send the request just like you would send a normal text request.
Q: I still don’t see why I can’t just use the DOM and send my DOM tree to the server.
You’d have to get the text version of the DOM, and then send that instead of the actual DOM objects themselves.
Q: Why? Wouldn’t it be better to just send the DOM directly, if working with XML as text is so bad?
But it’s not easy to send objects across a network, especially using the Ajax request model.
Besides that, there really aren’t any advantages to sending XML instead of just simple name/value pairs.
So for the most part, XML would only complicate your requests, not make them simpler.
Q: I read about this JavaScript toolkit that would convert my DOM tree to a text XML document.
Can’t I just use that toolkit, and then send the XML it creates on to the server?
But remember, you’re really not gaining anything by using XML in your request.
You already can send multiple values using name/value pairs, and that format is a standard that any server will recognize.
So even if you could use XML, you probably don’t want to.
Q: So there’s never a time when I should send a request in XML?
For instance, you might need to talk to a web server that only accepts SOAP requests, which is a particular XML format.
Other than these special cases, though, name/value pairs are almost always the better choice for sending requests.
Welcome to this week’s edition of  “Which Data Format?” You’ve got to decide which data format is best for the 5 examples below.
It’s time to put everything you’ve learned so far into action.
Below is the updatePage() callback function for the Boards app.
We’ve filled in all the blanks for you, so check your answers against ours, and make sure you feel like you understand all this code.
Figure out how much cash Katie has made on boards.
You could have these three lines of code in any order, as along as you keep the element and its value together.
Figure out how much cash Katie has made on boots.
Figure out how much cash Katie has made on bindings.
Update the cash for the slopes on the web form.
Welcome to this week’s edition of  “Which Data Format?” You’ve got to decide which data format is best for the 5 examples below.
Since the server has to send back more than one piece of information, XML works well here.
Frank: Why do we need a new data format? Since we went to XML, I think things are running better than ever.
But XML isn’t exactly easy to work with for us JavaScript guys.
Frank: Why not? I thought that you were using the Document Object Model to handle the XML my scripts have been sending back to your requests.
It was sweet! And you only used the DOM? You must be pretty good with that thing...
Joe: Oh, I love the DOM for working with web pages.
But it’s just a little clunky when it comes to XML.
I mean, I spend all my time moving up and down the XML document just to get a few values out.
Frank: So you think this new data format will help? Tell me a bit more about it.
The data format is JavaScript? That doesn’t sound so good.
Joe: But it’s supposed to be really easy to use, and fast...
I found this great article about a new data format that works.
It’s called JSON, and I really think we should check it out.
Joe’s not much for server-side programming, but he loves JavaScript.
Everything in the first part of the book sent text to the server using name/value pairs.
In Chapter 6, we were still sending text in our requests.
A review of request and response formats Before we dive into the JSON versus XML debate, let’s review the data formats we’ve already used in the first six chapters.
Should you use XML or JSON? Joe and the JavaScript guys want to look at JSON, but Frank’s PHP team thinks XML is the way to go.
Which is the best data format? In this chapter, we’re going to let JSON and XML take each other on, and see which one survives the ULTIMATE DATA FORMAT CHAMPIONSHIP.
Tonight, the world is gonna see that you’ve lost a step, especially when it comes to JavaScript and asynchronous applications.
JSON: You’re only at the top because people think that there’s nothing else available.
I know lots of people that can’t stand you, XML...
You think a little pipsqueak can handle all those different types of data? I don’t think so.
XML: I’m plenty fast, especially if you use my attributes.
I can do all sorts of things, like represent a math equation or a book.
JSON: Yeah, well, most of my users aren’t too interested in sending math equations across the network.
XML: But can someone transform you into something else? Like with XSLT? Or what about web services...
JSON: Wow, you’ve really been a bit overused, haven’t you...
I just care about getting information from a web page to a server and then back without a bunch of extra work...
Hello? We’ve got a whole group of DOM experts out there these days, writing killer user interfaces.
Anyone that knows the DOM is ready to use XML, today!
JSON: Look, all developers really need is a lightweight data format that’s easy to work with in JavaScript.
XML: What are all the servers going to think about this? You know, PHP and Perl and Java...
I don’t see them lining up to throw their support in with you and your “lightweight data format” spiel.
XML: Libraries? If they’ve got to use a library, why not use a standard like the Document Object Model?
JSON: My libraries might be standard one day, too, you know....
XML: But here I am, being used right now, because I’m already a standard.
At the end of the day, you’re just one more proprietary data format.
Maybe you’ve got a few more fans than comma-separated values, but I’ll put an end to that.
The heavyweight champion: XML You’ve already seen how a server can return XML in response to your request:
In your JavaScript, you use the DOM to work with a server’s XML response.
The young upstart: JSON JSON is more about curly braces than the brackets you use in XML, but it can store all the same data that XML documents can:
Here’s the JSON equivalent of the XML you looked at on the opposite page.
There are three individual bits of data, each with a numeric value.
You don’t need a special object model to work with JSON data.
We’ll look at how to get the JSON data from the server’s response in just a few pages.
So JSON is just JavaScript, right? I don’t need to worry about the DOM, or some.
I can just use JSON in my code sort of like I’d use an array.
You don’t need to work with the Document Object Model, or any other toolkit, to use JSON in your JavaScript code.
In fact, you can work with data that’s a lot trickier than the simple set of  values you’ve seen so far...
This time, the Boards ‘R’ Us sales are broken up by city.
Q: So JSON is just another data format, like XML? a: That’s right.
Any time you send information between your web page and a server, you’re going to need some way to format that information.
So far, you’ve used plain text to send requests, and text and XML to send responses.
Q: If we’ve already got XML and text as options, why do we need JSON?
Even though the DOM hides a lot of the details of XML, JSON still feels a lot more like arrays and lists to JavaScript programmers than XML does.
If you know both XML and JSON, then you’re way ahead of the curve, and can choose whichever format you like.
Q: I’m a little confused by all those curly braces.
Q: So I should convert my version of the Boards ‘R’ Us application to use JSON?
We’ve created a version of the Boards app which gets JSON from the server.
You can also check out the code we used in the chapter07/boards/ folder in the examples.
But there’s nothing that says you need to use JSON in your version of the Boards app, or in your own apps.
Q: But which is better? XML or JSON? a: It really depends on your app.
Lots of times, JSON looks and feels a little more like working with rows in a table, or arrays...
Before we discuss how JSON and server-side languages like PHP get along, let’s take a closer look at how you can access JSON data in your JavaScript.
Your job is to write the JavaScript code that would return the value from the JSON data structure.
You can assume the JSON data is in an object called jsonData.
I’m thrilled that JSON data is so easy to use in your JavaScript code...
The great thing about JSON is that it’s just JavaScript, so the JavaScript code in your web pages can use JSON data really easily.
If you’re already used to working with arrays in JavaScript, then you’ll be able to use the arrays returned from a server’s JSON-based response.
If  you’re used to working with JavaScript objects, then JSON will feel really natural, too.
The bad news is that since JSON is JavaScript, languages like PHP and Perl and Java can’t understand JSON without a little help.
You’re probably going to need a library to help you create and output JSON in your server-side scripts and programs.
Then you’re going to have to figure out how to use those libraries, which takes a little time and effort.
JSON.php is just one of several PHP libraries that lets PHP work with JSON data.
You’ll need a new Services_JSON object to handle encoding a JSON response in PHP.
If I can convince Frank to have his scripts send my JavaScript JSON, how do I deal with his response? Do I use responseText.
When servers respond with JSON, they send the data across as text.
So you need to use the responseText property of  your request object to get the JSON data.
But JSON is meant to be used in JavaScript as an object, so you’ve got to convert it from text to its object form.
You can do this using JavaScript’s eval() function, like this:
Q: Couldn’t I just output JSON in my PHP script as text, and avoid using a library?
You’d have to know JSON pretty well to just type it in, and be sure you don’t make any errors.
But if you’re really familiar with JSON, that might be an option for you, and you can avoid having to use the JSON libraries in your PHP scripts.
One of the big advantages of using a library for JSON output, though, is that your scripters and server-side programmers don’t have to learn JSON; they can use normal PHP or Java data structures, and then let the toolkit convert those structures to the JSON data format.
Q: So I need a library to use JSON in my web apps? A: Your JavaScript code can use JSON without any special libraries or toolkits.
But your server-side programs, which are probably written in PHP or Java or maybe Ruby, probably don’t know how to work with the JSON data format without a little help.
So you’ll need to get a library that allows those programming languages to understand and work with JSON data.
Q: So where can I get libraries for my server-side languages?
There’s a library for all the major programming languages, so you shouldn’t have any trouble finding one that’s right for you.
Q: And if my server returns JSON, I use the responseText property to get that data?
The server returns the JSON data as text, which is easy to send over a network connection.
The web browser stores text responses from servers in the request object’s responseText property, so that’s where you should look for a JSON response from your server.
When you get the server’s response, though, it is plain text, stored in the responseText property of your JavaScript request object.
To convert that text into an object, you need to use JavaScript’s eval() function.
In this case, eval() sees that you’re giving it the text version of some JSON data, and returns a JSON object that you can then use in the rest of your JavaScript.
Q: And there’s no DOM tree involved, right? a: Right.
Since JSON is just JavaScript, I can use JSON as the data format for my.
You can send JSON to the server in your requests, just like you can send XML or text.
But just like with XML, it’s often easier to use plain text name/ value pairs to send your requests to the server.
You can use JSON, XML, or text in your requests to the server.
What if I want to send objects or arrays in my request?
But then the server is going to have to use a JSON library to take the data it receives, and convert it to arrays, or some other format that the server can use.
Even when you have objects, it’s usually easier to represent the object’s values as name/value pairs, and just send plain text to your server.
In general, if  you can use text for your request, you should use text for your response.
Frank: I just don’t see what you really gain by using JSON.
Maybe it’s a little easier for you to use, but it’s a total pain for me to work with.
Frank: Sure, but now I’ve got to teach all my programmers how to use JSON.
They already know XML, and that doesn’t require any special libraries.
Frank: Yeah, I was just reading another article that said the exact opposite! I think it totally depends on the data...
Joe: Well, we have to pick one format or the other, right?
It’s a standard, and I don’t have to download any libraries to use it in my PHP.
Look, I’d rather be climbing a mountain than messing with a bunch of weird data formats.
I’ve been designing web pages for years, and all I ever needed was HTML, CSS, and JavaScript.
We have a lot of very wellrespected clients, and they care.
I was the first guy in the office to use Ajax, and I use JSON for everything.
Before we discuss how JSON and server-side languages like PHP get along, let’s take a closer look at how you can access JSON data in your JavaScript.
Your job is to write the JavaScript code that would return the value from the JSON data structure.
You can assume the JSON data is in an object called jsonData.
Just for you: a parting gift from Head First Labs.
In fact, you’ll find five special bonus gifts in this appendix.
Ajax toolkits We’ve talked a few times about using an Ajax “toolkit” to handle repetitive tasks like creating a request object or sending a request.
Once you understand how to write this code yourself, you may want to look into a few of  these toolkits and see if  they offer any functionality you might to take advantage of.
Ajax.Request is the Prototype JavaScript class that handles Ajax requests.
Prototype sends your callback functions the request object as a parameter, since the request object isn’t set up as a global variable.
It’s usually easiest to put all the arguments you want to use with Dojo into a JavaScript data structure.
First, include the dojo.js file you download from the Dojo website.
The parameter named “value” is what you’ll want most of the time...
These libraries are just external JavaScript files that you can include and use in your applications, whether those apps are asynchronous or not.
Inspecting the DOM By now, you’re a pro at using the Document Object Model to update your web pages on the fly.
But once you’ve used the DOM to make changes to your page, how can you see exactly what the web browser sees? The answer is to use a DOM inspector:
You can see details about each node in this part of the DOM inspector.
NOTE: You need to specifically request that the DOM inspector be installed on Windows.
This will ensure the DOM inspector is installed with your version of Firefox.
Inspecting the DOM in Internet Explorer You’ll need to download and isnstall a separate tool for inspecting the DOM on Windows, using Internet Explorer.
How to use it: Just install the EXE file from the IE DOM Inspector web site, and install the tool.
How to use it: Download WebKit from the project web site.
Using JSON libraries in your PHP scripts You’ve already seen how JSON can help you send and receive complex objects in your Ajax apps.
But for PHP scripts, you’re going to need a library if  you don’t want to type in your JSON manually.
Here’s how you can use JSON in your PHP scripts, without needing to type in the JSON by hand:
When you’re ready to convert your data structure to JSON, use your Services_JSON object, and run encode() on your PHP variable.
Using eval() with JSON In Chapter 7, you saw how you can use the eval() function to evaluate JSON returned from a server-side script:
The problem with eval() is that it runs the JSON response from the server without any security checks...
Use a JSON parser If  you’re concerned about security with JSON, you may want to use a JSON parser, and avoid using eval() in your JavaScript functions.
You’ll have to reference the JSON.js file you download from the json.org web site.
Within the pages of this appendix, you’ll find some of the utility code.
This little bit of JavaScript takes care of creating a request object, and makes sure that the object will work on all modern web browsers, from Internet Explorer to Firefox to Opera.
We put all this code in a file called ajax.js.
You can call it anything you like, as long as you change your HTML <script> tag to refer to the right filename.
Remember, you’ve got to try XMLHttpRequest for browsers like Opera and Mozilla, and then try ActiveXObject for Internet Explorer.
There’s nothing wrong with using an Ajax toolkit, especially if  the toolkit takes care of lots of  routine and repetitive tasks.
That’s all ajax.js really does: it takes code that you need in every single Ajax application, and it tucks it away in a file that you can use and refer to over and over.
But, you shouldn’t just grab the coolest looking toolkit you can find, stick in a <script> tag, and hope for the best.
Open up the JavaScript for the toolkit and figure out what’s going on.
After 400 pages of asynchronous programming, that shouldn’t be too much of  a problem!
Now tell me again why I shouldn’t use one of those fancy Ajax toolkits I keep seeing on the Web.
You learned about the Document Object Model in Chapter 4, but we used the text-utils.js file in several earlier chapters...
Here’s the code for text-utils.js, along with lots of notes on how it works.
First, we use clearText() to get rid of any existing children.Next, we use the document object.
This loops through all the child nodes, and removes each one.
This loops through all the child nodes of the supplied element.
This takes the nodeValue for all text nodes, which is the text, and adds it to any existing text.
See also onBlur See also onChange See also onClick See also onFocus.
