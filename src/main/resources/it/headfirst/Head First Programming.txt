Head First Programming does a great job teaching programming using an iterative process.
Add a little, explain a little, make the program a little better.
This is how programming works in the real world and Head First Programming makes use of  that in a teaching forum.
I recommend this book to anyone who wants to start dabbling in programming but doesn’t know where to start.
I’d also recommend this book to anyone not necessarily new to programming, but curious about Python.
David Griffiths and Paul Barry have crafted the latest gem in the Head First series.
Head First Programming provides a unique approach to a complex subject.
The early chapters make excellent use of  metaphors to introduce basic programming concepts used as a foundation for the rest of  the book.
Kathy and Bert’s Head First Java transforms the printed page into the closest thing to a GUI you’ve ever seen.
Just the right tone for the geeked-out, casual-cool guru coder in all of  us.
There are books you buy, books you keep, books you keep on your desk, and thanks to O’Reilly and the Head First crew, there is the penultimate category, Head First books.
They’re the ones that are dog-eared, mangled, and carried everywhere.
Head First SQL is at the top of  my stack.
Usually when reading through a book or article on design patterns, I’d have to occasionally stick myself in the eye with something just to make sure I was paying attention.
Odd as it may sound, this book makes learning about design patterns fun.
O’Reilly Media books may be purchased for educational, business, or sales promotional use.
Many of  the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks.
Where those designations appear in this book, and O’Reilly Media, Inc., was aware of  a trademark claim, the designations have been printed in caps or initial caps.
While every precaution has been taken in the preparation of  this book, the publisher and the authors assume no responsibility for errors or omissions, or for damages resulting from the use of  the information contained herein.
No surfers or snakes were harmed in the making of  this book.
Dawn (without whom the book would never have been finished)
And to those that made programming complex enough that people need a book like ours to learn it.
Paul: This one’s dedicated to my father, Jim Barry, who, 25 years ago—when I needed a push—pushed me toward computing.
Paul Barry recently worked out that he has been programming for close to a quarter century, a fact that came as a bit of  a shock.
When Paul first saw Head First HTML with CSS & XHTML, he loved it so much he knew immediately that the Head First approach would be a great way to teach programming.
He is only too delighted, together with David, to create this book in an attempt to prove his hunch correct.
Paul’s day job is working as a lecturer at The Institute of  Technology, Carlow in Ireland.
As part of  the Department of  Computing & Networking, Paul gets to spend his day exploring, learning, and teaching cool programming technologies, which is his idea of fun (and further proof  that Paul probably needs to get out more)
Paul hopes his students think the stuff  he teaches is fun, too.
David Griffiths began programming at age 12, when he saw a documentary on the work of  Seymour Papert.
At age 15, he wrote an implementation of Papert’s computer language LOGO.
After studying Pure Mathematics at University, he began writing code for computers and magazine articles for humans.
He’s worked as an agile coach, a developer, and a garage attendant, but not in that order.
He can write code in over 10 languages and prose in just one, and when not writing, coding, or coaching, he spends much of  his spare time travelling with his lovely wife—and fellow Head First author—Dawn.
Before writing Head First Programming, he wrote another book called Head First Rails, which is an excellent read and would make a thoughtful gift for any close friend or family member.
Here you are trying to learn something, while here your brain is doing you a favor by making sure the learning doesn’t stick.
If you use other people’s software, you will always be limited by.
Programming will make you more creative, it will make you.
Do you want to be programmed or be the programmer?
Every string has its place Imagine trying to communicate without words.
All programs process data, and one of the most important types of data is text.
And finally, you’ll instantly power up your programs with the help of.
And complex code can be hard to read, and even harder to maintain.
In this chapter, you’ll discover how a little function knowledge.
Sort it out As your programs develop, so do your data handling needs.
And when you have lots of data to work with, using an individual variable for each piece.
Arrays aren’t the only show in town when it comes to data.
Programming languages come with other data-arranging goodies too, and our.
And when it comes to working with stored data, you’ll.
All the world’s awash with data, so turn the page and start applying your everexpanding programming skills to some cool data-processing tasks.
Keeping things straight The code that you write will make its way into many programs.
And, although sharing is good, you need to be careful.
You might want to use one function in all your programs and, over.
Your coding skills are great and getting better all the time.
It’s just a shame your programs are not that nice to look at.
There has to be a better way to communicate with your users than.
They also handle data.Almost all GUI applications need to read user data, and choosing the right widgets can change your interface from data entry hell to user heaven.
It’s time to take your GUI program to the next level.
Smart coders learn how to deal with those kinds of errors and make.
Selecting the right tool It’s easy to make your programs more effective for your users.
And when it comes to GUI applications, there’s a world of difference between a working.
There’s a bunch of truly useful widgets waiting to be.
Two buttons, or not two buttons? That is the question...
Requirements can be complex, but programs don’t have to be.
By using object orientation, you can give your programs great power without.
But learning how to program is an activity that never stops.
There’s just not enough room in this book to show you.
So, here’s our list of the top ten things we.
I can‛t believe they put that in a programming book.
Note from marketing: this book is for anyone with a credit card...
Do you prefer actually doing things and applying the stuff you learn over listening to someone in a lecture rattle on for hours on end?
Do you want to learn how to program, so you can create the next big thing in software, make a small fortune, and retire to your own private island?
Are you looking for a quick introduction or reference book to Python?
Do you wish you had the know-how to control your computer and make it do new things?
Are you a seasoned programmer? Do you already know how to program?
Would you rather have your toenails pulled out by 15 screaming monkeys than learn something new? Do you believe a programming book should cover everything and if it bores the reader to tears in the process then so much the better?
It was built that way, and it helps you stay alive.
So what does your brain do with all the routine, ordinary, normal things you encounter? Everything it can to stop them from interfering with the brain’s real job—recording things that matter.
It doesn’t bother saving the boring things; they never make it past the “this is obviously not important” filter.
How does your brain know what’s important? Suppose you’re out for a day hike and a tiger jumps in front of  you, what happens inside your head and body?
This must be important! Don’t forget it! But imagine you’re at home, or in a library.
Or trying to learn some tough technical topic your boss thinks will take a week, ten days at the most.
It’s trying to make sure that this obviously non-important content doesn’t clutter up scarce resources.
Resources that are better spent storing the really big things.
Like how you should never have posted those “party” photos on your Facebook page.
And there’s no simple way to tell your brain, “Hey brain, thank you very much, but no matter how dull this book is, and how little I’m registering on the emotional Richter scale right now, I really do want you to keep this stuff  around.”
We think of a “Head First” reade r as a learner.
Your brain will lea rn much more quickly if it.
If  you really want to learn, and you want to learn more quickly and more deeply, pay attention to how you pay attention.
Most of  us did not take courses on metacognition or learning theory when we were growing up.
We were expected to learn, but rarely taught to learn.
But we assume that if  you’re holding this book, you really want to learn how to program And you probably don’t want to spend a lot of  time.
If  you want to use what you read in this book, you need to remember what you read.
To get the most from this book, or any book or learning experience, take responsibility for your brain.
The trick is to get your brain to see the new material you’re learning as Really Important.
Otherwise, you’re in for a constant battle, with your brain doing its best to keep the new content from sticking.
So just how DO you get your brain to treat programming like it was a hungry tiger? There’s the slow, tedious way, or the faster, more effective way.
You obviously know that you are able to learn and remember even the dullest of  topics if  you keep pounding the same thing into your brain.
With enough repetition, your brain says, “This doesn’t feel important to him, but he keeps looking at the same thing over and over and over, so I suppose it must be.”
The faster way is to do anything that increases brain activity, especially different types of  brain activity.
The things on the previous page are a big part of  the solution, and they’re all things that have been proven to help your brain work in your favor.
For example, studies show that putting words within the pictures they describe (as opposed to somewhere else in the page, like a caption or in the body text) causes your brain to try to makes sense of  how the words and picture relate, and this causes more neurons to fire.
More neurons firing = more chances for your brain to get that this is something worth paying attention to, and possibly recording.
A conversational style helps because people tend to pay more attention when they perceive that they’re in a conversation, since they’re expected to follow along and hold up their end.
The amazing thing is, your brain doesn’t necessarily care that the “conversation” is between you and a book! On the other hand, if  the writing style is formal and dry, your brain perceives it the same way you experience being lectured to while sitting in a roomful of  passive attendees.
Here’s what WE did: We used pictures, because your brain is tuned for visuals, not text.
As far as your brain’s concerned, a picture really is worth a thousand words.
And when text and pictures work together, we embedded the text in the pictures because your brain works more effectively when the text is within the thing the text refers to, as opposed to in a caption or buried in the text somewhere.
We used redundancy, saying the same thing in different ways and with different media types, and multiple senses, to increase the chance that the content gets coded into more than one area of  your brain.
We used concepts and pictures in unexpected ways because your brain is tuned for novelty, and we used pictures and ideas with at least some emotional content, because your brain is tuned to pay attention to the biochemistry of  emotions.
That which causes you to feel something is more likely to be remembered, even if  that feeling is nothing more than a little humor, surprise, or interest.
We used a personalized, conversational style, because your brain is tuned to pay more attention when it believes you’re in a conversation than if  it thinks you’re passively listening to a presentation.
We included more than 80 activities, because your brain is tuned to learn and remember more when you do things than when you read about things.
We used multiple learning styles, because you might prefer step-by-step procedures, while someone else wants to understand the big picture first, and someone else just wants to see an example.
But regardless of  your own learning preference, everyone benefits from seeing the same content represented in multiple ways.
We include content for both sides of  your brain, because the more of  your brain you engage, the more likely you are to learn and remember, and the longer you can stay focused.
Since working one side of  the brain often means giving the other side a chance to rest, you can be more productive at learning for a longer period of  time.
And we included stories and exercises that present more than one point of  view, because your brain is tuned to learn more deeply when it’s forced to make evaluations and judgments.
We included challenges, with exercises, and by asking questions that don’t always have a straight answer, because your brain is tuned to learn and remember when it has to work at something.
Think about it—you can’t get your body in shape just by watching people at the gym.
But we did our best to make sure that when you’re working hard, it’s on the right things.
That you’re not spending one extra dendrite processing a hard-to-understand example, or parsing difficult, jargon-laden, or overly terse text.
In stories, examples, pictures, etc., because, well, because you’re a person.
And your brain pays more attention to people than it does to things.
These tips are a starting point; listen to your brain and figure out what works for you and what doesn’t.
Your brain works best in a nice bath of  fluid.
Dehydration (which can happen before you ever feel thirsty) decreases cognitive function.
Write a lot of code! There’s only one way to learn to program: writing a lot of  code.
And that’s what you’re going to do throughout this book.
Coding is a skill, and the only way to get good at it is to practice.
We’re going to give you a lot of  practice: every chapter has exercises that pose a problem for you to solve.
Don’t just skip over them—a lot of  the learning happens when you solve the exercises.
But try to solve the problem before you look at the solution.
And definitely get it working before you move on to the next part of  the book.
Groaning over a bad joke is still better than feeling nothing at all.
If  you find yourself  starting to skim the surface or forget what you just read, it’s time for a break.
Once you go past a certain point, you won’t learn faster by trying to shove more in, and you might even hurt the process.
If you’re trying to understand something, or increase your chance of  remembering it later, say it out loud.
Better still, try to explain it out loud to someone else.
You’ll learn more quickly, and you might uncover ideas you hadn’t known were there when you were reading about it.
Part of  the learning (especially the transfer to long-term memory) happens after you put the book down.
Your brain needs time on its own, to do more processing.
If  you put in something new during that processing time, some of  what you just learned will be lost.
They’re not optional sidebars, they’re part of  the core content! Don’t skip them.
Here’s what YOU can do to bend your brain into submission.
We put them in, but if  we did them for you, that would be like having someone else do your workouts for you.
There’s plenty of  evidence that physical activity while learning can increase the learning.
When the book asks you a question, don’t just skip to the answer.
The more deeply you force your brain to think, the better chance you have of  learning and remembering.
The more you understand, the less you have to memorize.
Read Me This is a learning experience, not a reference book.
We deliberately stripped out everything that might get in the way of  learning whatever it is we’re working on at that point in the book.
And the first time through, you need to begin at the beginning, because the book makes assumptions about what you’ve already seen and learned.
We use release 3 of  the Python programming language throughout this book, but this fact alone does not make this book Head First Python.
We chose Python because it’s a great programming language to start with and it’s also a great programming language to grow with.
In fact, Python might be the only programming language you’ll ever need to learn and use (although your employer might think otherwise)
Of  course, you have to start with something, and we can think of  no better programming language to use than Python when first learning how to program.
That said, this book isn’t designed to teach you Python; it’s designed to teach you programming, so most of  the things we show you are designed to hightlight the programming concept, not the Python feature.
To run the programs in this book, you need to download and install Python 3 on your computer.
Pop on over to the Python download site and select the option that fits best with the computer you are using.
We begin by teaching some basic programming concepts, then we start putting programming to work for you right away.
That way, by the time you make it all the way to Chapter 2, you are creating programs that actually do something real, useful, and—gulp!—fun.
The rest of  the book then builds on your programming skills turning you from programming newbie to coding ninja master in no time.
The exercises and activities are not add-ons; they’re part of  the core content of  the book.
Some of  them are to help with memory, some are for understanding, and some will help you apply what you’ve learned.
One distinct difference in a Head First book is that we want you to really get it.
And we want you to finish the book remembering what you’ve learned.
Most reference books don’t have retention and recall as a goal, but this book is about learning, so you’ll see some of  the same concepts come up more than once.
Our readers tell us that it’s frustrating to wade through 200 lines of  an example looking for the two lines they need to understand.
Most examples in this book are shown within the smallest possible context, so that the part you’re trying to learn is clear and simple.
Don’t expect all of  the examples to be robust, or even complete—they are written specifically for learning, and aren’t always fully-functional.
We’ve placed a lot of  the code examples on the Web so you can copy and paste them as needed.
For some of  them, there is no right answer, and for others, part of  the learning experience of  the Brain Power activities is for you to decide if  and when your answers are right.
In some of  the Brain Power exercises, you will find hints to point you in the right direction.
He has been programming in Python since version 1.4 and prior to Python worked mostly with C on a variety of  Unix and non-Unix platforms.
He has worked on projects ranging from mapping to medical news publishing, with a little banking thrown in for good measure.
Doug spends his spare time working on several open source projects; reading science fiction, history, and biographies; and writing the Python Module of  the Week blog series.
He has been a developer, system administrator, quality assurance engineer, and tech support analyst.
They all have their rewards and challenges, but his most challenging and rewarding job has been husband and father.
Bill Mietelski has been an Information Technology geek for over 20 years.
He’s currently a Software Engineer at a leading national academic medical center in the Chicagoland area, working on statistical research studies.
When he’s not at the office or tied to a computer, you’ll find him at a golf  course chasing a little white ball.
When not editing books, Brian likes to run marathons “for fun.” It transpires that this was the perfect training for working on the marathon that producing this book turned into.
At times, Brian worked us very hard, and, consequently, we have a much better book.
Brian Sawyer Brett McLaughlin, the Series Editor, kept an eye on what we were up to and on more than once occasion came to our rescue we when we found ourselves in trouble.
Karen Shaner provided administrative support and very capably coordinated our techical review process.
David and Paul are especially grateful to Lou Barr for first thinking that the two of  them might like to work together on this book, suggesting they do, and then working hard to get the idea approved at O’Reilly.
David:  My thanks to Kathy Sierra and Bert Bates for this extraordinary series of  books.
And to Andy Parker and Joe Broughton and Carl Jacques and Simon Jones and the many other friends who have heard so little from me whilst I was busy scribbling away.
Christophe Meudec reviewed the early chapters and offered some very welcome words of  encouragement, together with suggestions as how to make things just that little bit better.
Joseph Kehoe also reviewed the early material and liked what he saw.
David: I owe a very particular thank you to my wife, the author of  Head First Statistics, Dawn Griffiths.
For her wit, humor, patience, and ability to turn vague ideas into real chapters.
Paul: Thanks are due to my father, Jim Barry, who reviewed the early, draft material and (once again) pointed out where my writing could be improved and clarified.
Regretfully, my home life suffered as working on this book grew to consume all of  my free time.
Deirdre, Joseph, Aaron, and Aideen had to bear the grunts and groans, huffs and puffs, and more than a few roars as the pressure reached boiling point on more than one occasion.
I sometimes wonder how they put up with me, but somehow they do, and I’m very grateful for their ongoing love and support.
Our technical review team did an excellent job of  keeping us straight and making sure what we covered was spot on.
Finally, we both owe a huge debt of  gratitude to David’s wife, Dawn, who not only looks after David, but also got involved in the production of  this book at a time when things looked like we’d never finish.
Without Dawn’s help, this book would never have been done on time.
It’s a virtual library that lets you easily search thousands of  top tech books, cut and paste code samples, download chapters, and find quick answers when you need the most accurate, current information.
I wish “sweet cheeks” here would finish with the polishing.
If you use other people’s software, you will always be limited by.
Write your own programs and the only limit will be.
Programming will make you more creative, it will make you think.
Do you want to be programmed or be the programmer?
Learning to program gives you the power to create and solve.
You’ve got problems to solve and work to do, but your existing software doesn’t quite cut it.
Even with all those programs on your computer, you still need to do something different, something specific to you.
Whaddaya mean, that‛s not the way the website was programmed?!?
How do I get my website to do what I want?
Man, I‛m sooooo fed up with the “same old, same old” games.
Study it carefully, and opposite each line of code in the program, write down what you think the code does.
If you’re not sure what a particular line of code does, don’t worry, but try to guess anyway.
One line has already been entered to get you started:
This code is written in release 3 of the Python programming language, which is used throughout this book.
You were to write down what you think the code does.
In most languages (including Python), a double equals (==) is a test for equality.
It means, “are these two things equal?” In contrast, a single equal (=) is an instruction (known as assignment) that means “set the value to.”
You might be wondering what g and guess are in the code.
They are called variables and they’re used to keep track of  data in the computer’s memory.
So how do you run your code? There are two things that you will need to run the guessing-game program: an editor and an interpreter.
The editor saves the code you write into a file on your hard disk.
The code (sometimes called the source code) is just text, and it can be written and read by humans.
But computers can’t process text meant for humans, at least not very well.
Fortunately, Python 3 comes with a built-in application called IDLE, which does both jobs and more.
The editor will save the source code into a file.
The interpreter translates the text of the source code into language that the computer can understand.
Create a new program file When you first start IDLE, it displays a window called the Python Shell.
Select the New Window option from the Python Shell File menu, which creates a new edit window for you.
Input your program code as text into this edit window and you’ll be on your way.
Don't worry: the IDLE menu system and IDLE's behavior should be the same, regardless of which operating system you're using.
Python programs are usually saved in files that end with .py, so let’s call this program game.py.
It doesn’t really matter to IDLE which directory you save the file in.
Some coders like to create special directories for each new programming project.
But for now, just save the code in some directory that’s easy to remember.
Now, let’s see what happens when we run the program.
Click the Save button to create and save the file.
To run the program, you need to make sure that the edit window for the game.py program code is selected.
Each time you run (or rerun) the program, you need to click on the IDLE edit window and choose the Run Module option from the Run menu.
The word module is a name that IDLE uses to refer to your program code.
When you run your code within IDLE, any messages appear within the Python Shell, not within the edit window.
Each time you run the code, it displays a “Welcome!” message, accepts input from the keyboard, and then tells us whether or not we guessed the right answer.
That means the program is accepting input, it’s processing the data, and then it generates output.
Q: So, when I’m done with this book I’ll throw Python away and use something else, like C# or Java?
Python might be the only programming language you’ll ever need.
But, yes, if you want to learn another programming language, you can take everything you learn about programming in this book and apply it to any other language with the minimum of effort.
Q: But a buddy of mine told me I should learn Java or C#
Why are you not using either of these programming languages in this book?
A: Both Java and C# are great programming technologies, but they can be difficult to learn, especially when you are just starting out.
And, anyway, this is a book that’s designed to teach you how to program, and using Python as your first programming language will help us to do just that.
Q: There seems to be many different versions of Python.
This book is based on release 3 of the language.
Of course, like all releases, Python 3 remains a free download, which makes it a no-brainer when decidiing if you can afford to use it.
Q: Will Python run on my phone, just like Java?
Python is designed to run on lots of different technologies and operating systems.
Running your own code on your own phone is a very specific requirement, and Java has that pretty well covered at the moment.
As a programming technology, Java was initially designed to run on very small devices, so it is no big surprise that it is a strong and popular choice when it comes to telephony.
A: It’s partly because it sounds like IDE, but we suspect that it has more to do with Eric Idle, one of the founding members of the Monty Python’s Flying Circus comedy group.
Yes, we know: sounds silly, doesn’t it? And, believe us, it is.
The creator of Python, Guido van Rossum, is a big Monthy Python fan and reportedly watched the show’s reruns while he designed Python.
You’ll find lots of references to Monty Python folklore in the Python community.
Q: What does int(g) mean? A: It tells Python to interpret the user’s input as a number rather than a letter.
Q: So what if we’d left it out? A: The computer would have treated the input entered by the user of the program as a letter.
If you ask the computer if a letter is equal to a number, it gets confused and tells you it isn’t.
Q: Why’s that? A: Because if the computer thinks that two pieces of information are of different.
Q: So what if I had not typed a number when I was asked for a guess? What if I’d just entered my name or something?
In fact, Python will complain that the program crashed with a “ValueError” (more on these error messages later in the book)
How am I supposed to guess the winning number? All the program tells me is that my guess is right or wrong.
We need this program to display messages that are more informative.
At the moment, the guessing game tells the user whether his guess is right or wrong, but nothing more than that.
It might be more helpful if  the program displayed more informative messages, such as whether the guess is higher or lower than the correct answer.
That would help the user to hone in on the right answer the next time the program is run.
You need to decide what messages should be displayed to the user.
Below is a table showing some typical values the user might enter.
You will need to use more than just print() commands to provide more informative feedback.
You could create a program that was simply a list of  commands.
This is because a simple list of  commands can only be run in one direction.
It’s just like driving down a straight piece of  road: there’s really only one way of  doing it.
You needed to decide what messages should be displayed to the user.
Below is a table showing some typical values the user might enter.
Codeville: Your program is like a network of roads Programs need to do different things under different circumstances.
In the game, the code displays “You win!” if  the user guesses the number correctly, and “You lose!” if  not.
This means that all programs, even really simple programs, typically have multiple paths through them.
A path refers to the set of  instructions that the computer will actually follow (or execute)
Your code is like a street network, with lots of  sections of  code connected together just like the streets in a city.
When you drive through a city, you make decisions as to which streets you drive down by turning left or right at different intersections.
It also needs to make decisions from time to time as to which path to take, but for your code, it is not like driving along a road, it’s executing a particular path.
Let’s look in more detail at how a program decides which path to take.
There are decision points in every program that are like road intersections.
You need to make a decision only when you get to an intersection.
When a program has a list of  commands, it can blindly execute them one after another.
Does it run this piece of  code or that piece of  code?
These decision points are called branches, and they are the road intersections in your code.
If  the branch condition is true, it runs the code on the true branch.
And if  the branch condition is false, it runs the code on the false branch.
In our example, the branch condition is the if guess == 5 piece of  code.
This is a test for equality and it will result in the value true or false.
The code on the true path is indented, and given after the if line.
The code on the false path is indented, and given after the else line:
You need to amend the game program to give more informative messages to the user.
But what will the paths in the program look like?
These commands run only if they are on the path the program takes.
The cars have arrived, they’re warming their tires on the grid, and the race is about to start.
Can you assemble the track so that it displays the right feedback message? Note that you might not need all the pieces of track.
The cars have arrived, they’re warming their tires on the grid, and the race is about to start.
Were you able to assemble the track so that it displays the right feedback message?
The solution’s mapped out, and now we know that the program code will need to have paths that match this:
But isn’t there a problem here? In the design there are many interconnecting paths, but so far, we have only written code that contains just one branch:
In the new code, we will need to connect two branches together.
We need the second branch to appear on the false path of  the first.
Python uses indents to connect paths The code inside the if and else statements is indented.
Let’s consider a different piece of  example code: something that will decide if  you can drive downtown.
Python uses indents to connect a sequence of  commands together to form paths.
The INDENTs tell Python that the commands are in the same path.
This command is not on the FALSE path because it is not indented.
So how do you connect branches together? You simply indent the second branch in by one more level.
You should now have enough information to go fix the code, but before we do that, let’s take a look at how IDLE helps you indent code.
Be careful how you indent code in Python; if you don’t.
If you press TAB, IDLE converts it into SPACE characters.
You can change the way IDLE uses colors and indenting by clicking on the Options menu (on the Mac it's called Preferences)
The Help menu not only gives you help about IDLE, but it also lets you read the built-in Python documentation.
You’ll be using IDLE to enter all of  the Python code in this book, so it’s worth taking a little time to familiarize yourself  with a few of  its features.
Even though IDLE looks like a simple editor, it’s actually packed full of  smarts that will make Python programming much easier and faster for you.
It’s worth spending some time exploring IDLE’s menus and help system, but for now here’s a few handy hints to help you feel at home.
Pool Puzzle Your task is to take the Python code.
You may not use the same code fragment more than once, and you won’t need to use all the code fragments.
Note: each code fragment from the pool can be used only once!
You could not use the same code fragment more than once, and you didn’t need to use all the code fragments.
This piece of code from the first version of this program is no longer needed.
So, what happens if  you run the new version of  the program?
Remember, you will need to switch back to the program window for each run and choose Run module from the menu.
Looks like the first guess was too low, so we need to try again.
The program works, and now generates extra feedback, but there’s a problem.
If  the users want to have another guess, they have to run the program again.
They really want the program to keep asking them for another guess until they finally get the correct answer.
How do we get the computer to do something repeatedly? Should we just make a copy of  the code and paste it at the end of  the file? That would make sure the user is asked twice.
The guessing game program needs to be able to run some code repeatedly.
Why do I have to keep rerunning the program? You mean I only get one guess?????
Loops let you run the same piece of code over and over again Programs often need to keep running the same piece of  code many times.
Just like branches, loops have a condition (the loop condition) that is either true or false.
Also, like the if part of  branches, if  the loop condition is true, then a loop will run a given piece of  code.
The big difference between a loop and a branch is how many times it runs the code associated with it.
But a loop will run the loop body, then check the loop condition again and, if  it’s still true, it will run the loop body again.
In fact, it will keep running the loop body until the loop condition becomes false.
When the program first reaches the loop, it checks the value of the loop condition before deciding what to do next.
If the loop condition is true, the program runs the code in the loop body.
Python’s while loop Programming languages have lots of  different ways of  creating loops, but one of  the simplest ways in Python is to use a while loop.
This is what the loop looks like when you write it as a Python while loop.
The code keeps asking the question “Are we there?” until the user types something other than no.
Did you notice that you had to set the value of  the answer variable to something sensible before you started the loop? This is important, because if  the answer variable doesn’t already have the value no, the loop condition would have been false and the code in the loop body would never have run at all.
The loop body is the indented code following the “while” line.
The loop body is just one line of code in this example, but the loop body can be many lines of code.
You need to rewrite your game program so it keeps running until the user guesses the correct answer.
You will need to use all of the things you’ve learned in this chapter.
You will need to work out the conditions for each of the branches and loops that are required.
Remember: the program needs to keep asking the user for an answer while the current guess is wrong.
Hint: If you need to test that two things have different values, use the != operator.
Don't worry if your code doesn't look exactly like this.
The important thing is that it works in the same way when you run it.
This part of the program is very similar to what you had before.
We need to keep running while the guess is wrong.
You needed to rewrite your game program so it keeps running until the user guesses the correct answer.
You needed to use all of the things you’ve learned in this chapter.
You needed to work out the conditions for each of the branches and loops that are required.
Hint: If you need to test that two things have different values, use the != operator.
Here are the two lines that create the random number.
So, what happens when you run the new version of  your program?
By carefully analyzing the problem, deciding what the feedback needed to be, and working out the intricate looping and branching logic, you’ve created something that really rocks.
You’re on your way to becoming a real code jockey.
No matter how many times I play it, I still have to think to get the right answer!
The program keeps asking for another guess for as long as you keep getting the answer wrong.
The correct answer is now a random number and it should be different each time you play the game.
They taught me all I knew - hic! Their names are What..
All programs process data, and one of the most important types of data is text.
And finally, you’ll instantly power up your programs with the help of library.
Your new gig at Starbuzz Coffee Starbuzz Coffee has made a name for itself  as the fastest growing coffee shop around.
If  you’ve seen one on your local corner, look across the street; you’ll see another one.
The Starbuzz CEO is always on the lookout for ways to boost profits, and he’s come up with a great idea.
He wants a program that will show him the current price of  coffee beans so that his buyers can make informed decisions about when to buy.
I had a programmer do some work for me, but they‛re not answering their phone.
Here’s the current Starbuzz code The previous programmer has already made a head start on the code, and we can use this as a basis.
Here’s the existing Python code, but what does it do?
Type the code into IDLE, save the program, and run it.
Hey, that‛s not right! I only need to see the current price of coffee beans, not all that other stuff.
The code you’ve been left goes to the prices page on the Beans’R’Us website to get the current price of  coffee beans.
But instead of  giving just the cost, it gives you all of  the HTML text used to create the web page itself.
The cost is embedded in the HTML Take a closer look at the results of  the program.
The current price of  beans is right in the middle of  the output:
The Starbuzz CEO would find it a lot easier if  you could extract the price of  beans and just display that, rather than have to look for it in the HTML.
A string is a series of characters The output of  the Starbuzz program is an example of  a string.
In other words, it’s a series of  characters like this:
Somewhere within the string is the price of  coffee beans.
To retrieve just the price, all you need to do is go to the right bit of  the string, retrieve the characters that give the price, and display just those characters.
This is the HTML code from the price web page.
Find characters inside the text The computer keeps track of  individual characters by using two pieces of  information: the start of  the string and the offset of  an individual character.
The offset is how far the individual character is from the start of the string.
The first character in a string has an offset of  0, because it is zero characters from the start.
The second character has an offset of  1, and so on:
The offset value is always 1 less than the position.
Python lets you read a single character from a string by providing the offset value in square brackets after the variable name.
Because the offset value is used to find a character, it is called the index of  the character:
As we start counting from 0, the offset values are always one less than their actual position.
But how do you get at more than one character? For Starbuzz, you don’t just need a single character.
You need to extract the price from the string of  HTML, and the price is made up of  several characters.
You need to extract a smaller substring from a bigger string.
A substring is a sequence of  characters contained within another string.
Specifying substrings in Python is a little like reading single characters from a string, except that you provide two index values within the square brackets:
In general, if you specify a substring using s[a:b], then:
If you provide two index values, you extrac t a.
Let’s work out what each of the following substring specifications mean.
Imagine the variable s is set to the string below.
Your job is to determine what each of the substrings provide.
The second index value is after the last character in the substring.
This is even though the first index value is the start character of the substring.
Imagine the variable s is set to the string below.
Your job was to determine what each of the substrings provide.
In general, if you specify a substring using s[a:b], then:
You need to update the program to extract the price starting at the 235th character of the string.
You needed to update the program to extract the price starting at the 235th character of the string.
The price is four characters long and stored in a variable called price.
Here it is: the substring to extract and the current price of coffee.
Now, instead of  displaying the entire HTML text of  the web page, you’ve cut it down to just the piece of  the string (the substring) that you need.
And there it is: the current price of coffe e.
Type the code into IDLE, save the program (choose a name for the program that is meaningful to you), and run it.
It‛s exactly what I need! You have no idea how much time and money this is going to save me...
Head First: String, it’s so good of  you to find the time to speak to us.
String, where should I begin? You are known the world over for your work.
In your time you’ve carried the works of Shakespeare, Geothe...
See, before I existed, computer systems used to record text one character at a time.
String: Inconvenient? It was a royal pain in the tuchis.
String: Without me, handling text was like riding a pedal cycle without a saddle.
String: It was possible to get somewhere, but the journey was kind of  stressful.
Instead of  keeping track of  a hundred, or a thousand, or a million letters, you just need keep an eye on one thing.
String: I like to think of  myself  as a front.
An agent, you might say, for all the characters I work with.
Head First: People deal with you, so they don’t have to deal with individual characters in memory.
I keep an eye on the day to day business of  the letters.
If  I need to be shorter or longer, I arrange for the characters to be made available.
And they, I hope, should one day be able to produce their own substrings as well.
Head First: Yet some people are confused by your indexing.
The String Exposed This week’s interview: We ask the String what it’s like being the world’s most eligible datatype.
Q: So, I can put any web address into this code and grab the associated web page from the Internet?
A: Yes, feel free to try it out for yourself.
Q: Don’t I need a web browser to view web pages?
A: It gives the program the ability to talk to the Internet.
Q: And I guess that call to urlopen() goes and gets the web page?
A: That’s right! The provided web address (or “URL” to use the proper webspeak) is fetched from the Internet and returned by the call to urlopen()
In this code, the fetched web page is assigned to the page variable.
Q: And the urllib.request bit? A: That just tells the program to use the urlopen() function that comes as standard with Python 3’s Internet pagereading technology.
We’ll have more to say about urllib.request in a little bit.
For now, just think how lucky we all are not to have to write code to fetch web pages from the Internet.
Q: I get that the call to read() actually reads the web page from the page variable, but what’s that decode(“utf8”) thing?
A: When the web page is fetched from the Internet, it is in a “raw” textual format.
This format can be a little hard for humans to read.
The call to decode() converts the raw web page into something that looks a little easier on the eye.
To see what we mean, try removing the call to decode() from the program and running the code again.
You can download the HTML of a web page as a textual string.
You can access individual characters in a string using an offset.
The offset is known as the index value of the character (or just index for short)
The first index value is the location of the first character of the substring.
The second index value is the location after the last character of the substring (up to, but not including)
Subtract the second index from the first to work out how long the substring should be.
The CEO just got great news from the beans supplier.
The supplier actually maintains two prices: one for regular customers and one for loyalty program customers.
That means you need to change the web page address in the code:
The supplier is so happy about all the business we‛re giving them that they are going to make us members of their loyalty discount program.
The price moved The web page for loyalty customers is much more dynamic that the old web page.
All you know for sure is that the price follows the substring >$:
All you know is that the price follows these two characters.
Searching is complex You already know how to find a substring, so you could run through the entire web page and check each two characters to see if  they match >$, like this:
Which two characters are you currently comparing? Where in the string are you right now? What if  “>$” isn’t found? Searching for substrings in strings is a little more complex than it first appears...
But if you don’t want to write code to search the string, what else could you do?
Python data is smart The more code you write, the more you will find that you need to do the same kind of  things to the data in your variables all the time.
To prevent you from having to create the same code over and over, programming languages provide built-in functionality to help you avoid writing unnecessary code.
Imagine you have a piece of  text in a variable that you want to display in uppercase (all CAPITAL letters):
You could write code that read through each character in the string and printed out the matching uppercase letter.
But if  you’re programming in a language like Python, you can do this:
But what does msg.upper() mean? Well, msg is the string containing our piece of  text.
The .upper() that follows it is called a string method.
When you call msg.upper(), you are telling the string to give you an UPPERCASE version of  its data.
But is there a string method that can help you search for a substring within a string object?
Which of the above methods do you need to use to locate the price substring within the Beans’R’Us web page?
Return the first index value when the given substring is found.
Return a copy of the string with all occurrences of one substring replaced by another.
Return a copy of the string with the leading and trailing whitespace removed.
Return the value True if the string has the given substring at the beginning.
Return the value True if the string has the given substring at the end.
These are some of  the many built-in string methods that come with Python.
Which of the above methods do you need to use to locate the price substring within the Beans’R’Us web page?
Return the first index value when the given substring is found.
Return a copy of the string with all occurrences of one substring replaced by another.
Return a copy of the string with the leading and trailing whitespace removed.
Return the value True if the string has the given substring at the beginning.
Return the value True if the string has the given substring at the end.
These are some of  the many built-in string methods that come with Python.
You were to match each method to what it does.
You need to update your price-grabbing program so that it extracts the four-character substring that follows the occurence of the “>$” characters.
Write the new version of your code in the space provided.
Hints:  Don’t forget that the find() method finds the starting position of a substring.
Once you’ve found “>$”, use Python’s addition operator to calculate where in the string you want to extract the substring.
You needed to update your price-grabbing program so that it extracts the four-character substring that follows the occurence of the “>$” characters.
Hints:  Don’t forget that the find() method finds the starting position of a substring.
Once you’ve found “>$”, use Python’s addition operator to calculate where in the string you want to extract the substring.
With the start and end index locations known, it’s easy to specify the substring required.
Did you remember to print out the price once you’d found it?
OK, so your program should now be able to find the price, no matter where it appears in the page.
It works! By adding very little extra code, you have made the program much smarter and more useful.
That was quick! We‛re back to saving money once more.
Let’s add a loop to the program that stops when the price of coffee is right.
Code Magnets The program code to add the feature is sitting on the fridge door.
Your job is to arrange the magnets so that the program loops until the price falls to $4.74 or lower.
Code Magnets Solution The program code to add the feature was sitting on the fridge door.
You were asked to arrange the magnets so that the program loops until the price falls to $4.74 or lower.
Did you remember to indent these lines? They are inside the loop.
This line shouldn’t be indented, as it's outside the loop.
Enter the new version of  the program code into an IDLE edit window and run it.
Try to identify which line in the code caused the crash and guess what a TypeError might be.
Strings and numbers are different The program crashed because it tried to compare a string with a number, which is something that doesn’t make a lot of  sense to a computer program.
When a piece of  data is classified as a string or a number, this refers to more than just the contents of  the variable.
If  two pieces of data are different types, we can’t compare them to each other.
You’ve seen this problem before, back when you were working on the guessing game program:
In the guessing-game program, you needed to convert the user’s guess into an integer (a whole number) by using the int() function.
But coffee bean prices aren’t whole numbers, because they contain numbers after a decimal point.
They are floating point numbers or floats, and to convert a string to a float, you need to use a function other than int()
Like int(), but works with numbers that contain a decimal point.
If  you use the float() function to convert the price substring, you should then be able to compare the price to 4.74:
Your program now waits patiently until the price falls to the right level and only then does it tell the CEO that the time is right to buy a fresh batch of  coffee beans.
This is great! Now I can get on with the rest of my day and I only hear when the price of beans drops to the right level.
The program has overloaded the Beans’R’Us Server It looks like there’s a problem with the program.
It’s sending so many requests that it overwhelmed the Beans’R’Us website.
So why did that happen? Let’s look at the code and see:
If  the value of  price isn’t low enough (if it’s more than 4.74), the program goes back to the top of  the loop immediately and sends another request.
With the code written this way, the program will generate thousands of  requests per hour.
Multiply that by all the Starbuzz outlets around the world, and you can start to see the scale of  the problem:
The Beans 'R' Us server can't cope with all the requests.
It seems that she can’t get back because of  a storm in the mountains.
You need to regulate how often you make a request of  the Beans’R’Us web server.
One way to do this is to use the time library.
This will apparently make it possible to send requests every 15 minutes or so, which should help to lighten the load.
You’re already using library code Look at the first line of  the original code:
The import line tells Python that you intend to use some library code called urllib.request.
A library is a bunch of  prewritten code that you can use in your own programs.
In this case, the urllib.request code accesses data on the Web.
This is a library that comes as standard with Python.
To see how the code is used, look at this line:
The code that follows the = sign is calling a function in urllib.
Notice how we say we want the code: urllib.request, followed by a “.”, then the name of  the function.
But how will the time library help us? Let’s see...
This says that we are going to use code stored in the “urllib.request” library.
Every library contains functions that you can use in your own program.
You need to use one of these functions to help you fix your code.
But which one? Draw a circle around the function you think you might need.
These are some of the functions provided by Python’s built-in time library:
With the appropriate function identified, amend the code to control how often the request for the web page is sent to the server.
The Beans’R’Us webmaster has been in touch to say that their web-based pricing information is updated every 15 minutes.
Fill in the blanks in the code as indicated by the dashed lines.
Also: to use the functionality provided by a library, remember to import it first.
You need to use one of these functions to help you fix your code.
But which one? You were to draw a circle around the function you thought you might need.
These are some of the functions provided by Python’s built-in time library:
With the appropriate function identified, you were to amend the code to control how often the request for the web page is sent to the server.
The Beans’R’Us webmaster has been in touch to say that their web-based pricing information is updated every 15 minutes.You were to fill in the blanks in the code as indicated by the dashed lines.
Also: to use the functionality provided by a library, remember to import it first.
This gives the program access to all the builtin functionality that the library provides.
Use the facilities of the time library to pause the program for 15 minutes between requests.
Order is restored Starbuzz Coffee is off  the blacklist, because their price-checking programs no longer kill the Beans’R’Us web server.
The nice people at Webland Security have, rather quietly, gone away.
I love the taste of this coffee, and I just love the cost of those beans!
Let’s look back at what you’ve learned in this chapter:
As well as having a valu e, data in variables also ha.
And complex code can be hard to read, and even harder to maintain.
In this chapter, you’ll discover how a little function knowledge can make your coding life.
When the coffee beans start to run low in an outlet, the Starbuzz baristas need to be able to send an emergency order to the CEO.
The outlets need some way of  immediately requesting the purchase of coffee beans at the current price, regardless of  what that price is.
They also need the option of  waiting for the best price, too, just like in the current program.
My buyers are only buying coffee when the cost is low, but if we run short on coffee supplies, I ll pay any price.
The Starbuzz buyers love the program you created in the last chapter.
Thanks to your efforts, the Starbuzz CEO is only buying coffee beans when the price drops below $4.74, and his organization is saving money as a result.
But, now there’s a problem: some Starbuzz outlets have run out of  beans.
What does the new program need to do? The new program for Starbuzz needs to give the user two options.
The first option is to watch and wait for the price of  coffee beans to drop.
If  the user chooses this option, the program should run exactly as it did before.
The second option is for the user to place an emergency order.
If  the user chooses this option, the program should immediately display the current price from the supplier’s website.
You need to modify the program to add an emergency report feature that will immediately report the current price.
Which parts of the code can you reuse to generate the emergency report? Grab your pencil and circle the part of the code you think you might reuse.
Why do you think you‛ll need to resuse this code?
If you just copy and paste the same code, it could make your program very long.
You needed to modify the program to add an emergency report feature which will immediately report the current price.
Which parts of the code can you reuse to generate the emergency report? You were to circle the part of the code you think you might reuse as well as state why you might need to reuse it:
Whether you wait for the right price or request an emergency order, you'll need this code in each case.
Does that mean we have to duplicate the code for each option? Is this a good idea?
Imagine if you had to maintain a program this length.
When you need to add a new feature to a program that’s similar to some other code in the program, you might be tempted to just copy and paste the code.
In practice, that’s actually a pretty bad idea, because it can lead to code bloat.
Code bloat means that you have more code in your program than you actually need.
Your programs will get longer, and they’ll get a lot harder to maintain.
Programming languages all come with features that allow you to reuse code.
But when you reuse code, you have a single copy of  the code that you can call in all the places that you need it.
Not only will your programs be shorter, but it also means that when you amend code, you will need to change it only once and in one place only.
So you want a new gravity-bomb launcher added to each of the star-fighters? No problem.
I‛ll change a few lines of code and every craft in the fleet will be updated.
Reuse code with functions Most programming languages let you create reusable, shareable code with functions.
A function is a chunk of  code that you separate out from the rest of  your program, give a name, and then call from your code.
In Python, use the def keyword to define a new function.
In Python, it’s important that you define the function before you use it, so make sure the code that calls (or uses) the function comes after the definition of  the function:
It runs the code in the function until it gets to the end, and then returns to the next line in the code that called it.
The parentheses are important, so be sure to include them.
Code Magnets Before you amend the existing coffee bean program code, let’s see if you can create a function to display the current bean price.
Rearrange the magnets in the correct order to create the function:
When it comes to functions, the order in which you do things really matters.
The get_price() function needs to be defined before you call it.
And because the function relies upon some code in the urllib.request library, you need to make sure that the import line appears before the function, too.
This line isn't indented, because it is part of the main program.
You still need to import libraries before using them in a function.
The order in which you do things is really important.
Code Magnets Solution Before you amend the existing coffee bean program code, let’s see if you can create a function to display the current bean price.
You were to rearrange the magnets in the correct order to create the function:
Type the code on the opposite page into IDLE, and run it to see what happens:
You now have a function that reads the contents of  the page from the supplier’s website and prints out the price information.
You can reuse the function in lots of  places in your program simply by calling the get_price() function.
Now all you have to do is modify your existing program to use the new function.
When this code runs, the price is displayed right away.
Note: you may see a different price when you run your code.
Look back at the original program at the start of the chapter.
You know that you can use this function to produce emergency reports.
But it will also need to replace the existing price-watch code.
It‛s just a pity you actually need to GET the price and USE it.
Your code isn‛t much use, just printing out the price like that, is it?
Functions are great for reusing code, but they really come into their own when they perform an action for you, then give you back some data to use in whichever way you want.
The current version of  the get_price() function prints out the price of  coffee beans every time it is used, or called.
This is OK if  that’s what you really want it to do.
The trouble is, you need the function to give you the price so that you can then decide what you want to do with it.
Even the name tells you a little about what it does.
Return data with the return command If  you use the return() command within a function, you can send a data value back to the calling code.
The assignment happens after the code in the function executes.
Q: The return() command is just like print(), except nothing appears on screen, right?
The print() command is designed to display (or output) a message, typically on screen.
The return() command is designed to allow you to arrange for a function you write to provide a value to your program.
Recall the use of randint() in Chapter 1: a random number between two values was returned to your code.
So, obviously, when providing your code with a random number, the randint() function uses return() and not print()
In fact, if randint() used print() instead of return(), it would be pretty useless as a reusable function.
Q: So, it’s a case of return() letting a function give you something back?
A: No, using copy’n’paste is quick and dirty, with the emphasis on the “dirty.” When you need to repeatedly use some code, it’s always better to create a function to contain and name that code.
If you later decide to change how the repeated code works, it’s a no-brainer to change the code in the function once.
If, instead, you “quickly” performed copy’n’paste five times, that’s five changes you now have to make, and the chance of you missing one change or making a mistake are actually pretty high.
Q: So, using a function lets you share the repeated code in a controlled way?
There’s also a guiding principle among prgrammers known as DRY: Don’t Repeat Yourself.
Q: What happens if the function omits the return() command? Does each function have to have one?
In fact, the current version of your get_price() function doesn’t use return() at all.
But, your function feels like it gives you something because it prints the current price on screen.
When the return() command is omitted, a function returns a special no value.
Q: So, just to be clear, using return() is optional? A: Yes, it is.
Q: Does return() always come at the end of the function? A: Usually, but this is not a requirement, either.
The return() can appear anywhere within a function and, when it is executed, control returns to the calling code from that point in the function.
It is perfectly reasonable, for instance, to have multiple uses of return() within a function, perhaps embedded with if statements which then provide a way to control which return() is invoked when.
Q: Can return() send more than one result back to the caller?
But, let’s not get ahead of ourselves, because lists are not covered until the next chapter.
And there’s a little bit more to learn about using return() first, so let’s read on and get back to work.
Using the new get_price() function, write a new version of the price-checking program that does this:
Ask the user to indicate if the price is required immediately (Y/N)
If the user chooses “Y” for “yes,” find the current price and display it on the screen.
Your code may look a little different from this, but that's OK.
As long as it does the same thing, you're doing fine.
You need to ask the user if the price is required immediately.
If the user decides to wait for the price to drop, get the price using the get_price() function, then use the given value to decide whether or not it's time to buy coffee.
Using the new get_price() function, you were asked to write a new version of the price-checking program that does this:
Ask the user to indicate if the price is required immediately (Y/N)
If the user chooses “Y” for “yes,” find the current price and display it on the screen.
Make the required changes in IDLE and take your new program for a spin:
If you need the price right now, this program wastes no time in giving it to you.
If you’re happy to wait, the program will (eventually) tell you when the price is right.
The CEO wants the price sent to his cell phone.
Rather than have the emergency report displayed on a PC, the Starbuzz CEO would prefer to get something more immediate while he’s on the road.
He needs messages to be sent directly to his Twitter account.
Sending a message to a Twitter account feels like a tall order.
Where do you think you’d start looking for helpful suggestions and, quite possibly, a solution to this new problem?
To use the code you will first need to sign up for a free Twitter account.
Use the Force, Luke It’s pretty complicated to write a program that sends messages to a service like Twitter.
Fortunately, other people have already tackled problems like this and posted their code on the Web.
Here’s a Python function (found on the Web) that is very similar to what you need:
This is the text of the message that will be sent.
Why can’t you just replace the print() calls in our existing program with calls to this function?
This code looks complex but, for now, all you need to know is that it sends a message to the Twitter service.
An advantage of  using functions (which is illustrated here) is that they allow you to understand a program at a high level without having to initially understand all the details.
This is known as working at a higher level of  abstraction.
No matter which option is chosen by the u ser, the.
Take the original Twitter code and create two new functions.
Can you see the problem that this creates? Can you think of a solution that fixes the problem?
Lines that start with # are known as comments in Python.
Comments are code annotations put there by a coder and are meant to be read by other coders working with the code.
Use parameters to avoid duplicating functions Just like it’s a bad idea to use copy’n’paste for repeated usages of  code, it’s also a bad idea to create multiple copies of  a function with only minor differences between them.
A parameter is a value that you send into your function.
Think of  it as the opposite of  what you get when you return a value from a function:
Connect to Twitter and send the message with the price to the CEO.
The parameter’s value works just like a variable within the function, except for the fact that its initial value is set outside the function code:
Parameters Up Close To use a parameter in Python, simply put a variable name between the parentheses that come after the definition of  the function name and before the colon.
Then within the function itself, simply use the variable like you would any other:
Later, invoke the function from your code with a different parameter value each time you use the function:
Use the parameter's value in your function's code just like any other variable.
Modify the send_to_twitter() function so that the message text is passed into the function as a parameter.
Update your code to make the approriate parameterized calls to sent_to_twitter()
You were to grab your pencil and update your code to incorporate a version of send_to_twitter() that supports parameters:
You just need to replace the print() calls with send_to_twitter() calls.
The msg variable in the code needs to become a parameter of the function.
Now you’ve amended the program code, it’s time to see if  it works.
Make sure the amended code is in IDLE, and then press F5 to run your program.
You asked for an emergency price and here it is.
Great, an emergency order! I‛ll quickly place a call before we run out of beans again...
You decide to wait and (eventually) the tweet with a message to buy comes thru (when the price is right)
No matter where the Starbuzz CEO is, if he has his cell nearby, he gets the message.
Q: Can I still call the Twitter function like this: send_to_ twitter()? Or do I always have to provide a value for the msg parameter?
A: As it’s written, the parameter is required by the function.
If you leave it out, Python will complain and refuse to run your code further.
In most programming languages (including Python), you can provide a default value for a parameter, which is then used if the calling code doesn’t provide any value.
This has the effect of making the parameter optional, in that it either takes its value from the one provided by the caller, or uses the default value if the caller does not provide anything.
Q: Can there be more than one parameter? A: Yes, you can have as many as you like.
Just bear in mind that a function with a gazillion parameters can be hard to understand, let alone use.
As an example, Python’s built-in print() function can have up to three optional parameters, in addition to the stuff to print (which is also optional)
To learn more, open up a Python Shell prompt and type help(print) at the >>> prompt.
Q: Doesn’t all that optional stuff get kinda confusing? A: Sometimes.
As you create and use functions, you’ll get a feel for when to make parameters mandatory and when to make them optional.
If you look at the description of print() again , you’ll see that in most usage scenarios print() takes a single parameter: the thing to display.
It is only when extra, less common, functionality is required that the other parameters are needed.
Q: The description of print() mentions “keyword arguments.” What are they?
A: The word “argument” is another name for “parameter,” and it means the same thing.
In Python, an argument can have an optional “keyword” associated with it.
This means that the parameter has been given a name that the calling code can use to identify which value in its code is associated with which parameter in the function.
However, if you need to use only one of them in the calling code, you need some way to identify which one you are using, and that’s where the keyword arguments come in.
There are examples of these optional features of print() and other such functions later in the book.
One of  the Starbuzz coders decided that the password should be set at the start of  the program, where it can be easily amended in the future.
Interesting code, but it would be great if it printed a message every time it sent a tweet.
So, later in the program, the code uses the password variable.
That means that next time the password needs to be changed, it will be easier to find it in the code because it is set right near the top of  the file.
The coder wants to set the password at the top of the file where it’s easy to find.
Add the new password code to the top of  the program and then run it through IDLE:
The program has crashed and it can no longer send out messages to the CEO.
Stores across the globe are running short on beans and it’s up to you to fix the code.
Look at the error message that was generated when the program crashed.
Oh no! It crashes! What happened?!? Our order system has stopped working worldwide! If we don‛t get information on where we need coffee orders soon, this could be the end of Starbuzz...
The rest of the program can’t see the password variable.
The program crashed because, for some reason, the program couldn’t find a variable called password.
But that’s a little odd, because you define it in the set_password() function:
For example, when the user is asked if  she wants to send a price immediately, her answer is recorded against the price_now variable:
When you call a function, the computer creates a fresh list of variables.
But when you call a function, Python starts to record any new variables created in the function’s code on a new sheet of  paper on the stack:
This new sheet of  paper on the stack is called a new stack frame.
Stack frames record all of  the new variables that are created within a function.
The variables that were created before the function was called are still there if  the function needs them; they are on the previous stack frame.
Your program creates a new stack frame each time it calls a function, allowing the function to have its own separate set of  variables.
If the function creates a new variable for some internal calculation, it does so on its own stack frame without affecting the already existing variables in the rest of  the program.
This mechanism helps keep things organized, but it has a side-effect that is causing problems...
When a variable's value can be seen by some code, it is said to be “in scope.”
When you leave a function, its variables get thrown away Each time you call a function, Python creates a new stack frame to record new variables.
Remember: the stack frame is there to record local variables that belong to the function.
They are not designed to be used elsewhere in the program, because they are local to the function.
The whole reason for using a stack of  variables is to allow a function to create local variables that are invisible to the rest of  the program.
The first time Python saw it was when it was created in the set_password() function.
That meant the password variable was created on the set_password() function’s stack frame.
When the function ended, the stack frame was thrown away and Python completely forgot about the password variable.
When your code then tries later to use the password variable to access Twitter, you’re outta luck, because it can’t be found anymore...
When a variable's value CANNOT be seen by some code, it is said to be “out of scope.”
Write a modified version of this code that will allow the send_to_twitter() function to see the password variable.
You were to write a modified version of this code that will allow the send_to_twitter() function to see the password variable.
This is all you need to do: just create the variable.
Test Drive The fixed version of  the code has been loaded onto machines in every Starbuzz store worldwide.
It’s time to try out the code and see if  you can get the ordering system working again:
It works! Because you are creating the password outside of  a function, it is available globally throughout the Python program file.
The password variable will be recorded against the initial stack frame, so the send_to_twitter() function will now be able to see it.
Let’s see how the updated code is affecting the rest of Starbuzz.
Phew! You really saved the day! And the company! For a while there, I thought we were sunk...
From Cambridge to Cambodia, from Seattle to Sierra Leone, the orders are being placed and the beans are being delivered.
Your system tracks live prices from the Web and automatically sends messages to the CEO wherever he is on Earth.
You are really using the power of  functions to keep your code clean, concise, and clear.
By correctly using variable scope, you even made it easy to keep the password up-to-date.
With the coffee beans fully stocked, there's plenty of time for the more important things in life ...
Let’s look back at what you’ve learned in this chapter:
Use return() to send a value back to the code that called the function.
As your programs develop, so do your data handling needs.
And when you have lots of data to work with, using an individual variable for each piece.
Surf’s up in Codeville The annual Codeville Surf-A-Thon is more popular than ever this year.
Because there are so many contestants, the organizers asked you to write a Python program to process the scores.
The trouble is, even though the contest is over and the beach is now clear, you can’t hit the waves until the program is written.
Your program has to work out the highest surfing scores.
Despite your urge to surf, a promise is a promise, so writing the program has to come first.
Find the highest score in the results file After the judges rate the competitors, the scores are stored in a file called results.txt.
There is one line in the file for each competitor’s score.
You need to write a program that reads through each of  these lines, picks out the score, and then works out the highest score in the Surf-A-Thon.
You’ve written programs to read data from the Web, and read data that’s been typed in at the keyboard, but you haven’t yet written any code that reads data stored in a file.
Iterate through the file with the open, for, close pattern If  you need to read from a file using Python, one way is to use the built-in open() command.
The call to open() creates a file handle, which is a shorthand that you’ll use to refer to the file you are working with within your code.
Because you’ll need to read the file one line at a time, Python gives you the for loop for just this purpose.
Like while loops, the for loop runs repeatedly, running the loop code once for each of  the items in something.
Think of  a for loop as your very own custom-made data shredder:
Each time the body of  the for loop runs, a variable is set to a string containing the current line of  text in the file.
This is referred to as iterating through the data in the file:
Put the actual name of the file to open here.
The for loop stops when you run out of lines to read.
Close the file (through the file handle) when you're done with it.
Do something with the thing you've just read from the file.
The entire file is fed into the for loop shredder...
The for loop shredderTM ...which breaks it up into oneline-at-a-time chunks (which are themselves strings)
Note: unlike a real shredder, the for loop shredderTM doesn't destroy your data—it just chops it into lines.
Code Magnets You need to complete the code to find the highest score in the results.txt file.
Remember: the for loop creates a string from each line in the file.
Hint: For the program to work, you will need to convert the string into a number.
Code Magnets Solution You needed to complete the code to find the highest score in the results.txt file.
Remember: the for loop creates a string from each line in the file.
Hint: For the program to work, you needed to convert the string into a number.
Remember to convert the string to a number with float()
Even though the line is a number, it comes into the program as a string.
To successfully run this program, you need to grab a copy of the results.txt data file from the Head First Programming website.
Be sure to put the data file in the same directory (or folder) that contains your code.
Test Drive It’s time to see if  the program works.
It looks like something’s gone wrong! The program has crashed with a ValueError, whatever that is.
Is there something wrong with the Python code? Is there a problem with the file? Is there something wrong with the data? What do you think happened?
Look's like you are trying to convert something that didn't look like a number.
To see what happened, let’s take another look at the judge’s score sheet to see if  you missed anything:
The judges also recorded the name of  each surf  contestant next to his or her score.
This is a problem for the program only if  the name was added to the results.txt file.
Sure enough, the results.txt file also contains the contestant names.
And that’s a problem for our code because, as it iterates through the file, the string you read is no longer just a number.
There are two pieces of information on each line: a name and a number (the surfer's score)
The judge's official ID badge was covering up the names.
Split each line as you read it Each line in the for loop represents a single string containing two pieces of  information:
You need to somehow extract the score from the string.
In each line, there is a name, followed by a space, followed by the score.
And you could do something similar here using the find() method and index manipulation, searching for the position of  a space (' ') character in each line and then extracting the substring that follows it.
Programmers often have to deal with data in strings that contain several pieces of  data separated by spaces.
It’s so common, in fact, that Python provides a special string method to perform the cutting you need: split()
To isolate the score, you need to cut each line in two.
And you'll find that other programming languages have very similar mechanisms for breaking up strings.
The split() method cuts the string Imagine you have a string containing several words assigned to a variable.
Think of  a variable as if  it’s a labeled jar:
The rock_band string, like all Python strings, has a split() method that returns a collection of  substrings: one for each word in the original string.
Using a programming feature called multiple assignment, you can take the result from the cut performed by split() and assign it to a collection of variables:
Each of  the return values from the split() on rock_band is assigned to its own separately named variable, which allows you then to work with each word in whatever way you want.
Note that the rock_band variable still exists and that it still contains the original string of  four names.
Looks like you can use multiple assignment and split() to extract the scores from the results.txt file.
The right side of the assignment operator contains the call to the split() method.
The left side of the assignment operator lists the variables to assign values to.
Write the extra code required to take advantage of the split() method and multiple assignment in order to create variables called name and score.
Then use them to complete the program to find the highest score.
You were to write the extra code required to take advantage of the split() method and multiple assignment in order to create variables called name and score, then use them to complete the program to find the highest score.
The only code changes required are within the for loop.
Test Drive So what happens when you run this version of  the code within IDLE ? Let’s amend the code and see:
It works! The program reads each line from the file as a string, extracts the score using the split() method, and then uses it to find the highest score in the file.
The organizers are so excited to hear that the program is finished that they immediately display the result on the large scoreboard at the back of  the beach.
The amended code, which takes advantage of the split() method.
This time, the program produces a result you can actually use.
But you need more than one top score As soon as the top score appears, people start to wonder what the second and third highest scores are:
It seems that the organizers didn’t tell you everything you needed to know.
The contest doesn’t just award a prize for the winner, but also honors those surfers in second and third place.
Our program currently iterates through each of  the lines in the results.txt file and works out the highest score.
But what it actually needs to do is keep track of  the top three scores, perhaps in three separate variables:
Looks like you need extra variables for the second and third highest scores.
Keeping track of 3 scores makes the code more complex So how will you keep track of  the extra scores? You could do something like this:
You can see that there’s a lot more logic here, because the program needs to “think” a bit more.
Unfortunately, turning this logic into code will make the program longer and harder to change in the future.
And, let’s be honest, it’s somewhat more difficult to understand what’s actually going on with the logic as shown here.
Think about what would make the program easier to write.
Check the box that you think would have the greatest impact:
If there were no names in the file, only numbers.
If the scores came before the names in the file.
If you knew exactly how many lines are in the file.
An ordered list makes code much simpler If  you had some way of  reading the data from the file and then producing an ordered copy of  the data, the program would be a lot simpler to write.
But how do you order, or sort, your data? What happens to the original data in the file? Does it remain unsorted or is it sorted, too? Can the data even be sorted on disk and, if  so, does this make things easier, faster, or slower?
The top three scores are just the first three values in the sorted data, extracted to variables.
You were think about what would make the program easier to write and check the box that you think would have the greatest impact:
If there were no names in the file, only numbers.
If the scores came before the names in the file.
If you knew exactly how many lines are in the file.
Sorting is easier in memory If  you are writing a program that is going to deal with a lot of  data, you need to decide where you need to keep that data while the program works with it.
Keep the data in memory If  you want to sort a lot of  data, you will need to shuffle data around quite a lot.
Of  course, before you sort the data, you need to read it into memory, perhaps into a large number of  individual variables:
If  you have a very large amount of  data, the obvious place to put it is on disk.
Computers can store far more data on disk than they can in memory.
Disk storage is persistent: if  you yank the power cord, the computer doesn’t forget the information written on the disk.
But there is one real problem with manipulating data on disk: it can be very slow.
Data is much quicker to access and change if  it’s stored in the computer’s memory.
But, it’s not persistent: data in memory disappears when your program exits, or when the computer is switched off  (unless you remember to save it to a file, in which case it becomes persistent)
You are going to have a problem if you attempt to move all those lines of data into the computer‛s memory.
You need to move the lines of data in the results.txt file into memory before trying to sort it.
You have lots of lines of data, so you'll need lots of variables...
Do you have a big cupboard?!? Because that's a lot of jars...
But what if  there were four scores in the file? Or five? Even worse, what if  there were 10,000 scores? You’d soon run out of  variable names and (possibly) memory in your computer, not to mention the wear and tear on your fingers.
Sometimes, you need to deal with a whole bundle of data, all at once.
You can’t use a separate variable for each line of data Programming languages use variables to give you access to data in memory.
So if  you are going to store the data from the results.txt file in memory, it makes sense that you’ll need to use lots of  variables to access all the data, right?
Well, the As are done and that‛s the first volume of all the entries from the Encyclopedia Galactica stored in memory.
Each line in the file gets a variable of its own.
An array lets you manage a whole train of data So far, you’ve used variables to store only a single piece of  data.
But sometimes, you want to refer to a whole bunch of  data all at once.
For that, you need a new type of  variable: the array.
It’s designed to group a whole bunch of  data items together in one place and give them a name.
Each car in the train is called an array element and can store a single piece of  data.
If  you want to store a number in one element and a string in another, you can.
Even though an array contains a whole bunch of  data items, the array itself  is a single variable, which just so happens to contain a collection of  data.
Once your data is in an array, you can treat the array just like any other variable.
You might think that as you are storing all of  that data in an array, you still might need variables for each of  the items it stores.
An array is itself  just another variable, and you can give it its own variable name:
Python gives you arrays with lists Sometimes, different programming languages have different names for roughly the same thing.
For example, in Python most programmers think array when they are actually using a Python list.
For our purposes, think of  Python lists and arrays as the essentially same thing.
Arrays can be extended But what if  you need to add some extra information to an array? Like strings, arrays come with a bunch of  built-in methods.
Use the append() method to add an extra element onto the end of  the array:
This creates a two-item array and gives it the name my_words.
To look at individual items in the array, index the element required:
You can read individual pieces of  data from inside the array using an index, just like you read individual characters from inside a string.
And Python comes with a builtin technology called “array” for just that purpose.
However, as lists are very similar and much more flexible, we prefer to use them, so you don't need to worry about this distinction for now.
Rewrite your program so that each time you read a new score you append it to the end of an array called scores.
Then amend the code to print out the first 3 scores in the list.
Hint: To create an empty array of scores use scores = []
You were to rewrite the program so that each time you read a new score you append it to the end of an array called scores.
You were then to amend the code to print out the first 3 scores in the list.
With the data safely stored in the array, print out the first 3 array elements.
Test Drive The program should now store all of  the information from the file into the scores array before displaying just the top three scores.
Let’s run the program within IDLE and see what happens:
The code produces these results, which flash up on the scoreboard.
Sort the array before displaying the results The array is storing the scores in the order they were read from the file.
However, you still need to sort them so that the highest scores appear first.
You could sort the array by comparing each of  the elements with each of the other elements, and then swap any that are in the wrong order.
Aren‛t we doing all this to make the code simpler and easier to maintain? I wonder if the array has any builtin methods that might help...?
Arrays in Python have a whole host of  methods that make many tasks easier.
The boxes in the array are stored in a random order.
By closely examining the array of boxes, you can sort them by arranging the boxes in biggestto-smallest order.
These are some of  the methods that come built into every array.
See if  you can match up the descriptions with the method names.
Can you work out which two methods you need to employ to allow you to sort the data in the order that you need?
These are some of  the methods that come built into every array.
You were to match up the descriptions with the method names:
You were to work out which two methods you needed to employ to allow you to sort the data in the order that you needed.
You need to use reverse() after you sort() the data, because the default ordering used by sort() is lowest-to-highest, the opposite of what you need.
Sort the scores from highest to lowest You now need to add the two method calls into your code that will sort the array.
The lines need to go between the code that reads the data into the list and before the code that displays the first three elements:
Add in the missing code that sorts the data, highest-to-lowest.
At this point in the code, the array is in memory but it's not in the order you need.
These two method calls will sort the data into the required order.
Now that the array is sorted, the first three elements contain the high scores.
After the call to sort() and reverse(), the array is sorted in the order you need.
You were to add in the missing code that sorts the data, highest-to-lowest.
Geek Bits It was very simple to sort an array of data using just two lines of code.
But it turns out you can do even better than that if you use an option with the sort() method.
Test Drive Update your program in IDLE and run it.
The scores are in descending order, and the program is really not much longer than when it found just one score.
Using arrays allows us to solve a much harder problem with very little extra code.
And instead of  using lots of complex logic and lots of  variables, you have straightforward logic and only one variable: the scores array.
The additional code ensures the results are in the order you need.
And the winner is...? It’s time for the award ceremony.
The prizes are lined up and the scores are on the scoreboard.
You know the winning scores, but the winnng surfers remain a mystery...
How do you think you can remember the names and the scores for each surfer in the contest?
Once you've thought about this problem, turn over to Chapter 5 and see if you can resolve this issue.
You somehow forgot the surfer names With your rush to catch some waves before the light is gone, you forgot about the other piece of  data stored in the results.txt file: the name of  each surfer.
Without the names, you can’t possibly know which score goes with which name, so the scoreboard is only half-complete.
The trouble is, your array stores one data item in each element, not two.
Looks like you still have your work cut out for you.
There’ll be no catching waves until this issue is resolved.
Let’s look back at what you’ve learned in this chapter:
Arrays aren’t the only show in town when it comes to data.
In this chapter, you’ll associate values with names using a data.
All the world’s awash with data, so turn the page.
Who won the surfing contest? In the previous chapter, you worked out the top three scores, but they’re not much use without the names of  the surfers that achieved those scores.
There will no be surfing for you until you’ve finished the program.
Rewrite your current program to use two arrays: one to keep track of the scores, the other to keep track of the surfer names.
You were to rewrite your current program to use two arrays: one to keep track of the scores, the other to keep track of the surfer names.
As well as the scores array, you now need a names array, too.
Zack is only a novice surfer but, according to the results from your program, Zack has the highest score.
It looks like the association between the surfer names and their scores is somehow lost...
The two arrays are independent of  each other: one contains scores, the other names.
When the data is in the file, the surfer name and the scores are associated with each other because they appear on the same line.
However, once the split occurs and the data is in the arrays, the association is severed.
Sorting one array has no effect on the ordering of  the other.
No wonder your results are a little off the wall.
With the results.txt file saved to the same directory as your program, enter this code into IDLE and see what happens.
Remember to save your program, then press F5 to run it.
Associate the name with the score Using two arrays just won’t cut it.
You need some other data structure to hold your data in such a way that the association between the surfers’ name and their score is maintained.
Data Structure A standard method of organizing a collection of data items in your computer's memory.
You've already met one of the classic data structures: the array.
Match the data structure names on the left with their descriptions on the right.
Which one do you think you’ll need to use for the surfer data?
A variable that creates a chain of  data where one data item points to another data item, which itself  points to another data item, and another, and so on and so forth.
A variable that allows data to enter at one end of  a collection and leave at the other end, supporting a first-in, first-out mechanism.
Queue A variable that has exactly two columns and (potentially) many rows of  data.
A variable that contains a collection of  unique data items.
A variable that contains data arranged as a matrix of  multiple dimensions (but typically, only two)
You were asked to match the data structure names on the left with their descriptions on the right.
You were also to identify which one you thought you might need to use for the surfer data.
A variable that creates a chain of  data where one data item points to another data item, which itself  points to another data item, and another, and so on and so forth.
A variable that allows data to enter at one end of  a collection and leave at the other end, supporting a first-in, first-out mechanism.
Queue A variable that has exactly two columns and (potentially) many rows of  data.
A variable that contains a collection of  unique data items.
A variable that contains data arranged as a matrix of  multiple dimensions (but typically, only two)
Use a hash You need to use a data structure that maintains the association between the surfer score and the surfer name, which is exactly what a hash gives you.
There are lots of surfers with lots of  scores, and you need to maintain the association between the two pieces of  information.
Hashes go by different names in different programming languages: mapping, dictionary, associative array, and key-value list, to name a few.
In this book, we’ll stick to using the name hash.
This cuts down on the amount of typing and saves our poor fingers!
Associate a key with a value using a hash Start with an empty hash:
You add data to an existing hash by describing the association between the key and the value.
Here’s how to associate a surfers’ name with their score:
Note how the act of assigning a value to a key CREATES the hash entry (assuming it's not already there)
A new row of data is added to the hash.
Iterate hash data with for Let’s add some additional rows of  data to your hash:
Data in a hash is maintained in a seemingly random order, but don't worry about that for now.
Once you have a hash created, you can use the trusty for loop to iterate over each of  the rows:
Another hash method, called items(), returns each key-value pair in turn, and can be used with the for loop, too:
Whichever method you use to iterate over your hash’s data is up to you, because using items() or keys() produces the same output.
Take each of the keys in the hash in turn...
When referring to a value associated with a key, use square brackets (just like you did with array data)
Here's what would display on screen (assuming all the data in “results.txt” was available to the hash)
Code Magnets Rearrange the code magnets at the bottom of the page to complete the program shown below.
Rather than using two arrays, this program stores the results from the surfing contest in a hash:
Code Magnets Solution You were to rearrange the code magnets at the bottom of the page to complete the program shown below.
Rather than using two arrays, this program stores the results from the surfing contest in a hash:
You need to start with an empty hash, as opposed to an empty array.
Use a for loop to process the contents of the hash.
Q: Can I append data to a hash just like I did with an array? A: Yes, and no.
There’s no append() method for hashes like the one included with every array.
To add a new row of data to an existing hash, use code similar to that used in the solution, above.
Hashes do have their own set of methods, but append() is not one of them.
Q: Can I use anything as the key of a hash? A: No, you can’t.
The rules Python applies here can be complex (as they can be in other programming languages, too)
The best advice we can give you is to stick with numbers and strings as keys.
Trust us: this isn’t as restrictive as it first sounds and is, by far, the best/easiest strategy to follow.
Test Drive Take the code from the previous exercise and use it to create a new file in IDLE.
Great! Your program now uses a data structure that allows you to associate two related pieces of data together.
The data isn't sorted Your program now associates surfers and their scores, but it displays the data from the hash in some sort of  random ordering.
You need to somehow sort the data in the hash to find out who actually won the contest.
In Python, hashes are optimized for speedy insertions and even speedier look-ups (searches)
As a consequence, the good folks that created Python were less interested in providing a method to sort a hash, so they didn’t bother.
Here’s how to use the sorted() function with your hash:
You'll find similar design and implementation decisions in lots of different programming languages.
That’s one small change to one line at the bottom of  your program.
Now that you are sorting the keys of  the hash (which represent the surfer’s scores), it should be clear why the scores were used as the key when adding data into the hash: you need to sort the scores, not the surfer names, so the scores need to be on the left side of  the hash (because that’s what the built-in sorted() function works with)
Test Drive With the one-line change applied, save your program and press F5 to run it again.
The scores are associated with the surfer's names and they are now sorted, too!
When data gets complex Hot on the heels of  your success with the local surfing club, you’ve just been contacted by the Regional Surfing Association (RSA) and they want you to write a new program for them! RSA’s offering a brand-new, state-of-the-art, epoxy resin surf  board as payment...
You’ve been wanting to try out an epoxy board for ages.
The trouble is, they’re sooooo expensive and you’re a poor surfer.
So what does RSA’s data look like? Currently, RSA’s data is stored in a text file using a proprietary data format.
For each surfer, there’s six pieces of  data recorded on each line in the file.
RSA's data is stored in each line, with a semicolon separating each piece of data.
Each data item is displayed on its own line, which makes it really easy to read (unlike the packed data file)
Hints: If you pass a string parameter to the split() method, the data is cut where the string parameter occurs, as opposed to the cut occurring at a space character (which is split()'s default behavior)
Grab your pencil and write some code to process this line and display it on screen like this:
You were to grab your pencil and write some code to process this line and display it on screen like this:
Use multipleassignment to assign the split data from “line” to “s”
Cut the line of data every time the split() method sees a semicolon.
Test Drive As always, you need to enter this code into IDLE before you run it.
Then, save your program and take it for a spin by pressing F5
Hey, this data is now pretty easy to read, eh?
But RSA wants to be able to display the data for any surfer, not just wave-boy’s.
There are really only two choices for how you return data from this function.
But which? Returning a string requires the calling code to further process the data to extract the information it needs, which (although possible) gets messy, because the calling code is then required to cut up the string using split()
This is something best left to the function, because it hides the complexity of  manipulating the data from the calling code.
Returning a hash allows the calling code to simply pick out the information it needs without too much fuss and without any further processing.
Return a hash from the function to keep the calling code simple.
But now you have to work with all the lines of  data in the file.
Your program has to make the data available quickly so that a request to display the details of  a particular surfer can be performed as soon as possible.
You already know enough to write a function that takes the surfer ID as a parameter, searches the file one line at a time for a matching ID, and then returns the found data to the caller:
Code Magnets Rearrange the code magnets to complete the function required.
Process the data file one line at a time, creating a hash from the line on each iteration.
Compare the parameter against the ID read from the file.
If the IDs match, return the hash to the caller.
If no match is found, return an empty hash to the caller.
Code Magnets Solution You were to rearrange the code magnets to complete the function required.
Process the data file one line at a time, creating a hash from the line on each iteration.
Compare the parameter against the ID read from the file.
If the IDs match, return the hash to the caller.
If no match is found, return an empty hash to the caller.
Open the file so that you can read the data.
Check if the ID supplied as a parameter is the same as the one read from the file.
Download surfing_data.csv from the Head First Programming website before continuing.
Be sure to put the file in the same directory/folder as your code.
Type this tester code, together with your function, into IDLE.
Be sure to put the function near the top of you file, so that this tester code appears after it.
Make sure the tester code and your function are entered into IDLE and saved to a file as a new program.
Enter an existing surfer ID and the program displays the details.
Enter a nonexistent surfer ID and the program displays nothing (as there's nothing to display)
Here's your new board! The RSA folks are delighted with your work.
The RSA folks can display the data from their tightly packed data file in a way that makes it easy for them to read and work with.
Your use of  a hash within the function was an inspired choice.
The calling code only needs to be aware that a hash is being returned from the function to work with it effectively.
And, as you’ve seen, returning a data structure (like a hash) is as easy as returning any other variable from a function.
Word of your programming skills is spreading far and wide.
Look at how quickly it pulls up each surfer's data.
I think the guys over at TVN might want to take a look at this...
Head First TVN is an up-and-coming sports network specializing in everything and anything to do with water.
They are covering the National Surfing Championship and want their TV presenters to be able to use your program to access each surfer’s details in much the same way that RSA did.
There’s just one small kink in their plans: TVN has all their data in a database system, not in a file.
Which part of your program is most likely to change if you have to get the surfer data from a database, as opposed to a file?
The code remains the same; it's the function that changes Your program expects the find_details() function to return a hash representing the surfer’s details.
Rather than the function searching the file for the data, it needs to search the TVN database, convert what the database provides to a hash, and then return the hash to the calling code.
All you need to know is which database system TVN is using and how to access it from your function.
I asked our technical people and they told me we use SQLite3...
They also gave me some code for you to amend...
Import the standard SQLite3 library and connect to the data in the database file (which you can download from this book's website)
Grab all the surfer data from the database, assigning the data to a variable called “rows”
Print out some of the data (if we have a match)
It is possible to improve the efficiency and power of this code i f you know a.
Rewrite your function to retrieve the data it needs from the TVN database.
Use the ready bake code as provided by TVN’s technical people as a basis for your code.
Bear in mind that your program expects the data in the hash returned from the find_details() function to be a collection of strings.
You were to rewrite your function to retrieve the data it needs from the TVN database.
You were to use the ready bake code as provided by TVN’s technical people.
You were to bear in mind that your program expects the data in the hash returned from the find_details() function to be a collection of strings.
Grab all the surfer data from the database, as opposed to the file.
Test Drive Change your program in IDLE to use the new version of  the function (which now talks to TVN’s database)
Save your program under a new name and press F5 to run it.
Now, as well as working with data in files, you can extract data from a database system.
Send off that code to TVN, and sit back and wait for the money to roll in...
Download surfersDB.sdb from the Head First Programming website before running this test drive.
My guys are happy and so am I, Who do I make the check out to?
TVN's data is on the money! With the surfing data now displayed directly from the TVN database, the sports writers no longer need to worry about all those tattered and torn competition entry forms.
The data is right there on screen when they need it.
Let’s look back at what you’ve learned in this chapter:
I know he said he knew a better way to do things, but this wasn‛t what I had in mind.
The code that you write will make its way into many programs.
And, although sharing is good, you need to be careful.
You might want to use one function in all your programs and, over time, that.
He was shocked when he saw how old the sales systems were.
A point-of-sale (POS) system is just a computer program that works like a cash register.
The boss doesn’t want to replace all of  the cash registers immediately.
He wants to begin with a trial system in the coffee bar.
Let’s see what the coffee bar POS needs to do.
I want to start by replacing the cash registers with new POS systems.
The new system will run on a PC and accept credit card payments.
It would be nice if the systems you produce were modular in design.
You'll get to that AFTER you've spent some time understanding what's required.
The program needs to create a transaction file The POS program will record credit card sales in a file called transactions.txt.
At the end of  each day, this file is sent to the bank and any money is transferred from the credit card account into the health club’s bank account.
The bank has sent an example version of  the file for you to see what sort of  data you will need to generate:
There’s a line of  text (or record )  for each item sold.
The rest of  the record is a description of  the item being sold.
How would you create a string of characters in the correct format for the record? Which parts of the record will be the hardest to create?
Use strings to format strings Many programs need to create strings with particular pieces of  data at particular places, so most computer languages try to make life easier for you by letting you use string formats.
The best way to understand string formats is with an example.
The number has extra spaces added at the front, to make sure it takes up the required 5 characters.
When Python sees a string followed by a percentage (%) symbol, it knows that it needs to consider the string as a string format.
The values that follow the % operator are going to be inserted into the formatted string in the order specified, one value at a time.
Wherever Python finds a % inside the string, it knows to insert a value.
As you are not specifying a length here, the string is inserted as is.
These are just two examples of how to format values in a string.
Pad the string out to 20 characters, then display a newline character.
Look back at the records you need to create for the transaction file.
Each line will need to end with a newline character.
If you have the credit card number, price, and description in variables called credit_card, price, and description, write down what you would use for the format string:
You were to match each format string to what it does.
Pad the string out to 20 characters, then display a newline character.
You were to look back at the records you need to create for the transaction file and write down what you would use for the format string:
If you have just one value to format, you don't need to surround it with parentheses.
Hexadecimal numbers are used for things like colors on the Web.
You need a newline character at the end of each line.
Don't worry if your answer doesn't look EXACTLY like this.
Try out your answer in the Python Shell to check that it works.
Multiplying by 100 and displaying it as a whole number effectively removes the decimal point from the price.
Code Magnets Now that you know how to format the records in the transactions.txt file, it is time to write the rest of the coffee bar POS program.
Complete the code below by arranging the code magnets in the correct place:
The loop will keep running while the “running” variable has the value True.
Code Magnets Solution Now that we know how to format the records in the transactions.txt file, it is time to write the rest of the coffee bar POS program.
You were to complete the code below by arranging the code magnets:
The user enters a menu option number to make a sale.
This will be True if the user selects the LAST option on the menu, which is “Quit.”
Test Drive The machine has been set up in the coffee bar just in time for the boss to come in for his morning latte, so let’s run the code and see what he thinks.
The program displays a list of  items for sale and when you choose one and provide a credit card number, it adds the sale into a file called transactions.txt.
This is the same file that the POS system in the gym uses.
We‛ll try it for a couple of weeks here in the coffee bar and see how it goes.
The boss agrees to try out the system in the coffee bar, and he even agrees to extend the trial and let your friend create another POS for the gym, based on your code.
If they continue like this, you will win the contract to replace all of the systems at the health club!
The newline character makes sure the sales are recorded on separate lines.
You can't see then in the file, but they are there.
Head First: Format String, it’s a pleasure to meet you.
Head First: You’re not just used in Python, are you?
I’m really used in lots of programming languages, like C, C#, and Java.
Format String: Well, I don’t like to blow my own bugle, but I am kind of  useful.
Everywhere you need to generate formatted text, I can make life a lot easier for you.
If  you need to send data to another system, you’ll probably need me.
If  you want to display an error message in a specific format, I’m good at that, too.
Head First: I hate to say this, it seems so rude, but isn’t it possible to do everything you do with just normal string operations?
Yes, you can do pretty much everything I do by writing.
Format String: Two reasons: first, you might have to create a lot of  code, and second, I’m a little more dynamic.
Lots of  times, programmers prefer to use data instead of  chunks of  code, because it means they can store me away as configuration.
A: A good reference book (we present our favorite in the appendix) will contain all you need to know and there’s also lots of material on-line in the official Python docs.
Q: Are there special rules for what’s acceptable as a credit card number?
But let’s not get bogged down in those type of details at this stage.
Concentrate on the save_transaction() function and how the code interacts with it.
Q: Why does the code generate the menu in such a complex way?
A: If you study the menu generation code, you will see that when you add more items and prices, the rest of the code doesn’t need to change to support the new items.The menu is generated automatically.
A late night email ruins your day A few days after the demo, you get a late night email from the friend who wrote the second program (based on your code):
Even though your code used to work, it has suddenly started to go wrong.
Meanwhile, your friend’s program, which is really just a modified copy of  your program, is working perfectly.
Looks like you better get to the health club bright and early tomorrow morning and see what’s happened.
The entire day’s sales have been rejected by the bank for two reasons:
The bank was really worried about this one because they think someone must have hacked into the system to generate the messed-up credit card numbers.
One of  the recorded sales was for a donut that cost over $50,000!
And what makes it worse, this was the first time we sent the transaction file to our new bank! We only switched over the day before yesterday so that I could secure a loan for the new weight room!
Let’s take a look at the file that the bank rejected.
Only the sales from your program were rejected The transactions.txt file that was sent to the bank contains all of  the day’s sales from both your POS program in the coffee bar and your friend’s POS program in the gym.
Is there a difference between them that might explain why one was accepted and the other was rejected? Think about recent events.
This record is from the coffee bar and was REJECTED by the bank.
The new bank uses a new format Your friend tells you that just after taking a copy of  your code, the word came down that the health club was switching banks.
Without telling you, your friend found out the new bank format and updated his code in the gym program.
That means that the POS program in the gym is generating records in the new bank format.
The bank accepted the transactions from the gym because they were in the correct format.
Your coffee bar program still uses the old format Your program in the coffee bar was never updated after the health club switched banks.
It’s still doing what it always did: it’s still creating files in the old format.
That old format wrote out the price and the credit card the other way round, which meant when your program wrote out a record like this:
So it’s not that somebody broke into your program and changed it.
Your code never picked up the change that was made to the gym program in order to support the new format.
What should you do to fix it? What shouldn’t you do?
Don’t just update your copy The code in the gym program is a copy of  your code in the coffee bar.
Once you have two separate copies of  a piece of  code, then changes need to be applied in two places.
Smart programmers write modular code The secret is to break your programs into smaller pieces of  code called modules.
What’s a module? It’s just a file containing code the computer can run.
Every Python program you’ve written so far has been a single module.
But most programs you’ll write will probably be split across many, many modules.
And writing modular code is important because modules can be shared between programs.
If  you separate out the code that saves the transactions to a file and store it in a new module called transactions.py, that module can be shared by both programs.
If  you then ever need to change the code in transactions.py, both programs will pick up the changes automatically.
So how do you create a module...? Remember: a module is just a file containing some Python code.
So, take the code that you want to share out of  the gym_pos.py file:
When you were using library code you needed to import it.
So, instead of  using library code from the Standard Python Library, you’re really just using library code that you’ve written yourself.
You can add this line to the top of  each of  your programs:
With this line, you are telling Python that you want to run the code in the transactions.py file and this allows you to access whatever code the module contains as if  it is just part of  your program.
Here is the code to the one used in the coffee bar (that you wrote):
The other program is very similar (which your friend created for use in the gym):
Using a pencil, modify the two programs so that they use the transactions.py module.
Then write what you think should go into the transactions.py module here:
Here is the code to the one used in the coffee bar (that you wrote):
Using a pencil, you were asked modify the two programs so that they use the transactions.py module.
You were then asked to write what you think should go into the transactions.py module here:
Make sure you use the code that displays the PRICE first.
The other program is very similar (which your friend created for use in the gym):
Note the extra padding due to the “%16s” format specifier.
Both of  the records, created by each of  the POS programs, are now correctly formatted.
That’s because both programs are sharing the same piece of  code to save the transactions.
When you open up the transactions.txt file, you see this inside:
Phew! I just heard from the bank that transactions from both of the POS systems went through smoothly.
Q: So modules are sort of like containers for functions, right?
A: It’s true that most modules are used to store a collection of related functions.
However, it is perfectly acceptable to put any code in a module, which is then executed whenever the module is imported into your program.
Q: So when I use import, it’s as if I typed the code in the module directly into my program?
A: Yes, that’s a good way to think about it.
Using a shared module saves you from having to type (or cut’n’paste) all that code yourself.
Q: Do I have to use modules? A: No, but the benefit of putting shareable code into a module starts to pay off the second you use that module in another program.
The health club has a new requirement The health club boss has a grand plan to get more customers into the health club.
Ooh, I think we need to discount the prices in the coffee bar for the next month.
There‛s nothing like relaxing with a latte after a tough workout, especially if the price is right.
Our customers like to treat themselves, so I want to make this easy for them.
The boss wants to cut 10% off  all the prices in the coffee bar.
If  it’s successful, he may want to do the same thing in other places, such as the gym.
Instead of  just amending the code in the coffee_pos.py file, you need to create a new module called promotion.py that will calculate a discounted price.
You need to change the coffee bar POS program to apply the 10% discount to everything that’s sold.
Complete the code in the above function so that it returns 90% of the price it is given.
Modify it so that it uses the new module to cut the price of everything that’s sold.
Start by creating a new module called promotion.py containing one function:
Complete the code in the above function so that it returns 90% of the price it is given.
Modify it so that it uses the new module to cut the price of everything that’s sold.
You needed to change the coffee bar POS program to apply the 10% discount to everything that’s sold.
Start by creating a new module called promotion.py containing one function:
What about in the transactions.txt file? Will the latte still cost $2.20?
That‛s fantastic! You made the change so quickly, just in time for the doors to open.
Although you’ve heard about this extra discount late in the day, at least most of  the work’s already been done for you.
You just need to use the Python module the Starbuzz CEO attached to his email, and your program will be set up to apply both discounts.
If we ever change the w ay the discount scheme.
Both kinds of discount? It seems that there was something that the boss forgot to tell you.
As well as deciding to cut the health club’s own prices, he also got in touch with his old friend, the CEO of  Starbuzz, and arranged for a special discount for everyone who shows the cashier a Starbuzz Discount Card.
The Starbuzz code The attachment from Starbuzz was a file called starbuzz.py.
This function returns a price that's 5% lower than the price it was given.
The first few lines begin with # characters; these are comments.
Comments are just notes added by a programmer that are intended to be read by other programmers.
And if  somebody presents a Starbuzz Discount Card, it will also have to apply the 5% Starbuzz discount.
You need to change the code so that it uses both of the discount() functions.
Lines that start with # are comments; Python will ignore them.
The two discount functions have the same name Here is the promotion.py module you just created:
So what happens when you try to use them? If  Python sees a line of  code like this:
This is one of  the problems of  using shared code.
Sometimes, there’s a function in one module that has the same name as a function in another module.
When this happens, the last function imported is the one used, which has the effect of  overloading any existing function that has the same name.
Fully Qualified Names (FQNs) prevent your programs from getting confused Imagine if  you lived in a world where people had first names only:
If  you use a first name with a surname, things are a lot less confusing.
If  you have two modules containing functions with the same name, the computer will get confused.
But if  you fully qualify the function name, by prefixing it with the module name, the computer will know exactly what you mean:
If  you are going to use Fully Qualified Names (FQNs) from a module, then you will also need to change the way you import the code:
Now you can fix the code to use both discounts.
Write a new version of coffee_pos.py that, after choosing a menu option, will ask if the customer has a Starbuzz Discount Card.
If the answer is “Y”, apply both the Starbuzz and the promotion discount.
You were asked to write a new version of coffee_pos.py that, after choosing an menu option, will ask if the customer has a Starbuzz Discount Card.
If the answer is “Y”, apply both the Starbuzz and the promotion discount.
You need to use this kind of import for “promotion.py” and “starbuzz.py”, because you are going to qualify the function names with the module names.
By importing the transactions module like this, you can call the functions without the module name.
If someone has a Starbuzz Discount Card, you need to apply the second Starbuzz discount.
Test Drive Let’s try running the new program and buy a $1.20 muffin without a discount card.
But what if  you try to buy a $2.20 latte using a Starbuzz card?
The code works! With the Starbuzz card, it applies two discounts.
Once word gets out that there are double-discounts available in the coffee bar, the health club gets packed with customers.
We‛ve never been so busy! The weight room, the gym, the steam baths.
The whole place is full of customers! I like the way you write code.
I want you to upgrade every system in the place!
Thanks to writing modular code, you got the contract to replace all the health club systems.
The more code you write in modules, the greater the chance that you’ll be able to reuse it elsewhere.
Breaking your code into modules turns good programs into great programs.
Q: I don’t get it; why do I need to use a FQN again?
A: You use a Fully Qualified Name (or FQN) when you need to distinguish between two functions from different modules that have the same name.
With the health club systems, the discount() function existed within your module and within the one supplied by Starbuzz.
In order to keep things straight, you had to use a FQN.
Q: So if I hadn’t used a FQN, the wrong discount is applied to the purchase?
Q: But if I hadn’t used a FQN, how would I know which discount was used?
It’s hard to predict what would happen, because it all depends on which order the code imports its modules.
Q: So, all I need to do is keep an eye on the order when I import modules and everything will be OK?
Use a FQN so that you are always in control.
Let’s look back at what you’ve learned in this chapter:
You see, sometimes it‛s just not enough to build it.
Your coding skills are great and getting better all the time.
It’s just a shame your programs are not that nice to look at.
But, don’t fret; learning a trick or two will have your code all graphical in no time.
Head First TVN now produces game shows It’s more than just sports at Head First TVN, as the station has entered the lucrative world of  live game show broadcasting.
Their flagship show, Who Wants to Win a Swivel Chair, is attracting viewing figures in the millions...
You’ve been approached by their stressed-out (but incredibly smooth) game show host to help with a program he needs.
I can‛t keep track of the score and ask the questions and sound the buzzer...
You’ve had a few conversations with the host and determined a list of  program requirements:
Based on the key pressed, an appropriate sound effect needs to play.
The program needs to remember how many answers were correct and how many were wrong.
Then the program will display the number of  right, wrong, and asked questions.
Use the space provided below to write the pseudo-code for the program you’ve been asked to write for TVN:
You were asked to use the space provided below to write the pseudo-code for the program you’ve been asked to write for TVN:
You need to remember how many questions were asked, how many were correct, and how many were wrong.
Don’t worry if your answer doesn’t look EXACTLY like this.
Ask the host at the end of each loop what he wants to do next.
Frank: I think sound is going to be a problem.
Seriously, though, how hard can it be to play a sound from a program?
Joe: Playing a sound is not the problem; getting it to work on multiple platforms can be.
For instance, what works on Windows might not work on Mac OS X or Linux.
Frank: Good for you, but the rest of  us want to play, too, and we don’t want to have to...
Jim: Typical: have a swipe at Windows when something doesn’t work on your non-Windows computer.
We need to stop bickering and come up with a solution that lets us play sounds and works on Windows, Mac OS X, and Linux.
In fact, very few programming languages support sound in a cross-platform way.
Joe: Not so fast, Jim! I’m pretty sure pygame can help here.
I can’t go home early, but I can play games?
We can use pygame to play our sounds in Python.
Granted, pygame’s a set of  gaming libraries for Python, but all we need to use is the bit that handles playing sounds.
The pygame technology is an example of  what’s known as a third-party library: that’s extra functionality that can be added into your Python environment, but which isn’t part of  the standard library.
As installing pygame tends to be a very platform-specific thing, we’ve uploaded a set of  instructions onto the Head First Programming website for you to follow.
STOP! Don’t proceed with the rest of this chapter until you’ve installed pygame for Python 3 on your computer.
Take a look at this handy pygame program, which shows how to play four sounds one after another:
Just like with other libraries, you import the library you want to use.
The “get_busy()” method checks to see if the sound is still playing.
To run this program on your computer, you obviously need pygame installed and you need to download the sound files for this chapter from the Head First Programming website.
Be sure to put the sound files in the same directory/folder as your program.
Now, test the pygame program in IDLE to see if  things are working correctly:
Obviously, we can't show you sound in this book but trust us, this program works as billed.
In fact, DON’T trust us: just be sure to run the program yourself.
Q: So pygame is a library created by some programmer other than the Python folks?
It wasn’t created by you or the people that bring you Python.
Q: And it’s just given away for free? A: Yes.
Q: Are there other libraries like pygame that can be added into my Python environment?
To see the current list, follow the Package Index link from the main Python website.
Python refers to third-party libraries as “packages” and, as you’ll see, there are packages available for every conceivable purpose, not just playing sounds or developing games (as is the case with pygame)
I know that WAV is one of the standards for encoding sound, but is it the best format to use?
A: That depends on who you ask! We are using WAV files because they are used in lots of places and are well-supported on most operating systems.
There are lots of file formats for sound and many of them claim to be “better” than WAV, but for what we are doing here, WAV is perfect.
Q: What’s the deal with the wait_ finish() function in the Ready Bake Code?  I just don’t get why it’s there.
A: It’s a function that waits for the sound to finish playing before continuing with the rest of the program.
A: Playing with pygame in this way, although fun, masks a problem that can surface when working with sound (in any programming language)
It turns out that, when asked to play a sound, the main chip inside your computer (the CPU) doesn’t even bother trying.
Instead, there’s another, smaller chip in your computer that is specifically designed to play sounds and it is to this chip that your main chip hands the sound file to and says: “play this for me.” The main chip then goes back to running your code, sees another request to play a sound, doesn’t bother, hands the new sound file off to the sound chip, and repeats until your program ends.
The sound chip—and this is the important part—is designed to operate in parallel with your main chip.
While your main chip is doing something else, the sound chip is busy playing any sounds it has been asked to play.
And—here’s the rub—if the sound chip has been asked to play more than one sound, it attempts to play each sound at the same time.
Q: So the wait_finish() function is like an artificial delay after each sound?
A: No, not really a delay, more like a pause designed to let the sound effect play fully before trying to play anything else.
The wait_finish() function forces your sound chip to finish with one sound before starting another.
What happens is that when a sound is played, the play() method passes back the channel (or track) number that the sound is playing on.
You can then use the channel number to ask pygame to wait for the channel to finish playing a sound before continuing, which is what the code in the Test Drive on the previous page does.
Q: And if I don’t use wait_finish(), what happens then?
A: All the sounds attempt to play at the same time and it sounds like a jumble of sounds as opposed to one sound playing, then another, then another, and so on.
Now that you know how to generate a sound using pygame, it's time to write the code for TVN’s program.
Now that you know how to generate a sound using pygame, it's time to write the code for TVN’s program.
You were to base your program on the pseudo-code you created earlier.
You need to import pygame’s “mixer” module in order to play sounds.
Create a mixer object and initialize the pygame sound system.
Load each of the required sounds into its own variable.
Make sure the counts that you’ll maintain are set to a reasonable starting value.
It would be OK to move these three lines of code to the top of the program, just so long as they have starting values before the while loop starts.
This is what you'll ask the question master each time.
If the answer is correct, increment the counters and then play the appropriate sound.
If the answer is incorrect, increment the counters and play the sound effect.
At the end of the program, display a summary of the counter values.
Test Drive Type your code into IDLE and save it under the name gameshow.py.
With the Head First Programming sounds stored in the same directory as your program, press F5 to give it a spin.
We can’t show these sounds either, so go ahead and run the program to hear it working for yourself.
Thank you so much for giving me this opportunity to discuss my situation with you.
Not a lot of  people know this, but my life as pygame is hard.
Not only do I have to help out regular folks with their programming problems, but there’s all those gamers, too.
But, don’t you feel good that all those programmers out there in the Python community are using you?
Head First: You’ve made a lot of  programmers’ lives easier.
There’s lots of  great code written that would not have been written if  it weren’t for you.
I do all the heavy lifting while everyone else is off  doing other things.
Head First: Ah, come on, your life’s not that bad, is it?
Head First: Surely you know what people are saying about you?
Head First: Yeah, there’s lots of  talk, but it’s all good.
You are well-tested, well-written, and your documentation is first rate.
Your support for all the major releases of  Python is right on the money, too, and you work on Mac OS X, Windows, and Linux.
We’ve heard so many great things about you that we are recommending you to all our friends.
But others just talk about the great things their applications can now do thanks to you, pygame.
Do you have time for a quick game? There’s this new Dungeons and Dragons that I’ve been dying to try...
The program works, but it’s not going to win a Visual Design Award any time soon.
And its use of  key presses makes it a little hard to use, too.
So, its looks could be improved and its usability could be better.
It sounds like you need a graphical user interface, or GUI.
You need to design the look of your GUI for TVN.
Draw what you think your GUI should look like in the space provided below.
Hint: Take some time to think about other GUI programs that you have used.
Think about a common interface element that you could use (and draw) here.
You needed to design the look of the GUI for TVN.
You were asked to draw what you think your GUI should look like in the space provided below.
You need two buttons for each of your program's events.
The host will quit the program by closing the window.
All those lovely event handlers, mouse clicks, widgets, frames, scroll bars, double clicks and—my personal favorite—the mouseover.
Frank: Since when have you been an expert on GUIs?
Joe: Well, of  course, everyone knows how to use a GUI, but we are talking about creating a GUI in code.
Frank: It turns out that writing code for a GUI application is...
If  you know how to program, you know how to create a GUI.
It’s just a matter of  selecting the correct GUI library, learning how to use it, then writing the code.
Joe: So we’ll head off  to the Python Package Index and grab us some GUI libraries, eh?
Python comes with a GUI library as standard, called tkinter.
The “tk” bit refers to the fact that Python’s standard GUI library is built on top of  the very popular Tk technology.
Jim: So we’re going to build a GUI interface in Python running on Tk using tkinter?
Frank: The big thing with creating GUIs is understanding the event loop.
Joe: Ah, that’s just looping code that reacts when certain things happen, isn’t it? It’s just like the while loop in the non-GUI version of  TVN’s program.
In that code, that loop is an event loop, isn’t it?
Although the GUI event loop tends to be extra capable and can do lots more than the simple while loop.
Let’s get to it, since we already know how to program...
Event loops watch and wait for events, calling a piece of  code each time an event occurs.
The program then calls some code before waiting again for another key-press event from the host.
To implement this in code, you used a while loop:
In tkinker, you don’t need to write a while loop like you did for your non-GUI program.
To add a button to your application, use code like this, being sure to put these two lines of  code before the call to mainloop():
The pack() method links the newly created button to the existing window.
Add a button to the window and give it some text and a width value.
If  you provide a value for the side parameter to pack(), you can control where in the window the button appears.
It is also possible to add some padding around buttons (to make them look nicer in your window):
Based on what you now know about tkinter windows and buttons, write the code to display the GUI that you need for the TVN program:
The value of “side” controls where the button is packed.
Based on what you now know about tkinter windows and buttons, you were to write the code to display the GUI that you need for the TVN program:
Create the window as in the earlier example, but change the window title and geometry values.
Pack one button on the left, the other on the right, and give them some padding.
Test Drive Let’s take your first GUI program for a test drive.
With your tkinter code entered into IDLE, save it as tvn.pyw and press F5 to see how it looks:
There’s a convention in the Python world that suggests naming tkinter programs with a “.pyw” extension, as opposed to the usual “.py”
This helps your operating system run your tkinter programs properly, especially on Windows.Your code in IDLE.
The graphical user interface might be ready, but the program is not complete.
Q: So all tkinter gives me is the ability to draw the GUI? A: Well, yes, but there’s quite a lot of functionality wrapped up in that small number of lines of tkinter code.
A: The pack() method adopts a best-guess approach when it comes to packing your GUI widgets within your GUI application window.
This usually works out, and when it doesn’t, pack()’s parameters give you some control over the situation.
Q: That’s all that left, right, top, and bottom stuff, isn’t it?
A: Yes, as well as the padx and pady parameters.
They help with widget positioning, too, by putting additonal space (or padding) around your buttons.
Q: OK, I get that, but how come nothing happens when I click on my buttons?
Connect code to your button events When you click on a button, the tkinter event loop captures the event and looks for something to do with it.
The trouble is, as your program stands, you have not detailed what that something to do is.
Your buttons have no code associated with them, so the events occur but go unnoticed.
To connect code to buttons, put the code you want to run in its own function and then name the function in the button code by providing a command parameter:
Create a function to contain the code that runs when the event occurs.
Identify the function to run when the button is clicked.
The code from the nongraphical version of the TVN program is on this and the facing page.
Take your pencil and mark the parts of the code that you would extract and turn into functions so that you can then connect the functions to the buttons in your GUI.
Mark the other parts of this program that also need to be added to the GUI version.
Note: Don’t worry about prompting the host to ask a question in the GUI.
But do worry about maintaining a count of the number of questions answered correctly and incorrectly.
How many functions do you think you need? Write their names here:
The nature of the interface provided by the GUI means that some of the program’s requirements have changed.
With the code you need identified, take the time to update your GUI application with the new functions and whatever other code you’ve extracted from the non-GUI program.
Produce a new program that is a combination of your existing GUI code and the extracted code from this program.
You were to take your pencil and mark the parts of the code on the previous (and facing) page to identify the code you would extract and turn into functions so that you can then connect the functions to the buttons in your GUI.
You were also to mark the other parts of this program that also need to be added to the GUI version:
You were to think about how many functions you might need.
You need a function to play a sound when the answer is correct...
With the code you need identified, you were to take the time to update your GUI application with the new functions and whatever other code you’ve extracted from the non-GUI program.
You were asked to produce a new program that is a combination of your existing GUI code and the extracted code from this program.
The GUI program’s now ready for a screentest Here’s what your GUI program should look like now:
Python’s “global” keyword lets you adjust the value associated with a variable created outside the function.
Test Drive With the code you need extracted from the nongraphical application and added to your GUI program, press F5 in IDLE to see (and hear) if  things are working any better now:
It not only looks good, but now it sounds good, too!
Every time you click on a button, the appropriate sound effect is heard.
Q: So “event handlers” in tkinter are just functions? A: Yes, as we said earlier in this chapter: it’s all just code.
And by putting the code you want to run in a function, it’s easy to reference it using the command parameter associated with each button.
Your user clicks the button to run the code in your function.
I always thought building a GUI was only for advanced programmers?
Technologies like tkinter allow every programmer to build great-looking GUIs without too much fuss.
It’s a case of tkinter concentrating on the GUI, while you concentrate on your code.
Q: And is it the case that, if I want to add other things to my GUI program, it’s done in a similar way?
A: Yes, all you have to do is write the code.
Q: And I connect my code up to my other things using something like the command parameter that works with buttons?
The mechanism for the other interface elements (or widgets, for short) might be a little different, but the concept is the same.
Once you can work with one, the rest are a lot easier to get your head around.
The results appeared in the Python Shell, not in the GUI, so the host missed seeing them.
When you point this out to him, he’s less than impressed and makes it clear that he expects the results to appear in the GUI.
You need some way to display messages in the GUI.
A widget that allows you to select one item from a large list.
The interface elements that you add to a GUI are known as widgets.
Look at the names of  some other widgets below and see if  you can match them with the correct description.
A widget that displays a string message in a window.
A widget that provides a way for large and small amounts of  text to be entered.
A list of  command options that is attached to the top of  a window.
Menu The combination of  a drop-down list and a text box.
A separate window that pops up to request additional information from the user.
Which widget do you think you need to use in your program? Write your answer here.
A widget that allows you to select one item from a large list.
The interface elements that you add to a GUI are known as widgets.
You were to look at the names of  some other widgets below and see if  you could match them with the correct description.
A widget that displays a string message in a window.
A widget that provides a way for large and small amounts of  text to be entered.
A list of  command options that is attached to the top of  a window.
Menu The combination of  a drop-down list and a text box.
A separate window that pops up to request additional information from the user.
You were asked to identify which widget you would use in your program.
You need to add a label to your GUI in order to display the results.
Label it When it comes to adding a label to your GUI, use the tkinter Label widget.
You create it in code not unlike the way you create a button.
Here’s the code to add a label to an existing GUI application.
Create a new label, attach it to the main window, give it some text, and adjust the label's height.
If you assign a special tkinter variable to this parameter, the label will change whenever the value of  the variable changes, automatically:
Put the label code before the code for the buttons and the GUI will then look like this.
Use the “set()” method to adjust the value of the “IntVar”, and the GUI updates, as if by magic.
Based on what you now know about adding a label to a GUI, rework your GUI code so that it uses two labels.
One should display the number of correct answers and the other should display the number of wrong answers.
We’ve left plenty of room for you to write in all the code that your program now needs.
Based on what you now know about adding a label to a GUI, you were asked to rework your GUI code so that it uses two labels.
One should display the number of correct answers and the other should display the number of wrong answers.
We left plenty of room for you to write in all the code that your program now needs.
Create the two event handlers that set the IntVar and play the appropriate sound.
Create two IntVars: one to count the number of correct answers and another to count the number of wrong answers.
Display a friendly message that tells the host what to do.
Create two labels to hold each counter and connect the labels to the relevant IntVars.
Create each of the buttons and connect them to their relevant event handler.
Test Drive With your newly amended code entered into IDLE, press F5 to see and hear the GUI in all its glory:
The labels are displaying running totals with each mouse click (event)
That‛s just perfect! The new version of the program works with my touchscreen and is so easy to use! I love it! Oh, and before I forget, here are your two front-row tickets for the Grand Final.
One final decision: who are you going to take with you?
Let’s look back at what you’ve learned in this chapter:
So, you see, if we replace all our command-line data entry systems with GUIs, we can increase efficiency enough for me to afford these totally blinged-out alloys for my Hummer.
Almost all GUI applications need to read user data, and choosing the right widgets can.
And, of course, making the right choice can make all.
It’s time to take your GUI program to the next level.
Head-Ex needs a new delivery system Head-Ex Deliveries is a small delivery company that’s looking to expand.
They know that delivery companies rely on their computer systems, so they want to have a whole new system to book deliveries around the country.
The system needs to be simple to use, so they want to use a graphical user interface (GUI)
They want to give you the job of  creating the system and even have a sweetener to make it worth your while.
They’ve already designed the interface Head-Ex has been thinking about expanding their business for a while and they already have a design for the interface to the new delivery system.
The user enters the details for a new delivery, including the description of  the contents, the address it’s heading to, and the name of  the Head-Ex depot it will be dispatched from.
When the user clicks the Save button, the details are saved into a file called deliveries.txt.
What’s the difference between this GUI and the ones you created before?
This is where the delivery details need to be saved.
Read data from the GUI Think about the GUIs you’ve created so far.
Those apps ran code in response to events generated by users clicking buttons.
So what’s different here? Well, in addition to generating events, your users will also be creating data.
You need to create an interface with places to enter text.
The Head-Ex design shows exactly what the interface will need to look like:
The data will need to be stored away in a file, so you need some way of asking the interface what text has been entered.
That way, when someone clicks on the Save button, you’ll be able to write the data to the deliveries.txt file, like this:
The format of the file doesn't matter, as long as the depot staff can read it.
The Entry and Text widgets let you enter text data into your GUI If  you look at the interface design, you’ll see that there are two different types of  text field you will need to handle: short text and longer, multi-line text fields.
To deal with these two needs, Python’s tkinter library has two different widgets for each data-entry type:
A TEXT FIELD is just a box on the screen that you can use to enter text.
Entry widget: for entering single lines of text The Entry widget is what you’ll use for most of  the text fields.
Text widget: for longer, multi-line text Because not all text data fits on a single line, tkinter has the Text widget.
Think of  email messages, Wikipedia pages, and word processing documents.
For large multi-line data, you need something other than Entry.
You can enter large pieces of textual data in here.
The Entry and Text fields should be enough to create the Head-Ex interface.
Read and write data to text fields When someone enters text into an Entry widget, Python stores that text somewhere in memory as a string.
If  you want to read the string, simply call the widget’s get() method:
But what if  you want to change the contents of  the widget, can you do that too? Yes, you can: add text to the widget using the insert() method.
It’s a little more involved than just reading the text, because you need to say where you want the text inserted:
You need to specify the index of  the insertion point.
Indexes in Entry fields work just like indexes in strings: they begin at zero.
So if  you insert text at index 0, the new text will appear at the front of all the text already in the field.
In the same way, the delete() method lets you remove text from the field.
You might want to delete the entire contents of  the field, so tkinter gives you a handy END symbol that lets you delete all the text like this:
The get(), insert(), and delete() methods give you complete control over the contents of  your Entry field.
The final character in the field is indexed by END.
Large Text fields are harder to handle So Text fields should work the same way, right? Well, actually, they don’t.
The designers of  tkinter figured people might want to access particular lines and columns in Text fields.
This means that while Entry fields use a single number to index the contents of  the field, Text fields use a string, in the form row.column:
Unlike Entry() fields, you can't just use get() to get the entire contents.
Be careful how you number rows and columns in Text() fields.
Once you understand how Text indexes work, you’ll see that you can insert and delete text from them in a very similar way to Entry fields:
Now that you know how to create text fields and control the text they contain, you’re ready to build the Head-Ex application.
This will return ALL of the text in the Text field.
Think carefully about the widgets you will need for each of the fields.
Create the GUI.You don't need to keep track of the labels, so no need to assign them to variables.
Calling “pack()” without options means you leave it to tkinter to decide how best to lay things out on the GUI.
You'll want to keep track of the data entry fields, so assign them to variables.
This means the button will call the save_data() function when it's clicked.
In addition to the GUI code, you need to write the function that will save the data from the GUI to the deliveries.txt file.
The Save button on the interface is going to call a function called save_data()
The function will append the data from the GUI to the end of the deliveries.txt file formatted like this:
Then it will need to clear the fields on the form to make them ready for the next record to be entered.
The function will have to appear in the program before the GUI code.
Code Magnets Solution You were to complete the code to create the interface.
You were to think carefully about the widgets you will need for each of the fields.
The “save_data()” code needs to be inserted before the GUI code so that the button can see it.
Create two fields: one is an Entry field and the other is a Text field.
The Save button on the interface is going to call a function called save_data()
The function will append the data from the GUI to the end of the deliveries.txt file formatted like this:
Then it will need to clear the fields on the form ready for the next record to be entered.
The function will have to appear in the program before the GUI code.
You were to write the code for the function here:
Don't forget to clear the fields after saving the data.
Test Drive The deliveries program is ready, so it is time for the demo.
With the code entered into IDLE, press F5 to fire it up and you should see this:
You can enter data into each of  the fields, even the multiline address.
When you open up the deliveries.txt file, you see that the data you entered into the GUI has been saved.
The data you enter into the text fields gets written to the file.
Text fields are indexed with a string, starting at “1.0”
Q: Is it possible to put more than one line of text into an Entry box widget?
A: Yes, you probably could, but if you need to do this, you are much better off using a Text box, because they are designed to handle more than one line of text.
Q: I notice that we are calling the pack() method as part of the label creation code, whereas before we assigned the label to a variable then called pack() on the new variable.
Which packing technique should I use and does it really matter?
A: No, it does not really matter which technique you use to call pack()
If it makes sense to pack your widgets as they are created, include the call to pack() as part of the creation code.
If it doesn’t make sense, assign the widget to a variable and do your packing whenever you need to.
If you look at other examples of tkinter code on the Web, you’ll see that other programmers use both techniques.
Q: Why can’t we just assign a value to an Entry box using the assignment operator (=)? Why do we have to use the insert() method?
A: The Entry box is a widget object, not a Python variable, so using the assignment operator does not make sense here.
When working with objects, you need to use the application programming interface (API) provided by and included with the object, which in this case is the insert() method.
Q: Why do the rows in a Text box start counting from one as opposed to zero (like everything else in Python)?
One of the Head-Ex deliveries went astray For the first few days, the system worked great.
But then, something odd happened at the British delivery depot.
I‛m terribly sorry, old chap, but I think these boxes were meant for the other Cambridge.
A consignment of  college football jerseys was sent to Cambridge in England, instead of  the Cambridge in Massachusetts.
But the system is still working fine, isn’t it? So what could possibly have gone wrong?
Users can enter anything in the fields The system is doing exactly what it was designed to do: it lets people enter the details for depots, descriptions, and addresses.
The trouble is, even though there are only a few depots, the Entry text fields lets the user type pretty much anything.
There are no controls on what gets entered into the GUI.
It wasn’t obvious whether the delivery was intended for the Head-Ex depot in Cambridge, MA, or the Head-Ex depot in Cambridge, England.
You need some way to prevent users from entering ambiguous data in the depot field.
How could you restrict the values that someone could enter into a GUI?
Radio buttons force users to choose a valid depot Text fields aren’t the only data-entry game in town.
If  you look at any GUI program, you will find a whole host of  different widgets being used: sliders, buttons, check boxes.
Why are there so many different types of widget? Are they just there to make the interface more interesting to use?
The reason there are so many widgets is to allow the programmer to efficiently manage and control the kind of  data that people can enter.
If  you want to allow a small number of  values for a field, you can use the radio button widget.
A radio button works just like the AM/FM selection buttons on your radio: press AM and the FM button pops up.
Radio buttons in a GUI program work in the same way: if  you select one of  the buttons, the other buttons are automatically deselected.
That way, you can choose only one from a small group of  options.
So if  you replace the depot Entry field in the Head-Ex program with a set of  radio buttons, you prevent users from entering ambiguous depot names.
That way, they will be able to choose one, and only one, depot.
Creating radio buttons in tkinter You need to create three radio buttons in the interface, one for each of  the depots.
You need to remove the depot Entry widget and replace it with three Radiobutton widgets, one for each of  the valid depots.
The text given to each widget will be the text that appears alongside the radio button in the interface.
What about reading which radio button has been selected? For now, you just need to create a prototype of  the interface, so there’s no need to change any of  the code that saves records.
Let’s demo the new interface to the guys at Head-Ex.
This is the text that will appear next to the radio button.
Test Drive It’s time for the demo of  the new version of  the interface.
When the guys from Head-Ex arrive, you fire up the new program in IDLE:
There is only supposed to be one radio button selected at any one time, and yet the program shows all of  the radio buttons selected together.
What happened? You need to look in a little more detail at how radio buttons actually work.
The radio buttons should work together When you modified the code, you added the three radio buttons like this:
That code added three new radio buttons to the interface, but it created them as three independent widgets.
This means that each of  the radio buttons is working separately, with no knowledge of  the other two.
Think about the way you want radio buttons to work.
Is there something that they all need to share? What is it?
But the whole point of  radio buttons is that they work together.
When you select one radio button, you expect all of  the other radio buttons to be deselected, just like the buttons on the radio.
You do something to one widget, which results in something else happening to another widget.
So how might you get your radio buttons to cooperate?
When the AM button is selected, the FM button should be deselected.
The radio buttons can share a model The text fields you originally created each stored a single data item.
For every widget on the screen, there was a single piece of  data.
The three radio buttons will be used by the user to record just one thing: the depot that a delivery is sent to.
The three radio buttons needs to share a single piece of  data.
I‛ve just been clicked, so I ll SET the model to my value.
So if  the Seattle radio button is selected, it will update the model with a new value.
You haven’t set values on the radio buttons yet; you’ve only set text descriptions.
You could set the values to be whatever you want, but it is simplest to set them to the same thing used as the description of  the field:
This VALUE is the one that will be used in the model.
The text is the description that appears on the screen.
You can make the text different from the value, but let's leave them the same here.
This is the model hidden away in your computer's memory.
The system tells the other widgets when the model changes The tkinter library code will keep a track of  which widgets are using which models and, whenever a model changes, tkinter will let the widgets know about it.
So if  we select the Seattle, WA radio button, it will update the model, and the other radio buttons that share the model will deselect themselves.
Well, that‛s not my value, so I'd better deselect myself.
There’s a special name for the way this code works:
The view is just a fancy name for the widget.
And the controller is the code in tkinter that lets all of  the views know when the model has changed.
So how do you use models in tkinter? Imagine you wanted to add delivery options to the program.
You could use radio buttons and do something like this:
Radiobutton(app, text = "First Class", value = "First Class").pack() Radiobutton(app, text = "Next Business Day", value = "Next Business Day").pack()
You then need to create a model for the radio buttons to share.
In tkinter, models are called control variables, and control variables that store text are called StringVars:
This code will now give us a pair of  buttons that work together.
If  you select one, the other will automatically become deselected:
Click the SECOND option and the FIRST will be deselected.
And if  you ever need to read or change the model value in the code, you just need to call the StringVar's get() or set() methods:
A StringVar is just like the IntVar from Chapter 7, except that it holds a string value.
Pool Puzzle This is the section of the program that.
See if you can complete it using the fragments of code from the pool.
Be warned: you might not need all of the pieces...
Note: each thing from the pool can be used only once!
What piece of code would you use to make sure all of the radio buttons are cleared after the record is saved?
Pool Puzzle Solution This is the section of the program that.
You were asked to see if you could complete it using the fragments of code from the pool.
Label(app, text = "Depot:").pack() depot = StringVar() depot.set(None) Radiobutton(app, variable = depot, text = "Cambridge, MA", value = "Cambridge, MA").pack() Radiobutton(app, variable = depot, text = "Cambridge, UK", value = "Cambridge, UK").pack() Radiobutton(app, variable = depot, text = "Seattle, WA", value = "Seattle, WA").pack()
Note: each thing from the pool can be used only once!
What piece of code would you use to make sure all of the radio buttons are cleared after the record is saved?
Test Drive Now it’s time for another demo of  your program.
When you first fire up the program, you see that there are initially no depots selected.
Now what happens if  you select the first option, then change to the third?
If  you make a selection, the other radio buttons automatically deselect themselves, which is exactly what you need.
Now the users will always send the packages to real depots.
Head-Ex's business is expanding With the new systems in place, business is better than ever at Head-Ex.
They have new trucks, more employees, and an increasing number of  offices.
There are too many depots on the GUI The coders at Head-Ex have been amending your program to add new depots as they were opened.
Now there are so many depots that they can’t all fit on the screen.
What kind of widget would you use instead of a radio button to fix this?
An OptionMenu lets you have as many options as needed An OptionMenu or drop-down listbox is a widget that lets you restrict the number of  options a user can choose, just like a group of  radio buttons.
First, it takes up a lot less space than a functionally equivalent group of  radio buttons, about the same amount of  space as an Entry text field.
If  the Head-Ex coders use an option menu, they will be able to increase the number of  depots available, but they won’t have to increase the size or complexity of  their GUI.
So what needs to be changed in the code if  you want to swap the radio buttons for an option menu?
The user could select a depot from an option menu.
The model stays the same Think for a moment about the model you are using with the radio buttons.
It represents the name of  the chosen depot, which you want to keep for the option menu.
If  the model stays the same, then your code, which currently looks like this:
A list of all the options that appear in the widget.
If  you have the options already stored in a list:
This is a version of the program that uses radio buttons.
You are going to update this program so that it uses an option menu.
But the options need to be read from a text file.
First, you need to create a function called read_depots() that will read the lines in a text file and return them to your code as a list.
Hint: When you read a line from the file, it might have a newline character at the end.
Then, you need to replace this section of the code with code that generates an option menu using the data from the read_depots() function you just created.
This is a version of the program that uses radio buttons.
You needed to update this program so that it used an option menu.
But the options were to be read from a text file.
First, you needed to create a function called read_depots() to read the lines in a text file and return them as a list.
Then, you needed to replace this section of the code with code that generated an option menu using the data returned by the read_depots() function.
Append a stripped copy of the line to the array.
Call the function, passing in the name of the file to read the data from.
Test Drive Before you run your program, be sure to create the depots.txt file.
When you start up the program in IDLE, the interface is a lot more compact and even easier to use:
And, due to the depots being stored in a file, Head-Ex can change the list of  depots in the file without having to amend the code in any way.
Your GUI program builds the list of depots dynamically and on-demand, which makes it very flexible indeed.
Things are going great at Head-Ex The GUI system is easy to use, and by restricting the depots with an option menu, the quality of  the entered data is spot on.
This means the Head-Ex delivery service is more reliable, the number of  customers is increasing, and the business is growing bigger—worldwide.
Your GUI data-entry systems have helped our business take off.
Let’s look back at what you’ve learned in this chapter:
So when you say, “Not even if you were the last man on Earth,” what do you mean?
Smart coders learn how to deal with those kinds of errors and make their programs.
The best software keeps the user informed about the bad things that.
What’s that smell? Just when it looked like things were going so well, there was a problem in the Head-Ex storeroom.
A consignment of cheese never got recorded and it‛s been going bad in the storeroom.
A trainee was recording the consignment of  cheese when there was a problem that prevented the program from recording the delivery.
That meant the cheese was never assigned to a delivery truck.
So the cheese never left the storeroom and it just sat there for a very long time.
To prevent the same thing happening again, you need to find what caused the problem.
Someone changed the file permissions It turns out the whole thing was caused when someone from Technical Support decided to change the permissions on the deliveries.txt file, making it read-only.
When the system tried to write deliveries into the file, it failed.
When you were writing programs that ran in the Python Shell, you could always tell when it failed: a huge, ugly error message appeared.
They do, but the trouble is that the message appears in the Shell and your user is busy looking at the nice GUI, so the ugly error can often be missed.
When using a GUI, how do you spot errors? Once spotted, what happens then?
Note: To reproduce this error on your PC, you need to make your deliveries.txt file read-only.
If you are unsure how to make a file read-only, check the Web for more advice (or ask a friendly local guru)
On most systems, it involves editing the properties of the file.
The error in the Python Shell was not noticed by the trainee.
Because no error message appeared in the GUI, the trainee thinks everything is OK.
When it couldn’t write to the file, the program threw an exception What happens when an error occurs? Some errors are really bad: they cause the program to crash.
Other, less serious errors are known as recoverable: the program can keep running, even though something went wrong.
You can spot these situations in your code, because most programming technologies throw an exception when they occur.
Imagine a line of  code that has a problem, such as the line that was trying to write to the deliveries.txt file.
Python will spot that the append operation failed and, instead of  running the rest of  the code that follows, Python abandons ship and skips out of  the code completely.
That’s what throwing an exception means: the program doesn’t crash, but it abandons what you were trying to do and tries to recover the situation:
But why skip past the rest of  the code? Why not keep on running? Generally, that would be a bad idea.
Once a line of  code has gone bad, there’s no way of knowing if  it makes sense to keep running the code that follows.
For example, if  the Head-Ex code can’t open the deliveries file to append to it, it makes no sense to continue trying to write data to the unopened file!
In order to recover, you need to start running your code from somewhere else.
This line of code causes the exception to be thrown.
A piece of code that runs when an exception is thrown is called an exception handler.
Catch the exception Python spots when an exception is thrown, and you can write some code to run when the exception occurs.
The code that you run when there’s an error resulting in the thrown exception is called an exception handler.
OK, it says here I can recover by displaying an error message, then restarting from this line of code...
Creating exception handlers can really make life easy for your users.
Instead of  a flaky program that crashes or fails silently the first time something weird happens, you can write programs that gracefully recover from errors.
Exception handlers tidy up when something goes wrong and can even let your user know that something strange happened.
That’s what you need here: an exception handler that tells the user when there’s a problem writing a delivery to the file.
Watch for exceptions with try/except In order to recover from an error as it happens, you need to indicate the code that might throw an exception.
All you need to do is take the piece of  potentially troublesome code and add the try and except labels:
If  an exception is thrown between the try and except labels, the code that follows the except label runs.
If  no exception occurs, the code runs normally and the code that comes after the except label is ignored.
Notice that the try/except labels are wrapped around all of  the function’s code.
If  there’s a problem opening the deliveries.txt file, you don’t ever want to try writing to it.
So, when trouble strikes, you should adandon ship and skip to the code that tries to recover from the error.
If an exception is thrown ANYWHERE in this section, the computer will jump to the code HERE.
Inside the handler, the exception is assigned to a variable called “ex”
Put the exception handler labels around all of this code.
Exception Magnets Assemble the code to handle an exception in the save_data() function.
The exception handler needs to display the details of the exception in the title bar of the window.
Note: remember to indent the code in the exception handler, in addition to the code in the try block.
Exception Magnets Solution You were asked to assemble the code to handle an exception in the save_data() function.
The exception handler needs to display the details of the exception in the title bar of the window.
You needed to remember to indent the code in the exception handler, in addition to the code in the try block.
We’re using format strings to display the exception in the titl.
The exception handler can have several lines as long as they are all indented in the same way.
Then run the new version of  the program in IDLE and try to record a delivery by clicking on the Save button.
Sure enough, when you try to save the delivery details, the program catches the exception and the exception handler displays the error message in the window title.
Wonder what the people at Head-Ex will think of this?
There’s an issue with the exception handler You do a quick demo for the folks at Head-Ex and, even though the program works, it’s not quite what they need.
I‛m not sure the error message is really visible in the title bar.
If there is an error, I really don‛t want to miss it.
The error message is more visible than when it was appearing in the Python Shell, but it isn’t a whole lot more visible.
Sure, you’ve proved that you can spot when an error happens and then run an exception handler in order to do something about the error.
But you really need to do something that will interrupt the user and highlight the situation.
You need something that will force the user to acknowledge the error before he continues doing something else.
A message box demands attention Most of  the time, GUI programs put the user in charge.
If  the user chooses to click a button or edit a field, the computer lets them do just that in whatever order and at whatever time the user chooses.
But sometimes, GUI programs need to stop the user and ask her a question, getting her to confirm or acknowledge something.
A message box is something that requires a response, which is why it’s sometimes called a dialog box.
The simplest message box displays a message with a single OK button:
A message box always displays the message in a separate window, typically in front of  your main GUI window.
And it won’t go away until you click it, dismissing it.
That’s why message boxes are the most commonly used way of  displaying errors.
The user has to read and respond to the error before continuing.
You should be sparing in how often you display message boxes, because if users see too many of  them, they are likely to click them without reading the message.
But, when used carefully, they keep your user informed and alert.
The user must click the “OK” button to continue, indicating that she acknowledges the message.
Creating message boxes in Python All of  the message box code is contained within a tkinter module called messagebox, so the first thing to do is import the module:
Within the messagebox module, there’s a whole bunch of  different dialogs to choose from.
Message boxes that say stuff To display a simple message on the screen, you might display a message box like this:
When tkinter gets to this line, it will wait for the user to answer the question and then assign True (yes), False (no), or None (cancel) to the response variable.
Message boxes that ask stuff If  you need a message box that asks the users a question, you will need to check the return value to see what they chose:
You need to click the OK button to close the dialog.
The icon in the window shows that this is just for information.
A value is assigned to “response” after the user clicks one of the buttons.
Which type of  box on the left would you choose for each of  the messages on the right? Connect the messages to the boxes with lines.
Except the risk of clashing with your velvet pixie hood.
OK, so there's nothing actually broken YET, but BE CAREFUL.
You are going to continue, but do you want this extra option?
Are you REALLY sure you want to continue and do this thing? It's your last chance to change your mind.
Do you want this additional option, or would you like to forget about the whole thing?
It didn't work last time, but if you like, you can try again.
Selecting which type of message box to use depends a lot upon the particular program you're writing and how serious you think a decision is.
You were to think carefully about each of  the following examples, then indicate which type of  box on the left you would choose for each of  the messages on the right.
You were to connect the messages to the boxes with lines.
The folks at Head-Ex want your program to display this message box if there’s a problem saving a record to the deliveries.txt file:
Complete the missing lines in this section of your program to create the message box.
Hint: You need to include a newline in the message box text.
The folks at Head-Ex want your program to display this message box if there’s a problem saving a record to the deliveries.txt file:
Complete the missing lines in this section of your program to create the message box.
Hint: You need to include a newline in the message box text.
Test Drive Now what happens if  you try to save a record when the deliveries.txt file is read-only?
The icon shows the user that something has gone wrong.
Great! The exception handler displays an error message with an icon that really alerts the user to the problem.
Let’s check back with Head-Ex to see if they like it.
We just had a delivery of durian, the world‛s stinkiest fruit.
There‛s no way we want to leave THAT delivery too long in the stock room!
By catching exceptions and displaying important information in message boxes, you can greatly improve the experience of your users when things go wrong.
Let’s look back at what you’ve learned in this chapter:
Python Tools* You can catch exceptions by using a try/except block.
It’s easy to make your programs more effective for your users.
And when it comes to GUI applications, there’s a world of difference between a working.
In this chapter, you’ll continue to expand your GUI application.
There’s a bunch of truly useful widgets waiting to be experienced.
Yikes! I was sure the salesman said the box contained an Ultimate GUI ToolkitTM.
Time to mix it up Your best friend is an ultra hip DJ with a problem: his vinyl collection is now so large that he can’t carry it all around from club to club anymore.
He’s decided to digitize his entire collection, put it on his laptop, and mix his sounds from there.
His problem is that commercial mixing software costs a fortune and he doesn’t like any of  the free alternatives.
He has his own ideas for the mixing software he wants.
What with spending all his time mixing music, he’s never learned how to program his computer...
If  you help him to write the software he needs, he promises to showcase your work at the upcoming World Music Mixing Expo.
Let’s build the mixing software bit-by-bit based on the DJ’s requirements.
Can you help me write my software? I need to be able to start and stop a track.
Code Magnets A couple of buttons on a GUI ought to do it.
Here’s the code to a small tkinter program that starts and stops a sound file.
Code Magnets Solution A couple of buttons on a GUI ought to do it.
Here’s the code to a small tkinter program that starts and stops a sound file.
You were asked to rearrange the code magnets to make the program:
Download the sound tracks for this chapter from the Head First Programming website.
Be sure to put the sound files in the same directory/folder as your code.
Test Drive Enter the code from the previous page into IDLE, save it as hfmix.pyw, and press F5 to try it out.
The first version of the DJ's program entered in IDLE.
The track starts playing with a click here and stops playing with a click here.
You already know how to display buttons on a GUI and associate them with event-handling code.
What’s new in this code is the loops = -1 bit, which arranges to play the sound repeatedly.
In his haste to show off  your program to his DJ rivals, your friend fired up the program as is.
He didn’t realize that the track you included by default is pretty bad.
In a panic, he clicked the window’s close box before pressing Stop, and the awful track just kept right on playing.
His rivals haven’t had such a good laugh in ages...
Not all events are generated by button clicks Your GUI program processes lots of  events, not just the events generated by your user when, for instance, buttons are clicked.
Your operating system can send events to your GUI program, too.
Some of  these events are commonly handled by the graphical programming technology you are working with.
For most of  the operating system’s events, tkinter very kindly handles them for you.
When you click the close box on your GUI, this generates a Window Manager event for your code to handle.
If  your code doesn’t handle a Window Manager event, tkinter handles it for you in a default way, too.
If  the default event handling isn’t what you want, you have to capture the event before it gets to tkinter and is handled in the default way.
At the moment, the click on the close box is being handled for you by tkinter and the default behavior is to close the window.
The Window Manager generates an event when the user clicks on the close box.
Run the event-handling code associated with whatever event occurred or perform some default action.
Joe: Well, it looks like I have to worry about lots of  other GUI events, not just my own.
It appears the operating system and this Window Manager thing can give the GUI application work to do.
You sometimes need to write a little extra code to interact with the Window Manager when and where necessary...
Frank: It’s something built into every GUI application that handles the management of  your application’s windows.
Python’s GUI, tkinter, has a Window Manager, as do all the other GUI toolkits.
Joe: So, how do I work with the events generated by the Window Manager?
Frank: You create a function with the code you want to run and then connect the function to the event.
But which event do I connect up to? It’s not like the Window Manager has a button to click on, is it?
What happens with the Window Manager is that there’s a set of  protocol properties that you can interact with as and when required.
You see, GUIs might look nice and easy, but they are actually a pretty complicated beast under the hood.
A message sent to your main window when the operating system is shutting down.
Study the three tkinter properties presented below and see if  you can match up the properties to the correct description:
A message sent to your main window when the close box has been clicked.
A message sent to your main window when the window has been selected after a mouse click.
Which of  these protocol messages do you think you need to capture?
The tkinter library provides a mechanism to react to an event that is associated with the GUI window.
A message sent to your main window when the operating system is shutting down.
You were to study the three tkinter properties presented below and see if  you could match up the properties to the correct description:
A message sent to your main window when the close-box has been clicked.
A message sent to your main window when the window has been selected after a mouse click.
You were to identify which of  these protocol messages you think you need to capture:
Controlling the Window Manager To capture the event before it gets to tkinter, call your app’s protocol() method and identify the function that should be called instead of executing the default behavior:
Now that you know about window manager properties and how to capture them, write the code for the shutdown() function:
Now that you know about window manager properties and how to capture them, you were asked to write the code for the shutdown() function:
Test Drive With the changes made to your program in IDLE, press F5 to see how things perform now.
The sound stops when I click to close the window, but now the GUI doesn‛t disappear!
When the DJ clicks on the close box, the track stops playing, which is what you wanted.
You'll need to quit IDLE and the Python Shell to force the window to close.
Capturing the protocol event isn’t enough Your code captures the protocol event and redefines its behavior.
But, what about the behavior that used to execute by default?
Take a look at this small example program, which redefines the close-box protocol to check with the user before actually destroying the window:
Add the app.destroy() line of code to the end of your shutdown() function and see if it makes any difference.
Clicking on the close box runs the “shutdown()” function, which then displays an AskOkCancel dialog.
If you click OK, the GUI is destroyed (which has the effect of closing the window)
Test Drive You’ve added in the line of  code that terminates (destroys) your GUI application.
When you click on the close box now, the GUI application disappears.
Which helps explain why you can't see it on this page anymore!
Your GUI is not only doing what the DJ wants; it’s behaving itself, too.
By redefining the protocol event associated with the click on the close box, you are able to stop the track...
You also ensure that the default behavior associated with the click is performed by arranging to destroy the GUI application.
Two buttons, or not two buttons? That is the question...
However, he thinks it would work better if  he had just one button instead of  two.
He’s convinced this would be easier to use, because he wouldn’t have to move his mouse around the screen quite so much.
Can‛t I just press the button to start the track, then press it again to stop it?
It is possible to use a single button here but, without changing the physical appearance of  the button each time it’s clicked, a user can’t possibly know what state the button is currently in, even though the DJ does have ears in this instance.
But, in general, using a button to switch between two states is not regarded as best practice in GUI design.
What your DJ friend actually wants is some sort of  visual toggle...
Is there a GUI visual toggle you can use here?
Will the next click start or stop whatever this button does?
Take a look at the following window that appears when you ask a full-featured web browser to display its preferences.
Grab a pencil and draw a circle around any graphical interface elements you haven’t worked with yet.
From the elements that you have circled, identify one that might be of use to you in your program.
Take a look at the following window that appears when you ask a full-featured web browser to display its preferences.
You were to grab a pencil and draw a circle around any graphical interface element you haven’t worked with yet.
From the elements that you have circled, identify one that might be of use to you in your program.
You were asked to identify an element that would work best as an on/off toggle:
The checkbox is an on/off, flip/flop toggle The great thing about the checkbox graphical interface element is that it can be in only one of  two states, either on or off.
Click the checkbox to “tick” it and set the object to “on”
Click the checkbox to “untick” it and set the object to “off”
Ah, phooey! Set that object to 0, which is, like, oooh.
Checkbutton(app, variable = flipper, command  = flip_it, text     = "Flip it?").pack()
Working with checkboxes in tkinter The tkinter Checkbutton needs three things: an IntVar to hold its current value, an event-handler function to run when it’s ticked, and a descriptive label to say what it does.
The Checkbutton is associated with the “IntVar”, links to the event handler, and has a descriptive label, too.
Using the get() method If  you look closely at the code for the flip_it() event handler, you’ll notice that the message displayed on screen is controlled by whatever value is returned from the call to flipper.get()
The get() method is part of  every IntVar object, and it lets you easily determine, in this case, the current value associated with the flipper variable.
The Checkbutton automatically sets the value of flipper as a result of  the click on the checkbox.
Use your pencil to put a line through the code you don’t need anymore:
Write the code you need to implement the checkbox here, based on the sample code from the previous page.
You were to use your pencil to put a line through the code you don’t need anymore:
Write the code you need to implement the checkbox here.
The functions that start and stop the track are no longer needed.
You can also get rid of the two buttons, since they aren't needed either.
Use the name of the sound file as the text associated with the checkbox.
Test Drive With your program amended to include the checkbox code, let’s run the latest version of  the DJ’s program in IDLE and see if  the checkbox works as advertised.
Sweet! Toggle the sound on and off by simply clicking on the checkbox.
Each time your DJ friend needs something new, you incrementally improve the program in order to provide the functionalilty he needs.
Pump up the volume! To make the program more useful, the DJ wants to be able to dynamically and interactively control the volume of  the track as it plays.
Basically, as the track plays, the DJ wants to fiddle with the volume.
Turn it up to the right, down to the left..
Because a slider is much easier to manipulate with a click and drag of  a mouse than a knob, the slider on a scale is used in lots of  modern GUIs.
In the physical world, most devices that have a volume control provide either a large, circular knob or a slider on a scale:
Look at the volume control shown above and identify four key characteristics of the volume control.
Model a slider on a scale There’s quite a bit going on with a slider on a scale.
It’s a simple control that everyone’s familiar with, but the simplicity masks quite a bit of  complexity.
Here's the standard representation of a slider on a scale that we all know and love.
There's a bunch of markings on the device that indicate where on the scale you currently are.
There is always something that you can grab onto and slide from left to right.
You were to look at the volume control on the previous page and identify four key characteristics of the volume control.
There's a scale that goes from a low value to a high value.
Start with the volume Before you start worrying about creating the appropriate GUI interface element to actually model the slider, you first need to know how to adjust the volume of  a track.
Once you know how to adjust the volume, you can then start to worry about linking the volume to the slider, with the current position of  the slider dictating the current volume setting.
Then you can allow your user to move the slider which has the effect of dynamically and interactively adjusting the volume.
Use pygame to set the volume Turns out pygame has this functionality built right into its library code via the set_volume() method.
When you set the track’s volume to a high value using set_volume(), it’s the equivalent of  cranking up the volume by moving the slider to the right.
When you set it to a low value, that’s like moving the slider to the left.
Use tkinter for everything else The tkinter library has a graphical interface element called Scale that lives to help you create a slider.
Take a look at this example code and let’s see how it works:
Indicate whether the slider runs across the screen (HORIZONTAL) or up the screen (VERTICAL)
Specify the lowest and the HIGHEST values on the scale.
The Scale() element is your most complex tkinter widget yet.
But, despite this, it is not hard to work out what’s going on here.
The graphical interface element is linked to a tkinter DoubleVar (called variable), the lowest/ highest slider values are provided (to and from_), and an interval between them (resolution) is specified.
The event handler is assocated with an event handler (command), a descriptive label is supplied (label), and, finally, the orientiation of  the slider is specified (orient)
There’s a lot going on here, but none of  it is that hard to understand.
Q: The Scale() code on the previous page has a variable called from_, that is, the word “from” together with a trailing underscore.
The reason for the underscore has to do with the fact that Python uses “from” as a reserved word.
These are words that Python uses for its own special purposes, which means you cannot name one of your variables after a reserved word.
As using the word “from” makes a lot of sense when taking about a scale, the authors of tkinter decided to tack on the underscore so that the meaning of the variable would be clear, while allowing for the variable name not to clash with a reserved word.
Q: Are there other reserved words? A: Yes, a few.
In Python, words like “while”, “for”, “if”, “def”, “class”, and.
A: Python will most likely complain with a syntax error.
Q: Where can I find a list? A: Any good Python reference book will contain a list, and it’s also included as part of the Python documentation that’s installed with Python on your computer and available on the web at the main Python website.
Q: How do I know which graphical interface element to use and when?
However, a lot of platforms go to great lengths to specify exactly when each of the elements should be used and for what purpose.
Of them all, the Macintosh is the leader of the pack.
Apple’s engineers have worked hard to strictly enforce consistent usage of the Mac GUI among programmers.
Q: So, it’s a case of anything goes with the other operating systems?
The Apple folks are very strict with their rules and regulations, and the others are less so.
But there are still standards that you should try as much as possible to adhere to.
One of the reasons for using a GUI is that your users will expect your program to work in a standard way.
This makes your program immediately familiar to new users and lets them become productive with your program more quickly.
When it comes to GUI programs, conformance is a good thing.
A: The latest version of tkinter (which comes with Python 3) is pretty good.
If you run your tkinter program on a Mac, it looks like a Mac OS X program, whereas on Windows it looks like a Windows application, and on Linux it takes on the look and feel of the graphical environment you happen to be using (there are a few choices on Linux)
Q: Other than tkinter, what other graphical toolkits does Python support, and should I learn any of them?
A: Python supports lots of other toolkits on lots of operating systems.
For now, tkinter is all you really need, and you shouldn’t worry about the other choices until you are in a situation where learning how to use them becomes a necessity.
Take the pygame and tkinter code and combine it to support a volume control.
Add a function here to adjust the volume that the track currently plays at.
You were to take the pygame and tkinter code and combine it to support a volume control, then complete the next version of your program.
Things are starting to get crowded on the GUI, so let's have tkinter automatically decide on the geometry for us.
Test Drive Let’s take the latest version of  the program for a spin in IDLE.
In addition to turning the sound on and off  with the checkbox, you should be able to dynamically and interactively adjust the volume with the slider.
Not only can you start and stop the track, but you can now adjust the volume, too! And all from the one GUI...
The DJ is over the moon! Your code has shown the DJ that his idea for the Ultimate Music Mixing program is not as far-fetched as everyone once thought.
With his idea, talent, good looks, and—above all else—modesty, together with your coding skills, the world’s the limit for what you can accomplish together.
The World Music Mixing Expo is next month, and the DJ can’t wait to show off  your completed software.
Let’s look back at what you’ve learned in this chapter:
Since we learned about custom widgets and object orientation, we‛ve become a real class act.
Requirements can be complex, but programs don’t have to be.
By using object orientation, you can give your programs great power without writing lots.
Keep reading, and you’ll create custom widgets that do exactly what you.
The DJ wants to play more than one track The World Music Mixing Expo is only a few weeks away.
Your DJ friend is thrilled with the work you’ve done, but now he has a few extra requirements.
To be useful, the program needs to be able to mix several tracks together at the same time.
Each track needs its own graphical interface elements (or widgets)
I can fade a track in and out, but that‛s not enough.
I need to be able to mix several tracks together.
How will you create the widgets for each track? To play and control a single track, you created two widgets on the GUI: a check button to start and stop the track and a scale to change the volume.
Then you added event-handling code to hook those widgets up to the sound system.
To play multiple tracks together, you just need more of  the same.
Each track will need its own set of  widgets and its own event handlers to connect the widgets and the track together.
Then, each set of  widgets needs to be added to the same window in the GUI.
Create code for each track as a function You could just copy and paste the code several times for each track.
But duplicated code is a bad idea, because it can lead to all sorts of  problems whenever you need to change how the code for each track works.
Instead of duplicating code, you should always try to reuse it.
One way to reuse code is by creating a function that will generate the widgets and the event handlers as needed.
If  you have a function that creates the widgets and event handlers for a single track, you could call it for each of  the tracks, which would then quickly let you build the entire interface.
But what code would you need in such a function?
A function, when called, could create the interface for a single track as needed.
Here is the code from the end of the previous chapter.
Study it carefully, and then, in the space on the next page, write the code for your new function (based on the code below)
The event-handler functions detail what happens when an event occurs.
Here is the code from the end of the previous chapter.
You were to study it carefully, and then, in the space on the next page, write the code for your new function (based on the code below)
Create a new function that contains the GUIcreating code from the current program.
All of this code is part of the function, so it needs to be indented.
Begin by importing the libraries you need to use in this module.
The new function contains other functions With all the code gathered together in a new function, the code for the create_gui() function looks like this:
Do you notice anything strange? The new function actually has two other functions inside it.
A local function is just a function inside a function.
Note: when this function is called, it is expecting three parameters.
When this function is called, it starts executing from here.
As always, the calls to “pack()” add the widgets to the GUI.
Your new function needs to create widgets and event handlers When you’re wiring up the widgets in the interface, you need event handlers to respond to changes in the state of  the widgets.
If  someone clicks the checkbox to play the track, the track_toggle() event handler gets called and switches the track on or off.
But if  you are creating several checkoxes, you are going to need a separate event handler for each of  them.
As well as creating new widgets for the interface, it also uses the local functions to create new event handlers.
Now, let’s update the program to use this new function.
Functions inside of functions inside of functions inside of functions...
Frank: A function inside a function? Surely that’s not legal?
Joe: Don’t tell me this is something that only works with Python?!?
Jim: Look, it really doesn’t matter which programming language supports this feature.
Jim: Because it lets you localize functionality and handle complexity.
Jim: Look: if  a function gets big and complex, it can help to break the function down into a collection of  smaller functions, just like we do when programs get big.
We can keep the functionality local to the code that needs it inside the function.
That way, we keep things as simple as we can.
Frank: Like the GUI-building code we are working on now?
Then, write a new version of the hfmix.pyw program that uses the sound_panel.py module:
Then, you were to write a new version of the hfmix.pyw program that uses the sound_panel.py module:
By calling the new function TWICE, you create TWO sets of sound controls on the GUI.
Test Drive With the code typed into IDLE, take this latest version of  the DJ’s program for a quick spin by pressing F5
These check buttons start and stop each of the tracks.
The program has created a checkbox and a volume slider for each track.
The program called the create_gui() function twice, creating two sets of  widgets.
Of  course, you can call it as many times as you like and the create_gui() function will create the two widgets for each track.
When you click on the two checkboxes, the two tracks both play at the same time! You can start and stop each of  them independently by selecting and deselecting the checkboxes.
But more than that, the volume sliders independently change the volume of  the tracks, allowing you to mix them together.
The create_gui() function is not only creating the separate widgets and adding them to the interface, but it is also creating the event handlers that allow each pair of  widgets to control each separate track.
Here the program is controlling just two tracks, but if  you added more calls to create_gui() in the code, there’s no reason why you couldn’t get the interface to work with as many tracks as you like.
The DJ is confused The program does exactly what the DJ wants, right? Well, not quite.
How am I supposed to know which volume scale is for which track?
The problem is that even though the program technically works, it has a confusing interface.
All of  the checkboxes are added on the left of the interface, and all of  the volume controls are on the right.
There’s nothing in the interface that indicates which volume scale goes with which track.
The checkboxes are labeled with the filename of  the track, but the volume sliders aren’t.
Even though each volume slider is linked to a single track, there is nothing in the interface that tells the user which track that is.
That would probably fix it, but adding more widgets, like labels, can make an interface more complex.
And you want your interfaces (and your GUI code) to be simple and clean.
Fortunately, there is a way of  rearranging the widgets in the interface to make it a lot clearer.
To avoid confusion, the GUI needs to look something like this.
Group widgets together If  the interface were laid out with the checkbox for a track grouped alongside the volume slider for the same track, it would look better.
Each track could then have a row of  widgets associated with it.
As long as you know which widgets belong to which track, you can load a lot more tracks at once without the checkboxes and sliders getting separated (and without your users getting confused)
The program currently uses a function to add the checkboxes and sliders to the interface one widget at a time.
If  you call the function several times, the computer creates two more widgets with each call.
So, how do you group widgets together in a GUI interface?
Create a new type of widget What if  you don’t just hand the computer a set of  instructions? What if  you give it a brand new widget instead?
If  you create a new kind of  widget that groups a checkbox with a slider, you can add your new widget to the interface and then guarantee that the checkbox and slider stay together:
Your new widget “glues together” the other widgets so they always stay grouped.
Your new widget becomes a new building block for your GUI  interface.
So, how are new widgets created? And how do they work?
A frame widget contains other widgets Most GUI libraries (including tkinter) let you create custom widgets from a set of  other components, and tkinter includes a special kind of  widget called a frame.
A frame works just like a picture frame, in that it surrounds other things.
If  you can work out a way to create a new type of  frame (called, say, SoundPanel) that contains the checkbox and the slider, then you could use code something like this in your program:
This code uses an entirely new type of  object, a whole new kind of widget that has never existed before.
How do you tell the computer to create something like that, which is effectively a custom GUI object?
How do you convince the computer to create a new widget each time you call SoundPanel()?
Even though you haven’t created the SoundPanel code yet, let’s replace the calls to create_ gui() in hfmix.
You can add your widget to the GUI using the packer, just like with all the other widgets.
These are the same parameters you passed to the “create_gui()” method.
Wouldn‛t it be dreamy if there were a way in code to create an entirely new kind of widget.
A class is a machine for creating objects Object oriented programming (OOP) languages (like Python) let you create an entirely new kind of  object using a class.
A class is like a template that you use to create new objects.
Think of  the class like a cookie-cutter, and think of  the object as the cookie that is created based on the class.
As all the cookies are created from the same cookie cutter, they all have the same characteristics, even though they are all individual cookies.
When an individual object is created from a class, it’s referred to as an instance of  that class.
So, if  you can arrange for SoundPanel() to be a class, you can create custom widgets as required:
You need code that creates a new grouped widget in the GUI every time you make a call like this:
A class has methods that define behavior The SoundPanel() class creates a new kind of  tkinter Frame(), and you can specify this relationship using the code like this:
Indicate that the new class is a type of Frame.
The word “method” is used in OOP instead of the word “function.”
As well as the what (it’s a frame), you also have to worry about the how, which will define the behavior of  your new widgets.
To do this, you need to add methods inside the class.
To understand how this works, imagine you have created an alarm button object from a class.
The alarm button will need to know what to do when somebody hits it:
I‛d better ask the class that made me what I should do.
This will be a method inside the alarm button's class.
The method tells the button how to behave when something happens.
You need to create some methods for the new SoundPanel() class.
Which of the following behaviors do you think you need to create methods for? Draw a circle around each one:
You needed to create some methods for the new SoundPanel() class.
You were asked to identify which of the following behaviors you thought you needed to create methods for:
You’ve already created event handlers that do something like this.
What do you need to do to create the interface?
Q: Why is there a method to create the widget? A: There isn’t a method to create the widget.
That method will run immediately after the widget is created.
It’s an object that you can add to a graphical user interface.
Q: So there are some objects that are not widgets? A: Absolutely.
All of the numbers and strings you’ve used so far have actually been objects.
Q: So you can’t always see objects on the screen then? A: No, most objects run quietly in memory and they don’t have any display at all.
Q: Is Python the only object oriented language? A: Lots of languages—such as Java, C#, and Ruby—use objects to handle complexity.
Q: So learning object orientation is a good way of getting into other languages?
A: Yes, understanding object orientation gives you a insight into how other languages think.
But how does an object call a method? To see in more detail how the new SoundPanel widgets use the methods in the SoundPanel class, let’s look in more detail at just one of  the methods.
What happens if  someone clicks on the checkbox within the widget?
The method you need to add to your class should look familiar.
This code is almost the same as the track_toggle() event handler we created before.
The only difference is that this method is a little more selfish.
The self variable is passed to each of  the methods in the class automatically by Python and it identifies the current widget object being used.
Most of this code looks very similar to the “create_gui()” method, except for all those uses of “self”
But before you do that, there’s still a little more code to write.
The class needs to be told what to do when the brand new SoundPanel() is created.
The class needs an initializer method that knows how to create instances of  the class.
Some programming languages call these initializer methods CONSTRUCTORs, because they detail what happens when a new object is created or “constructed.”
Code Magnets We’ve started to create the initializer code for you, but there are still a few parts missing.
See if you can work out where the missing code fragments fit.
Because SoundPanel() inherits from tkinter’s Frame(), you need to be sure to initialize the Frame() BEFORE you initialize the SoundPanel()
Code Magnets Solution We’ve started to create the initializer code for you, but there are still a few parts missing.
See if you can work out where the missing code fragments fit.
You were asked to position the code magnets properly to complete the method:
In addition to the methods, the class also has to detail the data that it holds.
For the SoundPanel() class, this data is made up from three things: the track to play, its checkbox, and its associated slider.
That’s a double underscore at either side of the word “init”
It’s good of  you to find the time to speak to us.
Class: I assure you the inestimable pleasure is all mine.
That’s your constructor, isn’t it? The method you use to create objects?
Class: Well, I’m aware that some people refer to it as a constructor, but I prefer initializer.
I just use it to configure them once they’ve been created.
Head First: In the code we’ve just seen, the SoundPanel() class, there were only three methods, weren’t there?
Class: Oh, dear boy, there were only three methods defined explicitly in the class.
But SoundPanel() inherited many, many more methods from its parent class, dear old tkinter’s Frame()
Head First: Frame() has a lot of  methods, too? Class: Too many to discuss, really.
There are methods to paint components on the screen and details of  what to do if  things change size.
Hello? Yes? No, you need to stop playing track four.
They keep me very busy, but I’d miss them if  they didn’t call.
Head First: I believe when someone calls an object method, the object always asks you to get involved?
I do think it is so important to behave properly.
Code Review It’s always good every once in a while to check back on the state of  your code and make sure everything’s looking spiffy.
This is what your program should look like at this point.
It’s probably worth checking to make sure everything in your code looks like this:
Test Drive OK, so you’re finally ready to start up your new custom widget code.
This is what it looks like after you bring your code into IDLE and press F5:
The checkboxes and volume scales are now grouped together on the same widget within the GUI.
From now on, you will know that the widgets on your GUI will always stay together as the SoundPanel() class has grouped them for you.
Dude, that interface looks awesome! It‛s so easy to use!
What’s this “self” thing again? A: “self” is a variable that refers to the calling object.
Q: The calling object? What does that mean? A: Imagine you create a new method called bleep() in the SoundPanel class.
An object called panel can use the bleep() method as needed, and when it does, it calls the SoundPanel class.
The “self.” bit ensures that the bleep() method associated with the panel object is called, not some other bleep() method associated with some other object.
Q: So objects don’t actually own their own methods? A: In some languages, such as Ruby, they can, but in most languages, no, objects don’t own their own methods.
The methods all belong to the class that created the object.
Q: But why do I need to add “self.” to the start of the variables?
A: Because then you are changing data inside the current object referred to by “self.”
You will be working with the object’s own data, and not with data that belongs to the class.
Q: Not all the variables had “self.” at the beginning.
A: If you look at the code, the volume_scale variable does not begin with “self.”
That’s because the object does not need to keep track of the volume_scale variable once the initializer method has finished creating the object.
When an object needs to know what to do, it calls a method in the class that created it.
The methods in the class all have a self variable.
The self variable points to the object that called the method.
By prefixing variables with “self.”, you can keep each object’s values separate from each other.
The DJ has an entire directory of tracks The DJ is so impressed by how usable your program is that he wants to try it out tonight for his complete set, prior to its official unveiling at the World Music Mixing Expo.
The DJ needs to work with a lot more than two tracks.
In fact, he has an entire directory full of  loops.
Can your program add all of these WAV files to my interface?
Now you could just change the code to add the extra files to the interface, but the DJ wants to be able to manage which tracks the program uses.
So you will have to find all of  the WAV files in the current directory and then add them to the interface when the program starts.
Pool Puzzle Your job is to take segments from the.
You may not use the same segment more than once, and you won’t need to use all the segments.
Your goal is to complete the code in hfmix.pyw so that it.
Note: each thing from the pool can be used only once!
Pool Puzzle Solution Your job was to take segments from the.
You could not use the same segment more than once, and you didn’t need to use all the segments.
Get the names of all the files in the current directory.
You need to talk to the operating system, so import the “os” module.
Test Drive With the code in IDLE and all the sound files in the directory, press F5
You should see something that looks a lot more powerful than the simple two-track mixer you had before:
Every single track from the directory now appears on the interface and can be individually controlled.
The program looks like it finally does everything the DJ wants.
But the real test will be how it performs at World Music Mixing Expo...
The mixer program brought the house down! The DJ took your program to the World Music Mixing Expo and rocked the house, with your name in lights! By using classes for the widgets and creating an object oriented program, you made your good program (and the DJ’s performance) great.
Object orientation is meant to help you create complex programs with very little code.
A lot of  languages use object orientation, and not just for graphical user interfaces.
You can use objects to build web applications or simulators or games.
Any time you need to write an advanced program but don’t want your code to turn into a tangled mess of  spaghetti, object orientation can come to the rescue!
Congratulations! You got to the end of  the book! And what a great journey it’s been.
You’ve made graphical user interfaces that sing and, finally, you took your coding skills to the next level with object orientation.
Let’s look back at what you’ve learned in this chapter:
Python Tools * Frame() - tkinter’s frames are widgets that contain other widgets and help to keep the widgets together (grouped)
Adding “self.” to the start of a variable means it belongs to the current object.
We’re sad to see you leave, but there’s nothing like taking what you’ve learned and putting it to use.
You’re just beginning your programming journey and we’ve put you in the.
We’re dying to hear how things go, so drop us a line at the Head First Labs web.
But learning how to program is an activity that never stops.
There’s just not enough room in this book to show you everything.
So, here’s our list of the top ten things we didn’t cover.
Doing things “The Python Way” Throughout this book, we have very stubbornly resisted writing code in the most correct Python Way.
Without fail, and with the greatest of  respect to our reviewers, we generally ignored this advice.
You see, every programming language has its preferred, tried and true, agreed, and accepted way of  doing certain things, collectively known as programming idioms.
This is, of  course, a very good thing, because the more programmers using a particular language who follow the standard way of  doing something, the better.
Except, that is, when writing a book like this: one designed from the get-go to teach programming concepts.
There are times when the idiom, although very smart, can be hard to understand and even harder to explain.
So, when we had a choice between showing you how to do something in a generic way over showing you how to do it the Python way, we nearly always chose the former approach over the latter.
This has the effect of  making some of  the code in this book positively repulsive to hardened Python programmers, something that is of  little concern to us, as this book isn’t for them (and they have lots of  other books already)
This book is for you: the reader who wants to learn how to program regardless of  the programming language chosen.
Having said all that, if  you now want to learn more about The Python Way, start by scanning through the booklist and book reviews maintained on the main Python website:
Holy smokes! I can‛t believe they did it that way...
Python 2 has been around for nearly a decade and has an impressive collection of  technologies built around it, including Google’s App Engine, the Django Web Framework, Zope’s Content Management System, and the Twisted Networking Libraries (to name just a few)
The good folks that bring the world Python have stated that Python 3 is where all the cool, new stuff  will happen with the language.
Here are a few lines of  Python 2 code that highlight some of  the differences:
Other programming languages When it comes to teaching programming concepts, there’s more than enough to cover without trying to cover multiple programming languages.
We like Python and hope over the course of  this book that you’ve grown to like Python, too.
However, if  you want to explore or need to learn another programming language, there’s lots of  help out there.
Simply going to your favorite search engine and typing in the name of your chosen programming language produces a torrent of  sites offering to provide you with everything you need to know.
Two modern languages that are important are Java and C#
And guess what? If  you have to learn these technologies, Head First Labs has you covered.
Having completed this book, you can now pick up either of  these books and confidently work your way through them.
Of  course, if  you find yourself  working in a Java or C# programming environment and missing Python, don’t despair.
Two active projects within the Python Community integrate Python with the above programming languages and are well worth checking out (search on the project name to learn more):
Automated testing techniques And, no, before you ask, this has nothing to do with program-testing robots automatically testing your code for you (which, we agree, would be nice)
Automated testing does have everything to do with trying to make sure, as far as possible, that your code is working properly.
The truth is, it’s very hard to know for sure that your code is working perfectly 100% of  the time.
Over time, they grow, and it gets increasingly hard to know for sure if  they are working quite the way you want them to.
When they are done, they test, test, then test some more.
In fact, programmers often test to destruction, which refers to attempting everything they know to try and break the program and make it misbehave.
If  testing finds a problem, the code is then fixed so that whatever it was isn’t a problem anymore.
To help with the grunt work that testing sometimes is, Python comes with a handy built-in module called unittest.
This module’s sole purpose in life is to allow you to write code that tests your code.
The unittest module provides a framework within which you can exercise your code to ensure it’s working the way you want it to.
The idea is simple enough: as you write your code, you write a little extra bit of  code based on unittest to check that your new code is working properly.
If  the test works (that is, it successfully demonstrates that your code is OK), you are then in a position to automate the testing of  your code by reusing your unittest code.
For more details, check out the description of  unittest in your favorite Python book or online in the official Python documentation.
And now that you know about unittest, you have no excuse not to use it to test your code.
Writing code to test code?!? Isn‛t that one of those chicken and egg things?
It is the process of  dealing with errors that aren’t picked up during testing but, instead, blow up in your face when you run your code or—worse—blow up in the face of  your user!
Tracking down where a problem is can sometimes feel like a bit of an art form, but there are some tried and true techniques that can make things easier for you.
One of  the most important things you can know about when it comes to debugging code is a thing called the debugger.
This is a software tool that can be used by programmers to run code step by step or line by line.
As the program runs, the debugger lets you watch what’s going on and then potentially see when something goes wrong.
If  you can work out where in your code the problem lies, it makes it easier to fix, and the debugger is designed to help you do just that.
It is a rare programming technology indeed that comes without a debugger.
Python’s is called pdb and it can be accessed from within IDLE and within the Python Shell.
Check the Python online documentation for more information on pdb.
As mentioned at the top of  the page: debugging is related to testing.
Typically, you debug your code after it is up and running and (possibly) delivered to your user.
You test your code as you write it and before you give your program to your users.
The idea is that you only ever give a user your program when you’re happy it works the way you want it to.
To be honest, though, there are no hard and fast rules here, and a lot of  programmers blur the line between debugging and testing, treating it all as one activity.
The problem is not with the hardware; it‛s with your program.
Your operating system might have a file association already in place that allows you to double-click on a Python program and have it execute for you.
If  this is the case, feel free to double-click to your heart’s content.
If  not, here’s how to start Python from the command line on the “big 3” operating systems.
Encapsulation?!? Polymorphism?!? Inheritance?!? Could they not have chosen such intimidating terms?
Doing justice to all the concepts of  object oriented programming (OOP) would easily take an entire book all on its own.
The bit of  OOP covered in Chapter 10 relates to the concept of encapsulation.
This is the process of  bundling data with methods into prebuilt templates that can be used to create functionally identical objects of  a certain type.
Discussing all the ins and outs of  OOP is something that takes a little time and it is not something that we are going to try and do on just one page!
That said, OOP really comes into its own when your programs get very large and turn into software systems.
When systems start to scale (get really, really big), the importance of  proper design takes center stage, and OOP can help here—big time.
Again, there’s help from those lovely people at Head First Labs.
This book assumes you already know a little bit about Java, so consider reading Head First Java first.
Algorithms There are plenty of  great books that believe it’s impossible to learn about programming without also learning about algorithms.
The word “algorithm” is used to describe a precise and established way of  solving a particular problem in any programming language.
It’s often useful to think of  an algorithm as a recipe.
In the good ol’ days, it was certainly true that every programmer had to have a good grasp of  algorithms in order to get anything of  any worth done.
But, luckily for you, this is no longer the case.
Nowadays, with programming technologies such as Python (and Ruby, Perl, Java, and C#), this is less of  an issue because modern programming languages just do so much for you.
For instance, if  you need to sort something in Python, you either call the sort() method on a object or use the built-in sorted() function, and the thing you are working with is duly sorted.
You are probably less concerned (and rightly so) with how the sort actually occurred—that is, with the details of  the algorithm used to sort your data.
Was it the quicksort algorithm or the bubblesort? Maybe it was timsort or something else entirely? Maybe you don’t care, because calling sort() or using sorted() orders your data in the way you desire and frees you to move onto some other problem that needs solving.
You could take the time to write a really cool sort function and learn lots about algorithms in the process but, let’s face it, life is far too short.
If  you want to write your own programming language, you’ll need to learn lots about algorithms.
If  all you want to do is use an existing programming language (like Python), you can worry less about algorithms and more about writing code, which is precisely how it should be (in our opinion)
Advanced programming topics There are a bunch of  advanced programming topics that were never likely to make it into a book like this.
Here is a list of  six such topics (all supported by Python 3)
Threads are a programming technology that allows you to break your program into discrete coded chunks that can then be executed in parallel or concurrently.
Using threads can result in some beautiful coding designs, which can make the solving of  a certain class of  problem almost trivial.
Under certain circumstances and restrictions, it is possible to have threads communicate with each other and share data, which, although possible, is hard to get right and can lead to some rather tricky and hard-to-track-down bugs.
If  you think you need threads, approach with extreme caution and be prepared to have your brain expanded in ways that you never thought possible.
Recursion is a programming technique that allows you to create a function that is capable of  calling itself in order to get its work done.
There are certain types of  mathematical problems that are well-suited to a recursive solution, but not much else.
Metaprogramming refers to writing programs that can write other programs or manipulate themselves (sounds icky, and it can be)
Functional programming (typified by languages such as Lisp) is a technique that treats computation as a series of  function calls that specify what is required of  the program, as opposed to a procedural program, which details the steps that are required in order to solve a  problem.
Regular expressions are a technology that allows you to specify concisely what it is you are looking for in your data.
Having written a regular expression (or regex), Python can then go and get it for you.
Every programmer should know how to take advantage of  regexes.
The trouble is, they look so very strange at first that most coders recoil in disgust.
This is a pity, as we think regexes are super cool and well-worth learning.
Unicode is an industry standard that allows you to consistently represent and work with text written in most of  the world’s languages or “writing systems.” If  you are working with text originating from somewhere other than the place where they speak your language, then you’ll want to know a bit about the Unicode character encoding system.
If  you find yourself  needing any of  this stuff, best to start on the Internet and do some background reading on the topic before buying a book with your hard-earned cash.
The Wikipedia entries for each of  these six topics are good starting points.
You mean I won‛t have to read all these right now?
Other IDEs, shells, and text editors It might be hard for you to fathom, but there is life beyond IDLE.
Both IDLE and the Python Shell are great learning tools, but sooner or later, you might find yourself  wanting more.
It has a lot of  extra features over and above those in the normal shell that are designed to make the Python programmer’s life easier.
When it comes to full-blown programming environments, there are many choices.
Search the Internet for “Python IDE” to see a complete list.
A few that come up more than most include: Komodo, Eclipse, and Eric.
It’s worth taking a look at each, and then deciding if  one of  them (or something else entirely) is just right for you.
But, if  you are looking for more from your programming tool, there’s lots of  choices out there.
The Head First Labs advice is to try out a few editors before picking the one that best suits your needs.
