Building a site without them is now as unthinkable as doing web design without CSS.
This book is a great introduction and is laugh-out-loud funny.
Everything we’ve come to accept about the drudgery of  technical learning has been abandoned and in its place an unusually fun method for learning is created.
I have full confidence that the Head First series will revolutionize the technical publishing industry, and that these new methods will be the eventual standard.
I bet my tech-phobic grandmother could pick up PHP and MySQL techniques after a single reading.
As the Internet becomes more complex, inspired construction of  web pages becomes increasingly critical.
I’ve been writing HTML and CSS for ten years now, and what used to be a long trial and error learning process has now been reduced neatly into an engaging paperback.
Head First HTML with CSS & XHTML teaches you how to do things right from the beginning without making the whole process seem overwhelming.
You made an XHTML book simple enough a CEO can understand it.
This book has humor, and charm, but most importantly, it has heart.
I know that sounds ridiculous to say about a technical book, but I really sense that at its core, this book (or at least its authors) really care that the reader learn the material.
This comes across in the style, the language, and the techniques.
Learning – real understanding and comprehension – on the part of  the reader is clearly top most in the minds of  the Freemans.
And thank you, thank you, thank you, for the book’s strong, and sensible advocacy of  standards compliance.
It’s great to see an entry level book, that I think will be widely read and studied, campaign so eloquently and persuasively on behalf  of  the value of  standards compliance in web page code.
This book does a great job of  introducing a complete newbie to JavaScript, and it’s another testament to Head First’s teaching style.
JavaScript has long been the client-side engine that drives pages on the Web, but it has also long been misunderstood and misused.
A web page has three parts—content (HTML), appearance (CSS), and behaviour (JavaScript)
Head First HTML introduced the first two, and this book uses the same fun but practical approach to introduce JavaScript.
This is the book I’ve been looking for to recommend to my readers.
It is simple enough for complete beginners but includes enough depth to be useful to more advanced users.
Wouldn’t it be dreamy if there was a PHP & MySQL book that.
O’Reilly Media books may be purchased for educational, business, or sales promotional use.
Many of  the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks.
Where those designations appear in this book, and O’Reilly Media, Inc., was aware of  a trademark claim, the designations have been printed in caps or initial caps.
While every precaution has been taken in the preparation of  this book, the publisher and the authors assume no responsibility for errors or omissions, or for damages resulting from the use of  the information contained herein.
No hardwood floors, UFOs, Elvis look-alikes, or virtual guitars were harmed in the making of  this book.
But a few broken hearts were mended thanks to some careful mismatching!
Drew is, at this very moment, installing a new kitchen in Lynn’s new old house.
Michael’s nephew Julien generously lent his Superman powers to help get this book finished.
For my parents, who frequently use web applications and are always there for me.
To Rasmus Lerdorf, who single-handedly sparked the language that would eventually become PHP as we know it now.
Enduring proof that it really only takes one person to lead us all down a new, more enlightened path.
Lynn Beighley is a fiction writer stuck in a technical book writer’s body.
Upon discovering that technical book writing actually paid real money, she learned to accept and enjoy it.
After going back to school to get a Masters in Computer Science, she worked for the acronyms NRL and LANL.
A victim of  bad timing, she moved to Silicon Valley just before the great crash.
She spent several years working for Yahoo! and writing other books and training courses.
Finally giving in to her creative writing bent, she moved to the New York area to get an MFA in Creative Writing.
Her Head First-style thesis was delivered to a packed room of  professors and fellow students.
It was extremely well received, and she finished her degree, finished Head First SQL, and just finished Head First PHP & MySQL.
Lynn loves traveling, writing, and making up elaborate background stories about complete strangers.
Michael Morrison has been an enthusiastic contributor to the online world ever since he ran a BBS on his Commodore 64 way back when being a nerd was far less cool than it is these days.
A few thousand baud later, he still marvels at how far we’ve come, and how fast.
Michael doesn’t run a BBS anymore, but he’s still very much involved in the modern equivalents and the tools we use to build them.
Here you are trying to learn something, while here your brain is doing you a favor by making sure the learning doesn’t stick.
You’ve been creating great web pages with HTML, and a sprinkling of  CSS.
But you’ve noticed that visitors to your site can’t do much other than passively look at the content on the pages.
But you need to be able to allow users to enter information.
How it fits together Knowing how things fit together before you start building is a good idea.
You’ve created your first PHP script, and it’s working well.
But getting your form results in an email isn’t good enough anymore.
A MySQL database can store your data for safe keeping.
The new report form is great, but now I’m getting too many emails.
I can’t drink enough caffeine to go through them all when I first receive them.
Sometimes you have to create the data before you can use it.
Get ready to learn how to create databases and tables.
And if that isn’t enough, along the way, you’ll build your very first.
Big sale this week at MakeMeElvis.com! Genuine horse hair sideburns 20% off!
And don’t forget the “buy one, get one free” leisure suits — only three days left!
I’d rather be spending my time imitating Elvis, not sending out emails manually.
Your Application on the Web Sometimes you have to be realistic and rethink your plans.
When a database just isn’t enough5 working with data stored in files.
Sure, they work wonders for storing all kinds of data involving text, but what about binary.
That kind of data is typically stored in files, and we'll leave it in.
But it's entirely possible to have your virtual cake and eat it too—this chapter.
Assume they’re all out to get you Your parents were right: don’t talk to strangers.
If nothing else, don’t give them the keys to your application data, assuming.
It’s a cruel world out there, and you can’t count on everyone to.
In fact, as a web application developer you have to be part cynic, part.
Yes, people are generally bad and they’re definitely out to get you!
OK, maybe that’s a little extreme, but it’s very important to take security seriously and.
Good luck trying to slip any falsified documents, er high scores, by me.
No one likes to be forgotten, especially users of  web applications.
If an application has any sense of “membership,” meaning that users somehow interact with the application in a personal way, then the application.
Sharing is caring Umbrellas aren’t the only thing that can be shared.
In any web application you’re bound to run into situations where the same code is duplicated in.
Not only is this wasteful, but it leads to maintenance headaches.
In other words, you stick the duplicate code in one place, and then just reference that.
The footer provides content along the bottom of every Mismatch page, which includes a copyright notice.
The header appears at the top of every Mismatch page, and displays the application title as well as a page-specific title.
The navigation menu appears just below the header, and provides each Mismatch page with a consistent menu to navigate between the main pages.
Every Mismatch page that’s personalized to a user requires log-in code that keeps track of the user.
With so many other scripts helping out, the index.php script is left to focus solely on its unique role, which is displaying the main user list.
An abundance of information ready to be examined, sorted, compared, combined, and generally.
Web users demand more than tired old wilted data that’s dull.
So what are you waiting for? Fire up your MySQL tractor and get to work!
Better living through functions Functions take your applications to a whole new level.
You’ve already been using PHP’s built-in functions to accomplish things.
Well, maybe not to the point of raising laser sharks, but custom functions.
Sure, they can tell the length of your string, truncate it, change certain characters to other certain characters.
They can precisely modify strings based on a set of.
I got an error and then entered my entire phone number.
Drawing dynamic graphics Sure, we all know the power of  a good query and a bunch of juicy results.
Sometimes it’s helpful to cast data in a different light, a more visual light.
Add score, add score, add score, add score, add score, add score...
I can’t possibly moderate all these posts, most of which appear to be bogus.
It’s a big world out there, and one that your web application can’t afford to ignore.
Perhaps more importantly, you’d rather the world not ignore your web application.
Some email clients support “push” content, allowing you to receive web site updates the same way you receive email messages.
Many regular web browsers also let you browse “push” content that quickly reveals the latest news posted to a web site.
Even mobile devices provide access to “push” content that is automatically delivered when something on a web site changes.
The Top Ten Topics (we didn’t cover) Even after all that, there’s a bit more.
There are just a few more things we think you need to know.
So before you put the book down, take a read through.
You need a place to practice your newfound PHP and MySQL skills without making your data vulnerable on the web.
It’s always a good idea to have a safe place to develop your PHP application before unleashing it on the world (wide web)
Yes, you can program with PHP and MySQL and create great web applications.
This short appendix will show you how to install the mysqli extension and.
Grab the version of mysqli to match your version of PHP.
I can’t believe they put that in a PHP & MySQL.
Are you a web designer with HTML or XHTML experience and a desire to take your web pages to the next level?
Do you want to go beyond simple HTML pages to learn, understand, and remember how to use PHP and MySQL to build web applications?
Do you prefer stimulating dinner party conversation to dry, dull, academic lectures?
Are you completely unfamiliar with basic programming concepts like variables and loops?
But even if you’ve never programmed before, you’ll probably be able to get the key concepts you need from this book.
Are you a kick-butt PHP web developer looking for a reference book?
Are you afraid to try something different? Would you rather have a root canal than mix stripes with plaid? Do you believe that a technical book can’t be serious if it creates an alien abduction database?
It was built that way, and it helps you stay alive.
So what does your brain do with all the routine, ordinary, normal things you encounter? Everything it can to stop them from interfering with the brain’s real job—recording things that matter.
It doesn’t bother saving the boring things; they never make it past the “this is obviously not important” filter.
How does your brain know what’s important? Suppose you’re out for a day hike and a tiger jumps in front of  you, what happens inside your head and body?
This must be important! Don’t forget it! But imagine you’re at home, or in a library.
Or trying to learn some tough technical topic your boss thinks will take a week, ten days at the most.
It’s trying to make sure that this obviously non-important content doesn’t clutter up scarce resources.
Resources that are better spent storing the really big things.
Like how to quickly hide the browser window with the YouTube video of  space alien footage when your boss shows up.
And there’s no simple way to tell your brain, “Hey brain, thank you very much, but no matter how dull this book is, and how little I’m registering on the emotional Richter scale right now, I really do want you to keep this stuff  around.”
We think of a “Head First” reade r as a learner.
We actually do have a heart-wrenching story about a boy and his dog - the dog was abducted by aliens, and you’ll be helping the boy find him!
If  you really want to learn, and you want to learn more quickly and more deeply, pay attention to how you pay attention.
Most of  us did not take courses on metacognition or learning theory when we were growing up.
We were expected to learn, but rarely taught to learn.
But we assume that if  you’re holding this book, you really want to learn how to build database-driven web sites with PHP and MySQL.
And you probably don’t want to spend a lot of  time.
If  you want to use what you read in this book, you need to remember what you read.
To get the most from this book, or any book or learning experience, take responsibility for your brain.
The trick is to get your brain to see the new material you’re learning as Really Important.
Otherwise, you’re in for a constant battle, with your brain doing its best to keep the new content from sticking.
So just how DO you get your brain to treat PHP & MySQL like it was a hungry tiger? There’s the slow, tedious way, or the faster, more effective way.
You obviously know that you are able to learn and remember even the dullest of  topics if  you keep pounding the same thing into your brain.
With enough repetition, your brain says, “This doesn’t feel important to him, but he keeps looking at the same thing over and over and over, so I suppose it must be.”
The faster way is to do anything that increases brain activity, especially different types of  brain activity.
The things on the previous page are a big part of  the solution, and they’re all things that have been proven to help your brain work in your favor.
For example, studies show that putting words within the pictures they describe (as opposed to somewhere else in the page, like a caption or in the body text) causes your brain to try to makes sense of  how the words and picture relate, and this causes more neurons to fire.
More neurons firing = more chances for your brain to get that this is something worth paying attention to, and possibly recording.
A conversational style helps because people tend to pay more attention when they perceive that they’re in a conversation, since they’re expected to follow along and hold up their end.
The amazing thing is, your brain doesn’t necessarily care that the “conversation” is between you and a book! On the other hand, if  the writing style is formal and dry, your brain perceives it the same way you experience being lectured to while sitting in a roomful of  passive attendees.
Here’s what WE did: We used pictures, because your brain is tuned for visuals, not text.
As far as your brain’s concerned, a picture really is worth a thousand words.
And when text and pictures work together, we embedded the text in the pictures because your brain works more effectively when the text is within the thing the text refers to, as opposed to in a caption or buried in the text somewhere.
We used redundancy, saying the same thing in different ways and with different media types, and multiple senses, to increase the chance that the content gets coded into more than one area of  your brain.
We used concepts and pictures in unexpected ways because your brain is tuned for novelty, and we used pictures and ideas with at least some emotional content, because your brain is tuned to pay attention to the biochemistry of  emotions.
That which causes you to feel something is more likely to be remembered, even if  that feeling is nothing more than a little humor, surprise, or interest.
We used a personalized, conversational style, because your brain is tuned to pay more attention when it believes you’re in a conversation than if  it thinks you’re passively listening to a presentation.
We included more than 80 activities, because your brain is tuned to learn and remember more when you do things than when you read about things.
We used multiple learning styles, because you might prefer step-by-step procedures, while someone else wants to understand the big picture first, and someone else just wants to see an example.
But regardless of  your own learning preference, everyone benefits from seeing the same content represented in multiple ways.
We include content for both sides of  your brain, because the more of  your brain you engage, the more likely you are to learn and remember, and the longer you can stay focused.
Since working one side of  the brain often means giving the other side a chance to rest, you can be more productive at learning for a longer period of  time.
And we included stories and exercises that present more than one point of  view, because your brain is tuned to learn more deeply when it’s forced to make evaluations and judgments.
We included challenges, with exercises, and by asking questions that don’t always have a straight answer, because your brain is tuned to learn and remember when it has to work at something.
Think about it—you can’t get your body in shape just by watching people at the gym.
But we did our best to make sure that when you’re working hard, it’s on the right things.
That you’re not spending one extra dendrite processing a hard-to-understand example, or parsing difficult, jargon-laden, or overly terse text.
In stories, examples, pictures, etc., because, well, because you’re a person.
And your brain pays more attention to people than it does to things.
These tips are a starting point; listen to your brain and figure out what works for you and what doesn’t.
Your brain works best in a nice bath of  fluid.
Dehydration (which can happen before you ever feel thirsty) decreases cognitive function.
Write a lot of code! There’s only one way to learn to program: writing a lot of  code.
And that’s what you’re going to do throughout this book.
Coding is a skill, and the only way to get good at it is to practice.
We’re going to give you a lot of  practice: every chapter has exercises that pose problems for you to solve.
Don’t just skip over them—a lot of  the learning happens when you solve the exercises.
But try to solve the problem before you look at the solution.
And definitely get it working before you move on to the next part of  the book.
Groaning over a bad joke is still better than feeling nothing at all.
If  you find yourself  starting to skim the surface or forget what you just read, it’s time for a break.
Once you go past a certain point, you won’t learn faster by trying to shove more in, and you might even hurt the process.
If  you’re trying to understand something, or increase your chance of  remembering it later, say it out loud.
Better still, try to explain it out loud to someone else.
You’ll learn more quickly, and you might uncover ideas you hadn’t known were there when you were reading about it.
Part of  the learning (especially the transfer to long-term memory) happens after you put the book down.
Your brain needs time on its own, to do more processing.
If  you put in something new during that processing time, some of  what you just learned will be lost.
They’re not optional sidebars—they’re part of  the core content! Don’t skip them.
The more you understand, the less you have to memorize.
When the book asks you a question, don’t just skip to the answer.
The more deeply you force your brain to think, the better chance you have of learning and remembering.
Here’s what YOU can do to bend your brain into submission.
We put them in, but if  we did them for you, that would be like having someone else do your workouts for you.
There’s plenty of evidence that physical activity while learning can increase the learning.
Read Me This is a learning experience, not a reference book.
We deliberately stripped out everything that might get in the way of  learning whatever it is we’re working on at that point in the book.
And the first time through, you need to begin at the beginning, because the book makes assumptions about what you’ve already seen and learned.
We begin by teaching simple programming concepts and database connection basics, then more complicated PHP functions and MySQL statements, and finally more complex application concepts.
While it’s important to create applications that allow users to add data to and retrieve data from your web application, before you can do that you need to understand the syntax of both PHP and MySQL.
So we begin by giving you PHP and MySQL statements that you can actually try yourself.
That way you can immediately do something with PHP and MySQL, and you will begin to get excited about them.
Then, a bit later in the book, we show you good application and database design practices.
By then you’ll have a solid grasp of  the syntax you need, and can focus on learning the concepts.
We don’t cover every PHP and MySQL statement, function, or keyword.
While we could have put every single PHP and MySQL statement, function, and keyword in this book, we thought you’d prefer to have a reasonably liftable book that would teach you the most important statements, functions, and keywords.
We give you the ones you need to know, the ones you’ll use 95 percent of  the time.
And when you’re done with this book, you’ll have the confidence to go look up that function you need to finish off  that kick-ass application you just wrote.
You need Apache or some other web server installed on your local machine or a machine to which you have some access so that you can run MySQL commands on the data.
Check out Appendixes ii and iii for instructions on how to install and extend PHP and MySQL.
You can actually use PHP 4 with this book by making a few modifications to the code.
While there’s Standard SQL language, in this book we focus on the particular syntax of  MySQL.
With only a few syntax changes, the code in this book should work with Oracle, MS SQL Server, PostgreSQL, DB2, and quite a few more Relational Database Management Systems (RDBMSs) out there.
You’ll need to look up the particular PHP functions and syntax if  you want to connect to these other RDBMSs.
If  we covered every variation in syntax for every command in the book, this book would have many more pages.
The exercises and activities are not add-ons; they’re part of  the core content of  the book.
Some of  them are to help with memory, some are for understanding, and some will help you apply what you’ve learned.
The crossword puzzles are the only thing you don’t have to do, but they’re good for giving your brain a chance to think about the words and terms you’ve been learning in a different context.
One distinct difference in a Head First book is that we want you to really get it.
And we want you to finish the book remembering what you’ve learned.
Most reference books don’t have retention and recall as a goal, but this book is about learning, so you’ll see some of  the same concepts come up more than once.
Our readers tell us that it’s frustrating to wade through 200 lines of  an example looking for the two lines they need to understand.
Most examples in this book are shown within the smallest possible context, so that the part you’re trying to learn is clear and simple.
Don’t expect all of  the examples to be ultra robust, or always complete—they are written specifically for learning, and aren’t necessarily fully-functional.
We’ve placed all of  the example code and applications on the Web so you can copy and paste parts of  them into your text editor or MySQL Terminal, or upload them as-is to your own web server for testing.
For some of  them, there is no right answer, and for others, part of  the learning experience of  the Brain Power activities is for you to decide if  and when your answers are right.
In some of  the Brain Power exercises, you will find hints to point you in the right direction.
Several of the examples are full-blown web applications that do some pretty powerful things.
Jereme Allen is a senior level web developer with experience utilizing state of  the art technologies to create web applications.
He has nine plus years of experience utilizing PHP, MySQL, as well as various other frameworks, operating systems, programming languages and development software.
David Briggs is a technical author and software localization engineer living in Birmingham, England.
When he’s not being finicky about how to guide users through a particularly tricky piece of  software, he likes nothing better than to get out in the local park with his wife, Paulette, and Cleo, the family dog.
At night, he hops into a phone booth and puts on his web 2.0 suit, helping the designers and developers at Powered By Geek ensure that their data platforms are flexible, portable, maintainable, and FAST, using MySQL and Rails.
He also enjoys spending time with his wife, Heather, his beautiful children, Mara and Ellie, and his dog, Swiper.
Stephanie Liese is a technical trainer and web developer in Sacramento, California.
When she isn’t extolling the virtues of  standards compliant code or debugging a CSS layout, you will find her sweating it out in a hot yoga class.
Harvey Quamen gave up a computer programming career to join the jet-setting, paparazzi-filled, high profile world of  academia.
Chris Shiflett is the Chief  Technology Officer of OmniTI, where he leads the web application security practice and guides web development initiatives.
Chris is a thought leader in the PHP and web application security communities—a widely-read blogger at shiflett.org, a popular speaker at industry conferences worldwide, and the founder of  the PHP Security Consortium.
Thanks to Lou Barr for her phenomenal design skill, making this book such a visual treat.
Thanks also to Brittany Smith for all her hard work at the last minute, and to Caitrin McCullough for getting the example web sites up and running.
And to Laurie Petrycki for having faith that we could write another great Head First book.
Excellent job! Especially seeing as how he’s merely a simple caveman art director.
Many thanks go to Brett McLaughlin for the awesome storyboarding session that got us on the right track, and his ruthless commitment to cognitive learning.
The book would not exist if  not for the heroic effort, patience, and persistence of  Sanders Kleinfeld.
We hope he gets a chance to put his feet up for a couple of  days before taking on another project as difficult as this one.
It’s a virtual library that lets you easily search thousands of  top tech books, cut and paste code samples, download chapters, and find quick answers when you need the most accurate, current information.
You’ve been creating great web pages with HTML, and a sprinkling of  CSS.
But you’ve noticed that visitors to your site can’t do much other than passively look at the content on the pages.
In fact, you’d really like to know what your audience is thinking.
And you need to be able to process the information and.
It sounds as if you’re going to need more than HTML to take.
The web server is limited to serving up one static HTML page after another.
The HTML code in these pages is determined when the web developer creates the pages.
But what about when you need web pages that actually do something? Suppose you need to search a database or send an email...
The web server’s a big part of  the problem with lifeless HTML since it serves as nothing more than a boring delivery mechanism.
A browser requests a page, the server responds with HTML, end of  story.
To turn web sites into interactive web applications, the web server has to take on a new, more dynamic role...
With pure HTML web pages, the server simply serves up static HTML that can only display content.
The browser still receives regular HTML web pages, but the code’s been dynamically generated by PHP on the server.
The HTML code in these pages is generated by PHP and can change dynamically depending on what the web application needs.
Dynamic HTML pages change in response to programmatic logic in PHP scripts, making them incredibly flexible.
It works like this: A PHP script runs on the server and can alter or generate HTML code at will.
An HTML web page is still delivered to the browser, which doesn’t know or care that PHP is involved in tweaking the HTML on the server.
With PHP in the mix, the web server is able to dynamically generate HTML web pages on the fly.
But finding his dog isn’t just a matter of  searching the neighborhood.
You see, Fang was abducted by aliens, which expands Owen’s search to the entire galaxy.
Owen knows some HTML and CSS, and he thinks a custom web site may help solve his problem by allowing other people to share their own alien abduction experiences.
But to get information from others, Owen’s going to need a web form that’s capable of  receiving user input, lots of  it, and notifying him about it.
Not a problem—HTML has plenty of tags for whipping together web forms.
Details are sketchy, but we do know that Fang was whisked into the sky in a beam of light.
Owen knows some HTML and CSS and thinks he might be able to use the web to help track down his dog, Fang.
Owen hopes someone will answer yes, that they saw Fang on the alien spacecraft.
Owen wants to receive an email message when the user submits the form.
Owen knows he needs an HTML form to solicit abduction stories from visitors and that it must find out if  they’ve run into Fang during their interstellar journeys.
But he needs your help getting it up and running.
What do you think of Owen’s HTML form? Can you think of  any problems Owen might face when he tries to gather alien abduction data using this form? Go ahead, jot down your thoughts.
This value tells the server how to send the data.
Owen will get the contents of this form sent to him at this email address - change Owen’s email address to yours to test out the form.
The form is bracketed with open and close <form> tags.
The submit button tells the form to execute the form action.
The type attribute tells the form action to expect text.
No surprises here - the form is pure, 100% HTML code!
Forms are made of HTML Owen’s Report an Abduction form is built entirely out of  HTML tags and attributes.
There are text fields for most of  the questions, radio buttons to find out if  his visitor saw Fang, and a text area for additional comments.
And the form is set up to deliver form data to Owen’s email address.
The folder contains Owen’s web form in report.html, as well as a style sheet (style.css) and an image of  Fang (fang.jpg)
Open the report.html page in a text editor and change Owen’s email address to yours.
Then open the page in a web browser, enter some alien abduction information in the form, and click the Report Abduction button.
So, what do you think? Did you receive the form data as an email message in your Inbox?
The HTML form doesn’t know how to actually send an email message, so it delegates the task to the user’s own email program.
The form data isn't sent to Owen unless the user manually sends the weird looking email.
When I click the button, it opens my email program, Outlook, and doesn’t have anything I just spent 15 minutes typing in the form!
I saw something like this in the Subject field: ?When=&Where=
Nothing happened because my web browser has no default email client...
The HTML form has problems Owen’s Report an Abduction form is up and running, but he doesn’t get much information from users.
Somehow Owen’s form is extracting more frustration than information from visitors to his site.
What’s going on here? Do you have any ideas about how to fix the form?
The HTML form code is fine, but mailto isn’t a good way to deliver form data.
Owen’s form is perfectly fine until the user clicks the Report Abduction button.
At that point you rely on mailto to package up the form data in an email.
But this email doesn’t get sent automatically—it’s created in the default email program on the user’s computer instead.
You need a way to take control of  the delivery of  the web form.
More specifically, you need PHP to package the form data into an email message, and then make sure it gets sent.
Does the problem have something to do with that mailto part?
The form’s wonderful until you click Report Abduction - then all bets are off!
Owen’s web server software runs here, also known as a SERVER.
Your computer’s browser software runs here, also known as a CLIENT.
The browser requests Owen’s web page, which includes the form.
The server returns the HTML code for the web page.
The server never touches the data entered into web forms that use mailto.
Um, I don’t get involved here.Now, I’d like to submit.
The form action tag tells the browser to ask the user’s email program to create an email.
The user’s email program creates an email with the form data - it’s up to the user to actually send it to Owen.
Although the report.html web page comes from a web server, it’s filled out and processed entirely on the user’s web browser.
The server’s role here is limited to just delivering the web page to the browser.
The client isn’t equipped to deliver form data—that’s a job for the server.
I process the form information and send the email myself.
The user types his abduction story into the form, hits the Report Abduction button, and he’s done! The PHP code creates the email message, sends it to you, and then generates a web page confirmation for the user.
Owen is guaranteed to get a nicely formatted email.Check the boxes for where you think a PHP script belongs:
The server responds with the HTML code for the web page.
User fills out and submits the form, passing form data to a PHP script on the server.
The PHP script generates an HTML confirmation page and emails the form data to Owen.
In fact, when the server runs a PHP script the end result is always pure HTML and CSS.
So every PHP script ultimately gets turned into HTML and CSS once it’s finished running on the server.
Let’s take a closer look at how a PHP script changes the flow of Owen’s web form.
The client web browser requests an HTML web page, in this case, the Report an Abduction form.
The user fills out the form and submits it, causing the browser to pass along the form data to a PHP script on the server.
Clicking Report Abduction submits the form data to the PHP script on the server.
The server runs the PHP script, which sends an email and generates an HTML confirmation web page.
The server returns a pure HTML web page that was generated by the PHP script.
Although the page name shows up with a .php name in the browser, it’s pure HTML at this point.The PHP script.
But what actually causes a PHP script to get run on the server?
A form element’s action attribute is what connects a form to a PHP script, causing the script to run when the form is submitted.
Whatever filename you set the action attribute to is used by the web server to process the form when it is submitted.
So if  Owen’s PHP script is named report.php, then the <form> tag that connects it to the form looks like this:
When the user clicks the Report Abduction button in the form, the form action causes the report.php script to be run on the server to process the form data.
The action attribute of the <form> tag is what causes the PHP script to run on the server when the form is submitted.
Somewhere along the way the acronym was changed to mean PHP: Hypertext Processor.
The latter is considered a recursive acronym because it references itself—the acronym (PHP) is inside the acronym.
Q: Even though my web browser shows that a web page has a name that ends in .php, it’s still pure HTML? How is that?
A: It’s possible because the page originates as PHP code on the server but is transformed into HTML code before making its way to the browser.
So the server runs the PHP code and converts it into HTML code before sending it along to the browser for viewing.
This means that even though a .php file contains PHP code, the browser never sees it—it only sees the HTML code that results from running the PHP code on the server.
Q: But don’t all web pages originate on the server, even pure HTML pages in .html files?
All of the files for a web site are stored on the server—.html, .css, .php, etc.
It’s not the PHP code that’s sent to the browser, it’s the results of running the PHP code that are sent, and these results are pure HTML and CSS.
Use PHP to access the form data So Owen needs a PHP script that can get the alien abduction form information to him more reliably than the mailto technique.
It’s perfectly normal for a PHP script to include regular HTML tags and attributes.
Just like a normal web page, this PHP script finishes up by closing out open HTML tags.
Ah, here’s where things get interesting - this is the beginning of the actual PHP code.
This chunk of PHP code grabs the form data so that it can be displayed as part of a confirmation page.
Here we use PHP to generate HTML code from the form data.
This entire block of script code is PHP...the rest of the script is normal HTML.
Change Owen’s form to use a PHP script to process the form data.
Create a new text file called report.php, and enter all of  the code on the facing page.
This is the script that will process Owen’s web form.
The PHP script isn’t connected to the form yet, so open the report.html page in a text editor and change the form action to report.php instead of  mailto.
Open the report.html page in a web browser, enter some alien abduction information in the form, and click Report Abduction.
Depending on your browser, you may see a web page with some weird text in it, or possibly just the PHP source code for the report.php script.
Do you think this is how the PHP script is supposed to work? Write down why or why not, and what you think is going on.
Remember, PHP is a programming language, and it needs an environment to run in.
Web browsers know nothing about PHP and, therefore, have no ability to run PHP scripts.
Web servers with PHP support are equipped to run PHP scripts and turn them into HTML web pages that browsers can understand.
Unlike HTML web pages, which can be opened locally in a web browser, PHP scripts must always be “opened” through a URL from a web server.
A quick way to tell if a web page is being delivered by a web server is to look for the URL starting with “http:”
Web pages opened as local files always start with “file:”
This PHP script is just a bunch of meaningless code to the web browser.
The web server understands this PHP code and runs the script!
If you do have a web server installed locally and it has PHP support, then you can test out PHP scripts directly on your local computer.
If  you don’t have PHP installed on your web server, check out Appendix ii.
You’ll find instructions here for getting PHP up and running on your web server.
Get your PHP scripts to the server It’s perfectly fine to create and edit PHP scripts on your local computer.
But you need to put the files on a web server to run them.
There’s nothing magical about putting PHP scripts on a web server—just upload them to a place where your web pages can access them.
Uploading files to a web server requires the help of  a utility, such as an FTP (File Transfer Protocol) utility.
Q: How do I know if my web server has PHP installed? A: You could ask your web administrator or web hosting company, or you could just perform a little test yourself.
Create a text file called test.php and enter the following code into it:
Now upload test.php to your web server, and then enter its URL into a web browser.
If PHP is installed on your server, you’ll see lots of detailed information about PHP, including its version.
Uploading your PHP scripts to a web server isn’t enough—that web server must also have PHP installed on it.
Most PHP scripts appear alongside other files in the same folder on the web server.
There’s usually one folder on the web server where most, if not all, web files are stored.
Images are sometimes stored in their own folder on the web server for organizational reasons...
Remember to delete phpinfo() script when you're done, so no one else can see it.
Upload the Report an Abduction files to a web server, and try out the form...again.
Enter the URL of  the report.html page into your browser, fill out the form with alien abduction information, and click the Report Abduction button.
The PHP script works! It displays form data in a confirmation web page.
Now you just need to add some PHP code to take care of emailing the form data.
The report.php script’s still missing code to email the alien abduction data to Owen.
But that’s not a problem because PHP offers a function, a pre-built chunk of  reusable code, that you can use to send email messages.
You just need to figure out what the email message needs to say and then use PHP to create and send it.
Time out! We don’t even know how the original report.php script works, and now we’re charging ahead into sending emails.
So in order to add email functionality to Owen’s report.php script, you’re going to have to dig a little deeper into PHP and get a solid handle on how the script works up to this point.
The server turns PHP into HTML A big part of  understanding how a PHP script works is getting a handle on what happens to the script when it runs on the server.
Most PHP scripts contain both PHP code and HTML code, and the PHP’s run and turned into HTML before the server passes the whole thing off  as HTML to the client web browser.
In Owen’s report.php script, PHP code generates most of  the HTML content in the body of  the confirmation page.
This HTML code is passed along unchanged to the browser.
More static HTML code, which the server passes along to the browser with no changes.
This PHP code is run by the server and generates HTML code containing data that was entered into the form.
The end result of the PHP script is a pure HTML web page that was dynamically generated on the server.
This HTML code is created on-the-fly by the PHP script, which allows it to do cool things like blend in form data that was just entered.
Dynamic - it changes every time someone submits the form!
Deconstructing Owen’s PHP script The report.php script is triggered by the Report an Abduction form, and its job(at the moment) is to take the form data and generate a confirmation web page.
It just sets up the page we’re building, including a few HTML tags required of  all pages.
Yes, this HTML code is pretty minimal - ideally you’d have a DOCTYPE, <meta> tag, etc., but we’re keeping things simple here.
We’re ready to break out of HTML code and into PHP code.
The <?php tag opens a section of  PHP code—everything following this tag is pure PHP.
This code grabs the form data and stores it away in individual variables so that we can easily access it later.
Now we’re talking! Here the variables we just created are put to work by inserting them into dynamically generated HTML code.
The echo command outputs HTML code that gets returned directly to the web browser.
Now wrap up the page by closing out the HTML tags we opened earlier.
Each line of PHP code assigns the data from a form field to a new variable.
From here on, we’re dealing with PHP code...at least until we get to the closing ?> tag.
This PHP code blends variables into HTML code that’s output to the browser.
This ends the PHP code - after this we’re back to normal HTML.
Don’t forget, we’re generating an HTML web page, so wrap up the HTML code.
If there is any PHP code in a web page, it’s a good idea to name the file on the web server with .php, not .html.
If your code ever breaks, check to make sure you haven’t forgotten a semicolon.
Owen’s report.php script reveals a few fundamental rules of  the PHP language that apply to all PHP scripts.
Most PHP scripts are just HTML web pages with PHP code thrown in - these tags tell the server what code is PHP.
The semicolon lets PHP know that this is the end of a statement.
This isn’t a deal breaker, but it’s a good idea to name PHP scripts with a .php file extension.
Given the variables used in the report.php script, do you see any other PHP rules pertaining to variables? Write ‘em down!
A variable name must be at least one character in length.
Not counting the $ character, which is required of every variable name.
Finding the perfect variable name In addition to starting with a $, PHP variable names are also are case-sensitive.
But that’s not all—there are other important rules governing how you name variables.
Some of  these rules are syntax rules, meaning your code will break if  you ignore them, while other rules are just good ideas passed down from wise old PHP coders.
Let’s start with the official rules that will absolutely cause problems if  you ignore them when naming variables.
A variable is a container that you can store data in, and every variable has a unique name.
The first character after the dollar sign can be a letter or an underscore (_), and characters after that can be a letter, an underscore, or a number.
These rules will stop your code working if  you don’t follow them, but there are a couple more rules that are good to follow as more of  a coding convention.
These rules help make PHP code a little more consistent and easier to read.
These last two rules won’t break your code if  you ignore them, and you’ll certainly run across PHP code that doesn’t adhere to them yet works just fine.
This is because they are just a stylistic convention—but they will serve you well as you begin creating and naming variables of  your own.
Q: Does it matter whether I put PHP commands in uppercase or lowercase?
For the most part, PHP isn’t case-sensitive, so you can get away with mixing the case of most commands.
That means you can use echo, ECHO, or EchO when echoing content.
However, as a matter of convention, it’s a very good idea to be consistent with case in your scripts.
Most PHP coders prefer lowercase for the vast majority of PHP code, which is why you’ll see echo used throughout the example code in the book.
Q: So even if it’s a bad coding convention, I can mix and match the case of PHP code?
The huge exception to the case insensitivity of PHP is variable names, which apply to data storage locations that you create.
So let’s take the $email variable used in the Report an Abduction script as an example.
All variable names in PHP are case-sensitive like this, so it’s important to name variables carefully and then reference them consistently in your code.
Q: Is it really OK to put both PHP and HTML code in the same file?
In fact, in many cases it’s absolutely necessary to do so.
Q: Why would I want to do that? A: Because the whole idea behind a web server is to serve up HTML web pages to browsers.
What PHP allows you to do is change the HTML content on the fly with things like today’s date, data pulled from a database, or even calculated values such as the order total in a shopping cart.
So PHP allows you to manipulate the HTML that goes into web pages, as opposed to them just being created statically at design time.
It’s very common to have HTML code for a page with PHP code sprinkled throughout to plug in important data or otherwise alter the HTML programmatically.
Q: Does PHP code embedded in an HTML file have to be on its own line, or can I embed it in an HTML line, like as part of an HTML tag attribute?
In fact, it’s often necessary to wedge a piece of PHP code into the middle of HTML code, like when you’re setting the attribute of an HTML tag.
A server setting must be enabled for the short open tag (<?) to work.
The usual <?php tag always works, so it’s better to use that and know that your code will just work.
Q: If a web server always returns pure HTML code to a client browser, why do URLs show the PHP script name, like webpage.php?
A: Remember that every web page is the result of a two-sided communication involving a request from the client browser and a response from the web server.
The URL is the basis of the request, while the content returned from the server is the response.
That explains why the URL for a PHP “page” shows the name of the PHP script.
The other half of the equation is the response from the server, which is the resulting code that’s generated by the PHP script.
Since most PHP scripts generate HTML code, it makes sense that the code is HTML and not PHP.
So it’s no accident that a URL references a .php file on a server, which causes PHP code to be executed on the server, ultimately resulting in pure HTML content being returned to the browser.
Q: Can PHP variables store any other kinds of data?
And numeric data can be either integer or floating-point (decimal)
There are also arrays, which store a collection of data, as well as objects, which associate a collection of data with code that is used to manipulate the data.
There is also a special data type called NULL, which represents no value.
For example, a variable that hasn’t been assigned a value is considered NULL.
Either PHP’s memory isn’t all that good or there’s something wrong with the script...
There’s a problem with the alien description form data in Owen’s report.php script.
Circle the lines of code that you think relate to the problem, and write down what they do.
There’s a problem with the alien description form data in Owen’s report.php script.
Circle the lines of code that you think relate to the problem, and write down what they do.
This line of code grabs the alien description from the HTML form field and stores it in a PHP variable named $alien_description.
This code combines the alien description with some other text and HTML code, and outputs all of it to the browser.
For some reason the $alien_description variable appears to be empty...not good.
One way to fix the script would be to just assign the exact string we’re expecting to the $alien_description variable, like this:
Variables are for storing script data PHP variables are storage containers that store information kinda like how a cup stores a beverage.
Since the $alien_description variable is empty, we know that the form data is never making its way into it.
So the $alien_description variable remains empty despite our attempt to assign data to it.
This code works in that it most definitely stores the text 'little green men' in the $alien_description variable.
But we solved one problem by creating another one—this code causes the alien description to always be the same regardless of  what the user enters into the form.
Pieces of text in PHP, also known as strings, must always be enclosed by quotes, either single quotes or double quotes.
The equal sign tells PHP to assign the value on the right to the variable on the left.
We’re looking for a cup that overfloweth with an alien description!
Somehow the assignment of alien description form data to the $alien_description variable is coming up empty.
The problem obviously has something to do with that $_POST thingy.
The problem does have to do with $_POST, which is a mechanism used to pass along form data to a script.
The dollar sign at the beginning of  $_POST is a clue...
In Owen’s case, it holds all the data that gets sent to our report.php script when someone fills out the form and clicks the Report Abduction button.
So in order to access the form data and do anything with it, we have to go through $_POST.
So the data in each field of  the Report an Abduction form is accessed using $_POST.
The piece of form data holding the duration of the abduction is assigned to the variable $how_long.Same deal here, except.
How do you think the $_POST superglobal works? How can it store multiple values from all those text boxes on Owen’s form?
The $_POST superglobal holds each piece of data entered into the form.
The $_POST superglobal is directly tied to the form submission method used by the HTML form.
If  the method’s set to post, then all of  the form data gets packaged into the $_POST superglobal, where each piece of  data can be plucked out and used as needed.
The form submission method determines how the form data is supplied to the PHP script.
The name “howlong” comes from the name attribute of the <input> tag for this form field.
The $_POST array is filled with the values the user entered into the form.
When someone submits Owen’s form, the data they’ve typed into the form fields is stored in the $_POST array, whose job is to pass the data along to the script.
Each element in the $_POST array corresponds to a piece of  data entered into a form field.
To access the data for a specific form field, you use the name of  the field with $_POST.
So the duration of  an abduction is stored in $_POST['howlong']
The HTML code for Owen’s form reveals how form names relate to data stored in $_POST.
The name of the form field determines how it is accessed within the $_POST array.
All of the form data is accessible through the $_POST array.
Scratch through the code in report.php that is causing the alien description to come up blank, and then write down how to fix it.
Hint: Use the HTML form code on the facing page to help isolate the problem.
Remember, earlier we isolated the problem down to these two lines of code.
Scratch through the code in report.php that is causing the alien description to come up blank, and then write down how to fix it.
Hint: Use the HTML form code on the facing page to help isolate the problem.
Change the broken line of  code in report.php, and then upload it to your web server.
Open the report.html page in your browser, fill out the form with alien abduction information, and click the Report Abduction button to submit it to the newly repaired script.
The confirmation page now correctly shows the form data for the alien description!
There’s some data entered into Owen’s Report an Abduction form that we aren’t currently using.
Remember, this data contains vital information about an alien abduction that could lead Owen back to his lost dog, Fang.
So we need to grab all of the abduction data and store it away in PHP variables.
Hint: Create the $name variable so that it stores the user’s full name.
The report.php script currently ignores five different pieces of form data.
The <input> tag for each form field holds the key to accessing form data from PHP.
The confirmation web page generated by the PHP script needs to use those new variables to display more information about the alien abduction.
Using all of the variables you just created except $name, finish the missing code below that generates a more informed confirmation page.
The user’s name isn’t critical to the confirmation page, although we’ll need it later when we send an abduction email to Owen.
There’s some data entered into Owen’s Report an Abduction form that we aren’t currently using.
Remember, this data contains vital information about an alien abduction that could lead Owen back to his lost dog, Fang.
So we need to grab all of the abduction data and store it away in PHP variables.
Hint: Create the $name variable so that it stores the user’s full name.
The report.php script currently ignores five different pieces of form data.
The <input> tag for each form field holds the key to accessing form data from PHP.
The period allows you to stick multiple strings of text together as one - a process known as concatenation.
The confirmation web page generated by the PHP script needs to use those new variables to display more information about the alien abduction.
Using all of the variables you just created except $name, finish the missing code below that generates a more informed confirmation page.
The user’s name isn’t critical to the confirmation page, although we’ll need it later when we send an abduction email to Owen.
The echo command is used to output the additional information to the browser as HTML content.
Again, periods are used to concatenate strings and variables together.
Add the code for the new variables to report.php, as well as the code that echoes the variables to the browser as formatted HTML.
Then upload the script to your web server, open the report.html page in your browser, and fill out the form with alien abduction information.
Finally, click the Report Abduction button to submit the form and see the results.
Q: What actually happens when I concatenate multiple strings together using periods?
A: Concatenation involves sticking more than one string together to form a completely new string.
The end result of concatenating strings is always a single string, no matter how many strings you started with.
So when you concatenate strings as part of an echo command, PHP combines the strings together into one first, and then echoes that string to the browser.
Q: When I concatenate a variable with a string, does the variable have to contain text?
Although concatenation always results in a string, variables don’t have to contain strings in order for you to concatenate them.
So say a variable contains a number, PHP converts the number to a string first and then concatenates it.
And that’s because PHP code is never seen by a browser.
So the browser is completely unaware of PHP’s existence—web pages arrive as pure HTML and CSS.
Q: OK, so how exactly does the server turn PHP code into HTML and CSS code?
A: First off, remember that by default the code in a PHP script is assumed to be HTML code.
The server sees those tags and knows to run the code inside them as PHP, and all of the code outside of those tags is passed along to the browser as HTML.
But that still doesn’t explain how the PHP code gets turned into HTML/CSS code.
A: Ah, that’s where the echo command enters the picture.
So the echo command is the key to PHP’s ability to dynamically generate HTML/CSS code.
By concatenating strings of text with PHP variables, you can construct HTML code on-the-fly, and then use echo to output it to the browser as part of the resulting web page.
This email message can be generated from PHP code by putting together a string that combines static text such as "Other comments:" with form field data stored in variables.
Alf  Nader was abducted last November and was gone for 11 hours.
Similar to the confirmation web page, this email message consists of static text combined with form data.
The PHP script still needs to email the form data to Owen.
As it stands, the report.php script is grabbing the data from the Report an Abduction form and generating an HTML confirmation page for the user.
But it’s not yet solving the original problem of  emailing a message to Owen when the form is submitted.
He just wants to receive a simple text email message that looks something like this:
The confirmation web page is helpful to the user but it’s no good to me.
I still need the form data sent to me in an email.
Write down how you’d put together an email message string from static text and PHP variables.
Creating the email message body with PHP You’ve already seen how a period can be used in PHP code to concatenate multiple strings of  text together into a single string.
Now you need to use concatenation again to build an email message string with variables sprinkled in among static text.
A long line of PHP code can be spanned across multiple lines as long as you’re careful about how you break up the code.
This is really just one big line of code divided across multiple lines.
The line of code is carefully extended by not breaking it in the middle of a string.
When a line of PHP code is deliberately extended across multiple lines, it’s customary to indent the lines after the first one to help you see which lines belong together in your code.
You still have to finish the entire statement with a semicolon.
One problem with building such a large string is that it requires a huge line of  PHP code that’s difficult to read and understand.
You can break the PHP code across multiple lines to make it easier to follow.
Just make sure to separate the code in spots where the spacing doesn’t matter, like between two concatenated strings, not in the middle of  a string.
Then put a semicolon at the end of  the last line of  the code to finish the PHP statement.
Most text editors will automatically wrap the code to the next line even if you don’t put in your own line break (return)
Variables and static text are concatenated into a single email message string using periods.
Remember, each variable holds a string of text that was pulled from the Report an Abduction form.
Ouch! This is NOT what Owen had in mind for his Abduction Report email messages.
Alf  Nader was abducted last November and was gone for 11 hours.
But with no formatting, won’t the email message be all jumbled together?
Just because the PHP code is organized nicely doesn’t mean its output will automatically look good.
Organizing PHP code so that you can better understand it is completely different than formatting the output of  PHP code that users will see.
You’ll normally use HTML tags to format the output of  PHP code since in most cases PHP is used to dynamically generate a web page.
Here we’re generating an email message, which is plain text, not HTML.
We need to deal with the fact that the message currently looks like this:
How would you reformat the plain text email message so that it is easier to read?
Q: Is there a way to use HTML formatting in emails you send from a PHP script?
But it requires an additional step that involves setting the content type header for the message.
Headers and content types are a bit beyond the scope of this discussion, which is why we’re sticking with pure text email messages for Owen’s email responses.
You’ll learn more about headers in Chapter 6, so you’ll definitely gain the knowledge to revisit HTML emails later.
But he can use newline characters, which are escaped as \n.
So wherever \n appears in the email text, a newline will be inserted, causing any content after it to start on the next line.
Alf  Nader was abducted last November and was gone for 11 hours.
Q: What exactly is an escape character? A: An escape character is a character that's either difficult to type or would otherwise cause confusion in PHP code.
Newlines need  double-quoted strings The problem with Owen’s code is that PHP handles strings differently depending on whether they’re enclosed by single or double quotes.
More specifically, newline characters (\n) can only be escaped in double-quoted strings.
So the Abduction Report email message must be constructed using double-quoted strings in order for the newlines to work.
Single-quoted strings are considered raw text, whereas PHP processes double-quoted strings looking for variables.
When a variable is encountered within a double-quoted string, PHP inserts its value into the string as if  the strings had been concatenated.
So not only is a double-quoted string necessary to make the newlines work in the email message, but it also allows us to simplify the code by sticking the variables directly in the string.
Concatenation is no longer necessary since variables can be referenced directly within a double-quoted string.
Newline characters are now interpreted properly thanks to the double-quoted string.
There’s no need for a newline at the very end since this is the last line of the email message.
But we still need to break the message into multiple concatenated strings so that the code's easier to read across multiple lines.
Q: If double-quoted strings are so cool, why have we used mostly single-quoted strings up until now?
A: Well, keep in mind that single-quoted strings are not processed by PHP in any way, which makes them ideal for strings that are pure text with no embedded variables.
So we’ll continue to use single-quoted strings throughout the book unless there is a compelling reason to use a double-quoted string instead.
Q: What happens if I need to use a single quote (apostrophe) within a single-quoted string, as in 'He's lost!'?
You don’t have to escape quotes when they don’t conflict, such as a single quote inside of a double-quoted string: "He's lost!"
How do I know what escape characters I can use within single quotes?
Assemble an email message for Owen With the body of  the email message generated as a string, you can move on to assembling the rest of  Owen’s email.
An email message is more than just a message body—there are several different parts.
Although some are optional, the following pieces of  information are used in pretty much all emails:
This is the kind of  email message Owen hopes to receive upon someone submitting an alien abduction report.
This is the user’s email address, which is already stored away in the $email variable.
Anything you want can go here - it’s what will appear as the subject of the email in Owen’s inbox.
This is Owen’s email address, which can also be a static string.
We’ve already constructed a string for the email body, which is stored in the $msg variable.
This sample email message reveals that most of  the content is in the body of a message, which you’ve already finished.
All that’s left is coming up with a message subject, “from” and “to” email addresses...
Variables store the email pieces and parts We already have the message body stored in $msg, but we’re still missing the message subject and “from” and “to” email addresses.
The subject and the “to” email address can just be set as static text in new variables, while the.
Sending an email message with PHP So you’re ready to write the PHP code to actually send the email message to Owen.
This requires PHP’s built-in mail() function, which sends a message based on information you provide it.
These three pieces of  information are required by the mail() function, so you always need to provide them.
The “from” email address isn’t required but it’s still a good idea to include it.
To specify the “from” field when calling the mail() function, an additional function argument’s required, along with some string concatenation.
Q: Is there anything else that can be specified as part of an email message in addition to the “from” email address?
You can also specify “copy” and “blind copy” recipients in the same way as the “from” recipient—just use 'Cc:' or 'Bcc:' instead of 'From:'
If you want to specify both a “from” and a “copy” recipient, you must separate them with a carriage-return newline character combination (\r\n), like this:
The text ‘From:’ must be prepended to the email address when specifying the address of the email sender.
The PHP mail() function sends an email message from within a script.
The period’s handy yet again for concatenating ‘From:’ with Owen’s email address.
Each piece of the email message is provided to the mail() function by a variable.
Just add the code that calls mail() to your script.
The line of  code that calls the mail() function is all you need to send the email message.
Make sure this code appears in the script after the code that creates the email variables, and you’re good to go.
Here’s the complete code for Owen’s report.php script, including the call to the mail() function.
Generate an HTML web page on the fly that confirms the successful form submission.
Make sure to change this email address to your own to test out the script.
Assemble the different pieces of the email message to be sent to Owen.
Grab all the form data from the $_POST array and stick it in individual variables.
You may need to configure PHP on your web server so it knows how to send email.
If the mail() function doesn’t work for you, the problem may be that email support isn’t.
Make sure the $to variable is set to your email address, not Owen’s! Upload the script to your web server, open it in your browser, and fill out the form with alien abduction information.
Wait a few seconds and then go check your email Inbox for the message.
The form data is successfully formatted and sent as an email message!
The dynamically generated confirmation page still confirms the form submission.
Owen starts getting emails Owen is thrilled that he’s reliably receiving alien abduction information from a web form directly to his email Inbox.
Now he doesn’t have to worry if  he hears that someone saw his dog because he’ll have email addresses from everyone who contacts him.
And even better, he’ll be able to look through the responses at his leisure.
This is awesome! With email abduction reports like this, I know I’ll find Fang.
The action attribute of the <form> tag causes the report.php script to process the form data.
The PHP script also generates an email message, and then sends it to Owen.
Owen is one happy camper now that he’s receiving alien abduction emails through his form.
Look at all these emails! I need some way to get to the data when I want to.
And I need it in a safe place so I don’t lose it.
Owen starts losing emails The good news is that Owen’s getting emails now.
The bad news is that he’s getting lots and lots of  emails.
So many that he’s having difficulty keeping track of  them.
His Inbox is packed, and he’s already accidentally deleted some...
Owen needs a better way to store the alien abduction data.
Got aliens on the brain? Shake them loose by matching each HTML and PHP component to what you think it does.
A software application for viewing and interacting with web pages that acts as the client side of  web communications.
These tags are used to enclose PHP code so that the web server knows to process it and run it.
A software application for delivering web pages that acts as the server side of  web communications.
A markup language used to describe the structure of web page content that is viewed in a web browser.
A type of  PHP data storage that allows you to store multiple pieces of  information in a single place.
A storage location in a PHP script that has its own unique name and data type.
A series of  input fields on a web page that is used to get information from users.
A name used to describe built-in PHP variables that are accessible to all scripts.
A programming language used to create scripts that run on a web server.
A built-in PHP array that stores data that has been submitted using the “post” method.
A PHP command that is used to output content, such as pure text or HTML code.
Got aliens on the brain? Shake them loose by matching each HTML and PHP component to what you think it does.
A software application for viewing and interacting with web pages that acts as the client side of  web communications.
These tags are used to enclose PHP code so that the web server knows to process it and run it.
A software application for delivering web pages that acts as the server side of  web communications.
A markup language used to describe the structure of web page content that is viewed in a web browser.
A type of  PHP data storage that allows you to store multiple pieces of  information in a single place.
A storage location in a PHP script that has its own unique name and data type.
A series of  input fields on a web page that is used to get information from users.
A name used to describe built-in PHP variables that are accessible to all scripts.
A programming language used to create scripts that run on a web server.
A built-in PHP array that stores data that has been submitted using the “post” method.
A PHP command that is used to output content, such as pure text or HTML code.
In PHP, variables must start with a dollar sign, like this: $variable_name.
MySQL An application that lets you store data in databases and tables and insert and retrieve information using the SQL language.
Each value has an index that you can use to access it.
We have to plug in the interweb before we can connect the web site configuraturer.
How it fits together I’m not letting her anywhere near my web application.
Knowing how things fit together before you start building is a good idea.
You’ve created your first PHP script, and it’s working well.
But getting your form results in an email isn’t good enough anymore.
You need a way to save the results of your form, so you can keep them as long.
But you need to hook up your PHP script to.
The new report form is great, but now I’m getting too many emails.
I can’t drink enough caffeine to go through them all when I first receive them.
Owen’s email script was fine when he was only getting a few responses, but now he’s getting lots of emails, far more than he can manage.
And some are getting stuffed in his spam folder, which he never checks.
In fact, an email he’d be very interested in seeing is hidden away in his spam folder right this moment...
Owen needs a way to store all the messages so he can look at them when he has time and easily find ones related to Fang.
Just in case you didn’t know, most people pronounce MySQL by spelling out the last three letters, as in “my-ess-que-el”
Owen needs messages like this safely stored in one place where he can sift through them for possible Fang sightings.
MySQL databases are organized into tables, which store information as rows and columns of  related data.
Most web applications use one or more tables inside a single database, sort of  like different file folders within a file cabinet.
The database itself is often stored as files on a hard drive, but it doesn’t necessarily have to be.
With alien abduction data safely stored in a MySQL database, Owen can analyze the reports from everyone who answered “yes” to the Fang question at his convenience.
He just needs to use a little SQL code to talk to the database server.
The database server reads and writes data from/to the database.
The web server processes web page requests, runs PHP scripts, and returns HTML content.
MySQL excels at storing data Owen really needs a way to store the alien abduction report data in a safe place other than his email Inbox.
What he needs is a database, which is kinda like a fancy, ultra-organized electronic file cabinet.
Since the information in a database is extremely organized, you can pull out precisely the information you need when you need it.
Databases are managed by a special program called a database server, in our case a MySQL database server.
You communicate with a database server in a language it can understand, which in our case is SQL.
A database server typically runs alongside a web server on the same server computer, working together in concert reading and writing data, and delivering web pages.
Owen needs a MySQL database So it’s decided: MySQL databases are good, and Owen needs one to store alien abduction data.
He can then modify the report.php script to store data in the table instead of  emailing it to himself.
The table will keep the data safe and sound as it pours in from abductees, giving Owen time to sift through it and isolate potential Fang sightings.
Creating a MySQL database requires a MySQL database server and a special software tool.
The reason is because, unlike a web server, a database server has to be communicated with using SQL commands.
Creating MySQL databases and tables requires communicating with a MySQL database server.
I’ve always heard the tool makes all the difference in getting a job done right.
How do I know what MySQL tool to use to create a database and table?
MySQL terminal is a command-line window that provides access to a command line where you can enter SQL commands.
Two popular MySQL tools are the MySQL terminal and phpMyAdmin.
Both tools let you issue SQL commands to create databases and tables, insert data, select data, etc., but phpMyAdmin goes a step further by also providing a point-and-click web-based interface.
Some web hosting companies include phpMyAdmin as part of  their standard MySQL service, while the MySQL terminal can be used to access most MySQL installations.
Owen needs a MySQL tool to create his new alien abduction database/table.
You must have a MySQL database server installed before turning the page.
It’s impossible to help Owen without one! If  you already have a MySQL database server installed and working, read on.
If  not, turn to Appendix ii and follow the instructions for getting it installed.
If  you’re using a web hosting service that offers MySQL, go ahead and ask them to install it.
Several pieces of  information are required to access a MySQL database server.
You’ll need them again later, so now is a good time to figure out what they are.
I can successfully access MySQL server using the MySQL terminal.
If you’ve found some other MySQL tool that works, write it down here.
My database password: If you’re afraid this book might fall into the wrong hands, feel free to skip writing this one down.
With your MySQL database server information in hand, all that’s left is confirming that the server is up and running.
Check one of  the boxes below to confirm that you can successfully access your MySQL server.
Before you can create the table inside the database, you need to make sure you’ve got our new database selected.
When you use the terminal, you must put a semicolon after each command.
The MySQL server usually responds to let you know that a command was successful.
Create a MySQL database and table Some MySQL installations already include a database.
If  yours doesn’t, you’ll need to create one using the CREATE DATABASE SQL command in the MySQL terminal.
But first you need to open the MySQL terminal in a command-line window—just typing mysql will often work.
You’ll know you’ve successfully entered the terminal when the command prompt changes to mysql>
To create the new alien abduction database, type CREATE DATABASE aliendatabase; like this:
This is an SQL command that creates a new table.
All the other stuff is detailed information about what kinds of data can be stored in the table.
The SQL code to create a table is a little more involved since it has to spell out exactly what kind of  data’s being stored.
Let’s take a look at the SQL command before entering it into the terminal:
All SQL commands entered into the MySQL terminal must end with a semicolon.
To actually create the new table, type the big CREATE TABLE command into the MySQL terminal.
After successfully entering this command, you’ll have a shiny new aliens_abduction table.
The “Query OK” response from the MySQL server lets you know the table was created without any problems.
So the SQL tab of  the phpMyAdmin application provides a way to issue SQL commands just as if  you were using the MySQL terminal.
After entering the SQL code, click this button to create the table.
Your MySQL installation may offer the phpMyAdmin web-based tool, which lets you access your databases and tables graphically.
You can use the phpMyAdmin user interface to click your way through the creation of a database and table, or enter SQL commands directly just as if  you’re in the MySQL terminal.
Click the SQL tab in phpMyAdmin to access a text box that acts like the MySQL terminal.
I’ve got a MySQL database and table, now how do I put data into them?
You use the SQL INSERT statement to insert data into a table.
The SQL language provides all kinds of  cool statements for interacting with databases.
One of  the more commonly used statements is INSERT, which does the work of  storing data in a table.
Take a look at the statement below to see how the INSERT works.
Keep in mind that this statement isn’t an actual SQL statement, it’s a template of  a statement to show you the general format of  INSERT.
This next part is a list of your database column names, separated by commas.
Another SQL keyword, this one signaling that the values for the columns follow.
This next part is a list of the values to be inserted, separated by commas.
IMPORTANT: these need to be in the same order as the column names.
More column names follow, with no comma after the last one.
More quoted values follow, with no comma after the last one.
One of  the most important things to note in this statement is that the values in the second set of  parentheses have to be in the same order as the database column names.
This is how the INSERT statement matches values to columns when it inserts the data.
Your column names are in the first set of parentheses and divided by commas.
The values for each column are in the second set of parentheses and also divided by commas.
The values to be inserted must be listed in exactly the same order as the column names.
All of these values contain text, not numbers, so we put single quotes around each one.
Unlike PHP statements, SQL statements don’t end in a semicolon when used in PHP code.
This is the name of the table the data is being inserted into, NOT the name of the database.
The aliens_abduction table is shown below, but it doesn’t have any data yet.
It’s OK to write some of the data above the table and use arrows if you don’t have room.
The INSERT statement in action Here’s how an INSERT statement can be used to store alien abduction data in Owen’s new aliens_abduction table.
The aliens_abduction table is shown below, but it doesn’t have any data yet.
It’s OK to write some of the data above the table and use arrows if you don’t have room.
Q: I’m not sure I understand the difference between a database and a table.
Tables serve as a way to divide up the data in a database into related groups so that you don’t just have one huge mass of data.
It’s sort of like the difference between throwing a bunch of shoes into a huge box, as opposed to first placing each pair in a smaller box—the big box is the database, the smaller shoeboxes are the tables.
So data is stored in tables, and tables are stored in databases.
Q: What exactly is the MySQL terminal? How do I find it on my computer?
A: The MySQL terminal is a technique for accessing a MySQL database server through a command-line interface.
In many cases the MySQL terminal is not a unique program, but instead a connection you establish using the command line from a “generic” terminal program, such as the terminal application in Mac OS X.
How you access the MySQL terminal varies widely depending on what operating system you are using and whether the MySQL server is local or remote (located somewhere other than your computer)
Appendix ii has more details about how to go about accessing the MySQL terminal.
Q: What about phpMyAdmin? Where can I find that? A: Unlike the MySQL terminal, phpMyAdmin is a webbased application that allows access to a MySQL database.
It is actually a PHP application, which is why you always access it from a web server, as opposed to installing it as a local client application.
Many web hosting companies offer phpMyAdmin as part of their standard MySQL hosting plan, so it may already be installed for you.
Just remember that it must be installed on a web server and configured to have access to your MySQL databases, just like any other PHP and MySQL application.
Q: I have both the MySQL terminal and phpMyAdmin available.
The upside to phpMyAdmin is that you can explore your databases and tables visually without having to enter SQL commands.
That can be very handy once you get comfortable with SQL and don’t want to manually enter commands for every little thing.
However, for now it’s a good idea to focus on really understanding how to interact with your MySQL data using SQL commands, in which case either tool works just fine.
Store an alien abduction sighting in your database with an SQL INSERT statement.
Using a MySQL tool such as the MySQL terminal or the SQL tab of phpMyAdmin, enter an INSERT statement for an alien abduction.
As an example, here’s the INSERT statement for Sally Jones’ abduction:
Executing the INSERT statement in the MySQL terminal results in a new row of data being added to the aliens_abduction table.
Write down how you think we can confirm that the data was added.
Use SELECT to get table data Inserting data into a table is handy and all, but it’s hard not to feel a certain sense of  unease at the fact that you haven’t confirmed that the data actually made its way into the table.
It’s kind of  like depositing money into a savings account but never being able to get a balance.
The SELECT statement is how you “get the balance” of  a table in a database.
Or more accurately, SELECT allows you to request columns of  data from a table.
Follow SELECT with a list of the columns you want data for.
A SELECT always takes place with respect to a specific table, not a database in general.
The columns supplied to a SELECT statement must be separated by commas.
Regardless of  how many columns a table has, only data in the columns specified in SELECT is returned.
This SELECT statement grabs all of  the first and last names of  alien abductees from the aliens_abduction table:
The FROM part of a SELECT statement is how SELECT knows what table we’ll be selecting data from.
The SQL SELECT statement retrieves columns of data from a table.Only the data for these.
The SELECT statement only retrieves data from the aliens_abduction table.
To check an INSERT, you need a quick way to look at all of  the data in a table, not just a few columns.
The SELECT statement offers a shortcut for just this thing:
The asterisk, or “star,” tells the SELECT statement to get the data for all of the columns in the table.
No list of columns is necessary because * means “get them all!”
Make sure the alien abduction INSERT statement worked by SELECTing the table data.
Execute a SELECT query using a MySQL tool to view all of  the contents of  the aliens_abduction table.
Make sure the new row of  data you just inserted appears in the results.
The SELECT query reveals a single row of data stored in the table.
Below each column name is the data for that column.
How many rows of  data does your table have in it?
So you’re telling me I have to write an INSERT statement every time I want to add a new alien abduction report to my database? This MySQL stuff suddenly isn’t looking so appealing.
It’s true, each insertion into a MySQL database requires an INSERT statement.
And this is where communicating with a MySQL database purely through SQL commands gets tedious.
Sure there are lots of  benefits gained by storing Owen’s data in a database, as opposed to emails in his Inbox, but managing the data manually by issuing SQL statements in a MySQL tool is not a workable solution.
How do you think Owen’s MySQL data insertion problem can be solved?
Let PHP handle the tedious SQL stuff The solution to Owen’s problem lies not in avoiding SQL but in automating SQL with the help of  PHP.
This means Owen’s HTML form can call a PHP script to handle inserting data into the database whenever it’s submitted—no emails, no SQL tools, no hassle!
Without PHP, a manual SQL INSERT statement is required to store each alien abduction report in the database.
With PHP, a PHP script automatically handles the INSERT when the form is submitted.
The HTML form generates an email that Owen receives and must then manually add to the database.
Owen creates an SQL INSERT statement that inserts the data from the email into the database.
The HTML form calls a PHP script and asks it to add the form data to the database.
Let’s take a closer look at exactly how the application works now that PHP is in the picture.
Sally fills out the alien abduction form and presses the Report Abduction button to submit it.
The information gets sent to the report.php script on the web server.
Lots and lots and lots of  other people continue to submit the form too.2
The form in the report.html web page calls the report.php script on the web server whenever it’s submitted by a user.
Owen’s report.php script connects to a MySQL database and inserts the information from each submission using SQL INSERT statements.
Not only does Owen need a script to put the data in the database, but he also needs a script to search and view the data.
In fact, this could serve as the main page for his web site.
The index.php script connects to the database, retrieves alien abduction data, and shows it to Owen.
Owen has the power to access the data in many new ways, allowing him to really focus on finding his lost dog, Fang.
The report.php script communicates with the MySQL server to insert data into the aliens_abduction table of the database.
The aliens_abduction table stores alien abduction reports as rows of data.
The index.php script retrieves data from the aliens_abduction table so that it can be formatted and shown to Owen.
The aliens_abduction table serves as a data source for the index.php script.
A database server is just a program running on a server computer, usually alongside the web server.
Connect to your database from PHP Before a PHP script can insert or retrieve data from a MySQL database, it must connect to the database.
Connecting to a MySQL database from PHP is similar in many ways to accessing a database from a MySQL tool, and it requires the same pieces of  information.
Remember the three checkboxes you filled out earlier in the chapter? Here they are again, along with a new one for the name of  the database—go ahead and write them down one more time.
Your web hosting service or webmaster may tell you this, or if your web server and MySQL database server are running on the same machine, you can use the word “localhost”
The name of the database you created earlier, which is aliendatabase.
If for some reason you named your database something else or decided to use a database that was already created, use that name instead.
The database name is aliendatabase and is necessary for a script to communicate with the database.
The table name is aliens_abduction, and doesn’t enter the picture until you start issuing SQL commands.
Any PHP script that stores or retrieves data from a MySQL database must first establish a connection with the database using the four pieces of information.
The database server host location, username, password, and database name are all required in order to establish a connection to a MySQL database from a PHP script.
Once that connection is made, the script can carry out SQL commands just as if  you were entering them manually in a MySQL tool.
Your own four pieces of connection data will be different than these.
What do you think each of these PHP functions is doing in the script?
We just talked and played with a dog', 'yes', 'I may have seen your dog.
Be really careful with the quotes and double quotes here, as well as spaces before and after quotes!
These functions require your web server to have PHP version 4.1 or greater.
You may be able to use ‘localhost’ for your database location instead of a domain name.
Insert data with a PHP script Issuing a MySQL query from PHP code first requires you to establish a connection with the database.
The query isn’t actually carried out until you pass along the query string to the database server.
And finally, when you’re finished querying the database, you close the connection.
All of  these tasks are carried out through PHP script code.
Here’s an example that inserts a new row of  alien abduction data:
Build the INSERT query as a string in PHP code.
I’ve got a big INSERT statement to send, and it’s stored in a PHP variable.
If  you see a pattern it’s no accident—all of  the modern PHP functions that interact with MySQL begin with mysqli_
Using these three functions typically involves a predictable sequence of  steps.
Provide the server location, username, and password to get permission to interact with the MySQL database server.
Also specify the database name since this is a connection to a specific database.
Create an SQL query and store it as a string in a PHP variable.
To communicate with the database server, you have to use SQL commands.
For example, an INSERT statement is needed to add data to the aliens_abduction table.
There’s nothing special about the variable name we chose, but a straightforward name like $query works fine.
The query is created as a string and stored in the $query variable.
An older set of PHP functions that interact with MySQL begin with mysql_, without the “i”
The “i” stands for “improved,” and the mysqli_ functions are now preferred.
We just talked and played with a dog', 'yes', 'I may have seen your dog.
Finally, mysqli_close() tells the MySQL database server that you are finished communicating with it.
This function executes your query, which is an INSERT statement to insert data into the table.
If something goes wrong, this will send back a message.
This is an SQL INSERT query that adds data to our database.
The code stored in the $query variable is SQL code, not PHP code.
Yes, it’s the same information you used earlier when working with the MySQL terminal, plus the name of  the database.
The name of your database In our example, we’ve named the database aliendatabase.
Yours will be whatever name you decided to give it when you set it up earlier, or if  your web hosting company created your database for you, you’ll be using that name.
Use this variable to perform other actions on the database.
The result of  calling the function is a database connection and a PHP variable that you can use to interact with the database.
The variable is named $dbc in the example, but you can name it anything you like.
The mysqli_connect() function treats the location, username, password, and database name as strings, so you must quote them.
The location of the database (a domain name, an IP address or localhost) In our example, we’re using the location of  Owen’s (fictional) database.
You need to use the location of  your own MySQL server.
Often, this is localhost if  the database server is on the same machine as your web server.
Your web hosting company will be able to tell you this.
Your username and password You’ll need your own username and password for your own database server.
These will either be set up by you or given to you by your web hosting company when MySQL is first installed.
If  you set up your own MySQL, follow the instructions to give yourself  a secure username and password.
The location, username, password, and name of  the MySQL database in the mysqli_connect() function must all have quotes around them.
Look at each one and then write down whether or not it will work, and how to fix it.
Look at each one and then write down whether or not it will work, and how to fix it.
The double quotes will work just like the single quotes.
This will work, although it’s not a very good name for a database connection.
This will work, assuming the web server and database server are on the same machine.
This will work only if you set a blank password for the database.
Not a good idea, though! You should always have a password set for each database.
In mysqli_connect(),  that fourth item, the name of the database, is optional.
You can leave it out of the function and use mysqli_select_db() to specify the name of the database instead.
So this code is the same as if you had passed all four arguments to mysqli_connect()
You need a semicolon here to terminate the PHP statement.
This assumes the database server is located on the same server computer as the web server.
Leaving off the fourth argument requires you to call mysqli_select_db() to select the database.
In this book, we’re using single quotes for PHP strings and reserving double quotes for SQL queries.
This is where the PHP die() function comes in handy.
The PHP die() function terminates a PHP script and provides feedback about code that failed.
While it won’t reveal precisely what went wrong, die() tells us that something’s up and that we need to fix it.
If  something’s wrong with one of  the four connection variables for mysqli_connect(), or if  the database server can’t be located, the die() function will stop the rest of  the PHP script from running and show the error message in parentheses.
The die() function is called if the connection isn’t created.
This message is echoed to the web page if the connection fails.
If one of our four strings in the mysqli_connect() function isn’t right, we’ll get feedback.
It seems like it would be easy to screw up one of the pieces of information used to connect to the database.
How do I know for sure if the connection worked?
Yes! Once you’ve made a database connection with mysqli_connect(), you can issue SQL queries directly from PHP.
Nearly everything you can do in the MySQL terminal you can do in PHP code with the database connection you’ve now made.
It’s this connection that establishes a line of  communication between a PHP script and a MySQL database.
The SQL query is passed to mysqli_query() as a PHP string.
Remember, our goal is to automate this INSERT query using PHP code.
Now what? Can we just start issuing queries as if we’re inside the MySQL terminal?
Build the INSERT query in PHP SQL queries in PHP are represented as strings, and it’s customary to store a query in a string before passing it along to the mysqli_query() function.
Since SQL queries can be fairly long, it’s often necessary to construct a query string from smaller strings that span multiple lines of  code.
With the INSERT query stored in a string, you’re ready to pass it along to the mysqli_query() function and actually carry out the insertion.
This is a PHP string variable that now holds the INSERT query.
The query string is broken across multiple lines to make the query more readable - the periods tell PHP to turn this into one big string.
The period tells PHP to tack this string onto the string on the next line.
Since this entire piece of code is PHP code, it must be terminated with a semicolon.
Q: Why is an INSERT into a database called a query? Doesn’t “query” mean we’re asking the database for something?
In MySQL database applications, the word “query” is quite general, referring to any SQL command you perform on a database, including both storing and retrieving data.
Q: Why isn’t the INSERT statement just created as one big string?
A: Keep in mind that the INSERT statement is stored as one big string, even though it is created from multiple smaller strings.
Ideally, the INSERT statement would be coded as a single string.
But like many SQL statements, the INSERT statement is quite long and doesn’t fit on a “normal” line of code.
So it’s easier to read the query string if it’s coded as smaller strings that are glued together with periods.
Q: Is it really necessary to list the column names when doing an INSERT?
You can leave off the column names in the INSERT statement.
In which case, you must provide values for all of the columns in the table in the same order that they appear in the table structure.
Knowing this, it’s generally safer and more convenient to specify the column names.
This is a database connection that’s already been established via the mysqli_connect() function.
Just in case that’s a bit fuzzy, here’s the code that established that connection:
Query the MySQL database with PHP The mysqli_query() function needs two pieces of  information to carry out a query: a database connection and an SQL query string.
The mysqli_query() function requires a database connection and a query string in order to  carry out an SQL query.
All that’s missing is passing them to the mysqli_query() function.
The connection to the database was stored away earlier in the $dbc variable.
Remember, these connection variables will be different for your database setup.
This code shows that calling the mysqli_query() function isn’t just a one-way communication.
The function talks back to you by returning a piece of  information that’s stored in the $result variable.
An SQL query is a request written in SQL code that is sent to the database server.
Close your connection with mysqli–close() Since we’re only interested in executing the single INSERT query, the database interaction is over, at least as far as the script is concerned.
And when you’re done with a database connection, you should close it.
Database connections will close by themselves when the user navigates away from the page but, just like closing a door, it’s a good habit to close them when you’re finished.
This is where you pass the database connection variable that we’ve been using to interact with the database.
It’s a good habit to close a MySQL database connection when you’re finished with it.
This variable holds a reference to the database connection, which was created by mysqli_connect() back when the connection was first opened.
Database servers only have a certain number of connections available at a time, so they must be preserved whenever possible.
And when you close one connection, it frees that connection up so that a new one can be created.
If  you are on a shared database, you might only have five connections allocated to you, for example.
And as you create new database-driven applications, you’ll want to keep your supply of  available connections open as much as you can.
Database connections need a location, a username, a password, and a database name.
The mysqli_connect() function creates a connection between your PHP script and the MySQL database server.
The die() function exits the script and returns feedback if your connection fails.
Issuing an SQL query from PHP code involves assembling the query in a string and then executing it with a call to mysqi_query()
Call the mysqli_close() function to close a MySQL database connection from PHP when you’re finished with it.
It’s just a bit easier to manage your code when you store your queries in variables, and then use those variables in the mysqli_query() function.
Q: Should the code that issues the INSERT query be doing anything with the result?
So far we’ve been using die() to terminate a script and send a message to the browser if something goes wrong.
Eventually you may want to provide more information to the user when a query’s unsuccessful, in which case you can use the result of the query to determine the query’s success.
Is this correct? Write down if  you think this is what the script should be doing, and why.
Replace the email code in Owen’s report.php script so that it inserts data into the MySQL database, and then try it out.
Remove the code in the report.php script that emails form data to Owen.
In its place, enter the code that connects to your MySQL database, builds a SQL query as a PHP string, executes the query on the database, and then closes the connection.
Upload the new report.php file to your web server, and then open the report.html page in a browser to access the Report an Abduction form.
Fill out the form and click Report Abduction to store the data in the database.
Now fire up your MySQL tool and perform a SELECT query to view any changes in the database.
Here’s the new PHP database code you’ve been working on.
What PHP code can help us get the values from Owen’s form into the INSERT query?
The INSERT query needs to be inserting the form data, not static strings.
The query we’ve built consists of  hard coded strings, as opposed to being driven from text data that was entered into the alien abduction form.
In order for the script to work with the form, we need to feed the data from the form fields into the query string.
The alien abduction form is where the user’s report data comes from.
This form data needs to make its way into the $query string.
Isn’t the whole point here to take data from a form and store it in a database? It looks like the query’s inserting the same data no matter what gets entered into the form.
The $_POST superglobal’s already being used to extract the data from each of Owen’s form fields and store it in variables.
So you already have the form data in hand, you just need to incorporate it into the alien abduction INSERT statement.
Now that you’re no longer emailing the form data, you don’t need the $name variable.
You do still need the first and last name of  the user so that they can be added to the database—but you need the names in separate variables.
The user’s name is now stored in separate variables so that it can be inserted into distinct columns of the aliens_abduction table.
Remember, the name you use for $_POST needs to match up with the name of an HTML form field.
The column names appear in the SQL statement exactly as they did before.
Instead of static data about Sally Jones’ abduction, now we insert whatever data the user entered into the form.
The order of the variables must match the order of the column names for the data to get stored in the correct columns of the table.
There’s nothing stopping you from putting $_POST directly in a query.
However, it’s a good coding habit to isolate form data before doing anything with it.
This is because it’s fairly common to process form data to some degree before inserting it into a database.
For example, there are clever ways for hackers to try and hijack your queries by entering dangerous form data.
To keep things simple, this chapter doesn’t do any processing on form data, but that doesn’t mean you shouldn’t go ahead and get in the habit of storing form data in your own variables first before sticking it in a query.
Q: OK, so does it matter where you use single quotes versus double quotes? Can I use single quotes around the whole query and double quotes around each variable?
And no, you can’t use single quotes around the whole query with double quotes around the variables.
The reason is because PHP treats strings differently depending on whether they appear inside single quotes or double quotes.
The difference between the two is that single quotes represent exactly the text contained within them, while some additional processing takes place on the text within double quotes.
This processing results in a variable inside of double quotes getting processed and its value placed in the string in lieu of the variable name.
This is quite handy, and is why double quotes are generally preferred for building SQL query strings.
Q: Couldn’t you just build query strings by concatenating the variables with the SQL code?
A: Yes, and if you went the concatenation route, you could certainly use single quotes instead of double quotes.
But query strings tend to be messy as it is, so anything you can do to make them more readable is a good thing—embedding variables directly in a double-quoted string instead of concatenating them with single quotes definitely makes query strings easier to understand.
Let’s use everything we’ve learned to finish Owen’s form-handling PHP script so that it can successfully store alien abduction data in a database.
Finish the PHP code below to complete the report.php script.
Let’s use everything we’ve learned to finish Owen’s form-handling PHP script so that it can successfully store alien abduction data in a database.
The new name variables hold the first and last name of the user, as entered into the form.
You must connect to the database and provide the proper connection information before performing any SQL queries from PHP.
The query is constructed as a PHP string, making sure to use data extracted from the form fields.
Execute the query on the database - this inserts the data!
Confirm the successful form submission, just like you did in the old script.
Change Owen’s script to use actual form data when you do an INSERT.
Upload the new version of  the script and then try it out by submitting the form in the report.html page a few times, making sure to enter different data each time.
Now use your MySQL tool to carry out a SELECT and view the contents of  the aliens_abduction table.
There’s an extra row of data for Sally Jones from before you fixed the INSERT query.
Don’t worry, you learn how to remove unwanted data in the next chapter.
The new alien abduction reports appear in the table just as you would expect!
I’m really stoked that I’ve now got a database automatically filled with alien abduction reports submitted by users.
But it doesn’t help me isolate the reports that might help me find Fang.
Owen needs a way to find specific data, such as alien abductions where Fang was spotted.
You know what column of  the database contains the information in question: fang_spotted.
This column contains either yes or no depending on whether the abductee reported that they saw Fang.
You know that the following SQL query returns all of  the data in the table:
Owen needs help sifting through his data The new and improved report.php script is doing its job and automating the process of  adding alien abduction reports to the database.
Owen can just sit back and let the reports roll in...
More data isn’t exactly making it any easier to hone in on alien abduction reports involving a potential Fang sighting.
It’s called WHERE, and you tell it exactly how you want to filter the query results.
In Owen’s case, this means only selecting alien abduction reports where the fang_spotted column equals yes.
This clause reduces the data returned by the query, yielding only the data where the fang_spotted column is set to yes.
This part of the SELECT query stays the same - the WHERE clause takes care of whittling down the results.
The value the column must be set to in order for data to be selected.
Remember, without the WHERE clause, this causes all of the data in the table to be selected.
Try out the SELECT query with a WHERE clause to find specific data.
Use a SELECT query with a WHERE clause in your MySQL tool to search for alien abduction data that specifically involves Fang sightings.
All of these records have the fang_spotted column set to yes.
Owen’s on his way to finding Fang Thanks to PHP and its functions that interface to MySQL, Owen’s MySQL database server receives the alien abduction data from an HTML form and stores it in a database table.
The data waits there safely in the table until Owen gets a chance to sift through it.
And when he’s ready, a simple SELECT query is all it takes to isolate abduction reports that potentially involve Fang.
Storing the data in a database is sooo much better than email, and I can now really focus on alien abductions where Fang might’ve been seen.
Even though you haven’t seen it all put together yet, match each HTML, PHP, and MySQL component to what you think it does.
This is the SQL code the PHP script passes to the MySQL server.
The name of  the database that contains the aliens_abduction table.
This opens a connection between the PHP script and the MySQL server so they can communicate.
This is another name for the software that runs MySQL and all the databases and tables it contains.
This optional PHP function tells the database server which database to use.
This is the name of  Owen’s PHP script that processes the data users enter into his report.html form.
This is where the data from the report.html form will eventually end up being stored.
This HTML element is used by visitors to the site when they finish filling out the form.
This PHP function closes a connection to the MySQL server.
This runs PHP scripts and returns HTML pages to browsers, often communicating with a database along the way.
The HTML form uses this request method to send the data in the form to a PHP script.
This PHP function sends a query to the MySQL server.
Even though you haven’t seen it all put together yet, match each HTML, PHP, and MySQL component to what you think it does.
This is the SQL code the PHP script passes to the MySQL server.
The name of  the database that contains the aliens_abduction table.
This opens a connection between the PHP script and the MySQL server so they can communicate.
This is another name for the software that runs MySQL and all the databases and tables it contains.
This optional PHP function tells the database server which database to use.
This is the name of  Owen’s PHP script that processes the data users enter into his report.html form.
This is where the data from the report.html form will eventually end up being stored.
This HTML element is used by visitors to the site when they finish filling out the form.
This PHP function closes a connection to the MySQL server.
This runs PHP scripts and returns HTML pages to browsers, often communicating with a database along the way.
The HTML form uses this request method to send the data in the form to a PHP script.
This PHP function sends a query to the MySQL server.
Q: It’s pretty cool that I’ve learned how to insert data into a MySQL table but I’m still a little confused about how the table and its database were created.
It’s true that you need to understand how to create your own tables, not just use code presented to you.
So far you’ve created a table without much understanding of the CREATE TABLE syntax.
That’s fine for Owen’s single table, but when you need to create multiple tables of your own design, it isn’t good enough.
You’ll need to take a closer look at the data you’re storing in new tables and think about the best way to represent it.
Sometimes you have to create the data before you can use it.
Get ready to learn how to create databases and tables of your very own.
Big sale this week at MakeMeElvis.com! Genuine horse hair sideburns 20% off!
And don’t forget the “buy one, get one free” leisure suits — only three days left!
Elmer has 328 email addresses collected at this point, with more every day.
These people are on Elmer’s email list, and look forward to looking more like Elvis with Elmer’s help.
Elmer writes this email and copies and pastes each email address in the “To” field.
The Elvis store is open for business Elmer Priestley has opened his Elvis store, MakeMeElvis.com.
He’s sold a number of  studded polyester jump suits, many fake sideburns, and hundreds of  pairs of sunglasses.
Each time someone buys something, Elmer collects a new email address.
He uses these to send out newsletters about sales at his store.
Right now Elmer has to manually go through each email address in his list and copy and paste to send out his email advertising sales.
It works, but it takes a lot of  time and effort.
Elmer spends far too much time copying and pasting emails into the “To” field of  his client email application.
He wants to simplify the task of  adding new email addresses and sending out mass emails.
I’d rather be spending my time imitating Elvis, not sending out emails manually.
Elmer needs an application An application is a software program designed to fulfill a particular purpose for its users.
Elmer needs an application that will keep track of  his email address list and allow him to send out email to the people on the list by clicking a single form button.
With this laundry list of  application needs, it’s possible for Elmer to visualize his application in all its glory...
Click a Submit button on the page, and the message gets sent to the entire MakeMeElvis.com email list.
Go to a web page and enter an email message.
Let the email list build itself by allowing new customers to sign up through a web form.
A web application is a dynamic web site that is designed to fulfill a particular purpose for its users.
The MakeMeElvis.com web application consists of two main components: a form to send email messages to people on Elmer’s email list and a form to allow new customers to join the email list.
With these two forms in mind, sketch a design of Elmer’s application.
This email stuff sounds a lot like Owen’s Alien Abduction application, but the difference here is that Elmer’s email list will build itself, and his email messages will go out to the entire list.
This PHP script sends the email message to all the people on Elmer’s email list.
This form/script combination allows users to join Elmer’s email list.
Visualize Elmer’s application design It always help to visualize the design of  an application before diving into the development details.
This means figuring out what web pages and scripts will be involved, how they connect together, and perhaps most importantly, how you’ll store the data in a MySQL database.
These people are on Elmer’s email list, and receive emails that he sends to the list.
We’re going to need the table and the script before the application will work.
Frank: That’s true, but I think we should write the script first so we can test out the PHP code before connecting it to the database.
Jill: But the PHP script’s entirely dependent on the database.
It’ll be hard to test the script if  we don’t have a database for it to connect to.
Frank: Couldn’t we create the script but just leave out the specific code that connects to the database? We could do everything but actually interact with the database.
Remember, the script’s only job is to take data entered into an HTML form and stick it in a database.
Or if  it’s sending an email to the mailing list, the script reads from the database and generates an email message for each user.
Jill: True, but we didn’t even think about the HTML form.
Where does that fit into all of  this? I’m thinking we need to create the database before we can even think about writing the script.
Frank: That’s it! First we create the HTML form, then we figure out what data goes in the database, and when that’s done we tie it all together with the script.
How can we create an HTML form when we aren’t 100% sure what data we need to get from the user?
The HTML form still leads back to us needing to have the data for the application figured out first.
The data drives everything, so we should probably build the database and table first, then the HTML form, and then the script that reacts to the form submission.
Joe: I still think we probably need to come up with specific steps of  how this application is going to come together...
So where do we begin in building a PHP and MySQL application? Should we.
Write down the specific steps you think are involved in going from design to implementation with MakeMeElvis.com.
This table will hold the first names, last names, and email addresses of  everyone on Elmer’s mailing list.
Create an Add Email web form and PHP script for adding a new customer to the list.
Here’s where we’ll build a form and script that will allow a customer to easily enter their first name, last name, and email address, and then add them to the email list.
Create a Send Email web form and PHP script for sending an email to the list.
Finally, we’ll build a web form that will allow Elmer to compose an email message and, more importantly, a script that will take that message and send it to everyone stored in his email list table.
We really need a plan of  attack for putting together Elmer’s application.
By breaking it down into steps, we can focus on one thing at a time and not get overwhelmed.
A database, which is stored by a MySQL database server.
Think of a database like a container that holds information.
It all starts with a table Actually, it all starts with a database, which is basically a container for storing data.
Remember, in the last chapter, how databases are divided internally into more containers called tables.
Like days and weeks in a calendar, a table’s made up of  columns and rows of  data.
Columns consist of  one specific type of  data, such as “first name,”
Generally, all the tables in a database have some relationship to each other, even if  that affiliation is sometimes loose.
It’s common for a web application to consist of  multiple tables that are connected to one another through their data.
But all the tables are still made up of  columns and rows.
Tables store data in a grid-like pattern of columns and rows.
A database is a container for storing data in a very structured way.
Q: Where’s database data actually stored? Can I see the files?
A: Database data is typically stored in files on a hard disk.
And although you could certainly look at them, they wouldn’t tell you much.
Database files are binary files that can’t just be opened and looked at.
That’s why we have SQL—to allow us to peer into a database and interact with the data stored within it.
Make contact with the MySQL server Elmer’s application design needs a database and a table.
Most of  the day-to-day work of  dealing with a database involves interacting with tables, but you can’t just jump in and start creating tables without creating a database to hold them first.
The CREATE DATABASE command is the SQL command used to create a database.
Once that’s done, you can move on to creating a table with the CREATE TABLE command.
But before you can use either of  those commands, you have to connect to your MySQL database server.
You did this back in the last chapter, and it required a few pieces of  important information.
As well as letting a PHP script make a connection to a database and perform database actions, the database server location, username, and password are the key to using the MySQL terminal or phpMyAdmin.
And these tools are pretty helpful for getting a database application off the ground with the initial database and table creation.
Since creating a database and table for Elmer’s application only has to happen once, it makes sense to use an SQL query to create them manually.
So fire up your MySQL tool of  choice, and get ready to knock out the first step of  Elmer’s application, creating a database and table for the email list.
A MySQL tool such as the MySQL terminal lets you connect to a MySQL database server with a valid server location, username, and password.
Create an Add Email web form and PHP script for adding a new customer to the list.
Create a Send Email web form and PHP script for sending an email to the list.
When you run SQL commands in the terminal, you always add a semicolon to the end...but not when you issue SQL queries through the PHP mysqli_query() function.
In your PHP code, your SQL statements don’t need to end with a semicolon.
The MySQL terminal is different, however, and requires a semicolon at.
This is because the terminal is capable of running multiple SQL statements, whereas in PHP, you only submit one statement at a time.
The SQL command used to create a database is CREATE DATABASE, which you used briefly in the previous chapter.
When you execue this statement on a MySQL database server, the database will be created.
Creating the elvis_store database with the CREATE DATABASE command results in a shiny new database but no table to actually store data in yet...
The database is created, but it can’t hold any data without a table.
Create a table inside the database You have to know what kind of  data you want to store in a table before you can create the table.
Elmer wants to use the first and last names of  people on his email list to make the email messages he sends out a bit more personal.
Add that information to the email address, and Elmer’s email_list table needs to store three pieces of  data for each entry.
Each piece of  data in a table goes in a column, which needs a name that describes the data.
Each row in the table consists of  a single piece of  data for each of  these columns, and constitutes a single entry in Elmer’s email list.
So now we know that the first name, last name, and email address of  a customer must be created as columns in the email_list table.
Problem is, MySQL tables are highly structured and expect you to provide more than just the name of  a column of  data.
You have to tell the database a bit more about what kind of  data you intend to store in the column.
Elmer’s old text file of email addresses can’t compare to the structure and security of a database table.
Each one contains a first name, last name, and email address for one person.
Notice that product is the only text column in the products table.
There are also decimal numbers for price and integer numbers for inventory and id.
MySQL has its own names for each one of  these types of  data, as well as a few more such as types for dates and times.
It’s important to use the appropriate data types when you create table columns so that your tables are accurate and efficient.
For example, text data takes more room to store than integer data, so if a column only needs to hold integers, it’s a smart practice to use an integer data type for it.
Also, if  it knows what kind of  data a column holds, the web server won’t allow you to accidentally insert the wrong type of  data.
So if  you have a column that holds a date, you will receive an error if  you try to insert anything except a date in that column.
To create a table, you need to know what type of data is stored in each table column.
We need to define our data When you create a table, you have to tell the MySQL server what type of data each column will hold.
Data types are required for all MySQL columns, and each column in a table holds a particular type of  data.
This means some columns may hold text, some may hold numeric values, some may hold time or dates, and so on.
MySQL has a variety of  data types, and you need to know which one suits your particular data.
Let’s suppose Elmer has a table named products that keeps track of  the items for sale at his store:
This column contains text descriptions of each product in Elmer’s store.
The price column contains decimal values.The id column contains unique ID values for each product in Elmer’s store.
The inventory column contains an integer value for how many of each item are in stock.
Why do you think using different data types is better than using just text to store everything?
She’s also got a fraternal twin, TIME, who doesn’t care what the date is.
He can also store short integers, in which case he’s called a TINYINT.
She’s rigid and prefers her data to be a set length.
She can be highly efficient if you have text that’s always the same length.
Good friends with BLOB, her name is TEXT, and she’s great at storing huge amounts of text - much more than CHAR or VARCHAR.She goes by either DATETIME or TIMESTAMP.
Take a meeting with some MySQL data types These are a few of  the most useful MySQL data types.
Remember, you can use any of  them to describe the data stored within a particular column of  table data.
It’s their job to store your data for you without mucking it up.
Match each MySQL data type to each description of  some data you might store in a table.
Q: Why would I ever use a CHAR when a VARCHAR does the same thing with more flexibility?
From a design perspective, you should always design your tables to model your data as rigidly as possible.
If you know without a shadow of a doubt that a state column will always hold exactly a two-character abbreviation, then it makes sense to only allot two characters of storage for it with CHAR(2)
So CHAR is a little more efficient than VARCHAR because it doesn’t have to keep track of a variable length.
Therefore, it’s more desirable when you know for certain a text column has an exact length.
Q: Why do I need these numeric types like INT and DEC? A: It all comes down to database storage and efficiency.
Choosing the best matching data type for each column in your table will reduce the size of the table and make operations on your data faster.
Q: Is this it? Are these all the types? A: No, but these are the most commonly used ones.
We’ll get up and running with these for now, rather than bogging things down by looking at data types you may never need.
Match each MySQL data type to each description of  some data you might store in a table.
These two numbers show how many digits the database should expect in front of the decimal, and how many after.
When the length of a text value can vary, VARCHAR is a good choice.
Make it long enough to hold whatever value someone will probably need to store.
When you know exactly how many characters to expect in a column, use CHAR.
You may have answered DATE here, but true Elvisonians will know the exact date and time.
Although it would work for the state abbreviation, CHAR(2) is a better choice because it’s usually a little more efficient.
There are arguably other (potentially better) ways to represent a yes/no value in MySQL than using CHAR(1), but this way’s straightforward and reasonably efficient.
Create your table with a query We’ve got all the pieces that we need to create our table, even a good name (email_list)
All that’s missing is the data type for each column and an SQL statement to tie it all together and create the table.
The SQL command to create your table is CREATE TABLE.
Two parentheses hold a comma separated list of  all the column names, each one followed by a data type.
The CREATE TABLE SQL command is used to create a new table in a database.
You don’t have to name your tables and columns with an underscore separating words but it’s a good idea to be consistent with naming.
Create an Add Email web form and PHP script for adding a new customer to the list.
Create a Send Email web form and PHP script for sending an email to the list.
Yep, we’re still here...but we’re almost ready to move on.
Here’s the SQL command to create the table, notice the caps.
The name of the column that stores the email address.
The opening parenthesis opens the list of columns to create.
Did both queries execute without a hitch? If  not, write down what you think might have gone wrong.
This tells MySQL that the email column has a VARCHAR data type.
I entered the code to create the table exactly like we drew it up...and now I’m getting some weird error.
For some reason the CREATE TABLE statement failed in the MySQL terminal.
The CREATE TABLE statement’s fine but the MySQL terminal doesn’t know which database it’s being created in...not good.
Elmer’s all shook up because his CREATE TABLE statement is flawless, yet the MySQL terminal’s reporting an error.
Q: What’s up with the weird -> prompt I get sometimes in the MySQL terminal?
A: The -> prompt indicates that you’re entering a single statement across multiple lines—MySQL is basically telling you that it knows you’re still entering the same statement, even though you’ve hit Return to break it out across more than one line.
Once you finish the statement and put the semicolon on the end, MySQL will execute it.
Elmer has a legitimate problem that has to do with the fact that the MySQL terminal doesn’t automatically know which database you’re talking about when issuing commands.
Sure, it knows that you just created the elvis_store database, but there could already be plenty of  other databases stored on the same server—it can’t just assume you’re talking about the one you just created.
Fortunately, there is a simple solution that involves telling the MySQL terminal which database you want targeted by all subsequent statements...
The USE command chooses a database as the default database in the terminal, meaning that all subsequent commands apply to that database.
Elmer should specify his database name (elvis_store) in a USE statement to select the database and access his new table.
The USE command selects a database as the default database for subsequent SQL statements.
The USE command chooses the database you want to work with.
The USE command tells MySQL what database you intend to use.
With the database selected thanks to the USE command, the table creation now works with no problems.
The USE statement isn’t necessary if you’re using a graphical SQL tool such as phpMyAdmin - it requires you to select the database graphically before issuing SQL commands.
The table creation code is the same as before - it just needed the database selected before it would work.
Oops! My CREATE TABLE statement had a typo in it, but it still got executed.
There isn’t exactly an undo option in SQL but it’s certainly possible to fix mistakes.
However, first you need to find out exactly what kind of  mistake has been made in order to fix it.
Under “Type” you see the data types we set for each column.
This is the name of the table we want to see described.
Even if  you don’t suspect a mistake, it’s never a bad idea to check your work.
The SQL DESCRIBE command analyzes the structure of  a table, displaying a list of column names, data types, and other information.
Plugging in Elmer’s table name gives us the following SQL statement:
MySQL is not case sensitive when it comes to reserved words, such as data types, which is why you may sometimes see them in lowercase.
A: MySQL lets you set a number of options for each column in your table.
These options control things like whether a column can be left empty or if it has a default value.
We’ll explore these a bit later when they become more critical to the application.
Q: So if I actually had data stored in my table, would it show up here?
But don’t worry, you’ll see the data in your table very soon...
Q: Can I look at the same table structure using phpMyAdmin?
Graphical database tools such as phpMyAdmin allow you to view the structure of tables by issuing a DESCRIBE statement or by clicking a visual view of a table.
It’s entirely up to you which kind of tool you use to analyze your tables.
You can’t recreate a table again with CREATE TABLE once it’s been created.
Once you’ve created a table, it exists and can’t be overwritten by a new CREATE TABLE query.
If  you want to recreate a table from scratch, you’ll have to delete the existing one first, and then start over again.
In SQL, the DROP TABLE command is used to delete a table from a database.
It deletes the table and anything you’ve stored in it.
Since no data exists in a new table, we won’t lose anything by dropping it and creating a new one with the first_name correction.
The DROP TABLE command deletes a table AND all its data from the database.
I fixed the typo and tried to run the CREATE TABLE query again.
Surely I don’t have to delete the typo’d table first...
Q: Hey, I have a copy of Head First SQL (great book, by the way)
In that book, every time you show the code for an SQL statment, you put a semicolon after it.
The difference is that when you talk to MySQL directly, you need a semicolon so it knows where the end of the statement is.
That’s because it’s possible to issue multiple statements to MySQL directly.
In PHP, when you use the mysqli_query() function, you only execute a single SQL command at a time, so no semicolon is needed.
But don’t forget that you do still need a semicolon at the end of each PHP statement!
Q: So if my table has data in it and I drop it, all my data is deleted too?
So drop tables with care! Q: So if I need to change a table with data in it, I’m out of luck?
Everyone makes mistakes, and SQL offers the ALTER statement to help us change existing tables.
We’ll talk about this command a bit later on in the book.
Elmer’s ready to store data The CREATE DATABASE, USE, and CREATE TABLE SQL commands were successfully used to create Elmer’s email list database and table.
Elmer couldn’t be more pleased, unless maybe the table was already filled with eager customers.
With the database and table created, I’m ready to start storing some serious mailing list data.
The email_list table consists of three columns used to store the data for Elmer’s email list.
The addemail.php script is run when the form is submitted, and its job is to process the form data and add the customer to the email list (database table)
Create the Add Email script Elmer needs an HTML form that can collect names and email addresses from customers.
Once he has those, he can grab them with a PHP script and store them in the email_list table.
The web form (addemail.html) requires three input fields and a button.
The form action is the most important code in the form since its job is to pass along the form data to the addemail.php script we’re about to create.
Create an Add Email web form and PHP script for adding a new customer to the list.
Create a Send Email web form and PHP script for sending an email to the list.
New customers are able to join Elmer’s email list (get added to his database) simply by using the web form.
The form action is what connects the HTML web form with the PHP script (addemail.php) that processes its data.
The addemail.php script processes data from the Add Email form.
Help Elmer by first writing an example SQL query to insert a new customer, and then use that query to finish the PHP script code.
Write an example query here that inserts data into Elmer’s table.
The addemail.php script is called upon to process data from the Add Email form.
Help Elmer by first writing an example SQL query to insert a new customer, and then use that query to finish the PHP script code.
If we wanted to be fancy here, we could put a link back to our form with an HTML <a> tag.
Here are the $_POST array values that contain the submitted information.
The example INSERT query is rewritten as a PHP string that relies on form data for the insertion.
This code consists of  Elmer’s web form in addemail.html, a style sheet (style.css), and two images (elvislogo.gif and blankface.jpg)
Now create a new text file called addemail.php, and enter all of  the code on the facing page.
This is the script that will process Elmer’s web form and add new customers to the email_list table.
Upload all of  these files to your web server and open the addemail.html page in a web browser.
Enter a new customer in the form, and click Submit.
Check to see that the customer was added to the database by issuing a SELECT query in a MySQL tool.
The insertion of the new customer to the email list is confirmed by the addemail.php script.
Don’t forget to change the database connection variables to your own.
Q: Is the star in the SQL SELECT command the same thing as an asterisk?
A: Yes, it’s the same character on your keyboard, located above the 8 key.
Hit SHIFT at the same time as the 8 to type one.
But although it’s exactly the same character as asterisk, in SQL lingo, it’s always referred to as a star.
Q: Are there other characters in SQL that have special meaning like the star does?
A: While SQL does have other special, or reserved, characters, the star is the only one you need to know about for right now.
More importantly for our immediate purposes, it's the only one used in the SELECT part of an SQL statement.
With Elmer’s email list starting to fill up, help him write some SQL queries that he can use to find specific customer data.
Select all of the data for customers with a first name of Martin:
Select all of the columns for customers with a first name of Amber and a last name of McCarthy:
Select only the last name for customers with a first name of Bubba:
This isn't the end of the table data...Elmer just has a rapidly growing mailing list!
Elmer’s still missing the other part of  the web application, the part that allows him to enter an email message and have it delivered to everyone on the email list.
To do this, he’ll need a new HTML form and a PHP script to put it into action...
Now that users can subscribe to my email list through a web page.
Create an Add Email web form and PHP script for adding a new customer to the list.
Create a Send Email web form and PHP script for sending an email to the list.
With Elmer’s email list starting to fill up, help him write some SQL queries that he can use to find specific customer data.
Select all of the data for customers with a first name of Martin:
Select all of the columns for customers with a first name of Amber and a last name of McCarthy:
Select only the last name for customers with a first name of Bubba:
This WHERE clause trims down the query results to only those customers with a first name of Martin.
Only the last_name column is returned in the query results.
You specify multiple columns of result data by separating the column names with commas.
The WHERE clause can be made dependent on multiple pieces of information, in this case a match for both a first name AND a last name.
The sendemail.php script reads customers from the database table and sends Elmer’s email message to each of them.
The other side of Elmer’s application Sending email messages to people on Elmer’s email list is similar in some ways to adding people to the list because it involves an HTML web form and a PHP script.
The big difference, is that sending an email message to the mailing list involves dealing with the entire contents of  the email_list table, whereas the addemail.php script only deals with one row of  data.
Create an Add Email web form and PHP script for adding a new customer to the list.
Create a Send Email web form and PHP script for sending an email to the list.
The Send Email web form allows Elmer to enter a subject and body of an email message, and then send it to his entire email list.
The nuts and bolts of the Send Email script The sendemail.php script must combine data from two different sources to generate and send email messages.
But it also has to grab the email subject and message body entered by Elmer into the Send Email web form (sendemail.html)
The email subject and body are delivered to the script via the $_POST superglobal.
The PHP mysqli_query() function runs a SELECT query to get the data for the email list.
Since we want all of  the data in the table, we can use SELECT *
We need to grab each row of  data in the query results in order to have access to the first name, last name, and email address of  each customer.
Call the mail() function to send an email message to each customer.
Sending the emails involves looping through each customer in the email list, which corresponds to each row of  data in the query results.
The loop we create here starts at the first row of  data, then moves on to the second row, and loops through the remaining rows of  the data obtained by the SELECT query.
We stop when we reach the end of  the data.
Use the $_POST array to get the email subject and message body from the form.
Clicking the Submit button in the sendemail.html form sends the form data to sendemail.php, where we capture it in variables with a little help from the $_POST array.
First things first, grab the data We’re already pretty well versed in extracting data from forms in PHP, so the first step is nothing new, just use the $_POST superglobal to store away the email subject and message body in variables.
While we’re at it, let’s go ahead and store Elmer’s email address in a variable since we’ll need it later when sending the emails.
Here’s our query, which selects all of the columns from the email_list table.
A database connection is required in order to submit a query - the details of the connection are stored in the $dbc variable.
The $query variable holds the SQL query as a string of text.
The remaining data required by the sendemail.php script comes from Elmer’s MySQL database.
Pulling customer data from the email_list table data into the script requires a SELECT query.
Unlike before when we’ve used the MySQL terminal to issue a SELECT and look at table data, this time we’re doing it in the sendemail.php script and issuing the query with mysqli_query()
So all we have to do is go through the query results in the $result variable, right?
No, the $result variable doesn’t actually hold any query data.
If  you try to echo the $result variable directly, you’ll see something like this:
The $result variable stores an ID number for a MySQL resource, not the actual data returned by the query.
What happens is the MySQL server temporarily stores the results of your query and gives them a resource number to identify them.
Elmer’s email address is stored in a variable so that we know exactly where it is in case it ever needs to change.
Each SQL query has its own resource ID number that is used to access the data associated with its results.
This function retrieves a row of data from the query results and stores it in an array.
The variable $row is an array that initially stores the first row of data from our results.
Each row of  data is returned as an array, which we can store in a new variable named $row.
Each time this code is executed by the web server, a row of  data from the query results gets stored in the $row array.
Each column of data is stored as an item in the $row array.
The $row variable is set as an array containing three elements, one for each of the three columns of data.
As a test to make sure we can actually get the customer data a row at a time, finish writing the PHP code to echo the first name, last name, and email address of each customer in the email_list table.
As a test to make sure we can actually get the customer data a row at a time, finish writing the PHP code to echo the first name, last name, and email address of each customer in the email_list table.
A loop is a mechanism in the PHP language that repeats a chunk of code until a certain condition’s been met, like running out of  data.
So a loop can cycle through each row of  data in a query result, taking any action we want to each row along the way.
Repeating the same two lines of code over and over is about the dumbest thing I’ve ever seen.
A while loop repeats code while a condition is met.
When we look to see if  there are more customers, we’re testing a condition.
The condition is the code in the parentheses, and it always poses a question that results in a yes/no answer.
If  it’s yes, or true, then the action is performed.
If  it’s no, or false, then we quit the loop.
When we call next_customer() and proceed to help them, we’re performing an action.
The action is the code inside the curly braces, which is repeated as long as the condition remains true.
If  the condition ever goes false, the loop exits and the action is not repeated again.
The loop action takes place once each time through the loop.
Looping for a WHILE A while loop is a loop specifically geared toward repeating code while a certain condition is met.
For example, you might have a variable in a customer service application named $got_customers that keeps up with whether or not customers are waiting to be helped.
Here’s how this scenario could be coded using a while loop:
How do you think a while loop could be used to loop through the customers in Elmer’s email_list table?
As long as we still have customers, keep on looping.
This is the code that gets executed each time through the loop.
Enclosing the loop code within curly braces lets you execute as many lines of code as you want.
A while loop lets us loop through customers until there aren’t any left!
Looping through data with while Applying a while loop to Elmer’s email data lets us access the data a row at a time without duplicating any code.
The loop action consists of an echo statement that sticks the row data together with a line break at the end.
The loop action gets run each time through the loop.
The while loop goes through the table data, row by row.
When it runs out of rows of data, it ends.
The echo statement inside the while loop takes the data in the $row array and outputs formatted HTML content.
The second time through the loop the echo statements output another sequence of text, but this time the data in the second row of the table is used.
An HTML line break puts each row of data on its own line on the resulting page.
Each time through the loop, the values stored in the $row array change to reflect the current row of data.
Column names are used to access the values in the array.
We don’t actually use a plus sign to add strings together - we use the dot operator.
The key used to access the array element must match a column name.
Create an Add Email web form and PHP script for adding a new customer to the list.
Create a Send Email web form and PHP script for sending an email to the list.
Don’t forget, we still have that last step to finish up.
As it turns out, PHP is fairly liberal when it comes to how it interprets the “true” condition.
In short, any value that is not zero (0) or false is considered true for the sake of a test condition.
And since the test condition is true, the loop keeps on chugging.
Q: So I can control a while loop with any kind of data, not just true/false values?
But keep in mind that ultimately the while loop’s interpreting the data as true or false.
So the important thing to understand is what constitutes true or false when it comes to the interpretation of other types of data.
And the simple answer is that anything other than 0 or false is always interpreted as true.
And this causes the while loop to never make it into the action code, not even once.
Q: So it’s possible to have a loop that never loops? A: Indeed it is.
It’s also possible to have a loop that never stops looping.
This is known as an infinite loop because the test condition never causes the loop to exit.
A database is a container for storing data in a highly structured manner.
Tables store data in a grid-like pattern of columns and rows within a database.
The CREATE DATABASE SQL command is used to create a new database.
The CREATE TABLE SQL command creates a table within a database and requires detailed information about the columns of data within the table.
You can delete a table from a database with the DROP TABLE SQL command.
A while loop repeats a chunk of PHP code while a test condition is met.
The email message body is constructed from the customer’s name and the form field email text.
The “email” column in the database holds the email address of the customer, which the message should be addressed to.
The email recipient, message subject, and message body, are passed into the mail() function, along with Elmer’s “from” address.
A confirmation message is echoed to the page with the email address of each customer who is mailed.
It’s generally not a good idea in terms of security to pass along user-input directly to the mail() function without checking it first.
Make sure to change this to your own email address.
The Subject form field is named “subject”, which is the same name used to access it in the $_POST array.
The email message text is entered into the form field named “elvismail”
You’ve got mail...from Elmer! At last, Elmer can send out his MakeMeElvis.com sale emails to everyone on his mailing list by using his new Send Email web form and PHP script.
He can also use the output from the script to confirm that each message is successfully being sent.
The end result is more exposure for his products, and for better or worse, more Elvis look-alikes! The Send Email script.
Send an email to the mailing list using the Send Email form.
Similar to the Add Email page you saw earlier, this code consists of  a web form in sendemail.html, a style sheet (style.css), and a couple of  images (elvislogo.gif and blankface.jpg)
Create a new text file called sendemail.php, and enter all of  the code on the facing page.
Upload all of  these files to your web server and open the sendemail.html page in a web browser.
Enter an email message in the form, and click Submit.
Keep in mind that your email address will need to be on the mailing list in order for you to receive a message.
It’s a fact of  MySQL life—sometimes you need to remove data from your database.
Elmer needs to expand his application to delete users from the email_list table.
Sometimes people want out As with any blossoming new business, there are bumps in the road.
It seems some Elvis fans have jumped ship on the King and want off  Elmer’s mailing list.
Elmer wants to oblige, but that means he needs to remove the customers from his database.
Elmer’s not too happy about losing customers, but he wants to honor their requests to be removed from his mailing list.
I suppose not everyone’s cut out to emulate The King.
I need to get these people off my list so I can focus on the real fans.
Write down the new application components you think Elmer is going to need to implement the Remove Email feature:
Dear Fellow Hip Swiveler,While I still enjoy Elvis’s spirited moves, I’m just not into him so much anymore.
I now prefer Liberace’s understated showmanship and deft piano skills.
After several allergic reactions to your authentic horse hair sideburns, I’ve decided that maybe looking like Elvis isn’t my “thing.” I do love a good cape but the sideburns are just too much.
So we can never delete anything from a table without deleting everything?
To precisely target the row or rows you want to delete with DELETE, you need to tack on a WHERE clause.
If  you recall from using it with the SELECT command, WHERE allows you to isolate specific rows in a query.
Removing data with DELETE To delete data from a table, we need a new SQL command, DELETE.
We’ll use DELETE in a new Remove Email script that deletes customers’ data from Elmer’s mailing list.
In fact, we need a new script and a new web form to drive it...
The DELETE SQL command removes rows of  data from a table.
This makes it a command you should use very carefully since it’s capable of  wiping out a table full of  data in the blink of  an eye.
Knowing this, here’s the most dangerous form of  DELETE, which deletes every row from a table.
This is the name of the table you want to delete rows from.
Without any other qualifiers, the DELETE command completely empties a table of all its data.
Create an Add Email web form and PHP script for adding a new customer to the list.
Create a Send Email web form and PHP script for sending an email to the list.
Write down how many rows of data are deleted by each of these queries.
Create a Remove Email web form and PHP script for removing a customer from the list.
Write down how many rows of data are deleted by each of these queries.
A WHERE clause narrows down a query to focus on specific rows of data.
Use WHERE to DELETE specific data By using a WHERE clause with the DELETE command, we target specific rows of  data for deletion, instead of  emptying an entire table.
The WHERE clause lets us focus on just the row we want to remove, in this case one of  Elmer’s customers who wants to be removed from the mailing list.
The actual test within a WHERE clause performs a comparison that is carried out against every row in the table.
If  the value in the email column of  a row matches, then that row will be deleted.
This part of the WHERE clause performs a test on every row to see what rows match.
Trick question! The last name isn’t quoted, so no rows are deleted - all text values must be quoted.
A WHERE clause in a DELETE statement lets you pinpoint the row you want to remove.
Minimize the risk of accidental deletions It’s important to understand that although any column name can be used in a WHERE clause to match rows, there’s a very good reason why we chose the email column for Elmer’s DELETE query.
Consider that if  more than one row matches a WHERE clause, all of  the matching rows will be deleted.
So it’s important for Elmer’s WHERE clause to pinpoint exactly the row you want to delete.
It’s fairly safe to assume that email addresses are unique within the email_list table, whereas first names and last names are not.
You don’t want to create a WHERE clause matching the first_name column to "Pat" just to delete a single customer—you’ll end up deleting every customer named Pat! That’s why Elmer’s WHERE clause is carefully crafted to look for a specific match with the email column.
If we used first_name in the WHERE clause instead of email, this user would accidentally get deleted.
Using the email column in the WHERE clause helps to establish uniqueness and reduce the risk of accidentally deleting a row.
Deleting users by hand with individual queries is no way to manage a mailing list.
Since Elmer will inevitably face users who want to be removed from his mailing list in the future, it makes a lot of  sense to develop a web-based user interface for removing customers.
An HTML web form and PHP script should do the trick, not to mention a DELETE FROM query with a little help from a WHERE clause...
Fire up a MySQL tool and try a few DELETE commands to delete individual rows of  data from the email_list table based on customers’ email addresses.
Just make sure to include a WHERE clause on each DELETE statement so that you don’t accidentally wipe out the whole table!
The DELETE command’s pretty handy, but ideally we’d delete rows of data using a web form and PHP script, right?
All the form accepts is an email address, which is entered into an HTML form field named email.
Finish the code for Elmer’s removeemail.php script that’s called by the form to carry out each customer removal.
Clicking the Remove button submits the form as a POST request to the PHP script.
All the form accepts is an email address, which is entered into an HTML form field named email.
Finish the code for Elmer’s removeemail.php script that’s called by the form to carry out each customer removal.
Clicking the Remove button submits the form as a POST request to the PHP script.
Watch out for those quotes and double quotes here! The double quotes go around the whole SQL query and the single quotes go around the email address stored in $email.
The email form data in $_POST is stored in a variable and then used in the DELETE query.
Don’t forget to clean up by closing the database connection.
It never hurts to confirm what happened, especially in the case of a database deletion.
Remove a customer from the mailing list using the Remove Email form.
Create a new text file called removeemail.php, and enter all of the code on the facing page.
Upload all of  these files to your web server and open the removeemail.html page in a web browser.
Enter the email address of  a customer in the form, and click Remove to delete them from the database.
The script does the dirty work of issuing the DELETE query and then confirming the deletion.
Create an Add Email web form and PHP script for adding a new customer to the list.
Create a Send Email web form and PHP script for sending an email to the list.
Create a Remove Email web form and PHP script for removing a customer from the list.
With the help of  PHP and MySQL, Elmer’s MakeMeElvis.com web site is now worthy of  being called an application.
Elmer can now store data persistently in a MySQL database, and also interact with that data through web forms.
A combination of  HTML pages, PHP scripts, and embedded SQL queries allow Elmer to add and remove customers to/from his email list (they can also add themselves), as well as send email messages to the entire list.
Return to sender! Please remove me from the Elvis mailing list.
I can build my email list, send out emails to all my customers, and even prune the list...all from my web browser.
The Add Email page adds new customers to Elmer’s email list.
The Send Email page sends an email to everyone on the list with the click of a button.
The Remove Email page removes a customer from the email list.
PHP&MySQLcross When you’re finished perfecting Elmer’s dance moves, see if you can hum along and finish this crossword puzzle.
A persistent, highly organized, data structure that is typically stored in a file on a hard drive.
This conditional clause can be added to SQL statements to control which rows are targeted.
This SQL command removes an entire table from a database.
Use this SQL command to choose rows from a table.
Use this MySQL data type to store a varying amount of text.
Within a MySQL table, this holds a specific type of data.
Keep doing something as long as a certain test condition remains true.
A MySQL data type that stores numbers without decimal places.
Use this SQL command to look at the structure of a table.
Use this SQL command to destroy rows within a table.
After creating a new database in a MySQL terminal, you must issue this command before you can do anything with the database.
A single collection of data in a table consisting of one of each column.
A persistent, highly organized, data structure that is typically stored in a file on a hard drive.
This conditional clause can be added to SQL statements to control which rows are targeted.
This SQL command removes an entire table from a database.
Use this SQL command to choose rows from a table.
Use this MySQL data type to store a varying amount of text.
Within a MySQL table, this holds a specific type of data.
Keep doing something as long as a certain test condition remains true.
A MySQL data type that stores numbers without decimal places.
Use this SQL command to look at the structure of a table.
Use this SQL command to destroy rows within a table.
After creating a new database in a MySQL terminal, you must issue this command before you can do anything with the database.
A single collection of data in a table consisting of one of each column.
A persistent, highly organized, data structure that is typically stored in a file on a hard drive.
This conditional clause can be added to SQL statements to control which rows are targeted.
This SQL command removes an entire table from a database.
Use this SQL command to choose rows from a table.
Use this MySQL data type to store a varying amount of text.
Within a MySQL table, this holds a specific type of data.
Keep doing something as long as a certain test condition remains true.
A MySQL data type that stores numbers without decimal places.
Use this SQL command to look at the structure of a table.
Use this SQL command to destroy rows within a table.
After creating a new database in a MySQL terminal, you must issue this command before you can do anything with the database.
One particularly handy usage of the while loop is in looping through rows of data in an SQL query result.
This built-in PHP function retrieves a single row of data from the results of a database query.
You can call this function repeatedly to read row after row of data.
Your PHP & MySQL Toolbox Not only did you help Elmer get his web application off the ground, but.
It doesn’t reveal any data, but it does show the column names and their respective data types.
Depending on how you use the statement, you can delete individual rows or multiple rows.
When the star is used (*), all of the columns for the rows in the table are returned.
You can be more specific by listing individual column names instead of the * if you don’t want to get all of the column data back from the query.
Sometimes you have to be realistic and rethink your plans.
Along the way, we’ll show you more important PHP and SQL code.
If I put a banana in my teacher’s tailpipe, her car won’t start, so no exam.
But then the substitute might give the test, so he gets a banana, too.
Elmer has some irritated customers Elmer’s customer mailing list has grown by leaps and bounds, but his emails have generated some complaints.
The complaints vary, but they all seem to involve customers receiving blank email messages or multiple messages, neither of  which is good.
Elmer needs to figure out what’s gone wrong and fix it.
I wonder if it has something to do with that Send Email page...
Elmer knows he has a problem, but he's going to need some help figuring out exactly what it is.
If I click the Submit button without filling out a message body, a blank email gets sent.
If the Submit button’s pressed on the form with nothing in the Body field, a blank email gets sent.
Come to think of it, an empty Subject field is a problem too.
Problem is, we use $text in our message whether the variable contains text or not...
Our Send Email script uses the text from the form to build an email, even if the user didn't enter anything.
Write down what you think should be changed in the sendemail.php script code to fix the blank email problem:
It’s never safe to assume a web form will be used exactly the way it was intended.
That’s why it’s up to you, the vigilant PHP scripter, to try and head off  these kinds of problems by anticipating that some users will misuse your forms.
Let’s take a look at the code in our current sendemail.php script to see how Elmer’s empty email messages are getting created.
Demand good form data Elmer’s Send Email form’s in need of  validation, which is the process of  checking to make sure form data is OK before doing anything with it.
Elmer already uses validation even though he doesn’t call it that.
Whenever he receives an order for Elvis gear, he doesn’t just immediately fill it and send it out...
In the case of  an order, Elmer first checks to see if  the customer’s credit card is valid.
If  so, he fills the order and gets it ready to ship.
But then he has to check if the customer’s shipping address is complete.
If  that checks out, then Elmer goes ahead and sends out the order.
A successful order for Elmer’s store always hinges on the validation of  the order data.
Validation means making sure the data you get is the data you expect.
If everything’s cool with this data, I’ll send out those emails.
The server sends an HTML response back to the browser: either that the mail was sent or that the form data was invalid.
If not, it sends an error back to the client.
The form data is sent to the Send Email script on the server.
To solve Elmer’s blank email problem, we need to validate the form data delivered to the sendemail.php script.
This means the form data is submitted from the client web page (sendemail.html) to the server, and the server (sendemail.php) checks to make sure all the data is present.
We can add code to sendemail.php that examines the values in the text boxes and checks to make sure they aren’t empty.
If  everything checks out OK, the script sends out the emails.
Elmer has to validate the credit card of each customer before filling their order.
The order only ships if the credit card and shipping address are valid.
Q: I’ve also heard of validating data on the client instead of on the server.
A: The web browser is considered the client, so client-side validation would be any checking that occurs before the data’s sent to the PHP script.
If you’re interested in learning more , check out Head First JavaScript, which discusses client-side validation in depth.
Q: So why use server-side validation instead of client-side? A: If we validate on the client, only part of the problem’s solved.
Elmer could potentially browse directly to sendemail.php and send out a blank email.
But if we validate on the server, it solves both problems.
Blank data in the form will be detected as well as blank data from the PHP script being directly loaded.
This isn’t to say that it's wrong to validate on the client.
But the server is the last line of defense for catching bad form data, so server-side validation can’t be ignored.
With the help of validation, we can make sure no emails are sent unless both form fields contain data.
The logic behind Send Email validation Elmer needs to validate the data he gets from the sendemail.html form before he sends any emails.
In fact, sending the emails should completely hinge on the data validation.
What we really need PHP to do is make a decision based on the validity of  the form data received by the sendemail.php script.
We need code that says, “if the data is valid, go ahead and send the emails.”
We've been sending the emails without worrying about what, if anything, is entered in these form fields.
These two conditions must be met in order for the data to be considered valid.
If both conditions are met, everything's cool, and we can send the emails out.
The test condition The test condition, or conditional expression, is located in parentheses right after the if keyword.
Here’s where you put the statement that you want to determine the validity, or truth, of.
The action The action of  an if statement directly follows the test condition and is enclosed in curly braces.
Here’s where you put the PHP code you want to execute if  the condition is, in fact, true.
It's calling a function to check and see if what's stored in $credit_card_num is valid.
This is the action—what PHP will execute if the condition is true.
You can have as many lines of code here as you wish.
Your code can make decisions with IF The PHP if statement lets your code make decisions based on whether or not something is true.
Before filling an order, Elmer must get paid, which means charging the customer’s credit card.
If  the customer gave Elmer the wrong card number, he can’t fill the order.
So Elmer performs a kind of  real-world validation on every order that goes like this:
If  the customer’s credit card checks out, go ahead and fill the order.
We can translate this scenario to PHP code using the if statement, which is designed to handle just this kind of  decision making.
This hypothetical function returns true or false depending on the validity of the credit card.
Testing for truth The heart of  the if statement is its test condition, which is always interpreted as either true or false.
The test condition can be a variable, a function call, or a comparison of  one thing to another, as a few examples.
Elmer’s credit card validation relies on a function call as the test condition, which means the value returned by the function is either true or false.
It’s quite common to use a comparison as a test condition, which typically involves comparing a variable to some value.
For example, maybe Elmer wants to give a discount to customers who live in Nevada.
He could create an if statement that carries out a comparison on part of  the shipping address, like this:
If the test condition is true, the action’s carried out.
This test condition performs a comparison for equality, which involves two equal signs (==)
You can compare variables to numbers, variables to variables, and even perform calculations.
A 10% discount is applied in the action if the test condition is true.
Don't put quotes around numeric values.You can check to see if what is stored in one variable is equal to what is stored in another.
You can carry out math operations in a test condition.
There are two ways to check if  things are not equal: <> and !=
These give you the opposite results of  an == equality test.
The greater than sign (>) checks to see if  the value on the left is greater than the value on the right.
The less than sign (<) compares the value on the left to the value on the right.
If the left value is smaller than the right, the condition is true.
Less than or equal to (<=) is similar to less than, except it’s also true if  the values are equal.
They work based on the alphabet, with a being considered smaller than (less than) z.
Using greater than and less than can help you when you need to present information in alphabetical order.
It's OK to write an if statement entirely on a single line as long as the action is relatively simple.
The test condition in your if statement can also check to see if  a value is greater than another one.
If  it is, the result of  the condition is true, and the action code is executed.
Here are a few more tests you can use to control the decision of  an if statement.
Q: Okay, is a test condition the same thing we used to control while loops in Chapter 3? A: It’s exactly the same.
And even though we used it to tell us when we had remaining rows of query data back in Chapter 3, we can devise more interesting test conditions for while loops by using different kinds of comparisons.
Since only one equal sign is used here, it’s actually an assignment (=), not a comparison (==)
And it ends up being true because anything other than 0, NULL, or false gets interpreted by PHP as true.
Should be == if we intended this to be a comparison.
The logic behind Send Email validation Elmer needs to validate the data he gets from the sendemail.html form before he sends any emails.
In fact, sending the emails should completely hinge on the data validation.
What we really need PHP to do is make a decision based on the validity of  the form data received by the sendemail.php script.
We need code that says, "if the data is valid, go ahead and send the emails."
But first we need to grab the form data and store it in a couple of  variables:
This form data is all we need to check and see if  there is data in each of  the form fields.
Both of  these examples have a problem in that their logic requires us to make two comparisons in a single if statement.
Or we could take the opposite approach and check to see if  the form fields are both empty, in which case we could display a warning to the user:
Write two if statements that check to see if both the subject and message body of Elmer's Send Email form are empty.
By nesting the second if statement inside of the first one, the code is saying that both must be true in order for the echo statement to run.
Indentation helps to show where the inner if statement ends, and where the outer if statement ends.
The isset() function tests to see if  a variable exists, which means that it’s been assigned a value.
The empty() function takes things one step further and determines whether a variable contains an empty value, which PHP defines as 0, an empty string ('' or ""), or the values false or NULL.
So isset() only returns true if  a variable has been assigned a value, while empty() only returns true if  a variable has been set to 0, an empty string, false, or NULL.
Write two if statements that check to see if both the subject and message body of Elmer's Send Email form are empty.
We're really just checking to make sure the form data isn't empty, so empty() is what we need.
If you test these variables with isset(), it will always return true regardless of  whether or not they hold any actual text.
In other words, isset() doesn’t show you the difference between a blank form field and a filled out one.
The empty() function checks to see if  a variable is actually empty, which is what we need for form validation.
Q: So what’s the point of using isset() anyway? A: The isset() function is extremely valuable when you need to know if a piece of data exists.
For example, you can check if a form has been submitted via a POST request by passing the isset() function $_POST.
This ends up being an extremely handy technique, as you find out a little later in the chapter.
Rewrite the two if statements that check to see if both the subject and message body of Elmer's Send Email form are empty, but this time, use the empty() function instead of == in the test conditions.
A call to the empty() function replaces the equality operator (==) in each of the if test conditions.
What if we need to only take a certain action if a form field is not empty? Is there a notempty() function?
No, but there's an easy way to reverse the logic of any test condition...
We know the test condition that controls an if statement always results in a value of  true or false.
But what if  our logic dictates that we need to check for the reverse of  what a condition gives us? For example, it would be helpful to know if Elmer’s form fields are not empty before sending a bunch of  emails with the form data.
So !empty() literally calls the empty() function and reverses its result, like this:
Rewrite the two if statements that check to see if both the subject and message body of Elmer's Send Email form are empty, but this time, use the empty() function instead of == in the test conditions.
We have to close off the action part of both of the if statements.
The first brace ends the inner if statement, and the second brace ends the outer if statement.
The first condition checks to see if $subject is not empty...
We had to put one if statement inside the other one to make this work.
If either form data variable is empty, one of the if statements will be false, and none of the code here will run, which means no blank email will be sent out — just what we wanted!
The exclamation point reverses the logic of the empty() function.
Modify the code in sendemail.php to use if statements that check the form field data before sending email messages.
Upload the new version of  the script to your web server and open the sendemail.html page in a web browser.
Make sure to leave at least one of  the form fields blank, and click Submit.
The body of the message is empty, which makes the form data fail validation.
No email confirmations reveal that nothing was sent, which is what we want.
But some kind of warning message would be more helpful than a blank page.
If  we want to make sure all those fields are not empty, we’ll have to nest an if statement for each field.
Frank: As long as we indent each line of  code for each if statement, aren’t we OK? Jill: Technically, yes.
I mean, the code will certainly work no matter how many if’s we nest, but I’m worried about it getting hard to understand with so much nesting.
Just matching up curly braces accurately could be a problem.
I think it’d also be a pain having to indent the action code so far...
Even if  we just indent each if two spaces, that’s 20 spaces before every line of  action code.
Jill: Guys, the issue isn’t really about the specific code used to indent the nested if’s.
It’s just not a good coding practice to nest if statements so deep.
So what we need is a way to test all ten pieces of  form data in a single test condition, right?
Joe: Then we could write one big test condition that checks all the form fields at once.
Jill: Yeah, but we’re still missing the piece of  the puzzle that lets us combine multiple comparisons within a single test condition...
What if we had a bunch of fields in the form? Would.
Owen's form from earlier in the book is an example of how more form fields result in a bunch of messy nested if statements.
This much nesting makes it hard to keep track of curly braces.
Test multiple conditions with AND and OR You can build a test condition for an if statement with multiple checks by connecting them with a logical operator.
This first example involves two expressions joined by the logical AND operator, which is coded using &&
The AND operator takes two true/false values and gives you true only if  they are both true; otherwise the result is false.
So in this case both form fields must be non-empty in order for the test condition to be true and the action code for the if statement to run.
The logical OR operator, coded as ||, is similar to AND except that it results in true if  either of  the true/false values is true.
So the action code for this if statement is executed if  either one of  the form fields is not empty.
Things get even more interesting if  you want to isolate one form field as being empty but the other having data, like this:
Since this test condition uses AND, both expressions inside of  the test condition must be true in order for the action code to be run.
This means the Subject form field must be empty, but the Body field must have data.
The extra parentheses help make it clear that the negation operator applies only to the empty() function.
Rewrite the highlighted sections of the sendemail.php script so that it uses logical operators in a single if test condition instead of nested if statements.
Rewrite them using a single if statement with logical operators.
The reason is because these two operators are short-circuited whenever possible.
What this means is that if the first operand is enough to determine the outcome of the expression, the second operand is ignored.
As an example, if the first operand in an AND expression is false, this is enough to cause the expression to be false regardless of the second operand, so the second operand is ignored.
The same rule applies when the first operand in an OR expression is true.
There’s a slight difference in how they’re evaluated relative to other operators, but if you're careful to use parentheses to make your test conditions clear, then there’s essentially no difference.
Make sure the logical operators in the Send Email script do the same job as the nested if statements.
Modify the code in sendemail.php to use a single if statement that takes advantage of  logical operators to check the form field data before sending email messages.
Double-check the exercise solution on the following page if  you aren’t sure about the changes to make.
Upload the new version of  the script to your web server and open the sendemail.html page in a web browser.
Make sure to leave at least one of the form fields blank, and click Submit.
Does the script still prevent the email messages from being sent when a form field is blank?
Rewrite the highlighted sections of the sendemail.php script so that it uses logical operators in a single if test condition instead of nested if statements.
We can use AND to check for both conditions in one if statement.
Our single if statement means we only need one closing curly brace.
Remember, && is how you actually specify the AND logical operator.
All of the code inside the if statement should be un-indented one level since it now resides in a single if statement.
The problem is that our code only reacts to a successful validation, in which case it sends the email messages.
But if  the if statement turns out being false (invalid form data), the code doesn’t do anything, leaving Elmer in the dark about whether any emails were sent or what went wrong.
Here’s the abbreviated script code, which reveals the blank page problem:
Form users need feedback Our sendemail.php code does a great job of  validating the form data so that no mail gets sent out if  either the Subject or Body fields are left blank.
But when the validation fails, and no emails are sent out, the script doesn’t tell Elmer what happened.
What happened? I tried to use the new form and all I got was a blank page.
Nothing at all happens if the if statement fails to run the action code, which is why a blank page is generated when there is missing form data.
We need to let Elmer know that there was a problem, ideally telling him what form fields were blank so that he can try entering the message again.
That won't work because code after the if statement will always be executed.
Placing the echo statement after the if statement just means it runs after the if statement, but it always runs regardless of  the outcome of  the if.
We need the echo statement to show an error message only if  the test condition of  the if statement is false.
Just put an echo statement after the closing brace of the if statement.
The else clause executes code when an if test condition is false.
The if statement offers an optional else clause that runs code in the event that the test condition is false.
So our error message echo code can go in an else clause, in which case it only gets run when one of  the form fields is left empty.
Just place the word else after the if statement, and then stick the action code for it inside curly braces:
This is a placeholder for the code that sends the email messages.
The else clause starts right after the closing curly brace for the if statement.
Below is new code for Elmer’s sendemail.php script that uses if statements and else clauses to provide feedback, but some of the code has gotten misplaced.
Below is new code for Elmer's sendemail.php script that uses if statements and else clauses to provide feedback, but some of the code has fallen off.
At this point we’ve gone through all the other possibilities, so we know that both form fields have values.
The outer if statement checks to see if both the subject and body are empty.
If not, there are only three other possible scenarios: both are filled in, the subject is missing, or the body text is missing.
All those nested if's and else's are making the script hard to follow.
I'd hate to ever have to work on that script! It needs to be simplified before someone gets hurt.
It's always a good idea to simplify code whenever possible, especially nested code that gets too deep.
Too many else clauses with nested if statements can make your code hard to follow.
Maybe that wouldn’t matter if  we never had to look at it again, but that’s unlikely.
If  we ever needed to change the form and add another field, validating it would be trickier than it needed to be because it would be hard to read the code and figure out where the changes need to go.
Rewrite the code to get rid of the nesting, but make.
Try out the cleaner if code to make sure it works as expected.
Modify the code in sendemail.php to use if statements similar to those you just wrote that simplify the if nesting.
Flip to the solution on the following page if  you aren’t sure about the changes to make.
Upload the new version of  the script to your web server and open the sendemail.html page in a web browser.
Experiment with the script by submitting the form with form fields both blank and filled.
Q:Are a few levels of nesting really that big of a deal?
If you’re writing some code that only you will ever see and you think you’ll remember exactly what every next line does in six months time when you come back to it to tweak it, nest away.
If on the other hand, you’d like to keep your code as clean and logical as possible, you can use any of the several logic operators you’ve met so far.
Q: How does else work? A: In an if...else statement, the else matches anything and everything that doesn’t match the if part.
Does that mean I could nest if and else in existing if...else statements?
A: Well, you could, but with all that nesting, things would get complex pretty fast and we’re trying to avoid nesting here!
RRewrite the code to get rid of the nesting, but make.
What would you do to improve the error handling of the Send Email script to make it more helpful?
When I forgot to enter the subject in the form, I got this page.
But then, when I clicked the Back button, I had to retype the whole message.
Validation in Elmer's Send Email script is working but it could be a lot more helpful.
When the sendemail.php script detects missing form data, it displays a message that information is missing, but that’s it.
There’s no link back to the original form, for example.
And even worse, when Elmer navigates back to the original form, the information he did enter is no longer there.
He has to retype both the subject and body of  his email message.
Displaying the form would definitely be helpful, as it would save Elmer having to navigate back in his browser.
So in addition to echoing an error message when one of  the form fields is empty, we also need to regenerate the HTML form code from PHP by echoing it to the browser.
This code shows that PHP is capable of  generating some fairly complex HTML code:
It would be cool to show the form along with the error message.
If  you’re thinking this code looks a bit chaotic, that’s because it is.
Just because you can do something in PHP doesn’t mean you should.
In this case, the added complexity of  echoing all that HTML code is a problem.
This is a big enough chunk of  code that generating it via PHP with echo is really not a good option...
This indentation isn't strictly necessary, but it helps to see the structure of the original HTML code.
This PHP code generates the entire HTML form, starting with the <form> tag.
Since HTML code is riddled with double quotes, it's easier to use single quotes to surround strings of HTML code in PHP.
You can close and open blocks of PHP code to output chunks of HTML code in a PHP script.
Ease in and out of PHP as needed It’s sometimes easy to forget that a PHP script is really just an HTML web page that is capable of  holding PHP code.
This means you can close a block of  PHP code and revert to HTML as needed, and then pick back up with a new block of  PHP code.
This is an extremely handy technique for outputting a chunk of HTML code that is unwieldy to generate through PHP echo statements...
This ?> tag closes the PHP block, returning us to HTML.
The form is coded as normal HTML since this code is outside of PHP tags.
Since we're still inside the if action, we have to close the if statement before continuing.
Write down anything you think might be limiting about this code.
Since we're still inside of the if action, the HTML code is only output if both form fields are empty.
We can use a true/false variable known as a flag to keep track of  whether or not we need to output the form.
Then we can check the variable later in the code and display the form if  the variable is true.
So we need to start out the script with $output_form set to false, and then only change it to true if  a form field is empty and we need to show the form:
If a form field is left blank, the $output_form variable is set to true, but the form isn't displayed...
These error messages are slightly different to indicate the specific form field(s) that are empty.
If both form fields check out with data, go ahead and send the emails.
Last thing, check the $output_form variable to see if the form needs to be displayed.
Either way, we only need one copy of the HTML code.
Code the HTML form only once Turning the new validation logic into PHP code involves creating and initializing the new $output_form variable, and then making sure to set it throughout the validation code.
Most important is the new if statement at the end of  the code that only displays the form if  $output_form is set to true.
We create our new variable here and set it to false initially.
Also set the variable to true if $subject is empty.
And set the variable to true if $text is empty.
This if statement checks the $output_form variable and displays the form if it is true.
The HTML code only appears once since we've crunched all the logic for displaying it into a single variable, $output_form.
Don't forget to jump back into PHP code and close the if statement.
By making HTML code dependent on an IF statement, we avoid duplicate code in our script.
The new form is better, but I still have to retype the fields I had typed in correctly, which is really annoying.
When Elmer submits the Send Email form with an empty field, the sendemail.php script catches the error and generates a new form.
But the new form is pure HTML code, which can’t possibly know anything about any data Elmer might have entered earlier.
So we’re generating a clean new form as part of  the validation, which is wiping out any data Elmer might have entered.
We can’t get around the fact that a new form will have to be generated in the PHP script.
But we need a way to remember any data Elmer might have already entered, and plug it back into the new form so that Elmer can focus solely on filling out the form field that he accidentally left empty...
The form is submitted to the sendemail.php script when Elmer clicks the Submit button.
This error message lets Elmer know he left a form field empty.
All the fields are now empty because this is a shiny new form.
Draw what Elmer's form should look like after he submits it with only the first form field filled out.
Then write down how you think each of the two files (HTML and PHP) should be altered to carry out this new functionality.
Draw what Elmer's form should look like after he submits it with only the first form field filled out.
Then write down how you think each of the two files (HTML and PHP) should be altered to carry out this new functionality.
If we display the form entirely in the PHP script, we can do away with the HTML page by letting the PHP script both show the form and process it.
In doing so, the PHP script can access and use any data entered into the form, which is impossible in pure HTML code.
The PHP script takes over the job of displaying the form, both before and after submission.
And since the script has access to any form data that has been entered, it can plug the data back into the form when it is generated.
This solves Elmer's problem of having to re-enter form data he's already filled out.
How do you think we can tweak Elmer’s application to make the form fields sticky?
Sticky forms remember the data the user has already correctly entered.
An HTML form that is part of the PHP script that processes it is known as selfreferencing.
A form that references itself How can it be possible to remove sendemail.html from the Send Email form equation? The answer is that we’re not actually eliminating any HTML code, we’re just moving it to the PHP script.
This is made possible by the fact that a PHP script can contain HTML code just like a normal web page.
So we can structure our script so that it not only processes the form on submission but also displays the form initially, which is all sendemail.html was doing.
The key to the sendemail.php script being able to fill the role left by sendemail.html is the form action.
Since the script itself  now contains the HTML form, the form action leads back to the script...
To understand what’s going on here, think about the first time Elmer visits the page (script)
An empty form is generated as HTML code and displayed.
Elmer fills out a field of  the form and clicks Submit.
The script processes its own form, and displays an error message if  any data’s missing.
More importantly, the script displays the form again, but this time it includes any data Elmer has already entered.
When a form’s smart enough to remember data entered into it in prior submissions, it’s known as a sticky form...
The form data’s submitted to the same script, which processes it and displays the form again, but this time it remembers data already entered.
The script initially shows the form and then processes it when it is submitted.
Processing the form involves either sending emails or displaying the form again with an error message.
This is a standard <form> tag that happens to use POST to submit the form data to the script.
Point the form action at the script As we’ve seen several times, the action attribute of  the <form> tag is what connects a form to a PHP script that processes it.
Setting the action of  Elmer’s form to sendemail.php works just fine in allowing it to process itself, which is the first step toward form stickiness.
In fact, the form already has its action attribute set to the script:
This code works, assuming you don’t ever rename the script and forget to update the code.
But there’s a better way that works no matter what because it doesn’t rely on a specific script filename.
The action attribute of the <form> tag connects a form to the script that processes it, in this case the same sendemail.php script that holds the form.
Try out the new self-referencing script with improved form validation logic.
Modify the code in sendemail.php to use the $output_form variable to selectively display the form as shown a few pages back.
Also change the action attribute of  the <form> tag so that the form is self-referencing.
You no longer need the sendemail.html page on your web server, so feel free to delete it.
Then upload the new version of  the sendemail.php script to your web server and open the script in a web browser.
Write down why you think the script is displaying an error message the first time the form is shown:
For some reason the script's showing an error message even though the form hasn't even been submitted...
First things first - we'll get to the sticky stuff in a moment.
Since every form has a Submit button, an easy way to check to see if  a form has been submitted is to see if  there’s $_POST data for the Submit button.
The data’s just the label on the button, which isn’t important.
What’s important is simply the existence of  $_POST['submit'], which tells us that the form has been submitted.
Just make sure that 'submit' matches up with the id attribute of  the Submit button in the form code.
This must match the name of the <input> tag for your Submit button.
Any code in here will only get executed if the form’s been submitted.
Check to see if the form has been submitted The problem is that the script can’t distinguish between the form being displayed for the first time and it being submitted with incomplete data.
So the script reports missing data the very first time the form is displayed, which is confusing.
The question is, how can we check to see if  the form is being submitted? If  we know that, we can make sure we only validate data on a submission.
Or to put it another way, the $_POST array hasn’t been set.
Any guess what function we could call to see if  the $_POST array’s been set?
The isset() function checks to see if a variable has been set.
The $_POST superglobal allows us to check and see if a form has been submitted.
Q: How does knowing if the form was submitted stop us from accidentally displaying validation error messages?
A: The reason the error messages are being shown incorrectly is because the script doesn't distinguish between the form being submitted vs.
So we need a way to tell if this is the first time the form is being shown, in which case empty form fields are perfectly fine—it's not an error.
We should only validate the form fields if the form’s been submitted, so being able to detect a form submission is very important.
Q: So why don't we check to see if real form data’s set, instead of the Submit button?
Since every form has a Submit button that can be consistently named submit, checking $_ POST['submit'] gives you a reliable way to check for form submission in all of our scripts.
If the form’s never been submitted, we definitely need to show it!
If the form has never been submitted, this will be unset.
This parenthesis closes the first if, which tells us if the form was submitted.
So we can now detect the form submission and show error messages correctly.
But we still haven't made the form fields sticky, right?
Detecting the form submission is important, but we still need to plug the sticky form data back into the form.
Knowing if  the form’s been submitted is an important part of  making it sticky, but it isn’t the only part.
The part we’re missing is taking any form data that was submitted and plugging it back into the form as the form is being output.
You can set an input form field using the value attribute of  the HTML <input> tag.
For example, this code presets the value of  an input field using the value attribute:
We want to insert a piece of  data from a PHP variable.
How is that possible? Remember that we’ve used echo to dynamically generate HTML code from PHP in other situations.
In this case, we can use echo to generate a value for the value attribute from a PHP variable, like this:
This value is hardcoded - it's always the same every time the form is shown.
Since we're switching to PHP to echo the variable, we have to use a <?php tag.
And to return back to HTML, we close up the PHP code with the ?> tag.
Change the code in sendemail.php to check $_POST for the form submission, as well as adding echo code to the form so that its fields are sticky.
Upload the new version of  the script to your web server and open the script in a web browser.
Experiment with different form field values, including leaving one or both fields empty, and submit it a few times.
Boy, that was dumb leaving the body of the email blank.
And I don't have to keep re-entering the same data to fix it either.
The Send Email script now shows an error message when Elmer leaves a form field blank, but it remembers any data he did enter.
How can Elmer delete all but one of the multiple rows in his table that have identical email addresses?
Some users are still disgruntled Form validation has gone a long way toward dealing with Elmer’s frustrated customers, particularly those who were receiving blank emails.
Elmer knows he didn’t send a message more than once, leading him to suspect that maybe some users have accidentally subscribed to his email list more than once.
Not a problem, just use the Remove Email page/script from the last chapter to remove the user, right?
Removing Elbert using his email address will completely delete him from the email_list table, causing him to no longer receive any email messages from Elmer.
We need a way to only delete Elbert’s extra rows from the table, making sure to leave one.
This customer is frustrated because he keeps receiving multiple copies of Elmer's emails.
Using the Remove Email page from the previous chapter would remove the customer entirely from Elmer's database, which is not what we want.
Joe: Maybe our Add Email form should check for duplicate email addresses before adding new users.
Jill: Yes, that would solve the problem moving forward, but it doesn’t help us deal with duplicate email addresses that are already in the database.
What if  we tried to use a different column in the table to delete the extra rows, like last_name? Jill: I wondered about that, but using a last name is potentially even worse than an email address.
What if  we wanted to delete someone named John Smith from our mailing list, and we ran the following SQL code:
Last names are more likely to be common across rows than email addresses, and first names would be even worse than that.
We could lose dozens and dozens of  rows with one simple query.
We can’t risk using a WHERE clause that will delete rows we need to keep.
We need to be certain we can pinpoint just the ones we want to remove.
Frank: We’re out of  columns in our table to use.
What we really need is something to make each row of  the table unique—then we could pinpoint rows without any trouble.
And just because we don’t currently have a column that has a unique value for each row doesn’t mean we can’t add one.
Joe: A new column? But we’ve already decided on our table structure.
Frank: Yeah, but what we’ve got isn’t meeting our needs.
You’re right that it would be better if  we had realized this beforehand, so we could have designed our table accordingly, but it’s not too late to fix what we’ve got.
Joe: OK, but what would we call our new column? What data would we put into it?
Jill: Well, since its purpose would be to uniquely identify each row in the table, we could call it identifier, or maybe just id for short.
Frank: Nice, and we can fill the id column with a different ID number for each row, so when we execute our DELETE, we’ll be removing rows based on a unique number, instead of  an email address or surname.
It’s really a great idea, isn’t it? I’m so glad I thought of  it.
The problem is that there are multiple rows in the table but no way to distinguish them from each other.
Without a way to isolate them individually, any DELETE we try to do will delete all of them.
Table rows should be uniquely identifiable Part of  the whole idea of  sticking something in a database is that later on you’d like to look it up and do something with it.
Elmer’s email_list table makes a dangerous assumption that email addresses are unique.
When you don’t have a column of  truly unique values in a table, you should create one.
MySQL gives you a way to add a unique integer column, also called a primary key, for each row in your table.
More than one person can have the same first name, so this isn’t a good choice for a unique column.
And while most of the time email is unique, we can’t count on that always being the case.
We need a new column that contains a value that is unique for every row in the table.
Now that this column contains a unique value, we can be sure that every row in our table is truly unique.
Nothing in the structure of this table guarantees uniqueness among rows.
Duplicate data in other columns no longer affects the uniqueness of rows because the new id column takes care of that.
But SQL has a another command that lets you make changes to an existing table without losing any data.
It’s called ALTER TABLE, and we can use it to create a new column without having to drop the table and destroy its data.
Here’s what the general format of an ALTER TABLE statement looks like for adding a new column to a table:
This ALTER TABLE statement has a lot going on because primary keys have to be created with very specific features.
For example, NOT NULL tells MySQL that there must be a value in the id column—you can never leave it blank.
AUTO_INCREMENT further describes the traits of  the id column by causing it to automatically get set to a unique numeric value when a new row is inserted.
As its name suggests, AUTO_INCREMENT automatically adds one to the last id value used in a row and places this value into the id column when you INSERT a new row into your table.
Finally, PRIMARY KEY tells MySQL that each value in the id column is unique, but there’s more to it than just uniqueness...
Hey genius, you know if we want to make a change to the table structure, we have to do a DROP TABLE and then recreate it from scratch.
We can use the ALTER TABLE command to add a new column to the email_list table, which we’ll name id.
We’ll give the id column a data type of INT, since integers work great for establishing uniqueness.
Some other information is also required, as this code reveals:
The data type of the column makes it an INTeger.
This tells the MySQL server to add 1 to the value stored in this column for each new row that’s inserted.
The name of the table that we want to alter.
This is optional, but it’s good form to put your id column first.
This little chunk of code tells MySQL that the new id column is the primary key for the table.
Primary keys enforce uniqueness A primary key is a column in a table that distinguishes each row in that table as unique.
Unlike normal columns, which could also be designed to be unique, only one common can be made the primary key.
This provides a clear choice for what column to use in any queries that need to pinpoint specific rows.
In order to ensure this uniqueness for primary keys, MySQL imposes a bunch of restrictions on the column that has been declared as PRIMARY KEY.
You can think of  these restrictions as rules to be followed as you work with primary keys:
Two rows should never have the same data in their primary keys.
No exceptions—a primary key should always have unique values within a given table.
A primary key is a column in your table that makes each row unique.The five rules of primary keys:
If  a primary key was left empty (NULL), then it might not be unique because other rows could potentially also be NULL.
The primary key must be set when a new row is inserted.
If  you could insert a row without a primary key, you would run the risk of  ending up with a NULL primary key and duplicate rows in your table, which would defeat the purpose.
A primary key should contain only the information it needs to be unique and nothing more.
That’s why integers make good primary keys—they allow for uniqueness without requiring much storage.
If  you could change the value of  your key, you’d risk accidentally setting it to a value you already used.
The id column in Elmer's table doesn't have repeat data, has a value for every row, is automatically set when a new row is inserted, is compact, and doesn't change.
Alter Elmer's table and try out inserting a new row of data with a primary key.
Using a MySQL tool such as the MySQL terminal or the SQL tab of phpMyAdmin, enter the ALTER TABLE statement to add a primary key column named id:
Now insert a new customer to the database to see if  the id column is automatically set for the new row.
Here’s an example of  an INSERT statement to use (notice the primary key isn’t mentioned):
Finally, issue a SELECT statement to view the contents of  the table and see the new primary key in all its glory! Just in case you’ve forgotten, here’s the SELECT statement:
The new id column is auto-incremented so that it remains unique for the new row of data.
Joe: The problem is that the user needs to pinpoint rows of  data using the primary key instead of  the email address.
Frank: That’s right! So we just need to change the form so that the user enters the ID of  a customer instead of  their email address.
The user has no way of  knowing the ID of  a customer without somehow finding them in the database.
In fact, the user doesn't know anything about the database structure.
Maybe what we need is to rethink the form so that it lists out all the names and email addresses in a list with checkboxes next to each one.
Frank: Nice sketch, but how does that help Elmer isolate a customer for deletion using their ID?
What if  we stored the customer ID in the value of  the checkbox.
That way it isn't actually visible, but the script can get to it.
So we could generate the form automatically in a loop by doing a SELECT to get all the data, and then creating each checkbox input field from a row of  query data.
But what happens when the Submit button is pressed? What does $_POST have in it? Frank: Hang on, Joe, we’ll get there in a minute.
Let’s just start by building this part of  the script, the part that displays all the data from the table and writes out those checkboxes...
Okay, so now every row in the table has a unique primary key.
The value of the checkbox will keep track of the id value.
Note that this code just creates the form; don't worry about the code that performs the DELETE just yet.
Note that this code just creates the form; don't worry about the code that performs the DELETE just yet.
You can name your Submit button anything you want - just be sure to remember the name later if you decide to check $_POST to see if the form was submitted.
Each checkbox input field is constructed from a row of customer data.
This is where the primary key gets used in the checkbox we can use this later to delete any checked customers.
The square brackets at the end of the checkbox name automatically put the checkbox values in an array we've named “todelete[]”
The square brackets result in the creation of  an array within $_POST that stores the contents of  the value attribute of  every checked checkbox in the form.
Since each checkbox’s value attribute contains a primary key, each value in the todelete array is the ID of  the row in our table that needs to be deleted.
This makes it possible for us to loop through the todelete array and issue an SQL query to delete each customer that is checked in the form.
We just use a while loop to cycle through the todelete array and delete each of the customers using their IDs.
From checkboxes to customer IDs The checkbox code generated by the Remove Email script is simple HTML with our primary key (id) stuffed into the value attribute of  the <input> tag.
There’s one small, but very important change from ordinary checkbox HTML code, though.
You might have noticed square brackets ([]) at the end of  the checkbox name—they serve a vital purpose.
We could use a while loop but there’s a more elegant solution using a different kind of loop.
The foreach loop is a special kind of  loop designed specifically for cycling through values stored in an array.
All you need to do is specify the array you’d like to loop through and a variable to store the values in, and PHP will take care of  iterating over them one by one...
Each checkbox form field has the ID of the customer stored away, which is accessible through the $_POST superglobal.
Write down how you think a foreach loop might loop through an array of  Elmer’s customer IDs:
Loop through an array with foreach The foreach loop takes an array and loops through each element in the array without the need for a test condition or loop counter.
As it steps through each element in the array, it temporarily stores the value of  that element in a variable.
Assuming an array is stored in a variable named $customers, this code steps through each one:
The $delete_id variable holds the value of  each array element as the loop progresses through them one at a time.
So if  we want to loop through the customer IDs stored in the $_POST array in the Remove Email script, we can use the following foreach code:
As the loop goes through each individual element in the array, it will temporarily store them in a variable with this name.
Inside of the loop, you can access each element using the variable name you just provided.
Each element of the array will be accessible through the variable $delete_id.
We can use $delete_id to delete each of the customers from the database.
With the foreach loop now stepping through each of  the checked checkboxes in the Remove Email form, we just need to add code inside of  the loop to issue a DELETE query and actually delete each row from the email_list table.
We can use this variable to access the ID of each customer and then delete them from the table.
We constructed this array so that it only holds customers that were checked in the Remove Email form.
Finish the code for Elmer’s new and improved removeemail.php script so that it deletes customers that have been checked in the form when the form is submitted.
Finish the code for Elmer’s new and improved removeemail.php script so that it deletes customers that have been checked in the form when the form is submitted.
Only delete customers if the form has been submitted! Use $delete_id to choose the exact.
The code to generate the customer checkboxes is the same as you created it before.
Take Elmer's newly revamped Remove Email script for a spin.
Modify the code in the removeemail.php script so that it generates customer checkboxes instead of  using the old email text field.
Then add the code to delete customers whenever the form’s submitted.
Also change the action attribute of the <form> tag so that the form’s self-referencing.
Now that removeemail.php uses a self-referencing form, you no longer need the removeemail.html page on your web server, so feel free to delete it.
Then upload the new version of  removeemail.php to your web server and open the script in a web browser.
When you check off a customer and click Submit, the customer’s removed from the database.
The script confirms the customer removal and also updates the checklist - the deleted customer is now gone.
He can add customers, send out spectacular sale emails to just the customers who want to receive them, and delete customers who have traveled to the dark side, or just want to be removed from his list.
This allows you to alter a table structurally without having to drop it and start over.
Give it a true/ false test condition and some action code, and an if statement will let you make all kinds of cool decisions.
An else clause can be added to an if statement to give it an alternate action.
Comparison operators that can be used to construct test conditions that compare values to each other.
These are often used to control if statements and loops.
The negation operator, or NOT operator, reverses a true/false value.
Combining two values with && (AND) results in true only if both values are true.
Combining values with || (OR) results in true if either of the values is true.
Inside the loop, you can access each element of the array.
The empty() function takes things one step further and determines whether a variable contains an empty value (0, an empty string, false, or NULL)
You’ve got permission to upload that to me, and I’ll file it under delicious!
Sure, they work wonders for storing all kinds of data involving text, but what about binary data? You.
Virtual guitarists like to compete Apparently creating art for art’s sake isn’t always enough because players of  the hot new game Guitar Wars are quite enamored with competitive virtual guitar playing.
So much so that they regularly post their high scores at the Guitar Wars web site, which you are now in charge of  maintaining.
Problem is, there isn’t currently a good way to verify the scores.
Text can't be trusted Right now players just post up their high scores purely as text, and there have been lots of  disputes over whose scores are valid and whose aren’t.
There’s only one way to put an end to all this bickering and crown a legitimate Guitar Wars champion...
With no way to verify, we can't know whose score is valid and whose isn't.
The Guitar Wars application allows users to add their own scores to the high score list.
Visual verification of  a high score is what we need to determine who’s for real and who isn’t.
So the Guitar Wars application needs to allow users to submit a screen shot of  their high score when posting their score.
This means the high score list will not only be a list of  scores, names, and dates, but also a list of  images (screen shots)
With photo verification, we find out that Eddie is a Guitar Wars fraud!
Belita's score is legit, thanks to her submitted screen shot.
So you're saying I'm actually going to have to learn to play this thing? Bummer.
The application needs to store images Currently, the Guitar Wars high score application keeps track of  three pieces of  information: the date and time of  a new score, the name of the person submitting the score, and the score itself.
This information is entered through a form as part of  the application’s user interface, after which it gets stored in a MySQL database table called guitarwars.
The "add your own score" link on the main Guitar Wars page leads to the Add Score page.
The Add Score page presents a form for entering the name and score (the date/time is automatically entered as the current date/time)
The new high score is confirmed so that the user knows it was successfully added.
After entering a name and score and clicking Add, the new score is confirmed and added to the guitarwars table in the database.
The newly added score immediately appears on the main Guitar Wars page.
This is the exact date (and time) that a score was submitted to the Guitar Wars application.
The guitarwars table also stores the name and score for each high score entry in the database.
This ID is the primary key for the database and is automatically generated for each row.
The Guitar Wars high score application will have to change to accommodate uploadable image files for high score screen shots.
Circle and annotate the parts of the application that must change to support user-submitted images.
This file doesn't need to change, so you don't have to worry about it.
The complete source code for the Guitar Wars application is available for download from the Head First Labs web site:
The Guitar Wars high score application will have to change to accommodate uploadable image files for high score screen shots.
Circle and annotate the parts of the application that must change to support user-submitted images.
The screen shot image needs to be displayed on the main page.
The screen shot image file must be obtained from form POST data.
You should validate to make sure the image filename isn't empty.
The image should be displayed to the user to confirm success.
The form needs an <input> tag for the image file selection.
The table needs a new column to store the screen shot image filename for each score.
The SQL query must now insert the image filename into the guitarwars table.
This query takes a bit of a shortcut by not specifying column names.
Planning for image file uploads in Guitar Wars Although it may not seem like a big deal to add support for uploadable screen shot images to Guitar Wars, the application must change in a variety of  ways.
For this reason, it’s a good idea to have a plan of  attack before diving into any code.
Let’s nail down the steps required to revamp the Guitar Wars high scores for screen shots.
Use ALTER to add a screenshot column to the table.
First off  is the database, which needs a new column.
Since we plan on putting all image files in the same.
Change the Add Score form so that it uses a file input field to allow image file uploads.
The Add Score page already has a form for adding scores, so we need to modify that form and give it a file input field.
This input field works in conjunction with the web browser to present the user with a user interface for selecting a file to upload.
Write a query to INSERT the screen shot image filename into the screenshot column of the table.
The Add Score script that processes the form for adding scores must also take into consideration the new file input form field, and handle inserting a screen shot image filename into the screenshot column when inserting a new high score row into the guitarwars table.
Change the main Guitar Wars page to show screen shot images for the high scores.
The high score database must be ALTERed In addition to a variety of  PHP scripting tweaks, the image-powered Guitar Wars application needs a new column in the guitarwars table to store screen shot image filenames.
Enter SQL, which offers a statement called ALTER that is capable of  modifying tables in all kinds of  interesting ways, including adding new columns of  data.
You used the ALTER statement in the previous chapter to tweak Elmer’s email_list table, but let’s recap how the command works.
The ALTER statement is used to change the structure of a database.
The ALTER statement is often followed by TABLE to indicate that you're going to alter a table.
It's also possible to alter the structure of the entire database with ALTER DATABASE, but that's another story.
OK, maybe that’s a dangerous example since it reveals how to drop an entire column from a table, data and all.
Yet there certainly may be a situation where you need to remove a column of  data from a table.
It’s more likely that you need to add a column of  data, as is the case with Guitar Wars.
This is made possible by ADD COLUMN , which is one of several table alterations you can carry out with ALTER.
To change the position of  a column, specify the name of  the column and its exact position (FIRST is the only option here) or a relative position (AFTER another existing column, specified by name)
The DROP COLUMN statement drops an entire column from a table.
Write an SQL statement that adds a new column named screenshot to the guitarwars table.
Make sure to give the new column a suitable MySQL data type.
Then write another SQL query to check the structure of the table and make sure the column was successfully added.
The ALTER statement adds a new screenshot column to the guitarwars table.
Since the column is new, it starts out empty (NULL) for existing rows in the table.
Use ALTER to add a screenshot column to the table.1
The ALTER statement doesn't affect any of the other table data.
The name of the table to be altered follows ALTER TABLE.
The name and data type of the new column are specified last in the SQL query - 64 characters are enough to accommodate most image filenames, although you can make the column even longer if you want to be extra safe.
This statement displays the structure of the table, including the column names and their data types.
Write an SQL statement that adds a new column named screenshot to the guitarwars table.
Make sure to give the new column a suitable MySQL data type.
Then write another SQL query to check the structure of the table and make sure the column was successfully added.
Using a MySQL tool, execute the ALTER statement to add the screenshot column to the guitarwars table.
Then issue the DESCRIBE statement to take a look at the table structure and make sure the column was added.
Q: Do new columns added with ALTER have to be added to the end of a database table?
But keep in mind that the order of the columns in a table isn't terribly important.
In other words, you can structure query results so that data is organized in any order you want.
But maybe you like the sense of structural order brought about by a specific ordering of columns, in which case you may want to add a column in an exact location.
You can do this by tacking on the keyword FIRST to the ALTER query.
Or use AFTER column to place a column relative to another column:
If you don't specify where a new column is added, it defaults to the end of the table.
Q: What happens to the existing high score database rows of data after adding the new screenshot column?
A: Since the ALTER statement only affects the structure of a database, the new screenshot column is empty for all pre-existing rows of high scores.
While it's possible to populate the screenshot column of future rows, pre-existing rows all have an empty screenshot column.
Q: Can screen shot filenames still be added to the pre-existing rows?
A: Yes, they definitely can, and you would use the UPDATE SQL statement to do so.
There is nothing stopping you from manually uploading image files to the web server and then using UPDATE to fill in the screen shot filenames for existing scores.
But remember that the whole idea here is usersubmitted image files, so it makes sense to allow users to upload their own screen shot images.
And they can do exactly this by using the improved image-powered Add Score script you're about to build...
You can construct the initial guitarwars table by downloading the example code for Guitar Wars, and then executing the SQL query found in the file guitarwars.sql.
How do we get an image from the user? With a new column added to the high score database, we’re ready to focus on allowing the user to upload an image file.
But how exactly is that possible? FTP? Mental telepathy? This actually leads back to the Add Score form, where we can use a form field to allow the user to select an image file to upload.
So an input field helps the user find the file to be uploaded, then what? The file upload form field also takes care of  the selected image getting uploaded to a folder on the server, where it can then be displayed as part of  the Guitar Wars high score list.
Is this file upload form field some kind of  strange extension to HTML? No, not at all.
The HTML <input> tag supports file form fields and works in conjunction with PHP to allow file uploads.
But before we get into the PHP side of  things, let’s take a closer look at the form field itself...
The specifics of this button are controlled by the web browser and the native operating system.
Usually it triggers a file browser dialog box where the user can navigate to find a file on their hard drive.
Upon submitting the form, the binary image file is uploaded to the server.
A folder on the server receives the image file and stores it away.
The Add Score form is what allows users to add a new high score to the Guitar Wars high score list.
This form attribute tells the form to use a special type of encoding required for file uploading - it affects how the POST data is bundled and sent when the form is submitted.
The actual file input field, which ultimately relies on a native operating system dialog for file browsing and selection.
Change the Add Score form so that it uses a file input field to allow image file uploads.
Write a query to INSERT the screen shot image filename into the screenshot column of the table.
Insert the image into the database Simply uploading an image file to the web server via a form isn’t enough.
We have to store the filename in the new screenshot column of  the database so that the image can be accessed and displayed.
As it stands, the Add Score script already inserts new high scores into the guitarwars table using the SQL INSERT statement, but this statement doesn’t factor in the new screenshot column:
Image filenames are stored in the database as part of an INSERT statement.
Passing the screenshot image filename along in the INSERT statement adds it to the database.
Since this SQL statement is inserting values without identifying the column names for each, it must include a value for every column.
But we just added a new column, which means the query no longer works—it’s missing a value for the new screenshot column.
So adding a screen shot image filename to the database as part of  a new high score row requires us to add a new value to the INSERT statement:
The MySQL NOW() function is used to insert the current date/time.
The order of these values matters since the INSERT statement is assuming they are in the same order as the columns in the table.
Rows of data inserted prior to the addition of the screenshot column don't have a screenshot filename.
The new INSERT statement results in the screenshot filename getting inserted into the screenshot column.
Find out the name of the uploaded file The query looks good, but we still don’t know what the actual filename of  the image is.
This is the image file being uploaded thanks to the file input field in the form.
The form passes some useful information about the file to the PHP script via the $_FILES superglobal variable.
The $_FILES built-in superglobal variable provides access to information about uploaded files.
The MIME type of the uploaded file, in this case GIF.
The temporary storage location of the file on the server.
The error code for the file upload; 0 indicates a success, other values indicate failure.
Wait a minute, we’re only storing the name of the image file in the database...
Data stored in external files is typically left in external files, even in database applications.
In this case, the data is a collection of  pixels that make up an image, which is stored in an external file—a GIF, JPEG, or PNG image file.
Databases excel at storing text data, not raw binary data such as images, so it’s better to just store a reference to an image in the database.
Another reason images in web applications aren’t stored in databases is because it would be much harder to display them using HTML code.
Remember that HTML code references images from external files using filenames.
So generating an image tag in HTML involves using an image filename, not raw image data.
The HTML <img> tag uses the filename of an image to reference the image file on the web server.
Placing an image on a web page only requires a reference to the image file.
The main Guitar Wars page (index.php) still isn't displaying screen shot images for the high scores.
You may want to continue including this code in your own applications but we're going to skip it from here on for the sake of brevity.
Change the main Guitar Wars page to show screen shot images for the high scores.
The main Guitar Wars page (index.php) still isn't displaying screen shot images for the high scores.
The SQL statement that requests scores doesn't change at all!
This function checks to see if a screen shot image file actually exists.
This function checks to make sure the screen shot image file isn't an empty file.
The screenshot column of the database stores the screen shot image for a given score.
Test Drive Add a new high score to Guitar Wars, complete with a screen shot image.
The code consists of  the main page (index.php), the Add Score script (addscore.php), and a style sheet (style.css)
First you need to change the addscore.php script so that its Add Score form supports file uploads.
Then incorporate the new high score INSERT query into the script.
Now shift to the index.php script, and add the new code from the facing page so that it displays the screen shot image for each high score.
Upload all of  these files to your web server and open the addscore.php page in a web browser.
Enter a new high score in the form, and click Submit.
Then navigate to the index.php page and take a look at the new score.
Why do you think the screen shot image doesn't show up for the new score? What about for the scores that were already in the database?
Something isn't right! The image doesn't appear with the new score as expected.
Where did the uploaded file go? The problem with the uploaded image not appearing is that we made an assumption that the file would be uploaded to the same folder on the web server as our PHP scripts.
The Add Score form lets the user select a file from their own computer, but the file is actually uploaded to a temporary folder on the server.
The temporary folder is created automatically on the server and usually has a weird name with a bunch of  random letters and numbers.
This presents a problem for our <img> code in index.php because it assumes the image is located in the main web folder:
This temporary folder name and location often varies with each PHP installation.
The screen shot image file begins in some folder on the user's computer.
The Add Score script takes care of uploading the image file to a temporary folder on the server.
This code assumes the image is stored in the main web folder where the PHP files are stored...but it isn't!
Yes! PHP lets you control where uploaded files are stored.
However, you can’t control the initial storage location of  uploaded files with PHP, which is why the location is considered temporary.
But you can move a file to another location after it has been uploaded.
The file is moved from a temporary folder to a permanent folder.
This folder can be any folder you choose on the web server, just make sure you have permission to write files to it.
This is the destination location of the image file, including the permanent path and filename.
This is the source location of the image file, including the temporary path and filename.
Storing images in a cryptic temporary folder seems like an unnecessary hassle.
Q: Can't I change the initial storage location of uploaded files by modifying the php.ini file?
The PHP initialization file (php.ini) can be used to change the initial storage location of uploaded files through the upload_tmp_dir option.
But if your application is hosted on a virtual server, you may not have access to this file, which means you'll have to move the file to your own folder via PHP script code.
Q: Why is the initial upload folder called a "temporary" folder? Does it go away after a file is moved?
The folder is "temporary" in a sense that it isn't intended to serve as the final storage location for uploaded files.
You can think of it as a holding area where uploaded files are stored until they are moved to their final storage location.
But keep in mind that you don't typically control the name or location of the folder.
Even more important is the fact that temporary folders can be automatically emptied periodically on some systems.
Another potential issue is that the temporary upload folder may not be publicly accessible, so you won't be able to reference uploaded files from HTML code, which is the whole point in Guitar Wars and most other PHP applications.
By moving uploaded files out of the temporary upload folder, you can carefully control exactly where they are stored and how they are accessed.
OK, so now I know how to move uploaded files around.
But I still don't have a clue where they are supposed to go.
OK, maybe "need" is a bit strong, but it’s important to organize the pieces and parts of  PHP applications as much as possible, and one way to do so is to create folders for different components.
Since uploaded images are submitted by users, they aren’t something you typically have direct control over, at least in terms of  filenames and quantity.
So it’s a good idea to store them separately from other application files.
All this said, we need an images folder, where image files that are uploaded to the Guitar Wars application are stored.
This folder can also serve as the storage location for any other images the application may use, should the need arise.
The images folder isn't actually any bigger than other folders, but it helps organize image files into one place.
Create a home for uploaded image files The images folder is just like any other folder on the web server except that it must be placed somewhere beneath the main web folder for the application.
It’s usually fine to just place the folder directly beneath this web folder, but you’re free to create a more complex folder hierarchy if you want.
With the images folder created immediately beneath the main web folder on the web server, it becomes possible to reference image files from within PHP scripts like this:
If your PHP application is hosted anywhere other than your local computer, you'll need to use FTP to create the images folder.
Use an FTP program to access the file system of your web site and create the images folder beneath the web folder of the application.
Like a variable, a constant stores a piece of  data.
But the value of  a constant can’t change once it’s set.
The image filename as entered into the Add Score form is then concatenated to the images path.
This is the web folder for the application where the PHP scripts are stored, including index.php.
The images folder is typically placed just beneath the web folder.
Uploaded image files are moved to the images folder, where they can be displayed via HTML <img> tags.
Draw your path through each part of the application, making sure not to forget the database.
Draw your path through each part of the application, making sure not to forget the database.
This folder is on the user's computer - you have no control over what it's called or where it's stored, and neither do you care.
You care a lot about the name and location of this folder because it is used throughout Guitar Wars to store and reference uploaded image files.
After the file is uploaded to the server and moved to its final storage location, its name gets added to the database.
First, the file is uploaded using a file input form field.
Yep, this is a new step we didn't plan on earlier your design must be flexible!
Move the uploaded image file from a temporary upload folder to a permanent folder for images.
Test Drive Give uploaded screen shot images a permanent home in their own image folder.
Modify the addscore.php script to use the GW_UPLOADPATH constant and store uploaded screen shot images in the path it points to.
Here’s a peek at the code that needs to change:
The index.php script is also affected by the GW_UPLOADPATH constant.
After making these changes, upload the scripts to your server and try adding a high score again.
The uploaded screen shot image is now visible on the main page.
Q: If the php.ini file can be used to control the storage location of uploaded files, why is it necessary to move the file?
For example, if you're building a PHP application on a virtual web server, you very likely won't be able to change the settings in php.ini.
And even if you are able to change php.ini, you run the risk of breaking your application if you ever need to move it to another server.
In other words, the application will be dependent on a path controlled by php.ini, as opposed to a path controlled by your own PHP code.
Q: Why isn't the date something that users can enter in Guitar Wars?
A: The date is an important part of a high score in that it establishes when a score was officially posted to the site.
Like any record, the first person to achieve a certain score gets all the glory.
Rather than trust a user to tell us when they achieved their high score, we can just use the post date/time as the official recording of the score.
This eliminates bogus dates and lends more credibility to the high score list.
Users of such a competitive application will always be looking for an angle, so eliminate as many of them as you can! It is worth pointing out that the NOW() function uses the time on the web server, which may not be the same as the user's local time.
This shouldn't be a problem, however, since all users are held to that same server time.
Q: Isn't it possible for people to overwrite each other's screen shot images by uploading image files with the same names?
The problem has to do with the fact that the screen shot image stored on the web server uses the exact same filename provided by the user in the file upload form field.
So if two users upload image files with the same filenames, the first user's image will get overwritten by the second user's image.
One solution is to add a degree of uniqueness to the image filename on the server.
A simple way to do this is to add the current server time, in seconds, to the front of the filename, like this:
Q: Could we have stored the actual image data for an uploaded high score screen shot in the Guitar Wars database?
Databases are very flexible and allow you to store binary data within them.
However, the big problem in this case is that Guitar Wars uses the uploaded images in HTML code so that they can be displayed on the main index.php page.
The HTML <img> tag is designed to reference an image file stored on the web server, not a chunk of binary image data stored in a database.
So even if you altered the guitarwars table to hold binary image data, you'd be facing a significant challenge trying to get the data back into a format that can be displayed using HTML code.
The ALTER statement is used to change the structure of a MySQL database table, such as adding a new column of data.
With a little help from PHP and MySQL, an HTML <input> tag can be used to upload image files.
The superglobal variable $_FILES is where PHP stores information about an uploaded file.
The standard PHP function move_uploaded_ file() allows you to move files around on the web server and is critical for handling uploaded files.
Most web applications benefit from having an images folder for storing images used by the application, especially those uploaded by users.
Databases are great for storing text data, but it's usually better for them to reference binary data in external files.
But the constant is duplicated in each script, meaning that any change in the path must be updated in each script.
This kind of  code duplication is bad design and should be eliminated whenever possible.
I like that the file upload path is stored in a constant, but why is it created in two places, index.php and addscore.php? What happens if the path changes?
To solve the duplicate code problem, we need to store the GW_UPLOADPATH constant in a single place.
The constant is stored twice, meaning it has to be maintained in two different places.
The GW_UPLOADPATH constant stores away the file upload path for screen shot images.
Shared data has to be shared When it comes to data that is shared across multiple scripts in an application, you need a way to store the data in one place and then pull it into the different scripts.
But that still doesn’t answer the question of where exactly the data should go...?
So storing shared script data in an existing script file doesn’t really work because the data isn’t really shared any more.
The answer lies in somehow making the data accessible to multiple scripts but without directly storing it in any of  them.
Shared script data needs to be accessible throughout an application without code duplication.
How can you make the data accessible to both scripts without storing it in either of them?
The solution to shared script data lies in include files, which are PHP source code files that are inserted into other PHP files as needed.
Shared script data is required Include files are very powerful because you create them once but then reuse them as needed in other script files, effectively sharing the code within.
The GW_UPLOADPATH constant can be placed within an include file to establish a collection of  "application variables."
Q: Hey, aren't these application "variables" really constants? A: Sometimes, yes.
The point is not to split hairs over variables vs.
Instead, we're just trying to establish a common place to store shared script data within a given application.
Q: Is code in shared script files limited to data? A: No, not at all.
Any PHP code can be placed in its own script file and shared using the require_once statement.
In fact, it's very common for applications to share lots of functional code across multiple script files.
Not only is it common to use shared script files, but it's often a great idea in terms of code organization.
Q: Why is the PHP statement to include script code called require_once?
A: The name "include file" comes from a PHP statement called include that is very similar to require_once.
The difference is that require_once results in an error if the include file cannot be found—include won't reveal an error if an include file is missing.
Also, the "once" in require_once means that it keeps a file from being accidentally included more than once.
You sometimes see include used instead of require_once to include code that isn't as important, such as pure HTML code that doesn't perform a critical purpose.
Including appvars.php in other scripts allows those scripts to share the data in appvars.php.
The require_once statement takes care of including a script within another script.
Include files allow you to share code across multiple scripts.
Think of require_once as "insert" Includes aren’t limited to one shared PHP file, and they can appear anywhere you want within a script.
You can think of  the require_once statement as an "insert" statement that gets replaced with the contents of  the script file it references.
In the case of  Guitar Wars, the database connection variables could also benefit from being moved into an include file.
So the contents of  two shared script files are inserted directly into other script files at the points where they are required.
The REQUIRE_ONCE statement inserts shared script code into other scripts.
This global variable holds important application data that both index.php and addscore.php need.
Rather than duplicate the database connection variables in every script, we can move them to an include file and share them.
Awesome! Now I have access to the shared data too.
Test Drive Create two include files for Guitar Wars, and then share them among the other scripts.
Create two new text files, appvars.php and connectvars.php, and enter the code for them shown on the facing page.
Then add require_once statements to index.php and addscore.php so that both shared script files are included.
Upload all of  the scripts to your web server and try out the Add Score form and main page to make sure they still work with the new and improved include file organizational structure.
Timing is everything with high scores Guitar Wars is finally image-powered, allowing users to upload screen shot images to help verify their high scores.
While this is a major improvement to the application, it hasn’t solved a problem that users have actually been grumbling about for quite a while—the order of  the scores on the main page.
I'm stoked on having the only score with a screen shot image, but why is my score at the bottom of the list?
Adding a new high score now involves adding a screen shot image...
Phiz digs her screen shot verification but is a little miffed over getting slotted at the bottom of the high score list despite having a decent score.
They are being displayed in whatever order they’re stored in the database, which is entirely arbitrary.
You should never rely on the order that data is stored in a database unless order truly doesn’t matter.
In this case it does, so we need to impose some order on the query results.
Also circle which query you think represents the best fix for Guitar Wars.
The query results are returned in ascending alphabetical order by name.The query results are retur.
Also circle which query you think represents the best fix for Guitar Wars.
The query results are returned in ascending alphabetical order by name.The query results are retur.
The ordering by date is secondary and only applies when there are two identical scores, which doesn't happen here but is likely in a large enough data set.
The comma is required to separate the two levels of ordering.
This is the query we need to fix Guitar Wars!
Honoring the top Guitar Warrior With the order of  the scores fixed, it’s now possible to make an unexpected improvement to the high score list by calling out the highest scorer at the top of  the list.
The top scoring Guitar Warrior deserves a top score header that clearly displays the highest, score, so there is no doubt who the top Guitar Warrior is...
A top score header clearly highlights the top score, providing a target for competing Guitar Warriors.
Q: Many of the scores are still unverified? Isn't that a problem? A: Yes it is.
But it doesn't stop us from going ahead and calling attention to the top score.
It just means that we'll need to eventually clean up the high score list by removing unverified scores.
In fact, we'll tackle the unverified high scores just as soon as we finish highlighting the top score.
Format the top score with HTML and CSS The most important thing about the new high score header is that it be clearly seen above all other scores in the high score list.
This requires the help of  both HTML and CSS to add some visual flair.
The header will be generated as a row in the HTML table with a special CSS style applied to it.
This style, topscoreheader, must be added to the style.css stylesheet for Guitar Wars.
This style class is already being used to highlight data entry errors in the Add Score script.
These two style classes already format each high score on the main page.
Make sure the font size is cranked up higher than the rest of the scores.
Use a dark background color with white text to make the high score really pop.
The index.php script already generates an HTML table containing the high score list.
Generating a header just for the top score involves isolating the first score, which is guaranteed to be the top score since the list is now in order.
A while loop takes care of  looping through the scores, so we need to somehow count the scores, and only generate the header for the first one...
Finish the code for the index.php Guitar Wars script so that it adds a formatted header for the top score that uses the topscoreheader CSS style.
Hint: Don't forget that the top score header is part of the high score HTML table, which has two columns.
Finish the code for the index.php Guitar Wars script so that it adds a formatted header for the top score that uses the topscoreheader CSS style.
Hint: Don't forget that the top score header is part of the high score HTML table, which has two columns.
Test Drive Order the high scores and showcase the highest score of all.
Modify the index.php script to use the new ordered SELECT query, and then add in the code that generates the top score header.
Upload the new script to your web server and open it in your browser to see the top score prominently displayed.
The highest score is now shown loud and clear at the top of the high score list.
It's true, the unverified scores need to be dealt with.
It seems another problem has surfaced that is preventing people from uploading their high score screen shots...
It's cool that the order is fixed...but you know any of those unverified scores could be bogus.
Not only is this file huge (much larger than 32 KB), but it's not even an image!
Not only is the file huge, but it's not an image! We have a problem in that our form is rejecting some files but not telling users why.
It’s actually good that the form is rejecting files, in this case because they’re too big—remember we capped the file size at 32 KB in the form code.
But we need to be clear about telling the user why.
Not only that, but we don’t want users uploading files that aren’t images.
Adding validation to the Add Score form will allow us to better control how files are uploaded.
So validation on the image file upload form (addscore.php) serves two vital purposes.
First, it can beef  up the prevention of  large file uploads, providing users with notification that a file can’t be larger than 32 KB.
And secondly, it can stop people from uploading files that aren’t images.
The file upload form needs validation for both file size and type.
I enter my high score and screen shot image, but when I click the Add button I just get a generic error message.
This error message doesn't tell the user much about what went wrong with the high score submission.
Only images allowed So how exactly do we check the Add Score form and make sure uploaded images adhere to a certain size and type? The answer lies in the built-in $_FILES superglobal variable, which if  you recall, is where we earlier obtained the temporary storage location of  the uploaded file so that it could be moved to the images folder.
Now we’re going to use it to grab the size and MIME type of  the file.
The type of the file is PDF, not an acceptable web image type, such as GIF, JPG, or PNG.
We don’t just want image files to be smaller than our 32 KB size limit, but we also need them to be a file type that can be displayed as a web image.
The following MIME types are commonly used to represent web images:
File validation makes the app more robust A little validation goes a long way toward making any PHP application more intuitive and easier to use, not to mention safer from abuse.
Now a helpful error message lets the user know the exact constraints imposed on uploaded image files.
Since the maximum file size now appears in more than one place in the Add Score script, it makes sense to store it as a constant.
An error message helps to explain exactly what kind of files are allowed for upload.
Some browsers use this MIME type to recognize JPEG images.
Confirm success with the user echo '<p>Thanks for adding your new h.
The new and improved Add Score script now has image file validation.
The unlink() function deletes a file from the web server.
We suppress its error reporting with @ in case the file upload didn't actually succeed.
Since we're making the script more robust, it's also a good idea to check the $_FILES superglobal to make sure there wasn't an upload error.
Display a descriptive error if the file is the wrong type or too large.
Q: Why are there two different MIME types for JPEG images?
A: This is a question better asked of browser vendors, who, for some reason, decided to use different MIME types for JPEG images.
To make sure the JPEG file validation works across as many browsers as possible, it's necessary to check for both MIME types.
But it is technically possible for a 0 byte file to get created on the server if the user specifies a file that doesn't actually exist on their own computer.
Just in case this happens, addscore.php plays it safe and checks for an empty file.
Q: Why is GW_MAXFILESIZE placed in appvars.php even though it is only used in addscore.php?
A: While it's true that appvars.php is intended for storing script data that is shared across multiple script files, it is also a good place to store any constant script data.
In this case, placing GW_MAXFILESIZE in appvars.php makes it easier to find if you ever want to make the file upload limit larger.
Q: How does that line of code with @unlink() work?
A: The built-in PHP unlink() function deletes a file from the web server, in our case the temporary image file that was uploaded.
Since it's possible that the upload failed and there is no temporary image file, we suppress any potential errors generated by unlink() by preceding it with an at symbol (@)
You can stick @ in front of any PHP function to suppress its error reporting.
Test Drive Add screen shot image file validation to the Add Score script.
Modify the addscore.php script to use the new image file validation code.
Upload the script to your web server and try out the Add Score form with both valid images and a few invalid files (huge images and non-images)
With image file uploading tightened up thanks to validation, we can’t ignore the problem of  unverified scores any longer.
New scores with uploaded screen shot images shouldn’t play second fiddle to old scores without screen shots that may or may not be valid.
Unverified scores without images need to be removed from the database, pronto!
What about all those unverified scores? They haven't gone away, you know.
The current top score is not verified, which doesn't instill much confidence in other users.
Write down how you would go about cleaning up the unverified scores in the high score list:
Plan for an Admin page Since we just need to remove some unverified scores from the database, it’s perfectly reasonable to just fire up an SQL tool and manually remove rows from the database with a few DELETE queries.
But this may not be the last time you’ll need to remove a score, and it’s no fun having to resort to manual SQL queries to maintain a web application.
The idea here is to build an application that can be maintained with as little hassle as possible.
What we need is a page that only the web site administrator has access to and can use to remove scores...
The Admin page is designed only for use by the site administrator - you wouldn't want end users removing high scores.
Web applications often include pages for public access, as well as admin pages that are only for site maintenance.
The Add Score page and main page of Guitar Wars are designed for end users to submit and view their high scores.
Write down what the Admin and Remove Score scripts need to do in order to accommodate a score removal feature for Guitar Wars.
Then draw how a score removal affects a row in the guitarwars table and the screen shot image file associated with it.
Write down what the Admin and Remove Score scripts need to do in order to accommodate a score removal feature for Guitar Wars.
Then draw how a score removal affects a row in the guitarwars table and the screen shot image file associated with it.
Although this particular example row is missing a screen shot file, the Remove Score script will need to delete the image file from the server for scores that do have an image.
The admin.php script lists all of the high score rows, each with a Remove link next to it that passes information to the Remove Score script.
The removescore.php script takes care of the actual removal of the score from the database, the deletion of the image file from the server, and the display of a confirmation message.
This code generates an HTML link to the removescore.php script, passing along information about the score to be removed.
Generate score removal links on the Admin page Although the Remove Score script is responsible for the actual score removal, we need an Admin script that allows us to select a score to remove.
The admin.php script generates a list of  high scores with Remove links for each one.
These links pass along data about a given score to the removescore.php script.
Scripts can communicate with each other In order for the Remove Score script to remove a high score, it must know what score to remove.
This begs the question, how does the Admin script tell the Remove Score script what score to remove? This communication between scripts is accomplished by packaging up the data as part of  a "Remove" URL for each high score shown on the Admin page.
If  you closely analyze the URL for a particular score, you’ll notice that all the high score data is in there.
Packaging data into a linked URL is the same as using a GET request in a web form.
In a traditional HTML GET request, form data is automatically sent along to the form processing script as part of  the script’s URL.
We’re doing the same thing by manually building our own GET request as a custom URL.
The name of the piece of data is used to access it within the $_GET array.
The URL for a script serves as a handy way to pass important data, such as the ID of a database row.
The URL of a script can be used to pass data as a GET request.
Each piece of data has a name and a value, and is separated from other name/value pairs by an ampersand ($)
Clicking this link not only opens the Remove Score script, but it also passes along data to the script as a GET request.
I don't see what all the fuss is with GET.
Why can't you just pass the data to the script using POST? That's how you've done it up until now.
Up until now we’ve always passed data to a script through a web form where the script was listed as the action for the form’s Submit button.
When the user fills out the form and presses the Submit button, the form data is packaged up and sent along to the form as a POST request.
The problem is that the Admin page doesn’t use a form to initiate the Remove Score script.
So we need a way to send along data to a script using nothing more than a URL.
This is where GET is particularly handy since it provides access to data that is packaged in a URL as parameters.
Web forms often use POST requests to submit data, which is stored in the $_POST array.
Passing data through a URL is accomplished with GET, and the data is stored in the $_GET array.
The real distinction between GET and POST has to do with the intent of  a request.
POST, on the other hand, typically involves sending data to the server, after which the state of  the server usually changes somehow in response to the data that was sent.
Typically used for data retrieval that doesn’t change anything on the server.
For small amounts of  data, GET is also useful for directly sending data to the server in a URL.
Unlike POST, GET is primarily suited to sending small amounts of  data.
Also unlike GET, the da ta sent in a POST.
The two types of web requests, GET and POST, control how you shuttle data between scripts.
How does that work? A: Both GET and POST have their place when it comes to web forms.
When creating a web form, the method attribute of the <form> tag controls how the data is sent, while the action attribute identifies the script to receive the data and process it:
When the submit button is clicked to submit this form, the addscore.php script is executed, and the form data is passed along to it through the $_POST array.
Q: Ah, so it doesn't matter which request method I use, GET or POST?
So GET is perfect for forms that make informational requests on the server without altering the state of the server, such as selecting rows from a database.
POST, on the other hand, is best suited for requests that affect the server's state, such as issuing an INSERT or DELETE query that changes the database.
Another distinction between GET and POST is that data passed through a GET is visible in a URL, while POST data is hidden, and, therefore, is a tiny bit more secure.
Q: How does this distinction between GET and POST factor into the passing of data to a script through a URL?
A: Well, first of all, you can only pass data to a script through a URL using a GET request, so POST is eliminated immediately.
Furthermore, since GET is intended purely for requests that don't alter the state of the server, this means you shouldn't be doing any INSERTs, DELETE FROMs, or anything else that will change the database in a script that receives data through its URL.
GET: So, word on the street is you've been saying all I'm good for is asking questions but not really doing anything with the answers.
OK, so it's true that I'm not really intended to be causing changes on the server such as deleting files or adding database rows, but that doesn't mean I'm not important.
True, but you're permanently connected to your good buddy, Form, whereas Form and I are merely casual acquaintances.
How exactly do you take action when your little sidekick, Form, isn't around? You know sometimes Page doesn't find it necessary to go to the trouble of  involving Form.
I'm just pointing out that while I'm geared toward retrieving data from the server, I'm fairly flexible in how I can be used to do it.
Let's face it, you don't have any real power, just the ability to ask the server for something.
All I know is not a whole lot would get done without people like me making things happen on the server.
If  the server was always stuck in the same state, it would be pretty boring out there.
So you think your "circle of  friends" somehow overcomes your inability to take action? I doubt it.
Listen, Form is my friend, and long ago I made a commitment not to do any requesting without him.
So judge my loyalty if  you must, but I won't betray my friend!
GET, POST, and high score removal We’ve established that the removal of  scores in Guitar Wars starts with a "Remove" link on the Admin page that links to the Remove Score script.
We also know that score data can be passed through the link URL to the Remove Score script.
But we have a problem in that a GET request really shouldn’t be changing anything on the server, such as deleting a score.
A possible solution is to not change anything on the server...
What if  the Remove Score script initially displayed a confirmation page before actually removing a score from the database?
The confirmation page shows the score that is up for removal with a simple Yes/No form.
Selecting Yes and clicking the Submit button results in the score being removed, while choosing No cancels the score removal.
Thinking in terms of  GETs and POSTs, the Remove Score script can display the confirmation page as a response to the GET request from the Admin script.
And since the confirmation itself  is a form, it can issue its own POST request when submitted.
The Remove Score script is initiated through a GET request by the user clicking the "Remove" link on the Admin page.1
The Remove Score script is initiated again, this time, through a POST request by the user submitting the confirmation form.3
The Remove Score script deletes the score from the database and also deletes the screen shot image file from the web server.4
A confirmation page gives the user a chance to confirm the high score removal instead of just removing it instantly.
It's entirely possible, even helpful in some cases, for the same script to respond to both GET and POST requests.
This is the exact same script reacting differently depending on whether it receives a GET or POST request.
A GET request is used to initiate the Remove Score script and pass along the high score data through a URL.
The Remove Score script deletes the score from the database and its screen shot file from the web server.
Let’s take a look at how the score removal process unfolds through this series of  steps...
Q: How can the same script process both GET and POST requests? A: It all has to do with how a script is invoked.
In the case of the Remove Score script, it is invoked in two different ways.
The first way is when the user clicks a "Remove" link on the Admin page, in which case a URL leads them to the script.
Since data is packaged into the URL, this is considered a GET request.
This GET request causes the script to generate a web form whose action refers back to the same Remove Score script.
So when the user submits the form, the script is invoked a second time.
But unlike the first time, there is no fancy URL with data packaged into it and, therefore, no GET request.
Instead, the high score data is passed along through a POST request and is, therefore, available in the $_POST array.
Q: So the manner in which the script is invoked actually determines what it does?
A: Yes! When the script sees that data has been sent through a URL as a GET request, it knows to display a confirmation form, as opposed to deleting anything from the database.
So the data sent along in the $_GET array is used only within the confirmation page and has no lasting effect on the server.
When the script sees that data is being delivered through a POST request, the script knows that it can delete the data from the database.
So it uses the $_POST array to access the data and assemble a DELETE FROM query that deletes the score.
And since most high scores also have a screen shot image file stored on the web server, the script also deletes that file.
Isolate the high score for deletion With the score removal process laid out, we can now focus our attention on the database side of  things.
The Remove Score script is responsible for removing a high score, which means deleting a row from the database of  scores.
If  you recall, the SQL DELETE FROM statement allows us to delete rows.
But in order to delete a row, we must first find it.
This is accomplished by tacking a WHERE clause onto a query that uses DELETE FROM.
For example, this SQL query deletes the row with the name column set to 'Ashton Simpson':
In a world full of  millions of Guitar Warriors, odds are there will be more than one Ashton Simpson.
This query doesn’t just delete a single row, it deletes all rows matching the name 'Ashton Simpson'
The query needs more information in order to delete the right row:
This query deletes rows with a name column matching ‘Ashton Simpson'
The table name is required by DELETE FROM to know which table you're deleting data from.
By matching the score in addition to the name, the deletion gets much more exact.
The AND operator changes the query so that both the name and score must match.
The name of the user is the match used to delete the high score.
Now that both the name and score have to match, the odds of accidentally deleting more than one score are decreased dramatically.
Control how much you delete with LIMIT Using both the name and score columns as the basis for deleting a row is good...
Application development is about minimizing risks at all cost, and there’s still a slight risk of  deleting multiple rows that match both the same name and score.
The solution is to force the query to only delete one row no matter what.
The number following LIMIT lets MySQL know the maximum number of  rows to delete—in this case, one.
So we’re guaranteed to never delete more than one row with this query.
But what if  there were two Ashton Simpsons with the same score? Sure, this is an unlikely scenario, but it’s sometimes worth considering extreme scenarios when working out the best design for an application.
For maximum safety, put a limit on the number of rows that can be deleted.
Write down what happens to this table when the DELETE statement above is executed.
How could you make sure the right Ashton Simpson score is deleted?
Two high score rows with the exact same name and score present a problem for our DELETE query.
Would it be any better to use the ID of the score in the WHERE clause of the DELETE FROM query? It might help make sure we delete the right score, no?
Yes, it would! The ID of a high score is the perfect way to isolate the score for deletion.
Uniqueness is one of  the main advantages of  creating primary keys for your tables.
The id column in the guitarwars table is the primary key and is, therefore, unique for each and every high score.
By using this column in the WHERE clause of  the DELETE FROM query, we eliminate all doubt surrounding which score we’re deleting.
Here’s a new query that uses the id column to help ensure uniqueness:
Trusting that the id column is indeed a primary key results in this code safely deleting only one row.
But what if  you didn’t create the database, and maybe uniqueness wasn’t properly enforced? Then a LIMIT clause might still make some sense.
The rationale is that if  you intend for a query to only affect one row, then say it in the query.
It’s never a bad idea to be very explicit with what you expect to be done in a query, and in this case LIMIT adds an extra degree of  safety to the DELETE query.
The LIMIT clause explicitly states that the query can't delete more than one row.
Deleting data based on a primary key helps to ensure accuracy in isolating the right row for deletion.
Use the magnets to plug in the missing code and give Guitar Wars the ability to eradicate unwanted scores.
Confirm success with the user echo '<p>The high score of '
Use the magnets to plug in the missing code and give Guitar Wars the ability to eradicate unwanted scores.
This script can be used to remove any scores, so the uploaded image file must be deleted as part of the removal.
Include the shared script files but use required_once since they are critical to the score removal.
The script reacts differently depending on whether the incoming request is a GET or a POST.
The @ PHP error suppression directive prevents errors from being displayed.
This makes sense for unlink() since we may be attempting to delete a file that doesn't exist.
In which case, we don't want the user to see an error.
Confirm success with the user echo '<p>The high score of '
Provide a link back to the Admin page to improve navigation.
The id column is matched by the DELETE query, along with using a LIMIT of one row.
A few hidden form fields are used to store the score data so that it gets sent along as part of the POST request.
The confirmation form is only displayed if all of these high score variables are set.
We want to make sure no GET data is passed along with this form - only POST data.
Create two new text files, removescore.php and admin.php, and add the code to them that you’ve just worked through.
Upload the new scripts to your web server, and then open the Admin script in your web browser.
Click the "Remove" link for a score you’d like to get rid of, and then confirm its removal on the Remove Score page.
Return to the Admin page to make sure the score is gone, and then go to the main Guitar Wars page (index.php) to see the change there.
Unverified high scores, those without screen shot images, have now been removed from the system.
The new Admin page provides links to remove unverified high scores.
The new Remove Score page takes care of both confirming and removing unwanted scores.
The main Guitar Wars page now only shows verified high scores.
The legit Guitar Warriors are now happy to see only verified high scores.
There's only room in this town for one top rocker, and it's me!
PHP&MySQLcross Tired of uploading image files? How about uploading some knowledge into a bunch of squares laid out in a puzzle?
The type attribute of the <input> tag must be set to this for a file upload form field.
It's usually a good idea to store uploaded application images in an ......
This SQL statement is used to change the structure of a table.
This SQL statement is used to put the results of a query in a certain order.
This PHP statement is used to insert code from another script.
It's a good idea to do this to newly uploaded files.
To prevent a DELETE FROM statement from deleting more than one row, use this SQL statement.
When altering a table, this SQL command takes care of adding a new column.
This SQL statement is used as part of another statement to order query results in descending order.
The type attribute of the <input> tag must be set to this for a file upload form field.
It's usually a good idea to store uploaded application images in an ......
This SQL statement is used to change the structure of a table.
This SQL statement is used to put the results of a query in a certain order.
This PHP statement is used to insert code from another script.
It's a good idea to do this to newly uploaded files.
To prevent a DELETE FROM statement from deleting more than one row, use this SQL statement.
When altering a table, this SQL command takes care of adding a new column.
This SQL statement is used as part of another statement to order query results in descending order.
This folder provides a convenient location to store images for an application, including images that were uploaded by users.
You can use it to determine the filename, the temporary storage location of the file, the file size, and the file type, among other things.
More than one match can (and often should) be used to improve the accuracy of the deletion, not to mention limiting the deletion to a single row.
Use ASC or DESC after the statement to sort the data in ascending or descending order.
A short climb, a little telephone rewiring, and this little one-horse town won’t know what hit it.
If nothing else, don’t give them the keys to your application.
The day the music died Uh oh, our young virtual rock prodigy’s moment in the limelight has been short-lived, as Jacob’s top Guitar Wars score is somehow missing, along with all the other scores.
It seems a diabolical force is at work to foil the high score application and prevent Guitar Warriors from competing online.
Unhappy virtual guitarists are unhappy users, and that can only lead to unhappy application developers...
The main page is missing high scores because they’ve all been removed from the database!
Guitar Wars top scorer Jacob, fighting mad at his top score disappearing from the high score list.
This isn’t fair! I worked so hard to become the best Guitar Warrior, and now my score is gone.
Where did the high scores go? We know that the main Guitar Wars page is empty, but does that mean the database is empty too? A SELECT query can answer that question:
Somehow all of  the high score rows of  data have been deleted from the Guitar Wars database.
Could it be that maybe someone out there is using our Remove Score script to do evil? We need to protect the scores!
A SELECT query reveals that the guitarwars table is completely empty—all the scores are gone!
Circle which of the following techniques you could use to protect the Guitar Wars high scores from bitter virtual guitar haters, and then write down why.
Circle which of the following techniques you could use to protect the Guitar Wars high scores from bitter virtual guitar haters, and then write down why.
All of the techniques are circled because they all solve the problem, although some are more viable than others.
Password protecting the Admin page is a good quick and dirty solution because it’s not too complicated and it secures the site quickly.
A user registration system with admin privileges is a great solution but involves a fair amount of planning and coding effort...
Checking the IP address works but it makes the site dependent upon your computer’s IP address, which very well may change.
Removing the feature certainly solves this specific problem, but if you recall, the removal feature was originally added in the previous chapter to make the site easier to maintain.
Securing the teeming hordes A simple and straightforward way to quickly secure the Guitar Wars high scores is to use HTTP authentication to password protect the Admin page.
This technique actually involves both a user name and a password, but the idea is to require a piece of  secret information from an administrator before they have access to restricted application features, such as the score removal links.
When a page is secured using HTTP authentication, a window pops up requesting the user name and password before access is allowed to the protected page.
In the case of  Guitar Wars, you can limit access to the Admin page to as few people as you want, potentially just you! The HTTP authentication window now stands between users and the Admin page.
High scores in the database are now protected since the Admin page is protected.
The “Remove” links on the Admin page are now only available to the Guitar Wars administrator.
Protecting the Guitar Wars Admin page HTTP authentication works like this: when a user tries to access a page protected by authentication, such as our Admin page, they are presented with a window that asks them for a user name and password.
The web browser uses a window like this to request a user name and password before allowing access to a protected page.
This variable stores the password entered into the authentication window.
This PHP superglobal variable stores the user name entered into the authentication window.
A PHP script can analyze the user name and password entered by the user and decide if  they should be allowed access to the protected page.
Let’s say we only allow access to the Admin page if  the user name is “rock” and the password is “roll.” Here’s how the Admin page is unlocked:
The Admin page is only accessible if the correct user name and password are entered.
When should the authentication of the Admin page actually take place?
It all depends on what you’re trying to accomplish with security.
Nothing is ever truly 100% secure, so we’re always talking about degrees of security.
For the purposes of protecting high scores in Guitar Wars, HTTP authentication provides a reasonable level of security.
You could add encryption to the password to ramp that up a bit further.
However, it’s probably not sufficient for an application involving data that is more sensitive, such as financial data.
Q: What happens if the user name and password are entered incorrectly? A: The browser emits a small electrical shock through the mouse.
Usually a message is displayed letting users know that they’re attempting to access a secure page that is apparently none of their business.
It’s ultimately up to you how grim you want this message to read.
Q: Does HTTP authentication require both a user name and password? What if I only want to use a password?
A: You aren’t required to use both a user name and password.
More on how this variable is checked in just a moment...
Q: How exactly do you protect a page with HTTP authentication? Do you call a PHP function?
You can think of a header as a short little conversation between the browser and the server.
Browsers and servers use headers quite often to communicate outside of the context of PHP, but PHP does allow you to send a header, which is how HTTP authentication works.
We’re about to dig a lot deeper into headers and their role in HTTP authentication with PHP.
If  the user enters these correctly, the browser goes ahead and sends along the page.
This dialog between browser and server takes place through headers, which are little text messages with specific instructions on what is being requested or delivered.
Headers are actually used every time you visit a web page, not just when authentication is required.
Here’s how a normal, unprotected web page is delivered from the server to the browser with the help of  headers:
The browser requests a page from the server by sending a couple of headers to identify the file being requested and the host name of the server.
The server responds with a collection of headers, followed by the requested page.
The browser receives the headers and the page, and renders the HTML code for the page.
All web pages are delivered with the help of headers.
When all is said and done, the headers help to successfully deliver the requested page to the browser.
Headers control precisely how and what kind of  information is passed back and forth between a web browser and web server.
An individual header often consists of  a name/value pair that identifies a piece of  information, such as the content type of  a web page (HTML)
A certain group of  headers is sent to the server as part of  a web page request, and then another group is returned to the browser as part of  the response.
Let’s take a closer look at these groups of headers to find out exactly what is sent as the client and server communicate with each other.
Headers matter to us in regard to Guitar Wars because they provide the mechanism for disrupting the delivery of  a page from the server and requiring the user to enter a user name and password before it can be delivered.
In other words, you have to tweak the headers returned by the server to protect a page with HTTP authentication.
Most individual headers consist of a name/value pair separated by a colon.
The first header isn’t a name/value pair—it’s the GET request for the page.This header specifies.
This header tells the browser that the content is HTML code, as opposed to say, plain text.
The HTML content for the page is delivered just after the headers.
Head First: You seem to be grabbing a lot of  attention when it comes to authenticating web pages.
Is it really justified, or are you just looking for your fifteen minutes of virtual fame?
You more than likely take for granted that I play a role in delivering every single web page in existence.
So I guess you could say the web wouldn’t even work without me in the picture.
I’ll be around a lot longer than fifteen minutes, even if  I do go largely underappreciated.
Head First: So what exactly is this role you play?
Header: You have to understand that web browsers and web servers aren’t people, so they can’t just call each other up on the phone or send a text message.
Header: Yeah, I know, it’s a little shocking but machines just don’t communicate the same way people do.
But browsers and servers still have to communicate, and they do so using me.
Header: When someone types in a URL or clicks a link on a web page, the browser assembles a GET request that it sends to the server.
This request is packaged into a series of  headers, each of  which contains information about the request.
The headers hold information like the name and host of  the page being requested, the type of  browser doing the requesting, etc.
Header: Well, do you think it’s important when you tell the person at the coffee shop that you want a giganto vanilla espressiato with skim milk?
Head First: Of  course, they need to know what I want.
The browser tells the server what it wants by packaging the request up and sending it along in headers.
But I heard that servers can send headers as well.
I am just as important on the other side of  the communication because the server has to do more than just dump a bunch of  content on the browser.
The browser wouldn’t have a clue what to do with it without knowing a bit more.
That’s probably the most important thing, but the server also sends along other stuff  like the size of  the content, the date and time of  the delivery, and so on.
Head First: When does the web page itself  get sent?
Header: Right after the server sends me to the browser, it follows up with the actual content, be it HTML code, PDF data, or image data such as a GIF or JPEG image.
Head First: OK, I’m starting to see how you work in regard to normal web pages.
Header: I play the same role for an authenticated web page as I do for a normal web page except that I also take care of  letting the browser know that the page must be authenticated.
That way the browser can prompt the user for authentication information.
And then it’s up to PHP code on the server to decide if  the user name and password match up, in which case, the server can go ahead and send along the rest of  the page.
Header Exposed This week’s interview: What’s all the fuss about?
The header() function immediately sends a header from the server to the browser and must be called before any actual content is sent to the browser.
This is a very strict requirement—if  even a single character or space is sent ahead of  a header, the browser will reject it with an error.
For this reason, calls to the header() function should precede any HTML code in a PHP script:
Even an errant space before the <?php tag would cause an error in this example script.
The server sends this header to the browser for processing before attempting to send any of the HTML content in the page.
All this header stuff is fascinating, but how do we actually use it to protect pages with authentication?
Take control of headers with PHP Using PHP, you can carefully control the headers sent by the server to the browser, opening up the possibilities for performing header-driven tasks such as HTTP authentication.
The built-in header() function is how a header is sent from the server to the browser from within a PHP script.
The header() function lets you create and send a header from a PHP script.
Authenticating with headers Authenticating the Guitar Wars Admin page using headers involves crafting a very specific set of  headers, two in fact, that let the browser know to prompt the user for a user name and password before delivering the page.
These two headers are generated by PHP code in the Admin script, and control the delivery of  the page to the browser.
The browser then prompts the user to enter a user name and password.
Before delivering the guts of the admin.php page to the browser, the server processes any headers for the page.
The two headers required to initiate authentication do two very specific things:
This header lets the browser know that the user is not authorized to view the page.
This header asks the browser to attempt to authenticate the user by prompting for a user name and password.
The “basic realm” is just a phrase used to uniquely identify this particular authentication—it appears in the authentication window.
Two specific headers are required to request the authentication of a web page.
After processing the authentication headers, the browser waits for the user to take action via the authentication window.
The browser takes a dramatically different action in response to what the user does...
If  the user enters the correct user name and password, and clicks Log In, the server sends the HTML content of  the admin.php page to the browser.
The browser displays the Admin page, and the user can then remove scores just like the previous unprotected version.
If  the user enters the incorrect user name and password, and clicks Log In, the server tells the browser to prompt the user again.
The browser continues this process as long as the user keeps entering incorrect user name/password combinations.
In other words, if  they don’t know the user name and password, their only way out is to click Cancel.
If  the user clicks the Cancel button to bail out of the authentication, the server sends the browser a page with a denial message, and nothing else—the admin.php page is not sent.
The denial message is controlled by PHP code in the admin.php script that is closely associated with the headers.
This code calls the PHP exit() function to display a message and immediately exit the script:
The HTML content for the Admin page is delivered after the successful entry of the user name and password.
If the user name and password are incorrectly submitted, the authentication window just prompts the user again.
An application has an opportunity to exit the script and display a custom denial message if a user cancels out of the authentication.
Use the magnets to fill in the missing code and use headers to make the Admin page secure.
Headers must be the very first thing sent to the browser in a PHP file.
Because headers must be sent before any content, it is extremely important to not allow even a single space to appear outside of PHP code before calling the header() function in a PHP script.
Just call the header() function with the appropriate name/value pair, like this:
The header is called a location header and redirects the current page to a page called about.php on the same Guitar Wars site.
Here we use a similar header to redirect to the about.php page after five seconds:
This header is called a refresh header since it refreshes a page after a period of  time has elapsed.
You often see the URL in such headers reference the current page so that it refreshes itself.
One last header is called a content type header because it controls the type of  the content being delivered by the server.
As an example, you can force a page to be plain text, as opposed to HTML, by using the following header when calling the header() function:
In this example, the text echoed to the browser is displayed exactly as shown with no special formatting.
In other words, the server is telling the browser not to render the echoed content as HTML, so the HTML tags are displayed literally as text.
The content is delivered to the browser as plain text.
The browser is redirected to the About page after 5 seconds.
The browser is redirected to the About page upon receiving this header.
I wonder if it’s possible to send other kinds of headers using PHP?
Use the magnets to fill in the missing code and use headers to make the Admin page secure.
The user-entered user name and password are checked against the required ones.
No HTML code is delivered to the browser until after the headers are sent and processed.
The exit() function displays a denial message and makes sure nothing else is sent to the browser in the event of an authentication failure.
The two calls to the header() function result in these headers being sent to the browser.
The user name and password are stored in variables at the start of the script.
The $_SERVER superglobal provides access to the user name and password entered by the user in the authentication window.
The Guitar Warriors are stoked about the high score application now being safe and secure!
A user name and password now prevent unauthorized access to the Admin page.
Modify the admin.php script to use HTTP authentication so that only you have access to it.
Upload the script to your web server and then open it in your web browser.
Try entering the wrong user name and password first to see how access is restricted.
Q: When exactly does the exit() function get called in the Guitar Wars Admin script?
A: Even though the exit() function appears in the PHP code just below the two calls to the header() function, it’s only called if the user cancels out of the authentication window by clicking the Cancel button.
If the authentication fails, the server doesn’t continue executing past the two header() calls.
Only if the user clicks Cancel does the server make it to the exit() function, in which case it sends along the content within the function call and nothing else.
If the authentication succeeds, exit() isn’t called because the script never makes it inside the if statement—the code inside the if statement is only executed if the user name and password aren’t set or have been entered incorrectly.
Q: Does the “basic realm” of an HTTP authentication have any real purpose?
It defines a security “zone” that is protected by a particular user name and password.
Once the user name and password have been successfully entered for a given realm, the browser will remember it and not continue to display the authentication window for subsequent authentication headers in the same realm.
In other words, realms allow a browser to remember that you’ve met the security requirements for a given collection of pages—just specify the same realm for the authentication headers in the pages.
It didn’t take long at all for villainy to strike again, blitzing the scores from Guitar Wars and yet again frustrating hordes of  competitive gamers.
It seems that securing the Admin page alone wasn’t enough since the Remove Score script can still be accessed directly...
Nice try, Sparky! Fortunately, I bookmarked the link to the score removal page and then doctored the date a little.
It seems our Guitar Wars villain’s figured out a way around our attempt at securing Guitar Wars.
Sure, it’s cryptic but the URL to the removescore.php page does indeed sidestep the secure admin.php page.
Ouch! The high scores have disappeared from the Guitar Wars application again.
Write down how you think we can solve this latest attack, and prevent high scores from being deleted:
So all we have to do is put the same header authorization code in the Remove Score script, and we’re good to go, right?
But I worry about duplicating all that authorization code in two places.
What happens if  later on we add another page that needs to be protected? Do we duplicate the code yet again?
Especially since there is a user name and password that all the scripts need to share.
If  we ever wanted to change those, we’d have to make the change in every protected script.
We could even put it in an appvars.php include file for application variables.
Joe:  I like where you’re headed but that solution only deals with a small part of  the code duplication.
Remember, we’re talking about a decent sized little chunk of  code.
We need to secure the Remove Score script, and I’m pretty sure we can just use.
Frank:  Ah, and we can just include that script in any page we want to protect with HTTP authorization.
Joe:  That’s right! We just have to make sure we always include it first thing since it relies on headers for all the HTTP authorization stuff.
Create an Authorize script We already have all the code we need for a new Authorize script; it’s just a matter of  moving the code from admin.php to a new script file (authorize.php), and replacing the original code with a require_once statement.
We’re pulling this code from admin.php so that we can place it in its own script file, authorize.php.
The user name/password are incorrect so se nd the authentication headers.
Since the Authorize script is shared, you’re guaranteed that the two pages have the same authentication realm, which means they share the same user name and password.
The shared Authorize script is included at the very beginning of this script since it calls the header() function.
The authentication code in the Admin script is replaced with a single line of PHP code.
The built-in PHP header() function is used to send headers to the browser, which can be used to redirect a page, control the content type of a page, or request the authentication of a page.
When headers are sent to the browser using the header() function, calls to the header() function must come before any other content is sent.
When a page is protected using HTTP authentication, the user name and password entered by the user are stored in the $_SERVER superglobal.
The “basic realm” of an HTTP authentication is a security zone that gets associated with a specific user name and password, allowing multiple pages to be secured together.
The built-in PHP exit() function exits a PHP script, preventing any code following it from being executed or otherwise sent to the browser.
Q: I still don’t fully understand how Ethel got around the security in Guitar Wars.
A: She capitalized on the weakness inherent in only protecting one page (Admin) when the remove score feature really relies on two pages (Admin and Remove Score)
The Admin page presents a series of Remove links that link to the Remove Score page.
The specifics about which score to remove are passed in the URL, allowing the Remove Score script to access them through the $_GET superglobal.
If you were able to put together a legit URL for the Remove Score page, you could remove scores without even going through the Admin page.
Q: But how did she know how to structure the URL to the Remove Score page?
A: She’s pretty crafty, but this task didn’t require a genius.
Remember she mentioned bookmarking the Remove Score page back when the whole site was unprotected.
Well, a bookmark is just a URL, and she was able to use it to construct a URL that directly accessed the Remove Score page without having to go through the Admin page.
Q: OK, but the high scores had been re-entered since the previous attack.
Doesn’t that mean the old URLs wouldn’t work since the dates are different?
She could easily look at the main Guitar Wars page and see the new dates, which she then plugged into the old URL to remove the new scores without any trouble.
It’s important to never underestimate the ability of determined people to reverse-engineer your PHP scripts and exploit weaknesses.
Q: Alright, so protecting both the Admin and Remove Score pages stops Ethel, but don’t they now make it a total hassle to remove scores legitimately?
Without the help of realms, it would definitely be a hassle removing scores legitimately because you’d have to enter the user name and password separately for the Admin and Remove Score pages.
But remember that a realm was established that is the same in both pages, meaning that the pages fall under the same security zone.
And once you go through the authentication window for a page in a given realm, the user name and password are remembered throughout the realm.
The end result is that successfully entering the user name and password once is sufficient to unlock both pages.
Never underestimate the ability of determined people to reverse-engineer your PHP scripts and exploit weaknesses.
Test Drive Create the Authorize script and include it in the Admin and Remove Score scripts to secure them.
Create a new text file called authorize.php, and enter the code for the Authorize script into it.
Then modify the admin.php script so that it includes the Authorize script instead of  the actual HTTP authentication code.
Add the same require_once statement to the beginning of  the removescore.php script so that it is also protected by HTTP authentication.
Upload all of  the scripts to your web server and then try to open the Remove Score script directly in your web browser.
You may have to clear any previous HTTP authentication sessions in your browser for it to prompt you again—most browsers remember an authentication realm so that you don’t have to keep re-entering the user name and password.
Can you think of any other ways the Guitar Wars high score application is at risk?
The Remove Score page is protected regardless of how the user gets to it.
A user name and password are now required for both the Admin and Remove Score pages.
This URL bypasses the Admin page and accesses the Remove Score page directly.
Sadly, happiness in the Guitar Wars universe didn’t last for long, as bogus scores are showing up in the application in place of  legitimate scores...
Apparently it’s entirely possible to disrupt the Guitar Wars high score list without removing scores.
Ethel’s top score is clearly suspect due to the poorly doctored screen shot and the fact that she happened to score exactly 500,000
Ethel realized she could wreak plenty of Guitar Wars havoc by simply submitting bogus scores with doctored screen shot images.
Write down how you would solve the problem of  people being able to post bogus high scores to the Guitar Wars application:
Subtraction by addition Until now we’ve operated under the assumption that any high score submitted with a screen shot image is considered verified.
It’s now reasonably safe to say this is not the case! And it’s pretty clear who the culprit is...
Security requires humans Even in this modern world we live in, sometimes you can’t beat a real live thinking, breathing human being.
In this case, it’s hard to beat a real person when it comes to analyzing a piece of  information and assessing whether or not it is valid.
We’re talking about moderation, where a human is put in charge of  approving content posted to a web application before it is made visible to the general public.
Good luck trying to slip any falsified documents, er high scores, by me.
With moderation, a new high score gets added to the database but doesn’t appear to the public until a moderator approves it.
The Admin change adds an “Approve” link to each new high score so that it can be approved.
Simply adding a new high score doesn’t automatically add it to the publicly visible high score list anymore.
Sure, it’s still possible that someone could carefully doctor a screen shot and maybe still sneak a score by a human moderator.
But it wouldn’t be easy, and it doesn’t change the fact that moderation is a great deterrent.
Keep in mind that securing a PHP application is largely about prevention.
Human moderation is an excellent way to improve the integrity of usersubmitted content.
Plan for moderation in Guitar Wars Adding a human moderation feature to Guitar Wars is significant because it affects several parts of  the application.
The database must change, a new script must be created to carry out an approval, the Admin page must add an “Approve” link to each score, and finally, the main page must change to only show approved scores.
With this many changes involved, it’s important to map out a plan and carry out each change one step at a time.
Use ALTER to add an approved column to the table.
Modify the Admin page to include an “Approve” link for scores that have yet to be approved.
The Approve Score script is a back-end script that shouldn’t normally be accessed directly.
Instead, it is accessed through “Approve” links generated and displayed on the Admin page—only unapproved scores have the “Approve” link next to them.
Create an Approve Score script that handles approving a new high score (sets the approved column to 1)
With the database ready to accommodate high score approvals, you need a script to actually handle approving a score.
This Approve Score script is responsible for looking up a specific score in the database and changing the approved column for it.
Change the query on the main page to only show approved scores.
The last step is to make sure all this approval stuff gets factored into the main high score view.
So the main page of  the application changes to only show high scores that have been approved—without this change, all the other approval modifications would be pointless.
So all new scores should start out with a value of  0 to indicate that they are initially unapproved.
When a new column is added, its approved column is set to 0 so that it starts out unapproved.
Use ALTER to add an approved column to the table.
The MySQL data type BOOL is an alias for TINYINT, so you can use either one.
I don’t think you can just go adding a column to the database without changing the Add Score script—shouldn’t it INSERT data into the new column?
It’s true, a new column means a new value in the INSERT query in the Add Score script.
It’s important to not lose sight of  the fact that a PHP application is a careful orchestration of  several pieces and parts: a database consisting of  tables with rows and columns, PHP code, HTML code, and usually CSS code.
It’s not always immediately apparent that changing one part requires changing another.
Adding the new approved column in the guitarwars table for the sake of  the new Approve Score script also requires modifying the INSERT query in the Add Score script:
All newly inserted high score rows have approved set to 0...
Make room for approvals with ALTER Adding the new approved column to the guitarwars table involves a one-time usage of  the ALTER TABLE statement, which is an SQL statement we’ve used before.
The Approve Score script is similar in structure to the Remove Score script except that its job is to approve a score.
Finish the missing code for the Approve Score script, making sure to secure the page and only approve the appropriate score based on score data passed through a URL.
Create an Approve Score script that handles approving a new high score (sets the approved column to 1)
The Approve Score script is similar in structure to the Remove Score script except that its job is to approve a score.
Finish the missing code for the Approve Score script, making sure to secure the page and only approve the appropriate score based on score data passed through a URL.
Including the Authorize script is all that is required to secure the Approve Score page with a user name and password, but it must be done first thing in the script since it relies on headers.
The ID must match in order to carry out the approval.
It’s important to reveal when a score cannot be approved, similar to how other Guitar Wars scripts report errors.
Provide a link back to the Admin page for easier navigation.
Q: Why isn’t it necessary to pass along the screen shot filename when approving a score?
A: Because the process of approving a high score only requires enough information to look up a score row and then approve it.
This means you really only need enough data to hone in on a particular row.
The MySQL ENUM data type, which stands for “enumerated,” allows you to create a column with a restricted list of possible values.
The score data used to approve a score in the Approve Score script is passed through “Approve” links that are generated in the Admin script.
Finish the missing code in the Admin script so that it generates these links.
The score data used to approve a score in the Approve Score script is passed through “Approve” links that are generated in the Admin script.
Finish the missing code in the Admin script so that it generates these links.
Check to see if the score is unapproved before generating the “Approve” link.
Generate the “Approve” link so that the id, date, name, score, and screen shot image name are passed in the URL.
Modify the Admin page to include an “Approve” link for scores that have yet to be approved.
The “Approve” link ties the Admin page to the Approve Score page.
Unapproved scores aren’t worthy All the infrastructure is now in place for the moderation feature in the Guitar Wars high score application.
All that’s missing is the final step, which is altering the main page to only show approved scores.
This involves tweaking the SQL SELECT query so that it only plucks out scores whose approved column is set to 1 (approved)
Change the query on the main page to only show approved scores.
Use WHERE to select rows based on the value of a certain column.
The addition of  the WHERE statement to this query eliminates any scores that haven’t been approved, which includes all new scores.
This gives the moderator a chance to look them over and decide whether they should be removed or made visible to the public (approved)
If the approved column is set to something other than 1, the score won’t be displayed.
Only approved scores show up on the main page (index.php) now.
Test Drive Create the Approve script and rework the rest of the Guitar Wars application to use it.
Using a MySQL tool, issue the ALTER query to add the new approved column to the guitarwars table.
Then change the INSERT query in the addscore.php script to insert a 0 in the approved column for new rows of  data.
Then modify the admin.php script to include an “Approve” link for high scores that have yet to be approved.
And finally, change the SELECT query in index.php to only show approved scores.
Upload all of  the scripts to your web server, and open the main Guitar Wars page in your web browser.
Take note of  the scores that are visible, and then open the Admin page.
Click one of the “Approve” links and continue along to approve the score.
Then go back to the main page to see if  the score appears.
The new “Approve” links on the Admin page provide access to the Approve Score page, where individual scores can be approved.
Upon following through with the score approval, a confirmation message is displayed.
The newly approved score now appears on the main Guitar Wars page.
A simple form requires a confirmation before actually approving the score.
The million-point hack The moderated version of  Guitar Wars represents a significant security improvement, but it’s far from bulletproof.
It seems our wily infiltrator has managed to find another weakness in the high score system and somehow sneak her high scores past the moderator.
Ethel must be stopped, permanently, in order to restore trust throughout the Guitar Wars universe.
I’ve gotta be honest, I can’t decide what’s more fun, playing my accordion or making a mockery of the Guitar Wars site!
Ethel can’t help but gloat over her success now that she beat the system yet again.
This is precisely the kind of high score the moderator would’ve stopped dead in its tracks...
We know the Add Score script sets the approved column to 0 for new high scores because we just modified the INSERT query in that script.
How do you think Ethel’s bogus post got past the moderator?
How is that possible? I know I never approved that score.
This score was never approved by the moderator yet its approved column is set to 1, resulting in it being displayed.
As it turns out, Ethel’s million-point hack had nothing to do with the Approve Score form.
Her mischief was completely isolated to the Add Score form.
Below is the exact form data that Ethel entered into the Add Score form to carry out her hack.
Enter the same form data in your own form and add the score.
This can be any GIF or JPEG image file that is under 32 KB.
How exactly did she do it? In order to understand what’s happening with this clever form attack, let’s trace the flow of  form data as it travels through the Add Score script.
The unusual contents of the Score form field get stored in the $score variable, which ends up making its way directly into the INSERT query.
Using the exact form data shown on the facing page, write out the full Add Score SQL query for the million-point attack.
Make sure to replace the variables in the query with the actual form data.
The Score form field expects a single numeric value, such as 1000000, but instead it has several values enclosed in single quotes, separated by commas, and then with a strange double-hyphen at the end.
This strange data first gets stored in the $score variable, after which it gets incorporated into the INSERT query.
This just results in a meaningless score, right? Or is something more sinister taking place here?
Using the exact form data shown on the facing page, write out the full Add Score SQL query for the million-point attack.
Make sure to replace the variables in the query with the actual form data.
Ethel has somehow created her own version of the query that is superseding the original query.
Since the approved column is last in the database structure, it is being forced to a value of 1...
Tricking MySQL with comments The real culprit in Ethel’s million-point attack is, strangely enough, SQL comments.
A double-hyphen (--) is used in SQL to comment out the remainder of  a line of  SQL code.
You must follow the doublehyphen with a space for it to work (-- ), but everything after the space is ignored.
Now take a look at Ethel’s full query with that little nugget of  wisdom.
Is it making more sense? The comment effectively erased the remaining SQL code so that it wouldn’t generate an error, allowing Ethel’s version of  the query to slip through without a snag.
The end result is an instantly approved new high score that the moderator never got a chance to catch.
The -- comment causes the rest of the line of SQL code to be ignored.
The Add Score form was SQL injected Ethel’s attack is known as an SQL injection, and involves an extremely sneaky trick where form data is used as a means to change the fundamental operation of  a query.
So instead of  a form field just supplying a piece of  information, such as a name or score, it meddles with the underlying SQL query itself.
In the case of  Guitar Wars, Ethel’s SQL injection used the Score field as a means of  not only providing the score, but also the screen shot filename, the approval value, and a comment at the end to prevent the original SQL code from generating an error.
Q: Are there any other kinds of comments in SQL besides --? A: Yes.
Another variation on the single-line comment involves the use of # instead of --, but still results in commenting out any SQL code to the end of the line following the comment.
Q: Would Ethel’s SQL injection attack have still worked if the approved column wasn’t at the end of the table?
This particular INSERT query relies on the default ordering of columns in the table.
Tacking on 1 to the end of the query just happened to work because approved is the last column, appearing immediately after the screenshot column.
Form fields are a security weak point for web applications because they allow users to enter data.
Protect your data from SQL injections The real weakness that SQL injections capitalize on is form fields that aren’t validated for dangerous characters.
Even spaces at the end of  a piece of  data can prove harmful.
Leading or trailing spaces are easy enough to eliminate with the built-in PHP function trim()—just run all form data through the trim() function before using it in an SQL query.
You still have the commas, quotes, comment characters, and on, and on.
So in addition to trimming form fields of  extra spaces, we also need a way to find and render harmless other problematic characters.
These characters can still appear as data in form fields, they just won’t interfere with queries.
The trim() function gets rid of leading and trailing spaces in this form data.
But these two functions aren’t enough—maybe there’s a way to make the query itself  less vulnerable...
A safer INSERT (with parameters) Aside from exploiting weak form field protection, Ethel’s SQL injection also relied on the fact that the approved column followed the screenshot column in the database structure.
That’s how she was able to get away with just adding 1 onto the end of  INSERT and have it go into the approved column.
The problem is that the INSERT query is structured in such a way that it has to insert data into all columns, which adds unnecessary risk.
When data is inserted into a table like this, the order of  the data must line up with the order of  the columns in the table structure.
So the fifth piece of data will go into the screenshot column because it’s the fifth column in the table.
A better approach is to focus on inserting only the data explicitly required of a new high score.
We need a restructured INSERT query that expects a list of  columns prior to the list of  data, with each matching one-to-one.
This eliminates the risk of  the approved column being set—it’s no longer part of  the query.
If  this kind of query looks familiar, it’s because you’ve used it several times in other examples.
An INSERT query can be written so that it nails down exactly what values go in what columns.
This version of  the INSERT query spells out exactly which column each piece of  data is to be stored in, allowing you to insert data without having to worry about the underlying table structure.
In fact, it’s considered better coding style to use this kind of  INSERT query so that data is inserted exactly where you intend it to go, as opposed to relying on the structural layout of  the table.
Nothing can be inserted into the approved column because it isn’t listed as part of the query.
The id column can be left out since it auto-increments anyway.
Ideally, we shouldn’t be setting the id and approved columns since they could just have default values.
This is the first I’ve heard of default values in MySQL tables.
Not only is it possible, but it’s a very good idea to specify DEFAULT column values whenever possible.
The SQL DEFAULT command is what allows you to specify a default value for a column.
If  a column has a default value, you can forego setting it in an INSERT query and relax in the confidence of  knowing that it will automatically take on the default value.
This is perfect for the approved column in the guitarwars table.
Now we just need to modify the table one more time to set the default value for approved to 0 (unapproved)
Since the approved column already exists, in this ALTER TABLE statement we have to use MODIFY COLUMN instead of ADD COLUMN.
You still have to specify the type of the column—just make sure it’s the same as when you first added the column.
With the approved column now altered to take on a default value, the new and improved INSERT query in the Add Score script can insert high scores without even mentioning the approved column.
This is good design since there’s no need to explicitly insert a value that can be defaulted, and it adds a small extra degree of  security by not exposing the approved column to a potential attack.
Form validation can never be too smart One last step in minimizing the risks of  SQL injection attacks involves the form validation in the Add Score script.
There is nothing wrong with this code as-is, but securing an application is often about going above and beyond the call of  duty.
Since the Score field expects a number, it makes sense to not just check for a non-empty value but for a numeric value.
The PHP is_numeric() function does just that by returning true if  a value passed to it is a number, or false otherwise.
It’s consistently doing the little things, like checking for a number when you’re expecting a number, that will ultimately make your application as secure as possible from data attacks.
Whenever possible, insist on form data being in the format you’ve requested.
Rewrite the Add Score form validation if statement to use the isnumeric() function so that only a numeric score is allowed.
True or false depending on whether or not the user enters a number into the Score field.
This if statement checks to make sure all of the form fields are non-empty.
Test Drive Beef up the handling of form data in the Add Score script.
Then change the INSERT query so that it specifies both the column names and values, eliminating the need to provide values for the id and approved columns.
Also change the if statement that validates the form fields so that it checks to make sure the score is numeric.
Upload the new Add Score script to your web server, navigate to it in a web browser, and then try the same SQL injection attack again.
Rewrite the Add Score form validation if statement to use the isnumeric() function so that only a numeric score is allowed.
Now the Score form field will only accept numbers and nothing else.
Form validation is a topic that reaches far beyond database security.
Sure, this error message could be a bit more specific, but it gets the job done without adding extra logic to the script.
Maybe it’s time I just learned how to play virtual guitar.
Cease fire! It seems Ethel’s will to interfere with the Guitar Wars high scores has finally been broken thanks to the improvements to the application that render it immune to SQL injections.
The reigning Guitar Wars champion has responded by posting a new top score.
Relieved that high scores are now safe from outside interference, Jacob posts a new top score that will be tough to beat.
Finally! I’m back at the top of the high score list with a jamming new score.
Resigned that she’d rather join them than continue to lose fighting them, Ethel figures it might be time to become a Guitar Warrior.
Once a script encounters the exit() function, no additional PHP code is executed and no additional HTML code is delivered to the browser.
Your PHP & MySQL Toolbox In addition to taking the Guitar Wars high score application to a new.
You can check these against expected values to protect pages that need to be secured.
If a new row is added and the column isn’t set, it will take on the default value.
It is useful for checking to see if a numeric form field actually holds a numeric value.
Although not intended for highly sensitive security applications, HTTP authentication can be handy for quickly adding a degree of security to a web application.
Human Moderation Everything in moderation! In this case, it means that a human being is often the best line of defense in identifying and eliminating unwanted content being posted by others.
Automated security techniques are still important, but it’s hard to beat a living, breathing person with a brain!
Most SQL injections involve tricking a web form into passing along dangerous data directly to a dynamically constructed query.
Form Validation The process of checking all of the data entered by a user into a form to ensure that it is in the expected format.
In addition to making forms easier to use, validation can help make web applications more secure by not allowing users to enter bad data.
No one likes to be forgotten, especially users of  web applications.
If an application has any sense of “membership,” meaning that users somehow interact with the application in a personal way, then the application needs to.
You’d hate to have to reintroduce yourself to your family every time.
Are you sure you signed up for a warranty on your cryogenic storage cell? Oh, I see, so you’re calling from inside your cell right now.
They say opposites attract It’s an age-old story: boy meets girl, girl thinks boy is completely nuts, boy thinks girl has issues, but their differences become the attraction, and they end up living happily ever after.
Mismatch takes the “opposites attract” theory to heart by mismatching people based on their differences.
Problem is, Mismatch has yet to get off  the ground and is in dire need of a web developer to finish building the system.
Millions of  lonely hearts are anxiously awaiting your completion of  the application...
Mismatch users need to be able to interact with the site on a personal level.
For one thing, this means they need personal profiles where they enter information about themselves that they can share with other Mismatch users, such as their gender, birthdate, and location.
Sidney loves reality TV, yoga, and sushi, and is hoping for a successful mismatch.
Johan loves professional wrestling, weightlifting, and Spam, and is excited about anyone who’ll reply to him.
Mismatch is all about personal data So Mismatch is all about establishing connections through personal data.
These connections must take place within a community of  users, each of  whom is able to interact with the site and manage their own personal data.
A database called mismatch_user is used to keep up with Mismatch users and store their personal information.
How can Mismatch customize the Edit Profile page for each different user?
Within the Mismatch database, the mismatch_user table stores users and their personal profile data.
In addition to viewing a user profile, Mismatch users can edit their own personal profiles using the Edit Profile page.
But there’s a problem in that the application needs to know which user’s profile to edit.
The Edit Profile page somehow needs to keep track of  the user who is accessing the page.
The Edit and View Profile pages need to know whose profile to access.
Each row of the mismatch_user table contains personal data for a single user.
Mismatch needs user log-ins The solution to the Mismatch personal data access problem involves user log-ins, meaning that users need to be able to log into the application.
This gives Mismatch the ability to provide access to information that is custom-tailored to each different user.
For example, a logged-in user would only have the ability to edit their own profile data, although they might also be able to view other users’ profiles.
User log-ins provide the key to personalization for the Mismatch application.
A user log-in typically involves two pieces of  information, a username and a password.
Username The job of  the username is to provide each user with a unique name that can be used to identify the user within the system.
Users can potentially access and otherwise communicate with each other through their usernames.
Password The password is responsible for providing a degree of  security when logging in users, which helps to safeguard their personal data.
To log in, a user must enter both a username and password.
Passwords are extremely sensitive pieces of data and should never be made visible within an application, even inside the database.
Usernames typically consist of alphanumeric characters and are entirely up to the user.
User log-ins allow web applications to get personal with users.
A username and password allows a user to log in to the Mismatch application and access personal data, such as editing their profile.
When a user logs in, the application is able to remember the user and provide a personalized experience.
The Edit Profile page now indicates that the user is logged in.
The user’s username and password are all that is required to let the application know who they are.
Come up with a user log-in gameplan Adding user log-in support to Mismatch is no small feat, and it’s important to work out exactly what is involved before writing code and running database queries.
We know there is an existing table that stores users, so the first thing is to alter it to store log-in data.
We’ll also need a way for users to enter their log-in data, and this somehow needs to integrate with the rest of  the Mismatch application so that pages such as the Edit Profile page are only accessible after a successful log-in.
Here are the log-in development steps we’ve worked out so far:
Use ALTER to add username and password columns to the table.
The Log In form is what will ultimately protect personalized pages in that it prompts for a valid username and password.
This information must be entered properly before Mismatch can display user-specific data.
So the script must limit access to personalized pages so that they can’t be viewed without a valid log-in.
Connect the Log-In script to the rest of the Mismatch application.
Before going any further, take a moment to tinker with the Mismatch application and get a feel for how it works.
Post all of  the code to your web server except for the .sql files, which contain SQL statements that build the necessary Mismatch tables.
Make sure to run the statement in each of  the .sql files in a MySQL tool so that you have the initial Mismatch tables to get started with.
When all that’s done, navigate to the index.php page in your web browser, and check out the application.
Keep in mind that the View Profile and Edit Profile pages are initially broken since they are entirely dependent upon user log-ins, which we’re in the midst of  building.
The complete source code for the Mismatch application is available for download from the Head First Labs web site:
The main Mismatch page allows you to see the name and picture of the latest users, but not much else without being logged in.
These two links lead into the personalized parts of the application.
Prepping the database for log-ins OK, back to the construction.
The mismatch_user table already does a good job of  holding profile information for each user, but it’s lacking when it comes to user log-in information.
More specifically, the table is missing columns for storing a username and password for each user.
Username and password data both consist of  pure text, so it’s possible to use the familiar VARCHAR MySQL data type for the new username and password columns.
However, unlike some other user profile data, the username and password shouldn’t ever be allowed to remain empty (NULL)
Q: Why can’t you just use user_id instead of username for uniquely identifying a user?
In fact, the purpose of user_id is to provide an efficient means of uniquely identifying user rows.
However, numeric IDs tend to be difficult to remember, and users really like being able to make up their own usernames for accessing personalized web applications.
So it’s more of a usability decision to allow Johan to be able to log in as “jnettles” instead of “11”
No one wants to be relegated to just being a number!
The mismatch_user table needs columns for username and password in order to store user log-in data.
The username and password columns contain simple text data but should never be allowed to go empty.
Few people would want to try and remember a password longer than 16 characters!
Encryption in Mismatch involves converting a password into an unrecognizable format when stored in the database.
Any application with user log-in support must encrypt passwords so that users can feel confident that their passwords are safe and secure.
Exposing a user’s password even within the database itself is not acceptable.
So we need a means of  encrypting a password before inserting it into the mismatch_user table.
Problem is, encryption won’t help us much if  we don’t have a way for users to actually enter a username and password to log in...
The position of columns in a table doesn’t necessarily matter, although it can serve an organizational purpose in terms of positioning the most important columns first.
The AFTER statement controls where in the table new columns are added.
The username column is added first, so it’s OK to reference it here.
Use ALTER to add username and password columns to the table.1
Surely you don’t just store a password in the database as-is...
Q: So asterisks aren’t actually stored in the database, right? A: That’s correct.
The asterisks displayed in a password form field simply provide visual security, preventing someone from looking over your shoulder as you enter the password.
When the form is submitted, the password itself is submitted, not the asterisks.
That’s why it’s important for the password to be encrypted before inserting it into the database.
Constructing a log-in user interface With the database altered to hold user log-in data, we still need a way for users to enter the data and actually log in to the application.
This log-in user interface needs to consist of  text edit fields for the username and password, as well as a button for carrying out the log-in.
The password field is protected so that the password isn’t readable.
Clicking the Log In button makes the application check the username and password against the database.
If the username and password check out, the user is successfully logged in.
An application login requires a user interface for entering the username and password.
If  you’re worried about how users will be able to log in when we haven’t assigned them user names and passwords yet...
We’ll get to creating user names and passwords for users in just a bit.
For now it’s important to lay the groundwork for log-ins, even if  we still have more tasks ahead before it all comes together.
Encrypt passwords with SHA() The log-in user interface is pretty straightforward, but we didn’t address the need to encrypt the log-in password.
MySQL offers a function called SHA() that applies an encryption algorithm to a string of  text.
The result is an encrypted string that is exactly 40 hexadecimal characters long, regardless of  the original password length.
So the function actually generates a 40-character code that uniquely represents the password.
Since SHA() is a MySQL function, not a PHP function, you call it as part of  the query that inserts a password into a table.
For example, this code inserts a new user into the mismatch_user table, making sure to encrypt the password with SHA() along the way.
The MySQL SHA() function encrypts a piece of text into a unique 40character code.
This is the actual password as entered into the password form field.
The same SHA() function works on the other end of  the log-in equation by checking to see that the password entered by the user matches up with the encrypted password stored in the database.
Instead of storing the actual password, we store the 40-character encrypted code.
A “hash” is a programming term that refers to a unique, fixed-length string that uniquely represents a string of text.
In the case of SHA(), the hash is the 40-character hexadecimal encrypted string of text, which uniquely represents the original password.
MySQL offers another function similar to SHA() called MD5() that carries out a similar type of encryption.
But the SHA() algorithm is considered a little more secure than MD5(), so it’s better to use SHA() instead.
An ALTER is in order to expand the password column for storing encrypted passwords.
The size of the password column is changed to 40 so that encrypted passwords will fit.
Decrypting passwords Once you’ve encrypted a piece of  information, the natural instinct is to think in terms of  decrypting it at some point.
But the SHA() function is a one-way encryption with no way back.
This is to preserve the security of  the encrypted data—even if  someone hacked into your database and stole all the passwords, they wouldn’t be able to decrypt them.
So how is it possible to log in a user if  you can’t decrypt their password?
You don’t need to know a user’s original password to know if  they’ve entered the password correctly at log-in.
This is because SHA() generates the same 40-character code as long as you provide it with the same string of  text.
So you can just encrypt the log-in password entered by the user and compare it to the value in the password column of  the mismatch_user table.
This can be accomplished with a single SQL query that attempts to select a matching user row based on a password.
This is the password entered by the user in order to log in.
The SHA() function is called to encrypt the password so that it can appear in the WHERE clause.
This SELECT query selects all rows in the mismatch_user table whose password column matches the entered password, 'tatlover' in this case.
Since we’re comparing encrypted versions of the password, it isn’t necessary to know the original password.
A query to actually log in a user would use SHA(), but it would also need to SELECT on the user ID, as we see in just a moment.
The SHA() function provides one-way encryption—you can’t decrypt data that has been encrypted.
Don’t forget to encrypt the password by calling the SHA() function.
For a successful log-in, this must be the same password used when inserting the row.
Test Drive Add the username and password columns to the mismatch_user table, and then try them out.
Using a MySQL tool, execute the ALTER statement to add the username and password columns to the mismatch_user table.
But our password column actually needs to be able to hold a 40character encrypted string, so ALTER the table once more to make room for the larger password data.
Now, to test out the new columns, let’s do an INSERT for a new user.
To double-check that the password was indeed encrypted in the database, take a look at it by running a SELECT on the new user.
And finally, you can simulate a log-in check by doing a SELECT on the username and using the SHA() function with the password in a WHERE clause.
So the password is now encrypted, but we still need to build a log-in form.
Could we just use HTTP authentication since it requires a username and password to access protected pages?
Yes! HTTP authentication will certainly work as a simple user log-in system.
If  you recall from the Guitar Wars high score application in the last chapter, HTTP authentication was used to restrict access to certain parts of  an application by prompting the user for a username and password.
That’s roughly the same functionality required by Mismatch, except that now we have an entire database of  possible username/password combinations, as opposed to one application-wide username and password.
Mismatch users could use the same HTTP authentication window; however, they’ll just be entering their own personal username and password.
The standard HTTP authentication window, which is browser-specific, can serve as a simple log-in user interface.
Authorizing users with HTTP As Guitar Wars illustrated, two headers must be sent in order to restrict access to a page via an HTTP authentication window.
These headers result in the user being prompted for a username and password in order to gain access to the Admin page of  Guitar Wars.
A username and password are required in order to access restricted pages in the Guitar Wars application.
These two headers must be sent in order to restrict access to a page via HTTP authentication.
Unless a user enters the correct username and password, they cannot see or use this page.
Sending the headers for HTTP authentication amounts to two lines of PHP code—a call to the header() function for each header being sent.
This is the realm for the authentication, which applies to the entire application.
Circle the different parts of the Mismatch application that are impacted by the Log-In script (login.php) and its usage of HTTP authentication to control access.
Viewing and editing profiles is restricted, meaning that only logged in users can access these pages.
When a user logs in, their username and password are checked against the database to ensure they are a registered user.
The home page plays no direct role in user log-ins because it needs to remain accessible by all.
If a row isn’t found that matches the username and password, the Log In script displays an error message and prevents further access.
The Edit Profile page not only relies on the Log In script for restricted access, but it also needs the username in order to determine which profile to edit.
Q: Why isn’t it necessary to include the home page when requiring user log-ins?
A: Because the home page is the first place a user lands when visiting the site, and it’s important to let visitors glimpse the site before requiring a log-in.
So the home page serves as both a teaser and a starting point—a teaser for visitors and a starting point for existing users who must log in to go any deeper into the application.
The idea is that profiles are visible to all users who log in, but remain private to guests.
In other words, you have to be a member of Mismatch in order to view another user’s profile.
A: There are two different issues here: transmitting a password and storing a password.
The SHA() MySQL function focuses on securely storing a password in a database in an encrypted form.
The database doesn’t care how you transmitted the password initially, so this form of encryption has no impact on HTTP authentication.
However, an argument could be made that encryption should also take place during the transmission of the password when the HTTP authentication window submits it to the server.
This kind of encryption is outside the scope of this chapter and, ultimately, only necessary when dealing with highly sensitive data.
Circle the different parts of the Mismatch application that are impacted by the Log-In script (login.php) and its usage of HTTP authentication to control access.
If the username and password haven’t been entered, send the authentication headers to prompt the user.
If no database row matches the username and password, send the authentication headers again to re-prompt the user.
All is well at this point, so confirm the successful log-in.
Build a new Log-In script that prompts the user to enter their.
The Log-In script uses HTTP authentication to prevent unauthorized access to the View Profile and Edit Profile pages.
This password is SHA() encrypted and compared with the password in the database to determine if the log-in is allowed.
These two links lead to the protected pages, which invoke the Log-In script if a user isn’t logged in.
Then add PHP code to the top of  the viewprofile.php and editprofile.php scripts to include the new Log-In script.
Upload all of  the scripts to your web server, and then open the main Mismatch page in a web browser.
Click the View Profile or Edit Profile link to log in and access the personalized pages.
Of  course, this will only work if  you’ve already added a user with a username and password to the database.
The home page is not protected by the Log-In script, but it does serve as the starting point for navigating deeper into the application.
The Log-In script is included first thing in the View Profile and Edit Profile scripts to enforce user log-ins.
Each user is now presented with their very own customized Mismatch experience.
Both pages signify the log-in with a confirmation that is provided by the Log-In script.
Connect the Log-In script to the rest of the Mismatch application.3
Any Mismatch page that requires log-in support only has to include the login.php script at the very beginning of its code.
If the username and password check out, then the user is logged in, and the rest of the page is allowed to load.
The new Mismatch Log-In script does a good job of  using HTTP authentication to allow users to log in.
Problem is, users don’t have a way to sign up—logging in is a problem when you haven’t even created a username or password yet.
Mismatch needs a Sign-Up form that allows new users to join the site by creating a new username and password.
I’d love to log in and start working on my profile, but I can’t figure out how to sign up.
Ruby loves horror movies, cube puzzles, and spicy food, but hates Mismatch at the moment for not letting her sign up and use the system.
Clicking the Sign Up button results in the application adding the username and password to the database.
Since the passwords are now encrypted, they're secure even when viewing the database.
A form for signing up new users What does this new Sign-Up form look like? We know it needs to allow the user to enter their desired username and password...
So the user enters the password twice, just to make sure there wasn’t a typo.
So the job of  the Sign-Up page is to retrieve the username and password from the user, make sure the username isn’t already used by someone else, and then add the new user to the mismatch_user database.
One potential problem with the Sign-Up script involves the user attempting to sign up for a username that already exists.
The script needs to be smart enough to catch this problem and force the user to try a different username.
So the job of  the Sign-Up page is to retrieve the username and password from the user, make sure the username isn’t already used by someone else, and then add the new user to the mismatch_user database.
The password is double-entered to help eliminate the risk of an incorrect password getting set for the user.
Confirm success with the user echo '<p>Your new account has been successfully created.
Don’t forget, you have to escape an apostrophe if it appears inside of single quotes.
Use the magnets below to finish up the script so new users can sign up and join the Mismatch community.
Use the magnets below to finish up the script so new users can sign up and join the Mismatch community.
Confirm success with the user echo '<p>Your new account has been successfully created.
Confirm the successful sign-up with the user, and exit the script.
If no match is found, the username is unique, so we can carry out the INSERT.Either password could be used here.
Check to make sure that none of the form fields are empty and that both passwords match.
Perform a query to see if any existing rows match the username entered.
Grab all of the user-entered data, making sure to clean it up first.
Q: Why couldn’t you just use HTTP authentication for signing up new users?
A: Because the purpose of the Sign-Up script isn’t to restrict access to pages.
The Sign-Up script’s job is to allow the user to enter a unique username and password, and then add them to the user database.
Sure, it’s possible to use the HTTP authentication window as an input form for the username and password, but the authentication functionality is overkill for just signing up a new user.
It’s better to create a custom form for sign-ups—then you get the benefit of double-checking the password for data entry errors.
Q: So does the Sign-Up script log in users after they sign up? A: No.
And the reason primarily has to do with the fact that the Log-In script already handles the task of logging in a user, and there’s no need to duplicate the code in the Sign-Up script.
The Sign-Up script instead presents a link to the Edit Profile page, which is presumably where the user would want to go after signing in.
And since they aren’t logged in yet, they are presented with the Log-In window as part of attempting to access the Edit Profile page.
So the Sign-Up script leads the user to the Log-In window via the Edit Profile page, as opposed to logging them in automatically.
The username is not unique, so display an error message.
Clear the $username variable so that the form field is cleared.
One or more of the form fields are empty, so display an error message.
Give users a chance to sign up We have a Sign-Up script, but how do users get to it? We need to let users know how to sign up.
One option is to put a “Sign Up” link on the main Mismatch page.
That’s not a bad idea, but we would ideally need to be able to turn it on and off  based on whether a user is logged in.
Another possibility is to just show a “Sign Up” link as part of  the Log-In script.
When a new user clicks the “View Profile” or “Edit Profile” links on the main page, for example, they’ll be prompted for a username and password by the Log-In script.
Since they don’t yet have a username or password, they will likely click Cancel to bail out of  the log-in.
That’s our chance to display a link to the Sign-Up script by tweaking the log-in failure message displayed by the Log-In script so that it provides a link to signup.php.
This code actually appears in two different places in the Log-In script: when no username or password are entered and when they are entered incorrectly.
It’s probably a good idea to go ahead and provide a “Sign Up” link in both places.
This code just shows a log-in error message with no mention of how to sign up for Mismatch.
This code is much more helpful since it generates a link to the Sign-Up script so that the user can sign up.
Nothing fancy here, just a normal HTML link to the signup.php script.
Sign-ups and log-ins turn an impersonal application into a community of interested users.
Then modify the login.php script to add links to the Sign-Up script for users who can’t log in.
Upload the scripts to your web server, and then open the Sign-Up page in a web browser.
Sign up as a new user and then log in.
Then edit your profile and view your profile to confirm that the sign-up and log-in worked correctly.
The application now has that personalized touch that’s been missing.
Cool! I can log in to Mismatch and then edit and view my personal profile.
I share a computer with two roommates, and I’d rather they not have access to my Mismatch profile.
Community web sites must allow users to log out so that others can’t access their personal data from a shared computer.
Allowing users to log out might sound simple enough, but it presents a pretty big problem with HTTP authentication.
The problem is that HTTP authentication is intended to be carried out once for a given page or collection of  pages—it’s only reset when the browser is shut down.
In other words, a user is never “logged out” of  an HTTP authenticated web page until the browser is shut down or the user manually clears the HTTP authenticated session.
The latter option is easier to carry out in some browsers (Firefox, for example) than others (Safari)
Once you log in, you stay in until you close the browser.
Even though HTTP authentication presents a handy and simple way to support user log-ins in the Mismatch application, it doesn’t provide any control over logging a user out.
We need to be able to both remember users and also allow them to log out whenever they want.
A log-out feature would allow Sidney to carefully control access to her personal profile.
Wouldn't it be dreamy if we could remember the user without keeping them logged in forever.
Sometimes you just need a cookie The problem originally solved by HTTP authentication is twofold: there is the issue of  limiting access to certain pages, and there is the issue of remembering that the user entered information about themselves.
The second problem is the tricky one because it involves an application remembering who the user is across multiple pages (scripts)
Mismatch accomplishes this feat by checking the username and password stored in the $_SERVER superglobal.
So we took advantage of  the fact that PHP stores away the HTTP authentication username and password in a superglobal that persists across multiple pages.
But we don’t have the luxury of  HTTP authentication anymore because it can’t support log-outs.
So we need to look elsewhere for user persistence across multiple pages.
A possible solution lies in cookies, which are pieces of  data stored by the browser on the user’s computer.
Cookies are a lot like PHP variables except that cookies hang around after you close the browser, turn off  your computer, etc.
More importantly, cookies can be deleted, meaning that you can eliminate them when you’re finished storing data, such as when a user indicates they want to log out.
Cookies allow you to persistently store small pieces of data on the client that can outlive any single script...
Cookie data is stored on the user’s computer by their web browser.
You have access to the cookie data from PHP code, and the cookie is capable of  persisting across not only multiple pages (scripts), but even multiple browser sessions.
So a user closing their browser won’t automatically log them out of  Mismatch.
This isn’t a problem for us because we can delete a cookie at any time from script code, making it possible to offer a log-out feature.
We can give users total control over when they log out.
What’s in a cookie? A cookie stores a single piece of  data under a unique name, much like a variable in PHP.
Unlike a variable, a cookie can have an expiration date.
So cookies aren’t exactly immortal—they just live longer than PHP variables.
You can create a cookie without an expiration date, in which case it acts just like a PHP variable—it gets destroyed when the browser closes.
Cookies allow you to store a string of  text under a certain name, kind of like a PHP text variable.
It’s the fact that cookies outlive normal script data that makes them so powerful, especially in situations where an application consists of  multiple pages that need to remember a few pieces of  data, such as log-in information.
Setting a cookie’s expiration date far into the future makes it more permanent.
Q: What’s the big deal about cookies being persistent? Isn’t data stored in a MySQL database persistent too?
In fact, it’s technically much more persistent than a cookie because there is no expiration date involved—if you stick data in a database, it stays there until you explicitly remove it.
The real issue in regard to cookies and persistence is convenience.
We don’t need to store the current user’s ID or username for all eternity just to allow them to access their profile; we just need a quick way to know who they are.
What we really need is temporary persistence, which might seem like an oxymoron until you consider the fact that we need data to hang around longer than a page (persistent), but not forever.
Not providing an expiration date at all causes a cookie to be deleted when the browser is closed.
So Mismatch can mimic the persistence provided by the $_SERVER superglobal by setting two cookies—one for the username and one for the password.
Although we really don’t need to keep the password around, it might be more helpful to store away the user ID instead.
The setcookie() function is used to set the value and optional expiration date of  a cookie, and the $_COOKIE superglobal is used to retrieve the value of  a cookie.
The first argument to setcookie() is the name of the cookie.
The value to be stored in the cookie is passed as the second argument.
The PHP setcookie() function allows you to store data in cookies.
The setcookie() function also accepts an optional third argument that sets the expiration date of  the cookie, which is the date upon which the cookie is automatically deleted.
If  you don’t specify an expiration date, as in the above example, the cookie automatically expires when the browser is closed.
The name of the cookie is used to reference the cookie value in the $_COOKIE superglobal.
The power of  setting a cookie is that the cookie data persists across multiple scripts, so we can remember the username without having to prompt the user to log in every time they move from one page to another within the application.
But don’t forget, we also need to store away the user’s ID in a cookie since it serves as a primary key for database queries.
Cookies are always stored as text, so even though the user ID is a number, we store it in a cookie as the string ‘1’
Switching Mismatch to use cookies involves more than just writing a new Log-Out script.
We must first revisit the Log-In script and change it to use cookies instead of HTTP authentication.
Circle and annotate the parts of the Log-In code that you think need to change to accommodate cookies.
Switching Mismatch to use cookies involves more than just writing a new Log-Out script.
We must first revisit the Log-In script and change it to use cookies instead of HTTP authentication.
Circle and annotate the parts of the Log-In code that you think need to change to accommodate cookies.
Instead of getting the username and password from an authentication window, we need to use a form with POST data.
We need to check for the existence of a cookie to see if the user is logged in or not.
Here we need to set two cookies instead of setting script variables.
Since we can’t rely on the HTTP authentication window for entering the username and password, we need to create an HTML Log-In form for entering them.
Rethinking the flow of log-ins Using cookies instead of  HTTP authentication for Mismatch log-ins involves more than just rethinking the storage of  user data.
What about the log-in user interface? The cookie-powered log-in must provide its own form since it can’t rely on the authentication window for entering a username and password.
Not only do we have to build this form, but we need to think through how it changes the flow of  the application as users log in and access other pages.
Clicking the new “Log In” link leads to the Log-In page, where a user can enter their log-in information to log in.
After successfully logging in, the user is redirected back to the home page, where the menu now reveals that they are logged in.
Restricted pages are now accessible since the user is logged in.
A new form takes the place of the HTTP authentication window for entering the username and password for log-ins.
The Log-Out script is accessible via a link that is part of the log-in status.
The main navigation menu includes a Log Out link that also shows the username of the logged in user.
When not logged in, the latest members are displayed as static names.
After logging in, the latest member names change to links to their respective profile views.
A cookie-powered log-in The new version of  the Log-In script that relies on cookies for log-in persistence is a bit more complex than its predecessor since it must provide its own form for entering the username and password.
But it’s more powerful in that it provides log-out functionality.
Error messages are now stored in a variable and displayed, if necessary, later in the script.
Check the user_id cookie to see if the user is logged in.
If the user isn’t logged in, see if they’ve submitted log-in data.
The user-entered data now comes from form POST data instead of an authentication window.
Log in the user by setting user_id and username cookies.
Redirect the user to the Mismatch home page upon a successful log-in.
Set the error message variable if anything is wrong with the log-in data.
The Log-In script is now a full web page, so it requires all the standard HTML elements.
Q: Why is it necessary to store both the user ID and username in cookies?
A: Since both pieces of information uniquely identify a user within the Mismatch user database, you could use either one for the purpose of keeping up with the current user.
However, user_id is a better (more efficient) user reference with respect to the database because it is a numeric primary key.
On the other hand, user_id is fairly cryptic and doesn’t have any meaning to the user, so username comes in handy for letting the user know they are logged in, such as displaying their name on the page.
Since multiple people sometimes share the same computer, it is important to not just let the user know they are logged in, but also who they are logged in as.
Q: Then why not also store the password in a cookie as part of the log-in data?
A: The password is only important for initially verifying that a user is who they claim to be.
Once the password is verified as part of the log-in process, there is no reason to keep it around.
Besides, passwords are very sensitive data, so it’s a good idea to avoid storing them temporarily if at all possible.
Q: It looks as if the form in the Log-In script is actually inside the if statement? Is that possible?
In fact it’s quite common for PHP code to be “broken up” around HTML code, as is the case with the Log-In script.
Just because you close a section of PHP code with ?>, doesn’t mean the logic of the code is closed.
When you open another section of PHP code with <?php, the logic continues right where it left off.
In the Log-In script, the HTML form is contained within the first if branch, while the else branch picks up after the form code.
Breaking out of PHP code into HTML code like this keeps you from having to generate the form with a bunch of messy echo statements.
If the user still isn’t logged in at this point, go ahead and show the error message.
These two form fields are used to enter the username and password for logging in.
Everything prior to this curly brace is still part of the first if clause.
Finish the HTML code to complete the Log-In web page.
Navigating the Mismatch application The new Log-In script changes the flow of  the Mismatch application, requiring a simple menu that appears on the home page (index.php)
This menu is important because it provides access to the different major parts of  the application, currently the View Profile and Edit Profile pages, as well as the ability for users to log in, sign up, and log out depending on their current log-in state.
The fact that the menu changes based on the user’s log-in state is significant and is ultimately what gives the menu its power and usefulness.
The menu is generated by PHP code within the index.php script, and this code uses the $_COOKIE superglobal to look up the username cookie and see if  the user is logged in or not.
The user ID cookie could have also been used, but the username is actually displayed in the menu, so it makes more sense to check for it instead.
A different menu is shown depending on whether the username cookie is set.
This menu appears when a user is not logged in, giving them an opportunity to either log in or sign up.
The index.php script knows to show the limited menu when it can’t find the username cookie.
The user_id cookie isn’t used for the different menus but is still important for Mismatch user persistence.
The little heart symbols next to each menu item are made possible by this HTML entity, which is supported on most browsers.
The username cookie also lets the user know who is logged in.
Cookies have made logging into Mismatch and navigating the site a bit cleaner, but the whole point of  switching from HTTP authentication to cookies was to allow users to log out.
We need a new Log-Out script that deletes the two cookies (user ID and username) so that the user no longer has access to the application.
This will prevent someone from getting on the same computer later and accessing a user’s private profile data.
Since there is no user interface component involved in actually logging out a user, it’s sufficient to just redirect them back to the home page after logging them out.
Hello, remember me? I still really, really need to log out.
The Log-Out script deletes the user log-in cookies and redirects back to the home page.
The Log-Out script for Mismatch is missing a few pieces of code.
Write the missing code, making sure that the log-in cookies get deleted before the Log-Out page is redirected to the home page.
But we want to delete a cookie immediately, which requires setting the expiration date to a time in the past.
The amount of  time into the past isn’t terribly important—just pick an arbitrary amount of  time, such as an hour, and subtract it from the current time.
Together, this expression sets an expiration date that is 8 hours from the current time.
To delete a cookie, just set its expiration date to a time in the past.
Logging out means deleting cookies Logging out a user involves deleting the two cookies that keep track of  the user.
This is done by calling the setcookie() function, and passing an expiration date that causes the cookies to get deleted at that time.
The Log-Out script for Mismatch is missing a few pieces of code.
Write the missing code, making sure that the log-in cookies get deleted before the Log-Out page is redirected to the home page.
The cookie modifications involve changes to the index.php, login.php, logout.php, editprofile.php, and viewprofile.php scripts.
Upload the scripts to your web server, and then open the main Mismatch page (index.php) in a web browser.
Take note of  the navigation menu, and then click the “Log In” link and log in.
Notice how the Log-In script leads you back to the main page, while the menu changes to reflect your logged in status.
Now click “Log Out” to blitz the cookies and log out.
Redirect to the Mismatch home page, which is constructed as an absolute URL.
Only log out a user if they are already logged in.
Set each cookie to an hour in the past so that they are deleted by the system.
Q: So simply deleting the cookies is all that is required to log out? A: Yes.
Cookies are responsible for storing all of the log-in information for Mismatch (user ID and username), so deleting them results in a complete log-out.
Q: Why are the cookies set to an hour in the past in order to be deleted? Is there something significant about an hour?
A cookie is automatically deleted by the web browser once its expiration date/time passes.
So deleting a cookie involves setting the expiration to any time in the past.
An hour (3600 seconds) is just an arbitrary amount of time chosen to consistently indicate that we’re deleting a cookie.
Logging in and out of Mismatch is now controlled entirely by cookies.
Sidney is pleased that she can log out and know that her Mismatch profile can’t be edited by anyone while she’s away.
Cookies are created to remember the user and log in.
Cookies are thrown away to forget the user and log out.
Who cares about Jason? Don’t most people have cookies enabled?
Yes, but web applications should be as accessible to as many people as possible.
Some people just aren’t comfortable using cookies, so they opt for the added security of  having them disabled.
Knowing this, it’s worth trying to accommodate users who can’t rely on cookies to log in.
It turns out that there’s another option that uses the server to store log-in data, as opposed to the client.
And since our scripts are already running on the server, it only makes sense to store log-in data there as well.
I have cookies disabled in my browser, and I can’t log in.
Since cookies are disabled, the Log-In script fails and just sends the user back to the home page without being logged in.
The server attempts to set the user ID and username cookies on the browser.
The browser rejects the cookies, preventing the Log-In script from setting them.
Mismatch user Jason, lover of hiking, body piercings, and Howard Stern, has cookies disabled in his browser, which presents a problem for logging in.
Sessions aren’t dependent on the client Cookies are powerful little guys, but they do have their limitations, such as being subject to limitations beyond your control.
But what if  we didn’t have to depend on the browser? What if  we could store data directly on the server? Sessions do just that, and they allow you to store away individual pieces of  information just like with cookies, but the data gets stored on the server instead of  the client.
This puts session data outside of the browser limitations of  cookies.
Sessions allow you to persistently store small pieces of data on the server, independently of the client.
Sessions store data in session variables, which are logically equivalent to cookies on the server.
When you place data in a session variable using PHP code, it is stored on the server.
You can then access the data in the session variable from PHP code, and it remains persistent across multiple pages (scripts)
Like with cookies, you can delete a session variable at any time, making it possible to continue to offer a log-out feature with sessionbased code.
The browser doesn’t factor directly into the storage of session data since everything is stored on the server.
Unlike cookies, sessions don’t offer as much control over how long a session variable stores data.
Session variables are automatically destroyed as soon as a session ends, which usually coincides with the user shutting down the browser.
So even though session variables aren’t stored on the browser, they are indirectly affected by the browser since they get deleted when a browser session ends.
There isn’t an expiration date associated with session variables because they are automatically deleted when a session ends.
Since session data is stored on the server, it is more secure and more reliable than data stored in cookies.
A user can’t manually delete session data using their browser, which can be a problem with cookies.
The life and times of sessions Sessions are called sessions for a reason—they have a very clear start and finish.
Data associated with a session lives and dies according to the lifespan of  the session, which you control through PHP code.
The only situation where you don’t have control of  the session life cycle is when the user closes the browser, which results in a session ending, whether you like it or not.
You must tell a session when you’re ready to start it up by calling the session_start() PHP function.
The PHP session_start() function starts a session and allows you to begin storing data in session variables.
Calling the session_start() function doesn’t set any data—its job is to get the session up and running.
The session is identified internally by a unique session identifier, which you typically don’t have to concern yourself  with.
This ID is used by the web browser to associate a session with multiple pages.
When a session is started, a session ID is set that uniquely identifies the session.
The session ID is used behind the scenes to allow multiple pages to share access to session data.
The session ID isn’t destroyed until the session is closed, which happens either when the browser is closed or when you call the session_destroy() function.
If  you close a session yourself  with this function, it doesn’t automatically destroy any session variables you’ve stored.
Let’s take a closer look at how sessions store data to uncover why this is so.
This is the unique session ID, which is automatically generated as part of a new session.
Keeping up with session data The cool thing about sessions is that they’re very similar to cookies in terms of  how you use them.
The name of the session variable is used as an index into the $_SESSION superglobal.
The value to be stored is just assigned to the $_SESSION superglobal.
The session variable is created and stored on the server.
To access the session variable, just use the $_SESSION superglobal and the session variable name.
Unlike cookies, session variables don’t require any kind of  special function to set them—you just assign a value to the $_SESSION superglobal, making sure to use the session variable name as the array index.
A quick and effective way to destroy all of  the variables for a session is to set the $_SESSION superglobal to an empty array.
This code kills all of the session variables in the current session.
If  the browser allows cookies, a session may possibly set a cookie that temporarily stores the session ID.
So to fully close a session via PHP code, you must also delete any cookie that might have been automatically created to store the session ID on the browser.
Like any other cookie, you destroy this cookie by setting its expiration to some time in the past.
All you need to know is the name of  the cookie, which can be found using the session_name() function.
Destroy the session cookie by setting its expiration to an hour in the past.
First check to see if a session cookie actually exists.
If a session is using a cookie to help remember the session ID, then the ID is stored in a cookie named after the session.
Session variables are not automatically deleted when a session is destroyed.
Renovate Mismatch with sessions Reworking the Mismatch application to use a session to store log-in data isn’t as dramatic as it may sound.
In fact, the flow of  the application remains generally the same—you just have to take care of  a little extra.
Log-in data is now remembered using a session instead of cookies.
If cookies are enabled, the server creates one to hold the session ID - otherwise the ID is passed through the URL of each page.
The session_start() function gets things started by opening a session.
Two session variables are created to store the user ID and username for the log-in.
The session_destroy() function ends the session, preventing it from being used in another page.
The session variables are destroyed by clearing out the $_SESSION array.
If a cookie was used to hold the session ID, it is destroyed.
The Log-Out script for Mismatch is undergoing an overhaul to use sessions instead of pure cookies for log-in persistence.
Log out with sessions Logging a user out of  Mismatch requires a little more work with sessions than the previous version with its pure usage of  cookies.
These steps must be taken to successfully log a user out of  Mismatch using sessions.
OK, so this is a bonus step that isn’t strictly required to log the user out, but is helpful nonetheless.
You don’t know for certain if a session cookie is being used without checking.
The Log-Out script for Mismatch is undergoing an overhaul to use sessions instead of pure cookies for log-in persistence.
Even when logging out, you have to first start the session in order to access the session variables.
Now a session variable is used to check the log-in status instead of a cookie.
To clear out the session variables, assign the $_SESSION superglobal an empty array.
If a session cookie exists, delete it by setting its expiration to an hour ago.
Destroy the session with a call to the built-in session_destroy() function.
Check to see if a session cookie exists, and if so, delete it.2
The move from cookies to sessions impacts more than just the Log-Out script.
Match the other pieces of  the Mismatch application with how they need to change to accommodate sessions.
No change since the script has no direct dependence on log-in persistence.
The move from cookies to sessions impacts more than just the Log-Out script.
Match the other pieces of  the Mismatch application with how they need to change to accommodate sessions.
No change since the script has no direct dependence on log-in persistence.
Q: The session_start() function gets called in a lot of different places, even after a session has been started.
Are multiple sessions being created with each call to session_ start()?
The session_start() function doesn’t just start a new session—it also taps into an existing session.
So when a script calls session_start(), the function first checks to see if a session already exists by looking for the presence of a session ID.
If no session exists, it generates a new session ID and creates the new session.
Future calls to session_ start() from within the same application will recognize the existing session and use it instead of creating another one.
Q: So how does the session ID get stored? Is that where sessions sometimes use cookies?
Even though session data gets stored on the server and, therefore, gains the benefit of being more secure and outside of the browser’s control, there still has to be a mechanism for a script to know about the session data.
This is what the session ID is for—it uniquely identifies a session and the data associated with it.
This ID must somehow persist on the client in order for multiple pages to be part of the same session.
One way this session ID persistence is carried out is through a cookie, meaning that the ID is stored in a cookie, which is then used to associate a script with a given session.
Q: If sessions are dependent on cookies anyway, then what’s the big deal about using them instead of cookies?
It’s important to understand that cookies serve as an optimization for preserving the session ID across multiple scripts, not as a necessity.
If cookies are disabled, the session ID gets passed from script to script through a URL, similar to how you’ve seen data passed in a GET request.
The specifics of how sessions react in response to cookies being disabled are controlled in the php.ini configuration file on the web server via the session.
Q: It still seems strange that sessions could use cookies when the whole point is that sessions are supposed to be better than cookies.
A: While sessions do offer some clear benefits over cookies in certain scenarios, they don’t necessarily have an either/or relationship with cookies.
Sessions certainly have the benefit of being stored on the server instead of the client, which makes them more secure and dependable.
So if you ever need to store sensitive data persistently, then a session variable would provide more security than a cookie.
Sessions are also capable of storing larger amounts of data than cookies.
So there are clear advantages to using sessions regardless of whether cookies are available.
For the purposes of Mismatch, sessions offer a convenient server-side solution for storing log-in data.
For users who have cookies enabled, sessions provide improved security and reliability while still using cookies as an optimization.
And in the case of users who don’t have cookies enabled, sessions can still work by passing the session ID through a URL, foregoing cookies altogether.
Cookies let you store small pieces of data on the client (web browser), such as the log-in data for a user.
All cookies have an expiration date, which can be far into the future or as near as the end of the browser session.
To delete a cookie, you just set its expiration to a time in the past.
Sessions offer similar storage as cookies but are stored on the server and, therefore, aren’t subject to the same browser limitations, such as cookies being disabled.
Session variables have a limited lifespan and are always destroyed once a session is over (for example, when the browser is closed)
Complete the session transformation Even though the different parts of  Mismatch affected by sessions use them to accomplish different things, the scripts ultimately require similar changes in making the migration from cookies to sessions.
For one, they all must call the session_start() function to get rolling with sessions initially.
All of the session-powered scripts start out with a call to session_start() to get the session up and running.
Although not shown, the View Profile script uses sessions in much the same way as Edit Profile.
Tonight’s talk: Cookie and session variable get down and dirty about who has the best memory.
Cookie: There’s been a lot of  talk around here among us cookies about what exactly goes on over there on the server.
Rumor is you’re trying to move in on our territory and steal data storage jobs.
The browser is a perfectly good place to store data, and I’m just the guy to do it.
And if  the user decides to disable me, then clearly they don’t have any need to store data.
So I suppose your answer is to store the data on the server? How convenient.
Since you seem to have it all figured out, why is it that you still sometimes use me to store your precious little ID on the browser?
The truth is sometimes it just makes more sense to store data on the server.
The user often doesn’t even know a web application is storing data because in many cases, it is behind-the-scenes data, like a username.
And the cool thing is that the user doesn’t have the ability to disable anything on the server, so you don’t have to worry about whether or not the data is really able to be stored.
Er, well, most people really don’t know about that, so there’s no need to get into it here.
The important thing is that I’m always around, ready to store data on the server.
Cookie: Come on, tell me how much you need me!
Oh I know you can, but the truth is you’d rather not.
Ah, so you’re going to resort to picking on the little guy.
Sure, I may not be able to store quite as much as you, and I’ll admit that living on the client makes me a little less secure.
But it sure is more exciting! And I have something you can only dream about.
Well, all that storage space and security you’re so proud of  comes at a cost...
So I can be set to live a long, full life, far beyond the whim of  some click-happy web surfer who thinks it’s cute to open and close the browser every chance he gets.
Problem is, those same scripters often set my expiration to such a short period that I don’t really get to experience the long life I truly deserve.
Alright, I will admit that from time to time I do lean on you a little to help me keep up with things across multiple pages.
But I can get by without you if  I need to.
You know, not every piece of  persistent data is bite-sized.
You mean you can go on living beyond a single session? How is that possible?!
My only hope is that some slacker scripter accidentally forgets to destroy me when he closes a session...
It’s nice being able to log in even without cookies turned on.
Thanks to sessions, users with cookies disabled can still log in and access their personal profiles.
Test Drive Change Mismatch to use sessions instead of cookies.
Upload the scripts to your web server, and then open the main Mismatch page (index.php) in a web browser.
Try logging in and out to make sure everything works the same as before.
Unless you had cookies disabled earlier, you shouldn’t notice any difference—that’s a good thing!
Sessions without cookies may not work if your PHP settings in php.ini aren’t configured properly on the server.
In order for sessions to work with cookies disabled, there needs to be another mechanism for passing the session.
The SID superglobal holds the session ID, which is being passed along through the URL so that the View Profile page knows about the session.
Users are being logged out of Mismatch without ever clicking the “Log Out” link.
Users aren’t feeling welcome Despite serving as a nice little improvement over cookies, something about the new session-powered Mismatch application isn’t quite right.
Several users have reported getting logged out of  the application despite never clicking the “Log Out” link.
The home page is presented to the registered users as if they are visitors even though they never logged out.
This isn’t the message we want Mismatch to send its users.
Hey, we were logged in last time we checked, and suddenly we’re all logged out! What gives?
What do you think is causing users to be automatically logged out of Mismatch? Is it something they’ve done inadvertently?
The problem with the automatic log-outs in Mismatch has to do with the limited lifespan of  sessions.
If  you recall, sessions only last as long as the current browser instance, meaning that all session variables are killed when the user closes the browser application.
In other words, closing the browser results in a user being logged out whether they like it or not.
This is not only inconvenient, but it’s also a bit confusing because we already have a log-out feature.
Users assume they aren’t logged out unless they’ve clicked the Log Out link.
Even though you can destroy a session when you’re finished with it, you can’t prolong it beyond a browser instance.
So sessions are more of  a shortterm storage solution than cookies, since cookies have an expiration date that can be set hours, days, months, or even years into the future.
Does that mean sessions are inferior to cookies? No, not at all.
But it does mean that sessions present a problem if  you’re trying to remember information beyond a single browser instance...
Session variables are destroyed when the user ends a session by closing the browser.
The session variables are destroyed along with the session when the browser is closed.
Logging in with sessions results in the creation of two session variables.
The session variables are used to remember the identity of the user.
Whether sessions or cookies are used, logging in is what sets the persistent wheels in motion.
The user closes the browser but may not realize that they just logged themselves out.
Problem is, users have the ability to destroy all of  the cookies stored on their machine with a simple browser setting, so don’t get too infatuated with the permanence of  cookies—they’re still ultimately only intended to store temporary data.
Maybe not forever, but plenty long enough to outlast a session.
The lifespan of a cookie is determined by its expiration date/time.
So would it make sense to use both sessions and cookies, where cookies help keep users logged in for longer periods of time? It would work for users who have cookies enabled.
Yes, it’s not wrong to take advantage of the unique assets of both sessions and cookies to make Mismatch log-ins more flexible.
Sessions are better suited for short-term persistence since they share wider support and aren’t limited by the browser, while cookies allow you to remember log-in data for a longer period of  time.
Sure, not everyone will be able to benefit from the cookie improvement, but enough people will that it matters.
Any time you can improve the user experience of  a significant portion of  your user base without detracting from others, it’s a win.
As long as you’re not dealing with highly sensitive data, in which case, the weak security of cookies would argue for using sessions by themselves.
Sessions + Cookies = Superior log-in persistence For the ultimate in log-in persistence, you have to get more creative and combine all of what you’ve learned in this chapter to take advantage of  the benefits of  both sessions and cookies.
In doing so, you can restructure the Mismatch application so that it excels at both short-term and long-term user log-in persistence.
When a user logs in, both session variables and cookies are set to store the user ID and username.
Closing the browser results in the session variables being destroyed, but not the cookies.The next time the user.
Rather than keeping users logged in forever, the cookies are destroyed 30 days later.
The user closes the web browser, killing the session in the process.
The expiration for the cookies is set to 30 days after the initial log-in.
The log-in data stored in the cookies is used to reset the session variables.
This happened to be the strategy that helped guide the design of the Mismatch application, but every application is different, and there are other aspects of sessions and cookies that often must be weighed.
For example, the data stored in a session is more secure than the data stored in a cookie.
So even if cookies are enabled and a cookie is being used solely to keep track of the session ID, the actual data stored in the session is more secure than if it was being stored directly in a cookie.
The reason is because session data is stored on the server, making it very difficult for unprivileged users to access it.
So if you’re dealing with data that must be secure, sessions get the nod over cookies.
Q: What about the size of data? Does that play a role? A: Yes.
Sessions are capable of storing larger pieces of data than cookies, so that’s another reason to lean toward sessions if you have the need to store data beyond a few simple text strings.
Of course, a MySQL database is even better for storing large pieces of data, so make sure you don’t get carried away even when working with sessions.
Q: So why would I choose a session or cookie over a MySQL database? A: Convenience.
It takes much more effort to store data in a database, and don’t forget that databases are ideally suited for holding permanent data.
Log-in data really isn’t all that permanent in the grand scheme of things.
That’s where cookies and sessions enter the picture—they’re better for data that you need to remember for a little while and then throw away.
If the session vars aren't set, try to set them.
The Mismatch application has been redesigned to use both sessions and cookies for the ultimate in user log-in persistence.
Use the session and cookie magnets to add back the missing code.
If the session vars aren't set, try to set them.
The Mismatch application has been redesigned to use both sessions and cookies for the ultimate in user log-in persistence.
Use the session and cookie magnets to add back the missing code.
The new cookies are set in addition to the session variables.
Logging out now requires deleting both the session cookie and the new log-in cookies.
If the user isn’t logged in via the session, check to see if the cookies are set.
This same cookie/session code must also go in editprofile.php and viewprofile.php.
Combining cookies with sessions adds longer term persistence to the excellent short-term persistence already made possible by sessions.
Awesome! Mismatch now remembers us regardless of whether we close our.
Most users are thrilled with how sessions and cookies combine to remember them better.
Using cookies to help make sessions better doesn’t help users who have cookies disabled...
Test Drive Change Mismatch to use both sessions and cookies.
This requires changes to the index.php, login.php, logout.php, editprofile.php, and viewprofile.php scripts.
Try logging in and then closing the web browser, which will cause the session variables to get destroyed.
Re-open the main page and check to see if  you’re still logged in—cookies make this possible since they persist beyond a given browser session.
If no expiration is provided, the cookie is deleted when the browser is closed.
SHA(value) This MySQL function encrypts a piece of text, resulting in a string of 40 hexadecimal characters.
This function provides a great way to encrypt data that needs to remain unrecognizable within the database.
It is a one-way encryption, however, meaning that there is no “decrypt” function.
Your PHP & MySQL Toolbox You’ve covered quite a bit of new territory in building a user.
It is an array, and each cookie is stored as an entry in the array.
So accessing a cookie value involves specifying the name of the cookie as the array index.
This function does not destroy session variables; however, so it’s important to manually clean those up by clearing out the $_SESSION superglobal.
You must call this function prior to accessing any session variables.
It is an array, and each session variable is stored as an entry in the array.
So accessing the value of a session variable involves specifying the name of the variable as the array index.
Several pieces of  code from the Mismatch application have been pulled out, and we can’t remember what they do.
Draw lines connecting each piece of  code with what it does.
Destroy a session cookie by setting its expiration to an hour in the past.
Use a session variable to determine if  a user is logged in or not.
Use a cookie to determine if  a user is logged in or not.
Several pieces of  code from the Mismatch application have been pulled out, and we can’t remember what they do.
Draw lines connecting each piece of  code with what it does.
Destroy a session cookie by setting its expiration to an hour in the past.
Use a session variable to determine if  a user is logged in or not.
Use a cookie to determine if  a user is logged in or not.
By sharing one umbrella, we eliminate the need for two umbrellas, we both still stay dry...
Handsome and smart! Your shared umbrella theory is pure genius.
In any web application you’re bound to run into situations where the same code is duplicated in.
Not only is this wasteful, but it leads to maintenance headaches.
In other words, you stick the duplicate code in one place, and then just reference.
The Mismatch application has evolved since you last saw it, with improved navigation and a more consistent look and feel.
Just by looking at the pages themselves, see if you can figure out what parts of Mismatch might represent a duplicate code problem.
Circle and annotate these application parts, and also write down anything not visible that you think might also have code duplication issues.
The Mismatch application has evolved since you last saw it, with improved navigation and a more consistent look and feel.
Just by looking at the pages themselves, see if you can figure out what parts of Mismatch might represent a duplicate code problem.
Circle and annotate these application parts, and also write down anything not visible that you think might also have code duplication issues.
The “Mismatch” title appears on every page, with only the detailed page title varying from page to page.
The page footer that holds the copyright information for the application is the same everywhere.
All of the pages that rely on a user log-in require the exact same session start-up and log-in checking code.
Mismatch is in pieces So the Mismatch application has some common elements that are duplicated in the main script files at the moment.
Why is this a big deal? Because it makes the application difficult to maintain.
What happens if you decide to add a new page that requires a new menu item? You have to go through and change the menu code in every script file to show the new menu item.
The solution to the problem is to only store any given piece of  information once.
Then if  that code ever needs to change, you only change it in one place.
With that in mind, it’s possible to rethink the organization of Mismatch in terms of  reusable script components.
The startsession.php script is responsible for starting the session and checking to see if  the user is logged in.
The header.php script contains the title of  the page, which references a variable to present a different title on each page.
The header also includes standard HTML boilerplate code and takes care of  chores such as linking in the CSS style sheet.
The navmenu.php script generates a navigation menu for the application based on whether the user is logged in or not.
The navigation menu presents “Log In” or “Log Out” links as needed.
The footer.php script displays a copyright notice for the application and closes the HTML tags opened in the header.
So the header and footer work as a pair that must always be used together.
This component doesn’t result in visible HTML code, but it plays a vital role in managing user log-ins throughout the Mismatch application.
Rebuilding Mismatch from a template OK, so we break apart Mismatch into multiple scripts, but how do we put them back together? You’re already familiar with how include files work, and those are part of  the solution.
A template is like a blueprint for a page within an application where everything but what is truly unique to that page comes from include files.
The template version of  Mismatch involves breaking apart common code into scripts that each play a very specific role, some responsible for generating visual HTML code, some not.
The idea is to distill as much common functionality as possible into template include files, and then only leave code in each application page that is completely unique to that page.
Templates allow a PHP application to be built out of reusable script components.
The footer provides content along the bottom of every Mismatch page, which includes a copyright notice.
The header appears at the top of every Mismatch page, and displays the application title as well as a page-specific title.
The navigation menu appears just below the header, and provides each Mismatch page with a consistent menu to navigate between the main pages.
Every Mismatch page that’s personalized to a user requires log-in code that keeps track of the user.
With so many other scripts helping out, the index.php script is left to focus solely on its unique role, which is displaying the main user list.
Q: What is a template exactly? Isn’t it just a bunch of include files? A: Yes.
A template is a collection of include files, but it’s a collection designed specifically to separate an application into functional components.
The goal is to reduce a page down to what is truly unique about that page, and only that page.
So headers, footers, navigation menus, and any other application pieces and parts that are the same or similar among more than one page are ideal for inclusion in an application template.
The end result is that you place template code in PHP include files that are referenced by other scripts that need them.
You can think of a template as a group of include files that go a step or two beyond just reducing duplicate code—they actually help organize the functionality of an application.
Mismatch is a fairly simple example of how to employ templates—larger, more complex PHP applications often employ very sophisticated template systems.
Q: Doesn’t template code have to be exactly the same in order to be shared across multiple scripts?
It’s perfectly acceptable for template code to just be similar, not exact.
The reason is because you can use variables to allow for some degree of customization as a template is applied to different pages.
The page title in Mismatch is a perfect example of this.
The page header template is similar in every page in that it has a title that always begins with.
Rebuild Mismatch with templates The design work involved in breaking an application into template scripts is usually worth the effort.
You end up with a collection of  tightly focused, bite-size scripts, as well as dramatically simplified code in the main application script files that are now dependent on the template scripts.
Try to reset the session variables with cookies if they aren’t set.
Start the official HTML code with a DOCTYPE and an <html> tag.
Build a custom page title using the $page_title variable, which is provided by the script including this file.
See if the user is logged in, and then generate the appropriate navigation menu.
Display a copyright notice and wrap up the HTML code.
The $page_title variable determines the title of the page that is displayed within the page header.
The connection variables and application variables are still included from separate script files like before.
The footer finishes up the page, and must appear last since it closes up the HTML tags.
The startsession.php script must be included first so that the session is started and the remainder of the script has access to session data.
The navigation menu is generated after the header but before the body of the page.
The non-template code is now truly unique to the page, so there's much less of it.
While the thought of  ripping apart the Mismatch application into tiny pieces might have been a bit unnerving, the end result is definitely worth the effort.
The application’s now spread across several new template (include) files, which offer much better organization and maximize the sharing of  script code.
If  you need to change one of  these pieces, just change one file and the effect cascades throughout the entire application...
The page footer contains copyright information for the entire application...
The page header includes boilerplate HTML code and the page title.
The session start-up code is used by any page that requires a user log-in.
The navigation menu provides handy links to the major parts of the application.
The startsession.php script handles behind-the-scenes log-in tasks, and doesn’t occupy any visual space on the page.
Harvesting data The way I see it, it’s all about data management.
First I sort the peas, then I select a few potatoes, join them with some celery and a few rows of corn kernels...
An abundance of information ready to be examined, sorted, compared, combined, and generally.
Web users demand more than tired old wilted data that’s dull.
Making the perfect mismatch The Mismatch application has a growing database of  registered users but they’re ready to see some results.
We need to allow users to find their ideal opposite by comparing their loves and hates against other users and looking for mismatches.
For every love mismatched against a hate, a couple is that much closer to being the perfect mismatch.
And Spam, blech! But I do love Barbara Streisand, and there’s nothing better than a good hike...
Nothing warms my heart like a good slasher flick coupled with a Spam sandwich.
As long as Barbara Streisand doesn’t show up in the movie hiking!
Sidney’s list of loves and hates contrasts starkly with Johan’s, making the couple quite an effective mismatch.
Remember Johan, a lonely heart in search of someone who hates weightlifting as much as he loves it?
Right but she has a hunch he’ll hate reality TV as much as she loves it.
Mismatching is all about the data In order to carry out Mismatches between users, we must first figure out how to organize the data that keeps up with what they love and hate.
Knowing that it’s going to be stored in a MySQL database isn’t enough.
We need to organize these love/hate topics so that they are more manageable, allowing users to respond to related topics, indicating whether they love or hate each one.
Write down how you would organize the Mismatch data into discrete groups of  data that could be stored in a database:
Each individual topic gets a love/hate response that is matched up against the responses of other users.
Similar topics are grouped together, such as topics related to appearance.
Mismatching takes place with respect to topics, such as tattoos or spicy food, each of  which gets a user response—love or hate.
Although they don’t play a direct role in determining a mismatch, they will help make it easier for users to enter responses.
How exactly does this data lead to a mismatch between two users? We compare responses that users have made on each topic.
For example, since Sidney and Johan have opposite responses to the topic “Horror movies,” we have a successful mismatch on that particular topic.
Figuring the best overall mismatch for a given user involves finding the user who has the most mismatched topics with them.
Break down the Mismatch data Coming up with a data model for an application such as Mismatch is an extremely important step, as it controls an awful lot about how the application is constructed.
In the case of  Mismatch, we can break down its data needs into three interrelated pieces of  data.
Topics form the guts of the Mismatch data, deciding what parameters users can be mismatched on.
Responses are the individual love/hate answers to each topic, and are specific to each Mismatch user.
A description of the data (the tables and columns) in your database, along with any other related objects and the way they all connect is known as a schema.
This way of  looking at the structure of  a table is a bit different than what you’ve seen up until now.
Tables have normally been depicted with the column names across the top and the data below.
That’s a great way to look at individual tables and tables populated with data, but it’s not very practical when we want to create a structural diagram of  multiple tables and how they relate to one another.
Creating a diagram of a table lets you keep the design of the table separate from the data that’s inside of it.
Model a database with a schema In order to translate the data requirements of  the Mismatch application into an actual database design, we need a schema.
A schema is a representation of  all the structures, such as tables and columns, in your database, along with how they connect.
Creating a visual depiction of your database can help you see how things connect when you’re writing your queries, not to mention which specific columns are responsible for doing the connecting.
As an example, let’s take a look at the schema for the original Mismatch database from the previous chapter, which consists of  only a single table, mismatch_user.
This symbol indicates that the column is a primary key for the table.
Other columns in the table are listed just as they appear in the database structure.
The Mismatch database is in need of storage for user responses to love/hate topics, as well as the topic names and their respective categories.
Here are three different database designs for incorporating categories, topics, and responses into the Mismatch database.
Circle the schema that you think makes the most sense, and annotate why.
This is the new data introduced by the need to keep up with Mismatch users’ loves and hates.
The Mismatch database is in need of storage for user responses to love/hate topics, as well as the topic names and their respective categories.
Here are three different database designs for incorporating categories, topics, and responses into the Mismatch database.
Circle the schema that you think makes the most sense, and annotate why.
First off, it’s important to establish that the only new data involved in a user giving love/hate responses are the responses themselves - everything else in the database is fixed, at least from the user’s perspective.
Who said simpler is always better? This database schema stores responses in their own table, separate from other data that isn’t directly impacted by the responses.
There’s no duplication due to responses because users, categories, and topics are all outside of the mismatch_response table.
There’s no duplicate data for each response, which is a very good thing!
The new mismatch_topic table stores topic names and their respective categories.
The responses aren’t stored inside the user table, which is great.
But there’s a ton of duplicate data since the categories and topics are duplicated for each and every response.
It’s not a bad idea to break out the categories and topics into their own table, but we’re having to create a user row for each and every response.
Categories and topics are duplicated for each response, which is crazy wasteful.
Wire together multiple tables Connecting tables together to form a cohesive system of  data involves the use of  keys.
We’ve used primary keys to provide a unique identifier for data within a table, but we now need foreign keys to link a row in one table to a row in another table.
A foreign key in a table references the primary key of  another table, establishing a connection between the two tables that can be used in queries.
The Mismatch schema from the previous exercise relies on a pair of foreign keys in the mismatch_response table to connect response rows to user and topic rows in other tables.
A foreign key is a column in a table that references the primary key of another table.
This symbol shows that the column is a foreign key that references a primary key in another table.
Without foreign keys, it would be very difficult to associate data from one table with data in another table.
And spreading data out across multiple tables is how we’re able to eliminate duplicate data and arrive at an efficicient database.
So foreign keys play an important role in all but the most simplistic of  database schemas.
Large arrows show primary keys connecting to foreign keys to wire together tables.
In fact, that’s its purpose - providing a unique reference to user rows.
Binding together tables with primary keys and foreign keys allows us to connect the data between them in a consistent manner.
You can even structure your database so that primary keys and their respective foreign keys are required to match up.
This is known as referential integrity, which is a fancy way of  saying that all key references must be valid.
Foreign keys in action It often helps to visualize data flowing into tables and connecting tables to one another through primary and foreign keys.
Taking a closer look at the Mismatch tables with some actual data in them helps to reveal how primary keys and foreign keys relate to one another.
Remember, each row in this table corresponds to a Mismatch user.
Each row in this table is a single love/hate response by a certain user.
Each row in this table is the name/category of a love/hate response, but not the response itself.
It isn’t unique since a user can have several love/hate responses.
I understand that primary keys and foreign keys connect multiple tables together, but does the direction of the arrows between keys in those diagrams mean anything?
Yes, the direction of the arrows tells us how rows in each table relate to each other.
More specifically, they tell us how many rows in one table can have matching rows in another table, and vice-versa.
This is a critical aspect of  database schema design, and involves three different possible patterns of  data: one-to-one, one-to-many, and many-to-many.
Tables can match row for row The first pattern, one-to-one, states that a row in Table A can have at most ONE matching row in Table B, and vice-versa.
So there is only one match in each table for each row.
As an example, let’s say the Mismatch user table was separated into two tables, one for just the log-in information (Table A) and one with profile data (Table B)
Both tables contain a user ID to keep users connected to their profiles.
The user_id column in the log-in table is a primary key that ensures user log-in uniqueness.
With respect to the two user_id columns, the log-in table is considered a parent table, while the profile table is considered a child table—a table with a primary key has a parent-child relationship to the table with the corresponding foreign key.
One row leads to many One-to-many means that a row in Table A can have many matching rows in Table B, but a row in Table B can only match one row in Table A.
The direction of  the arrow in the table diagram always points from the table with one row to the table with many rows.
Using the Mismatch database again, the current schema already takes advantage of  a one-to-many data pattern.
One-to-One: exactly one row of a parent table is related to one row of a child table.
One-to-Many: exactly one row of a parent table is related to multiple rows of  a child table.
Q: How do I know whether rows in two tables should have a one-to-one or one-to-many relationship?
A: There will be a tendency to use one-to-many patterns much more often than one-to-one, and rightly so.
It’s common to have a main (parent) table containing primary data, such as users in Mismatch, that connects to a secondary (child) table in a oneto-many arrangement.
This happens twice in the Mismatch schema, where both users and topics have a one-to-many relationship to responses.
In many cases, rows with a one-to-one relationship in two tables can be combined into the same table.
However, there are certainly situations where it makes sense to go with a one-to-one pattern, such as the hypothetical user profile example on the facing page, where there is a security motivation in moving a portion of the data into its own table.
Many-to-Many: Multiple rows of a parent table are related to multiple rows of a child table.
Matching rows many-to-many The third and final table row relationship data pattern is the many-to-many relationship, which has multiple rows of  data in Table A matching up with multiple rows in Table B...
There are plenty of  situations where a many-to-many pattern is warranted.
Users and topics have a many-to-many relationship through the responses.
The many-to-many pattern in Mismatch is indirect, meaning that it takes place through the mismatch_response table.
In addition to holding the response data, the mismatch_response table is acting as what’s known as a junction table by serving as a convenient go-between for the users and topics.
Without the junction table, we would have lots of  duplicate data, which is a bad thing.
Write down if each of the columns is best represented by a one-to-one, one-to-many, or many-to-many relationship with its original table, and then draw the relationship as a line connecting the two tables with appropriate arrowheads.
Write down if each of the columns is best represented by a one-to-one, one-to-many, or many-to-many relationship with its original table, and then draw the relationship as a line connecting the two tables with appropriate arrowheads.
There’s only one street address for any given user, which means an address row has a one-to-one relationship with a user row.
Multiple users could work for the same employer, resulting in a one-to-many relationship between an employer row and user rows.
Multiple users can have multiple friends, meaning that friend rows have a many-to-many relationship with user rows.
Tables that have a many-to-many relationship are typically connected through a junction table, which isn’t shown here.
Multiple topics can belong to the same category, resulting in a one-to-many relationship between a category row and topic rows.
But a topic can’t belong to more than one category.
Hold it right there! Take a second to get the Mismatch database in order so that we can make mismatches.
Make sure to run the statement in each of  the .sql files in a MySQL tool so that you have the initial Mismatch tables to get started with.
These tables factor heavily into the Mismatch PHP scripts we’re about to put together.
OK, so we have this wonderfully designed database of users, categories, topics, and responses.
How is that going to actually help us make a mismatch?
If you start with a well-designed database, every other piece of the application puzzle becomes that much easier to build and assemble.
Getting the database right when initially designing an application is perhaps the best thing you can do to make the development process run smoothly.
It may seem like a lot of  work up front plotting and scheming about how best to store the data, but it will pay off  in the long run.
Think about how much more difficult it would be to rework the Mismatch database schema with it full of  data.
That’s the big picture benefit of  a good database design.
Looking at the Mismatch database specifically, we have a user table that is populated by the users themselves through sign-ups and profile edits, and we have a new topic table that contains enough categories and topics to give some decent insight into a person.
What we’re still missing to make mismatches is a way to allow the user to enter responses, and then store them away in the response table.
How would you turn this list of categories and topics into a set of questions that users can provide love/hate responses to?
Build a Mismatch questionnaire So how exactly do we get love/hate responses from users for each Mismatch topic? The answer is a questionnaire form that allows the user to choose “Love” or “Hate” for each topic in the mismatch_topic table.
This form can be generated directly from the responses in the database, with its results getting stored back in the database.
In fact, the design of  the questionnaire form involves reading and writing responses from and to the mismatch_response table.
Here’s a peek at the questionnaire, along with the steps involved in building it.
Use INSERT to add empty response rows to the database the first time the user accesses the form.
We’re going to generate the questionnaire form from data in the mismatch_response table, even when the user has never entered any responses.
This means we need to “seed” the mismatch_response table with empty responses the first time a user accesses the questionnaire.
Since the response column for these rows is empty, neither the “Love” or “Hate” radio buttons are checked when the form is first presented to the user.
Use UPDATE to change response rows based on user responses on the form.
When users submit the questionnaire form, we must commit their personal responses to the database.
Use SELECT to retrieve the response data required to generate the questionnaire form.
In order to generate the questionnaire form, we need all of  the responses for the logged-in user.
Each topic has a row in the mismatch_response table with a love/hate response for the user.
Categories are used to group related topics within the form.
Get responses into the database Although it might seem as if  we should start out by generating the questionnaire form, the form’s dependent on response data existing in the mismatch_response table.
So first things first: we need to “seed” the mismatch_response table with rows of  unanswered responses the first time a user accesses the questionnaire.
This will allow us to generate the questionnaire form from the mismatch_response table without having to worry about whether the user has actually made any responses.
Although storing responses in the Mismatch database is ultimately a two-step process, the first step (INSERT) only takes place once for each user.
Once the empty responses are added initially, all future changes to the questionnaire are handled by the second step via SQL UPDATEs.
Responses in the database are updated to match user responses in the questionnaire form.
The responses are left blank the first time the user visits the form.
So from the perspective of  the questionnaire form, there’s always a row of  data in the mismatch_response table for each question in the form.
This means that when the user submits the questionnaire form, we just update the rows of  data for each response in the form.
The topics in the form are initially unanswered since we seeded mismatch_response with empty responses.
Now that the user’s answered some of the questions, we have real response data to store in the mismatch_response table.
If this user has never answered the questionnaire, insert empty r.
First grab the list of topic IDs from the topic table.
Insert empty response rows into the response table, one per top.
If the questionnaire form has been submitted, write the form resp.
It also updates the responses when the user makes changes and submits the form.
Unfortunately, some of the code has fallen off and needs to be replaced.
If this user has never answered the questionnaire, insert empty r.
First grab the list of topic IDs from the topic table.
Insert empty response rows into the response table, one per top.
If the questionnaire form has been submitted, write the form resp.
It also updates the responses when the user makes changes and submits the form.
Unfortunately, some of the code has fallen off and needs to be replaced.
The response row is “unanswered” at this point since the user hasn’t actually chosen “love” or “hate” on the form yet.
In order to generate an empty array of responses, we first need to grab all of the topics in the topic table.
All that changes when the user submits the form is the response column of the response table, so that’s all we update.
Check to see if the query returned 0 rows of data...
Use SELECT to retrieve the response data required to generate the questionnaire form.
Use INSERT to add empty response rows to the database the first time the user accesses the form.
Use UPDATE to change response rows based on user responses on the form.2
Bam! We just killed two virtual birds with one stone, and now have the questionnaire script already half built.
Q: What’s the deal with the array_push() function? I don’t think we’ve used that one before.
And that’s because we haven’t needed to build an array dynamically one element at a time.
The array_push() function tacks a new element onto the end of an array, causing the array to grow by one.
This array is then used to insert blank responses into the mismatch_response table...
We can drive a form with data It’s nothing new that web forms are used to retrieve data from users via text fields, selection lists, radio buttons, etc., but it may not be all that obvious that you can generate HTML forms from database data using PHP.
The idea with Mismatch is to dynamically generate an HTML questionnaire form from response data.
The Mismatch questionnaire script makes the assumption that response data already exists, which allows it to generate the form from data in the mismatch_response table.
We know this assumption is a safe one because we just wrote the code to add empty responses the first time a user visits the form.
The form reflects the user’s response choices for each topic.
Data-driven forms rely on data in a MySQL database to generate HTML form fields.
Form fields are tied to database rows by setting the name of each field to the primary key of the database.
The response_id primary key is used to uniquely identify HTML form fields and associate each field with a database row.
The Mismatch response questionnaire is generated from user responses that are stored in the mismatch_response table.
In order to generate the code for the HTML form, it’s necessary to read these responses, making sure to look up the name of the topic and category for each response from the mismatch_topic table.
The following code builds an array of responses with topics and categories by performing two queries: the first query grabs the responses for a user, while the second query looks up the topic and category name for each response.
This PHP function tells you how many rows of data were returned as query results.
The Mismatch response questionnaire is generated from user responses that are stored in the mismatch_response table.
In order to generate the code for the HTML form, it’s necessary to read these responses, making sure to look up the name of the topic and category for each response from the mismatch_topic table.
The following code builds an array of responses with topics and categories by performing two queries: the first query grabs the responses for a user, while the second query looks up the topic and category name for each response.
Use SELECT to retrieve the response data required to generate the questionnaire form.
The topic ID is used to look up the topic and category names from the mismatch_topic table.
The array_push() function adds (pushes) an item onto the end of an array.
The topic name and category name are added to the response array by assigning data from the second query.
It’s very important to use new variables to perform a second (inner) query so that the original query isn’t affected.
The $responses array serves as a temporary “table” of response data to be used to generate the questionnaire form.
No and Yes, which is why it is important to use the most efficient data type possible to store data in a MySQL database.
When you think about it, a Mismatch response is more like a true/false answer because it’s always either one value (love) or another one (hate)
Actually, a third value (unknown) can be useful in letting the application know when the user has yet to respond to a particular topic.
So we really need to keep track of  three possible values for any given response.
This kind of  storage problem is ideal for a number, such as a TINYINT.
Then you just use different numeric values to represent each possible response.
Is the user response actually stored as text in the database, as in “Love” and.
These numeric responses play a direct role in the generation of  form fields for the Mismatch questionnaire.
The following code loops through the Mismatch response array that you just created, generating an HTML form field for each.
Fill in the missing code so that the form field is initially checked if the response is set to love (1)
Also, make sure the value of the <input> tag is set accordingly.
Don’t worry about the “Hate” radio buttons for now - they’re generated exactly the same way.
The following code loops through the Mismatch response array that you just created, generating an HTML form field for each.
Fill in the missing code so that the form field is initially checked if the response is set to love (1)
Also, make sure the value of the <input> tag is set accordingly.
The “Love” radio button is checked based on the value of the response (1 represents love in the database)
If this response is set to love (1), check the radio button by setting its checked attribute to “checked”
In case you’re curious, the code to generate the “Hate” radio buttons works exactly the same way - it just looks for a slightly different response...
Database efficiency isn’t the only kind of  efficiency worth considering.
One form is taking advantage of  the PHP language to simplify if-else statements.
The ternary operator is a handy way to code simple if-else statements so that they are more compact.
The ternary operator can be used to code if-else statements in a more compact form.
The ternary operator is really just a shorthand way to write an if-else statement.
It can be helpful for simplifying if-else statements, especially when you’re making a variable assignment or generating HTML code in response to the if condition.
Here’s the same “Love” radio button code rewritten to use the ternary operator:
The checked attribute of the <input> tag is now generated using the ternary operator instead of an if-else statement.
This true/false test controls the outcome of the ternary operator.
This part of the <input> tag’s code is controlled by the ternary operator.
Generate the Mismatch questionnaire form We now have enough pieces of  the Mismatch questionnaire form puzzle to use the response array ($responses) we created earlier to generate the entire HTML form.
If  you recall, this array was built by pulling out the current user’s responses from the mismatch_response table.
Include the template files that start the session and display the page header.
Each category is created as a fieldset to help organize topics together.
Here the ternary operator is used to change the style of the label for unanswered topics.
Each topic is created as a label followed by “Love” and “Hate” radio buttons.
Grab the category of the first response to get started before entering the loop.
Each of these echo statements generates a radio button - one for “Love” and one for “Hate”
The complete source code for the Mismatch application is available for download from the Head First Labs web site:
Upload the scripts to your web server, and then open the main Mismatch page (index.php) in a web browser.
Make sure you log in, and then click the “Questionnaire” menu item to access the questionnaire.
Notice that none of  the topics have answers since this is your first visit to the questionnaire.
Return to the main page, and then go back to the questionnaire once more to make sure your responses are properly loaded from the database.
The Questionnaire script allows users to answer love/hate questions and store the results in the database.
The topic questions in the form are dynamically generated from the database - if you add new topics, the form changes.
Q: How does the “Love” radio button code know that the ternary operator result is a string?
A: The ternary operator always evaluates to one of the two statements on each side of the colon based on the value (true or false) of the test expression.
If these statements are strings, then the result of the ternary operator will be a string.
That’s what makes the operator so handy—you can insert it right into the middle of an assignment or concatenation.
Q: Does the ternary operator make my script run faster? A: No, probably not.
The ternary operator is more about adding stylistic efficiency to your code than performance efficiency, meaning that it literally requires less script code.
Sometimes it’s more concise to use the ternary operator rather than a full-blown if-else statement, even though the two are logically equivalent.
Even so, don’t get too carried away with the ternary operator because it can make some code more difficult to understand if you’re attempting to recast a complex if-else statement.
The idea is to use the ternary operator in places where eliminating an if-else can actually help simplify the code, as opposed to making it more complicated.
This usually involves using the ternary operator to selectively control a value being assigned to a variable or inserted into an expression.
In the case of the Mismatch radio buttons, the latter approach was used to selectively control the insertion of an HTML attribute (checked)
Q: How is it possible to generate the Mismatch questionnaire form from the mismatch_response table when the user has yet to respond to anything?
The questionnaire form has to deal with two possible scenarios: the user is answering the questionnaire for the first time or the user has already answered it and is revising answers.
In the first scenario, no responses have been made, so the mismatch_response table has no data for this user yet.
We could use the mismatch_topic table for this one-time form generation.
This won’t work for the second scenario, however, because this time the form must be generated based on the user’s specific love/hate responses; remember, the radio buttons for “Love” and “Hate” are generated as part of the form.
So we have a problem in that the code to generate the form is completely different depending on whether the users have answered the questionnaire.
Not only that, but what if they only answered a few questions? This gets messy in a hurry.
The solution taken by Mismatch is to pre-populate the mismatch_response table with unanswered responses the first time the user accesses the questionnaire.
This allows us to always generate the questionnaire form from the mismatch_response table, and not worry about the complication of generating the form differently based on whether the users have responded before, or which specific topics they’ve responded to.
Sure, the form generation code still isn’t exactly trivial, but it’s simpler than if we had not taken this approach.
View the questionnaire in the Mismatch application to see the new topic.33
Respond to the new topic, submit the form, and check out your saved response.44
To simplify the code, Mismatch doesn’t adjust to new topics automatically, at least not when it comes to users who’ve already answered the questionnaire.
So you’ll have to empty the mismatch_response table after adding a new topic.
The data is now driving the form It took some doing, but the Mismatch application dynamically generates the questionnaire from responses stored in the database.
This means that any changes made to the database will automatically be reflected in the form—that’s the whole idea of  driving the user interface of  a web application from a database.
This category is misspelled, resulting in its own fieldset in the form, which is very confusing.
The form is generated so that a category change results in a new fieldset, which is why yet another extra fieldset is created here.
These three fieldsets should just be one, so that all the Entertainment topics are grouped together.
The data is driving the form’s fine, but something’s amiss.
It appears that one of  the categories has been misspelled in the database, causing the PHP code to generate a separate fieldset for it.
This is a big problem because it ruins the effect of  using fieldsets to help organize the form and make it easier to respond to topics.
Just change the name of  the category in the mismatch_topic table to the correct spelling.
And now that I think about it, I’m not really understanding why the category names have to be stored more than once.
We went to the trouble of  eliminating duplicate data in designing the database schema, yet here we are with a bunch of  duplicate category names.
Not only that, but we have a couple that aren’t even correct.
Frank:  OK, what about just getting rid of  category names and maybe referring to categories by number? Then you wouldn’t run the risk of  typos.
Joe:  True, but we still need the category names as headings in the questionnaire form.
Jill:  Maybe we can refer to categories by number without throwing out the names.
Frank:  Are you saying we could solve the duplicate category name problem by creating a new category table?
We can create a new mismatch_category table where each category name is stored exactly one time.
OK, so one of the categories in the database is misspelled, which is screwing up our form.
Strive for a bit of normalcy The process of  redesigning the Mismatch database to eliminate duplicate data and break apart and connect tables in a logical and consistent manner is known as normalization.
Normalization is a fairly deep database design topic that can be intimidating.
There are enough simple database design techniques we can graft from the basics of  normalization to make our MySQL databases much better than if  we had just guessed at how data should be laid out.
Here are some very broad steps you can take to begin the database design process that will naturally lead to a more “normal” database:
Pick your thing, the one thing you want a table to describe.
Make a list of the information you need to know about your one thing when you’re using the table.
Using the list, break down the information about your thing into pieces you can use for organizing the table.
Normalization means designing a database to reduce duplicate data and improve the relationships between data.
One fundamental concept in normalization is the idea of  atomic data, which is data broken down into the smallest form that makes sense given the usage of  a database.
This is necessary in Mismatch because we want to be able to refer to a user by first name alone.
It might not always be necessary for an application to break a full name down into separate first and last columns, however, in which case name by itself  might be atomic enough.
So as you’re breaking down the “one thing” of  a table into pieces, think about how the data is going to be used, not just what it represents.
Atomic data is data that has been broken down into the smallest form needed for a given database.
What’s the main thing you want your table to be about?
Does your table describe alien sightings, email list subscriptions, video game high scores, hopeless romantics?
How will you use the table to get at the one thing?
Do your columns contain atomic data to make your queries short and to the point?
Q: Should I try to break my data down into the tiniest pieces possible?
Making your data atomic means breaking it down into the smallest pieces that you need to create an efficient table, not just the smallest possible pieces you can.
Don’t break down your data any more than you have to.
Q:How does atomic data help me? A: It helps you ensure that the data in your table is accurate.
For example, if you have a column for the street address of an alien sighting, you might want to break the street address into two columns: the number and the street.
Then you can make sure that only numbers end up in the number column.
Atomic data also lets you perform queries more efficiently because the queries are easier to write, and take a shorter amount of time to run, which adds up when you have a massive amount of data stored.
When normalizing, think in atoms To help turn your database design brainstorms into actions, it’s helpful to ask targeted questions of  your data.
This will help determine how the data fits into a table, and if  it has truly been broken down into its appropriate atomic representation.
No one ever said splitting the atom was easy, but this list of  questions can help.
Make sure data is only as small as it needs to be.
Making your data atomic is the first step in creating a normal table.
Why be normal, really? If  all this talk about nuclear data and normalcy seems a bit overkill for your modest database, consider what might happen if  your web application explodes and becomes the next “big thing.” What if  your database grows in size by leaps and bounds in a very short period of  time, stressing any weaknesses that might be present in the design? You’d rather be out shopping for your new dot-com trophy car than trying to come up with a retroactive Band-aid fix for your data, which is increasingly spiraling out of  control.
If  you still aren’t convinced, or if  you’re stuck daydreaming of  that canary yellow McLaren, here are two proven reasons to normalize your databases:
Normal tables won’t have duplicate data, which will reduce the size of your database.
With less data to search through, your queries will be faster.
Normalized databases tend to be much smaller than databases with inferior designs.
When it comes to databases, speed is always a good thing.
Normalization has its benefits, namely improvements in database size and speed.
Three steps to a normal database You’ve pondered your data for a while and now have a keen appreciation for why it should be normalized, but general ideas only get you so far.
What you really need is a concise list of  rules that can be applied to any database to ensure normalcy...
For a column to truly be atomic, there can’t be several values of  the same type of  data in that column.
Similarly, there can’t be multiple columns with the same type of  data.
A primary key is critical for assuring that data in a table can be accessed uniquely.
A primary key should be a single column, and ideally be a numeric data type so that queries are as efficient as possible.
This is the most challenging requirement of normal databases, and one that isn’t always worth adhering to strictly.
It requires you to look a bit closer at how columns of  data within a given table relate to each other.
The idea is that changing the value of  one column shouldn’t necessitate a change in another column.
Several values of the same type of data are in the same column, and there are also multiple columns with the same data...
Without a primary key, there’s no way to ensure uniqueness between the rows in this table.
Normalizing a database involves strictly adhering to a series of design steps.
The hypothetical ZIP code column is dependent on the city and state columns, meaning that changing one requires changing the others.
To resolve the problem, we’ll need to break out the user’s location into its own table with the ZIP code as the primary key.
The Mismatch database is in need of a normalization overhaul to solve the problem of duplicate category names.
Given the existing database structure, sketch a modified design that solves the duplicate category problem, eliminating the risk of data entry errors.
Make sure to annotate the design to explain how it works.
Q: How do I go about applying the third normalization step to Mismatch to fix the hypothetical city/state/ZIP problem?
A: The solution is to break out the location of a user into its own table, and then connect the mismatch_user table to the new table via a foreign key.
Problem solved! What makes this design work is that the location_id column actually uses the ZIP code as the primary key, alleviating the non-key dependency problem.
Q: Geez, that seems like a lot of work just to meet a picky database design requirement.
The first two normalization steps really are non-negotiable because atomic data and primary keys are critical to any good database design.
It’s the third step where you enter the realm of weighing the allure of an impeccable database design against the practical realities of what an application really needs.
In the case of the Mismatch city/state/ZIP problem, it’s probably worth accepting for the sake of simplicity.
This isn’t a decision that should be taken lightly, and many database purists would argue that you should rigidly adhere to all three normalization steps.
The good news is that the ZIP code column is purely hypothetical, and not actually part of the mismatch_user table, so we don’t really have to worry about it.
Q: Even without the ZIP code column, wouldn’t city and state need to be moved into their own tables to meet the third normalization step?
It’s certainly true that you will end up with duplicate city/state data in the mismatch_user table.
The problem with breaking out the city and state without a ZIP code is that you would have to somehow populate those tables with every city and state in existence.
Otherwise users would no doubt misspell some cities and you’d still end up with problematic data.
This is a good example of where you have to seriously weigh the benefits of strict normalization against the realities of a practical application.
An interesting possible solution that solves all of the problems is to use a ZIP code in the mismatch_user table instead of a city and state, and then look up the city and state from a static table or some other web service as needed.
That’s more complexity than we need at the moment, so let’s just stick with the city and state columns.
The Mismatch database is in need of a normalization overhaul to solve the problem of duplicate category names.
Given the existing database structure, sketch a modified design that solves the duplicate category problem, eliminating the risk of data entry errors.
Make sure to annotate the design to explain how it works.
The new category table stores category names separate from topics, eliminating redundant data.
Each category row in the new category table has a one-to-many relationship with topics in the topic table.
Instead of storing the actual category name in each topic row, we now just store a reference (ID) to a row in the category table.
The rest of the Mismatch database remains unaffected by the category/ topic changes.
Q: How exactly does the new mismatch_category table solve the duplicate data problem?
A: The new table separates category names from the mismatch_topic table, allowing them to be stored by themselves.
With categories stored in their own table, it’s no longer necessary to duplicate their names—you just have a row for each category, and these rows are then referenced by rows in the mismatch_topic table.
Q: So does that mean the mismatch_category table only has five rows, one for each category?
Remember, the mismatch_response table is a junction table that connects users with their responses to topics.
Altering the Mismatch database In order to take advantage of  the new schema, the Mismatch database requires some structural changes.
And since the old category column in the mismatch_topic table with all the duplicate category data is no longer needed, we can drop it.
The new mismatch_category table must be populated with category data, which is accomplished with a handful of  INSERT statements.
Create the new category table that will hold category names by themselves.
Drop the old category column since we’re now going to reference categories from the category table.
Add a new category_id foreign key to connect each topic to a category in the category table.
This ID should match the autoincremented ID for the category from the mismatch_category table.
If  you apply the three main rules of  normalcy to each of  the Mismatch tables, you’ll find that it passes with flying colors.
But even if  it didn’t, all would not be lost.
Just like people, there are degrees of normalcy when it comes to databases.
The important thing is to attempt to design databases that are completely normal, only accepting something less when there is a very good reason for skirting the rules.
Throughout the database, names are stored in their most atomic form, and are never repeated across multiple columns.
Without the hypothetical ZIP code dependency, the user location columns no longer have dependency problems.
All of the tables have a numeric primary key to ensure uniqueness.
Test Drive Create and populate the new mismatch_category database table.
Using a MySQL tool, execute the CREATE TABLE SQL command on the previous page to add a new table named mismatch_category to the Mismatch database.
Then issue the INSERT statements to populate the table with category data.
Now run a SELECT on each of  the tables just to make sure everything checks out.
Doesn’t the new Mismatch table design affect the queries that are being made in the questionnaire script code?
In fact, most structural database changes require us to tweak any queries involving affected tables.
This is because the previous database design had categories stored directly in the mismatch_topic table.
One problem brought on by normalizing a database is that queries often require subqueries since you’re having to reach for data in multiple tables.
Consider the new version of  the query that builds the response array to generate the Mismatch questionnaire form:
We’re pulling data from three different tables, which requires three queries.
This new query uses the category_id key to grab the category name from the category table.
This is the temporary response array, which is used to generate the Mismatch questionnaire form.
This duplicate data isn’t a problem because it is extracted from a single source, the category table, and it isn’t being stored in duplicate.
Remember, this function tells you how many rows of data were returned by the query.
Let’s all join hands Yikes! Can anything be done about all those nested queries? The solution lies in an SQL feature known as a join, which lets us retrieve results from more than one table in a single query.
There are lots of  different kinds of  joins, but the most popular join, an inner join, selects rows from two tables based on a condition.
In an inner join, query results only include rows where this condition is matched.
A join grabs results from multiple tables in a single query.
The topic ID and category name are selected by the query - these columns are in two different tables.
The category table is joined to the topic table via an INNER JOIN.
The condition for the join is that the category ID must match for each row of data returned.
The first column of results consists of topic IDs from the topic table.
The second column of the results holds category names from the category table that match up with each topic ID.
This inner join successfully merges data from two tables that would’ve previously required two separate queries.
The query results consist of columns of  data from both tables.
More specifically, you must identify the table for each column so that there isn’t any confusion—tables often have columns with the same names, especially when it comes to keys.
Just preface the column name with the table name, and a dot.
For example, here’s the previous INNER JOIN query that builds a result set of  topic IDs and category names:
Dot notation allows you to reference the table a column belongs to within a join.
Without the ability to specify the tables associated with the columns in this query, we’d have quite a bit of  ambiguity.
For this reason, it’s always a good idea to be very explicit about identifying the tables associated with columns when building JOIN queries.
Identifying the table results in a more explicit JOIN query.
The column name alone tells us nothing about what table it belongs to.
This is the name of the column within the table, separated from the table name by a dot (period)
Here’s another table/ column reference that uses the dot notation.
This is where the dot really pays off - the column names are identical, resulting in total ambiguity without the table names.
Surely we can do more with inner joins Inner joins don’t stop at just combining data from two tables.
Since an inner join is ultimately just a query, you can still use normal query constructs to further control the results.
For example, if  you want to grab a specific row from the set of  joined results, you can hang a WHERE statement on the INNER JOIN query to isolate just that row.
An INNER JOIN combines rows from two tables using comparison operators in a condition.
So what exactly does this query return? First remember that the WHERE clause serves as a refinement of  the previous query.
In other words, it further constrains the rows returned by the original INNER JOIN query.
As a recap, here are the results of  the inner join without the WHERE clause:
These two columns control the join between the two tables.
This column refines the results as part of a WHERE statement.
The WHERE clause has the effect of  whittling down this result set to a single row, the row whose topic name equals 'Horror movies'
We have to look back at the mismatch_topic table to see which row this is.
The WHERE clause constrains the results of the join to a single row.This row matches the WHERE clause.
The original INNER JOIN result set is chopped down to this solitary row because of the WHERE clause.
Rewrite ON with USING for more concise inner join queries that match on a common column.
All that is required is the name of the column...
Simplifying ON with USING Remember that our goal is to simplify the messy Mismatch queries with INNER JOIN.
When an inner join involves matching columns with the same name, we can further simplify the query with the help of the USING statement.
The USING statement takes the place of  ON in an INNER JOIN query, and requires the name of  the column to be used in the match.
Just make sure the column is named exactly the same in both tables.
Q: So a WHERE clause lets you constrain the results of a JOIN query based on rows in one of the joined tables? A: That’s correct.
Keep in mind that the actual comparison taking place inside a WHERE clause applies to the original tables, not the query results.
Q: Could the WHERE clause in the Mismatch JOIN query be based on the mismatch_category table instead? A: Absolutely.
The WHERE clause can restrict query results based on either of the tables involved in the join.
As an example, the WHERE clause could be changed to look only for a specific category, like this:
This WHERE clause limits the result set to only include topics that fall under the Entertainment category.
So the WHERE clause doesn’t affect the manner in which the tables are joined, but it does affect the specific rows returned by the query.
Since the ON part of  the query relies on columns with the same name (category_id), it can be simplified with a USING statement:
The name of each of the columns is the same - only the tables are different.
The column names must be the same in order to use the USING statement in an inner join.
Nicknames for tables and columns Our INNER JOIN query just keeps getting tighter! Let’s take it one step further.
When it comes to SQL queries, it’s standard to refer to table and columns by their names as they appear in the database.
But this can be cumbersome in larger queries that involve joins with multiple tables—the names can actually make a query tough to read.
It’s sometimes worthwhile to employ an alias, which is a temporary name used to refer to a table or column in a query.
An alias allows you to rename a table or column within a query to help simplify the query in some way.
When a column is renamed with an alias, the alias is what appears in the query results.
Are aliases only good for writing more compact queries? No, there are some situations where they’re downright essential! A join that would be quite handy in the Mismatch application is retrieving both the topic name and category name for a given topic ID.
This is a problem because the result of  combining these two columns would leave us with ambiguous column names.
But we can rename the result columns to be more descriptive with aliases.
Selecting these two columns in a join yields result columns with the same name...not good!
The result columns now have unique names that are very descriptive.
The selected columns are now aliased with more descriptive names.
The code becomes a bit easier to read with the table names condensed into smaller aliases.
The AS keyword in SQL creates an alias, in this case for the mismatch_topic table.
Joins to the rescue So joins make it possible to involve more than one table in a query, effectively pulling data from more than one place and sticking it in a single result table.
The Mismatch query that builds a response array is a perfect candidate for joins since it contains no less than three nested queries for dealing with multiple tables.
The last two queries in the code are responsible for obtaining the topic name and category name from their respective tables - one query per table.
With a join, it’s possible to grab both the topic name and category name in a single query.And here’s the new version of  the code that uses a join:
The topic ID is used as the basis for the main query, but the category ID controls the join itself.
Joins are more efficient and require less code than nested queries.
Grab the response data from the database to generate the form $query =
I don’t get it, you still have an extra query that looks up the category name.
If joins are so great, why do you still need two queries?
Following is code that is capable of retrieving response data from the database with one query, thanks to the clever usage of joins.
We don’t still need two queries, at least not if we use joins to their full potential.
It is possible to join more than two tables, which is what is truly required of  the Mismatch response array code.
We need a single query that accomplishes the following three things: retrieve all of  the responses for the user, get the topic name for each response, and then get the category name for each response.
Ideally, a single query with two joins would kill all three birds with one big join-shaped stone.
Grab the response data from the database to generate the form $query =
Following is code that is capable of retrieving response data from the database with one query, thanks to the clever usage of joins.
The first join brings the topic table into the query, allowing it to source the topic name using the topic ID.
The second join wires the category table into the query using the category ID, allowing us to access the category name.
Aliases are used to help simplify the query and make it a bit easier to read.
Q: What other kinds of joins are there? A: Other types of inner joins include equijoins, non-equijoins, and natural joins.
Equijoins and non-equijoins perform an inner join based on an equality or inequality comparison, respectively.
Since the matching involves looking for “equal” columns (the same ID), these queries are considered equijoins.
Another kind of inner join is a natural join, which involves comparing all columns that have the same name between two tables.
So a natural join is really just an equijoin, in which the columns used to determine the join are automatically chosen.
This automatic aspect of natural joins makes them a little less desirable than normal inner joins because it isn’t obvious by looking at them what is going onyou have to look at the database structure to know what columns are being used in the join.
Q: So all SQL joins are really just variations of inner joins? A: No, there are lots of other joins at your disposal.
The other major classification of joins is collectively called outer joins, but there are several different kinds of joins that are considered outer joins.
There are left outer joins, right outer joins, full outer joins, and the seldom used but awe-inspiring triple helix ambidextrous join.
OK, that last one isn’t a real join, but it should be! The basic idea behind an outer join is that rows in the joined tables don’t have to match in order to make it into the join.
So it’s possible to construct outer joins that always result in rows from a table being selected regardless of any matching conditions.
Outer joins can be just as handy as inner joins, depending on the specific needs of a database application.
To learn more about the different kinds of joins and how they are used, take a look at Head First SQL.
Store all the query result data in the $responses array.
Test Drive Revamp the Questionnaire script to grab the user’s response data with a single query.
Upload the new script to your web server, and then navigate to the questionnaire in a web browser.
Ooh, I can’t wait to finish the questionnaire now that those weird categories are gone!
The normalized Mismatch database is much less error-prone thanks to the new category table.
The Mismatch questionnaire is dynamically generated from the response, topic, and category tables with the help of a couple of joins behind the scenes.Now that data isn’t duplicated.
Sidney’s questionnaire is filled out, stored, and ready to use for mismatching.
I filled out my questionnaire, now where’s my mismatch? I’m waiting...
Mismatch now remembers user responses but it doesn’t yet do anything with them...like finding a mismatch! The collection of  user response data only gets us halfway to a successful mismatch.
The Mismatch application is still missing a mechanism for firing Cupid’s arrow into the database to find a love connection.
This involves somehow examining the responses for all the users in the database to see who matches up as an ideal mismatch.
Figuring out an ideal mismatch sounds pretty complicated given all those categories, topics, and responses.
It’s definitely doable; we just need a consistent means of calculating how many mismatched topics any two users share.
If  we come up with a reasonably simple way to calculate how many mismatched topics any two users share, then it becomes possible to loop through the user database comparing users.
The person with the highest number of  mismatches for any given user is that user’s ideal mismatch!
Write down how you would go about calculating the “mismatchability” of  two users using data stored in the Mismatch database:
This is the data used to calculate a mismatch between two users, and what we’re looking for specifically is a love matching up with a hate or a hate matching up with a love.
We’re still missing a handy way in PHP code to determine when a mismatch takes place between two responses.
So we can use a simple equation to detect a mismatch between two responses.
If ResponseA + ResponseB = 3, we have a mismatch! So finding a love connection really does boil down to simple math.
That solves the specifics of  comparing individual matches, but it doesn’t address the larger problem of  how to actually build the My Mismatch script.
Grab the user’s responses from the mismatch_response table, making sure to join the topic names with the results.
Five steps to a successful mismatch Finding that perfectly mismatched someone isn’t just a matter of comparing response rows.
The My Mismatch script has to follow a set of  carefully orchestrated steps in order to successfully make a mismatch.
These steps hold the key to finally satisfying users and bringing meaning to their questionnaire responses.
Initialize the mismatch search results, including the variables that keep up with the “best mismatch.”
Loop through the user table comparing other people’s responses to the user’s responses.
This involves comparing responses for every person in the database to the user’s corresponding responses.
A “score” keeps up with how many opposite responses the user shares with each person.
After each cycle through the loop, se e if the.
Make sure a “best mismatch” was found, then query to get more information about the mismatched user, and show the results.
Prepare for the mismatch search Step 1 falls under familiar territory since we’ve already written some queries that perform a join like this.
But we need to store away the user’s responses so that we can compare them to the responses of  other users later in the script (Step 3)
The following code builds an array, $user_ responses, that contains the responses for the logged in user.
This query uses a JOIN to select all of the responses for the user.
When this loop finishes, the $user_responses array will hold all of the user’s responses.
A while loop is used to go through each row of the query results, building an array of user responses in the process.
This array holds the topics that are mismatched between two users.
This variable holds the mismatch score between two users - the highest score ultimately results in a mismatch.
This is the user ID of the person who is being checked as a potential mismatch...
Step 2 of  the My Mismatch script construction process involves setting up some variables that will hold the results of  the mismatch search.
These variables will be used throughout the My Mismatch script as the search for the best mismatch is carried out:
If this variable is still set to -1 after the search, we know there wasn’t a mismatch - this can only happen when no other users have answered the questionnaire, which is very unlikely.
Grab the user’s responses from the mismatch_response table, making sure to join the topic names with the results.
Compare users for “mismatchiness” The next mismatching step requires looping through every user, and comparing their responses to the responses of  the logged in user.
In other words, we’re taking the logged in user, or mismatcher (Sidney, for example), and going through the entire user table comparing her responses to those of  each mismatchee.
We’re looking for the mismatchee with the most responses that are opposite of  the mismatcher.
Where to begin? How about a loop that steps through the $user_ responses array (mismatcher responses)? Inside the loop we compare the value of  each element with comparable elements in another array that holds the mismatchee responses.
The challenge here is that we need a loop that essentially loops through two arrays at the same time, comparing respective elements one-to-one.
A foreach loop won’t work because it can only loop through a single array, and we need to loop through two arrays simultaneously.
A while loop could work, but we’d have to create a counter variable and manually increment it each time through the loop.
Ideally, we need a loop that automatically takes care of  managing a counter variable so that we can use it to access elements in each array.
We need to loop through these two arrays simultaneously, comparing responses to the same topics to see if they are the same or different.
This array holds responses from the logged in user, the mismatcher.
This array holds responses from another user in the database, the mismatchee.
This array changes as the mismatcher is compared to different mismatchees.
Step 3 of the My Mismatch script involves comparing two users by looping through each of their responses, and calculating a “score” based on how many responses are mismatched.
Given the following pieces of data, finish writing the for loop that calculates this score.
All we need is a FOR loop PHP offers another type of  loop that offers exactly the functionality we need for the My Mismatch response comparisons.
It’s called a for loop, and it’s great for repeating something a certain amount of  known times.
For example, for loops are great for counting tasks, such as counting down to zero or counting up to some value.
Here’s the structure of  a for loop, which reveals how a loop can be structured to step through an array using a loop counter variable ($i)
Only perform another loop cycle if  the test evaluates to true, that is, if  $i is less than the number of  user responses.
The count() function returns a count of the number of elements in an array, which serves as part of the loop’s test condition.
Initialize the loop counter to a value before the looping begins.
Any code placed inside the curly braces gets run each time through the loop.
Q: Why not just use a foreach loop to calculate the score instead of a for loop?
A: Although a foreach loop would work perfectly fine for looping through all of the different responses, it wouldn’t provide you with an index ($i) at any given iteration through the loop.
This index is important because the code is using it to access both the array of user responses and the array of mismatch responses.
A foreach loop would eliminate the need for an index for one of the two arrays, but not both.
So we need a regular for loop with an index that can be used to access similar elements of each array.
Q: What’s the purpose of storing the mismatched responses in their own array?
A: The array of mismatched responses is important in letting the users know exactly how they compared topically with their ideal mismatch.
It’s not enough to just share the identity of the ideal mismatch person—what is even better is also sharing the specific topics the user mismatched against that person.
This helps give the mismatch result a little more context, and lets the users know a bit more about why this particular person is truly such a great mismatch for them.
Q: In Step 5 of the Mismatch script, how would there ever not be a best mismatch for any given user?
A: Although unlikely, you have to consider the scenario where there is only one user in the entire system, in which case there would be no one else to mismatch that user against.
Step 3 of the My Mismatch script involves comparing two users by looping through each of their responses, and calculating a “score” based on how many responses are mismatched.
Given the following pieces of data, finish writing the for loop that calculates this score.
Each mismatched topic is added to an array so that it can be displayed to the user when revealing the mismatch.
Remember, the number of user responses is the same as the number of total topics since the responses come straight from the questionnaire.
Loop through the user table comparing other people’s responses to the user’s responses.
Only look for a mismatch if the user has questionnaire responses stored.
First grab the user's responses from the response table (JOIN to get the topic name)
Finishing the mismatching The shiny new loop that calculates a mismatch score is part of  a larger script (mymismatch.php) that takes care of  finding a user’s ideal mismatch in the Mismatch database, and then displaying the information.
It’s only possible to find a mismatch for a user who has responded to the questionnaire.
A familiar JOIN is used to retrieve the topic name when SELECTing the user’s questionnaire responses.
The $user_responses array holds all of the responses for the user.
These variables keep track of the mismatch search as it progresses.
This query grabs all of the users except the user being mismatched.
For each user, this query grabs the questionnaire responses for comparing as a potential mismatch.
Here’s the for loop that calculates the mismatch score for a potential mismatch.
If this user is a better mismatch than the best mismatch so far, then set him as the best mismatch.
We’re still inside that first if statement from the previous page, and there’s still more code...
This curly brace marks the end of the main while loop.
Before displaying the mismatch results, make sure a “best mismatch” was actually found.
Query for the mismatched user’s information so we can display it.
Don’t forget to generate an <img> tag with the user’s picture!
It’s important to show what topics actually resulted in the mismatch.
Finally, we provide a link to the mismatched user’s profile so that the logged in user can find out more about him.
This requires creating a new mymismatch.php script, as well as adding a “My Mismatch” menu item to the navmenu.php script so that users can access the script.
Upload the scripts to your web server, and then open the main Mismatch page (index.php) in a web browser.
Make sure you log in and have filled out the questionnaire, and then click the “My Mismatch” menu item to view your mismatch.
Johan’s My Mismatch page reveals Sidney as his perfect opposite.
When Sidney visits the My Mismatch page, she sees Johan, her ideal mismatch.
I had no clue I’d be so attracted, yet I can’t resist the Johan!
Database Schema Magnets Remember the Guitar Wars application from eons ago? Your job is to study the Guitar Wars database, which could use some normalization help, and come up with a better schema.
Use all of the magnets below to flesh out the table and column names, and also identify the primary and foreign keys.
Here’s the original Guitar Wars database, which stores high scores that are submitted by users.
The database drives the display of scores on the main Guitar Wars page.
Here’s the new and improved schema you need to build out with the magnets...
Database Schema Magnets Solution Remember the Guitar Wars application from eons ago? Your job is to study the Guitar Wars database, which could use some normalization help, and come up with a better schema.
Use all of the magnets below to flesh out the table and column names, and also identify the primary and foreign keys.
Redundant user name data is solved by creating a new table that stores player names, and then connects to the score table through a key.
Each player’s name is now broken down into first and last name to be more atomic, and it is only stored once no matter how many high scores they post.
The score table references players via a new foreign key.
The tables have new names since they serve more specific purposes.
The Guitar Wars database didn’t have any dependent column problems.
The database drives the display of scores on the main Guitar Wars page.
The new score_id column serves as a much needed primary key for the score table.
Here are the rules one more time, just to make sure you didn’t forget!
Since the same user is capable of posting multiple high scores, the name column results in redundant data...
The table is missing a primary key, which is an important part of any normalized database.
PHP&MySQLcross Concerned that your own perfect mismatch is still out there waiting to be found? Take your mind off it by completing this crossword puzzle.Untitled Puzzle.
A representation of all the structures, such as tables and columns, in your database, along with how they connect.
This happens when multiple rows of a table are related to multiple rows of another table.
This allows you to convert between different PHP data types.
Use this to combine results from one table with the results of another table in a query.
The process of eliminating redundancies and other design problems in a database.
You can shorten some if-else statements with this handy little operator.
When one row of a table is related to multiple rows in another table.
A join makes it possible to get rid of these.
A column in a table that references the primary key of another table.
When a form is generated from a database, it is considered ---- ------
It's not nuclear, it's just data in the smallest size that makes sense for a given database.
Rows in two tables have this relationship when there is exactly one row in one table for every row in the other.
One of these can help greatly in figuring out the design of a table.
A temporary name used to reference a piece of information in a query.
A representation of all the structures, such as tables and columns, in your database, along with how they connect.
This happens when multiple rows of a table are related to multiple rows of another table.
This allows you to convert between different PHP data types.
Use this to combine results from one table with the results of another table in a query.
The process of eliminating redundancies and other design problems in a database.
You can shorten some if-else statements with this handy little operator.
When one row of a table is related to multiple rows in another table.
A join makes it possible to get rid of these.
A column in a table that references the primary key of another table.
When a form is generated from a database, it is considered ---- ------
It's not nuclear, it's just data in the smallest size that makes sense for a given database.
Rows in two tables have this relationship when there is exactly one row in one table for every row in the other.
One of these can help greatly in figuring out the design of a table.
A temporary name used to reference a piece of information in a query.
A representation of all the structures, such as tables and columns, in your database, along with how they connect.
This happens when multiple rows of a table are related to multiple rows of another table.
This allows you to convert between different PHP data types.
Use this to combine results from one table with the results of another table in a query.
The process of eliminating redundancies and other design problems in a database.
You can shorten some if-else statements with this handy little operator.
When one row of a table is related to multiple rows in another table.
A join makes it possible to get rid of these.
A column in a table that references the primary key of another table.
When a form is generated from a database, it is considered ---- ------
It's not nuclear, it's just data in the smallest size that makes sense for a given database.
Rows in two tables have this relationship when there is exactly one row in one table for every row in the other.
One of these can help greatly in figuring out the design of a table.
A temporary name used to reference a piece of information in a query.
A representation of all the structures, such as tables and columns, in your database, along with how they connect.
This happens when multiple rows of a table are related to multiple rows of another table.
This allows you to convert between different PHP data types.
Use this to combine results from one table with the results of another table in a query.
The process of eliminating redundancies and other design problems in a database.
You can shorten some if-else statements with this handy little operator.
When one row of a table is related to multiple rows in another table.
A join makes it possible to get rid of these.
A column in a table that references the primary key of another table.
When a form is generated from a database, it is considered ---- ------
It's not nuclear, it's just data in the smallest size that makes sense for a given database.
Rows in two tables have this relationship when there is exactly one row in one table for every row in the other.
One of these can help greatly in figuring out the design of a table.
A temporary name used to reference a piece of information in a query.
A representation of all the structures, such as tables and columns, in your database, along with how they connect.
This happens when multiple rows of a table are related to multiple rows of another table.
This allows you to convert between different PHP data types.
Use this to combine results from one table with the results of another table in a query.
The process of eliminating redundancies and other design problems in a database.
You can shorten some if-else statements with this handy little operator.
When one row of a table is related to multiple rows in another table.
A join makes it possible to get rid of these.
A column in a table that references the primary key of another table.
When a form is generated from a database, it is considered ---- ------
It's not nuclear, it's just data in the smallest size that makes sense for a given database.
Rows in two tables have this relationship when there is exactly one row in one table for every row in the other.
One of these can help greatly in figuring out the design of a table.
A temporary name used to reference a piece of information in a query.
Normalization Normalization is the process of altering the design of a database to reduce duplicate data and improve the placement of and relationships between data.
The goal is to produce a robust design that holds up well to growing data.
Your PHP & MySQL Toolbox Quite a few new MySQL database techniques were uncovered in this.
The ternary operator is a PHP construct that works like a really compact if-else statement.
It is handy for performing simple choices based on a true/false expression.
A diagram is a visual depiction of your database, including details about the specific columns responsible for connecting tables.
Foreign Key A column in a table that is used to link the table to another table.
A foreign key in a child table typically connects to a primary key in a parent table, effectively linking rows between the two tables.
Aliases are often used to simplify queries by shortening long table and column names.
They can also be used to rename result data when the original table column isn’t specific enough.
A loop that is ideally suited to looping based on a specific number of iterations.
You’ve already been using PHP’s built-in functions to accomplish things.
Now that I have this engineering degree, there’s no stopping me.
I’ll find a lair, raise some laser sharks, and blow up the moon.
The riskyjobs table contains job titles and descriptions, along with location information and the posting date of each job.
Each job posting is uniquely identified by the job_id primary key.
A good risky job is hard to find The Internet startup, RiskyJobs.biz, is designed to help companies find the right people to fill their riskiest jobs.
The business model is simple: for each risky job we can fill with the right candidate, we get a commission.
Right now, there’s a database full of  risky jobs just waiting to be discovered by the right people.
Let’s take a look at the Risky Jobs search form and the underlying database of  available jobs.
This simple search form calls a script that searches the riskyjobs table.
The Risky Jobs search form triggers a query on the riskyjobs table that searches for matching jobs.
When the Risky Jobs form is submitted, the search string is stored in the variable $user_search, which is plugged into the following SQL query to do the actual searching.
Write down how many rows in the riskyjobs database on the facing page will be found as a result of Ernesto’s search.
Ernesto, our fearless bullfighter, is seeing red because his job search isn’t producing any results.
This variable contains whatever is entered into the text box.
When the Risky Jobs form is submitted, the search string is stored in the variable $user_search, which is plugged into the following SQL query to do the actual searching.
Write down how many rows in the riskyjobs database on page 502 will be found as a result of Ernesto’s search.
Zip, zero, nada! The problem is that our query is too exacting - the exact text entered by the user must match.
A WHERE clause with an = means that the two strings being compared must match exactly.
See the problem? This query is only going to match rows in the table where the title column contains the exact text “Bull Fighter Matador”
The job with the title “Matador” isn’t matched, and neither are.
OK, maybe it’s good those last two were missed, but the search still isn’t working as intended.
And it’s not the mixed case that presents the problem (MySQL searches are by default case-insensitive), it’s the fact that the entire search string must be an exact match due to the equality (=) operator in the WHERE clause.
The case of the search term doesn’t matter because the MySQL WHERE clause is case-insensitive by default.
The search leaves no margin for error The SELECT query in the Risky Jobs script is very rigid, only resulting in a match if  the two strings being compared are identical.
This presents a problem for our job search because people need to be able to enter search terms that match job listings even if  the job title isn’t an exact match.
Let’s go back to Ernesto’s search, which results in a query that searches the title column of  the riskyjobs table for the text “Bull Fighter Matador”:
The = operator requires an exact match when comparing two strings for equality.
The keyword LIKE lets you look for matches that aren’t  exactly the same as the word in quotes...
The % signs are wildcards; they stand in for any other characters before or after the word.
It’s the underscore (_), and it represents a single character.
In SQL, the percent sign (%) wildcard stands for any group of  zero or more characters.
Placing this wildcard in a query before and after a search term, as in the SELECT statement above, tells SQL to return results whenever the term appears somewhere in the data, no matter how many characters appear before or after it.
You can think of  LIKE as a more forgiving version of  the = operator.
Take a look at the following query, which uses LIKE to match rows where the word “fighter” appears anywhere in the title column:
Check out these examples of  strings that match up with the above query:
Time out! Take a moment to familiarize yourself with the Risky Jobs database...
This file contains SQL statements that build and populate the riskyjobs table with sample data.
After you’ve executed the statements in riskyjobs.sql in a MySQL tool, try out a few queries to simulate job searches.
The complete source code for the Risky Jobs application is available for download from the Head First Labs web site:
This query selects all columns for all jobs in the riskyjobs table.
This query grabs the job ID, title, and description for jobs where the title is exactly “Bull Fighter Matador”
This query uses LIKE to find jobs with the word “animals” anywhere in the job description.
Can you match up the clauses with their appropriate results? Which magnets won’t be matched by any of the LIKE clauses?
Which magnets won’t be matched by any of the LIKE clauses?
There has to be a space in front of the “T” for this to match.
Handy indeed! We just need to figure out how to match each of the individual keywords in the search phrase.
Taking what people type in the Risky Jobs search field and matching it exactly won’t always work.
The search would be much more effective if  we searched on each search term entered, as opposed to searching on the entire search phrase.
But how do you search on multiple terms? We could store each of  the search terms in an array, and then tweak the SELECT query to search for each keyword individually.
That last LIKE clause, LIKE '%Tipper Cow%', doesn’t match anything because “Tipper” and “Cow” don’t show up together as a phrase.
It sure would be handy to break up search phrases into individual keywords and then search on each of the keywords.
Our search would work much better if it looked for “Tipper” and “Cow” individually instead of “Tipper Cow” as one exact phrase.
The $search_words variable now stores the array of search terms that we’ll then feed into an SQL query.
The explode() function chops a string into an array of substrings based on a common separator, also known as a delimiter.
This parameter tells explode() what separates the substrings within the string, in this case a space.
You can specify one or more characters, which are called the delimiter.
The first is the delimiter, which is a character or characters that indicates where to break up the string.
We’re using a space character as our delimiter, which means the search string is broken everywhere a space appears.
The delimiter itself  is not included in the resulting substrings.
Explode a string into individual words To make Risky Jobs search functionality more effective, we need a way to break apart users’ search strings when they enter multiple words in the form field.
The data our risky job seekers enter into the search form is text, which means we can use any of  the built-in PHP string functions to process it.
One extremely powerful function is explode(), and it breaks apart a string into an array of  separate strings.
The explode() function breaks a string into an array of substrings.
Incorporating the array of  search terms into Risky Jobs involves adding a line of  code before we run the query on the Risky Jobs database.
Now, if  someone enters “Tipper Cow” into the search field, this code breaks it into two words and stores each word in an array ($search_words)
In order to incorporate the exploded search terms into the Risky Jobs application, we have to plug each of the terms into an SQL SELECT query using LIKE and OR.
For example, here’s what a query would look like for Ernesto’s earlier search on “Bull Fighter Matador”:
Now suppose we used the following PHP code to attempt to assemble this query from the search data entered by the user into the Risky Jobs search form:
Write down the SQL query generated by this code when Ernesto enters “Bull Fighter Matador” as his search, and then annotate any problems you think it might have.
We’re now searching the job description instead of the title since the description has more information to match.
In order to incorporate the exploded search terms into the Risky Jobs application, we have to plug each of the terms into an SQL SELECT query using LIKE and OR.
For example, here’s what a query would look like for Ernesto’s earlier search on “Bull Fighter Matador”:
Now suppose we used the following PHP code to attempt to assemble this query from the search data entered by the user into the Risky Jobs search form:
Write down the SQL query generated by this code when Ernesto enters “Bull Fighter Matador” as his search, and then annotate any problems you think it might have.
We’re now searching the job description instead of the title since the description has more information to match.
There’s an extra OR at the end of the query, which will make it fail!
Each LIKE clause ends with an OR to link it with the next one, which works great except for the very last one.
Make sure the WHERE clause isn’t empty before appending it to the search query.
This operator concatenates one string onto the end of another string.
So how exactly can that be done? How about a special case inside the loop to see if  we’re on the last search term, and then not include OR for that one? That would work but it’s a little messy.
A much cleaner solution involves a function that does the reverse of  the explode() function.
The implode() function takes an array of  strings and builds a single string out of  them.
But how does that help the dangling OR problem in our query? Well, implode() lets you specify a delimiter to stick between the strings when combining them together.
If  we use ' OR ' as the delimiter, we can construct a WHERE clause that only has OR between each LIKE clause.
Rewrite the PHP code that generates the Risky Jobs SELECT query so that it fixes the dangling OR problem by using the implode function.
This must be an array of strings that you want to join together.
This is the delimiter that is wedged between each of the strings when they are stuck together as one.
Rewrite the PHP code that generates the Risky Jobs SELECT query so that it fixes the dangling OR problem by using the implode function.
The result of the implosion is several LIKE clauses joined together with ORs.In order to use the implode() function, we.
The delimiter passed to implode() is “OR” with a space on each side of it.
Since implode() accepts an array of strings to be joined together, we have to build an array of LIKE clauses.
When used like this, the [] operator acts the same as the array_push() function - it adds a new element onto the end of an array.
The search.php script contains the query generation code you just worked through, and is used to process the search data entered into the form in the search.html page.
Upload the script and other Risky Jobs files to your web server, and then open the search form (search.html) in a web browser.
Try a few different searches to see how your query generation code fares.
Make sure to try Ernesto’s “Bull Fighter Matador” search, which is a good test of  the new implode() code.
Ernesto doesn’t immediately see his perfect risky job, but he’s definitely making progress now that the search script looks for each individual search term.
So many jobs to choose from! I don’t think I’m up for prize fighting or repairing electric bulls, but think I might find my dream job here...
The search terms clearly show a search for a tightrope walker in the circus, but the results aren’t exactly a match.
Are the search terms to blame or are there really no jobs for tightrope walkers?
I visited your site and didn’t get back any good jobs even though I entered exactly the right search terms.
Tightrope walker Selma isn’t having as much luck with the Risky Jobs search form.
Write down the SQL query generated when Selma enters “tightrope, walker, circus” as her search, and then annotate any problems you think it might have.
Write down the SQL query generated when Selma enters “tightrope, walker, circus” as her search, and then annotate any problems you think it might have.
The commas are considered part of the search terms instead of separators between the terms.
The only search term that is actually matching jobs is “circus” because it doesn’t have a comma accidentally stuck onto it.
The explode() function uses spaces as delimiters but it totally misses the commas.
Just call the explode() function twice - first to get rid of spaces and then to get rid of commas.
The explode() function lets you explode a single string into substrings, but in this case we already have substrings.
The first call to the explode() function leaves us with multiple strings stored in an array, so there’s isn’t a single string left to explode.
And attempting to explode each string in the array would likely just create more problems.
Instead of  trying to solve the delimiter problem with multiple calls to explode(), we need to preprocess the search string to get it down to a single delimiter before we ever even call explode()
Then it can do what it does best—break apart the string using one delimiter.
Preprocessing data allows us to remove unwanted characters and make the data easier to process.
Preprocess the search string We want to hand the explode() function a string that it can break apart cleanly in one shot.
How do we do that? By making sure that explode() only has to worry with a single delimiter, such as a space character.
This means we need to preprocess the search string so that each search term is separated by a space, even if  the user entered commas.
Q: Can we use more than one character as the delimiter when exploding the search string?
A: Yes, you can specify any number of characters to serve as your delimiter, but that’s not the same as specifying different delimiters, and won’t solve our problem here.
If we used explode(', ', $user_search) to break apart our string, it would use a combined comma and space as a delimiter, and would work if someone entered “tightrope, walker, circus”
But it would fail if someone entered “tightrope walker circus”
In that case, we’d be left with one long string—not good.
Q: Can we just delete the commas instead of turning them into spaces?
A: That will work only if users separate their search terms with both a comma and a space, which we can’t count on.
If we deleted commas, we’d run the risk of turning “tightrope,walker” into.
After this code runs, the variable $clean_string will contain the string “tightrope  walker  circus”
Everywhere that a comma appears in this string, it will be replaced with a space.
Replace unwanted search characters If  you think about it, preprocessing the Risky Jobs search string is a lot like using find-and-replace in a word processor.
In our case, we want to find commas and replace them with spaces.
PHP’s str_replace() lets you do just that by supplying it three parameters: the text you want to find, the text you want to replace it with, and the string you want to perform the find-and-replace on.
Do you see anything suspicious about the results of the str_replace() function? Do you think replacing commas with spaces will work like we want?
The third parameter is the string that will be changed.
We’re adding a little truth to the advertising by replacing “thousands” with “hundreds”
But what about those commas in the search string? The str_ replace() function works just as well at replacing individual characters:
Given the PHP code below, show what the output of the $search_words array will be for each of the following search strings.
Make sure to write in data for the appropriate array elements, and scratch through elements if the $search_words array ends up being shorter.
These two array elements are actually empty because of those two extra spaces between matador and cape in the search string.
Again, two empty elements, because the comma is replaced with a space.
Given the PHP code below, show what the output of the $search_words array will be for each of the following search strings.
Make sure to write in data for the appropriate array elements, and scratch through elements if the $search_words array ends up being shorter.
So we’re all set now that we’re preprocessing the search string, right?
Preprocessing gets rid of unwanted characters, but unfortunately, it doesn’t result in an array containing all good search terms.
Remember, our goal is to end up with a string where each search term is separated by exactly the same delimiter, a space.
Take another look at what happened in the last three examples on the facing page.
Some of the elements in the $search_words array are empty.
If  we try to build our WHERE clause with the empty search elements, we might end up with something like this:
If  there’s a space anywhere in a job description (which is pretty much a given), this query will match it and return it as a result.
So every job in the Risky Jobs database will be matched by this query.
We need to get rid of  those empty array elements before we construct the SQL query in order to make the search script useful again.
Here’s the original array that contains the search terms and empty elements caused by extra spaces.
The new array is shorter because it only has real search terms in it - no empties!
The query needs legit search terms The good news it that it’s not too difficult to clean up our search terms before using them in a query.
We’ll need to create a new array that only contains the real search terms.
So we’ll copy all the non-empty elements from our first array into the second array, and then use that array to construct the SELECT query.
To construct the new array, we can use a foreach loop to cycle through each element in the original array, and then use an if statement to find non-empty elements.
When we find a non-empty element, we just add it to the new array.
We need to add code to our script that builds a new array containing only non-empty search terms.
This is nothing new - replace commas with spaces using str_replace()
Will this search give our users the results they’re looking for?
After checking to make sure there is at least one search term in the $search_words array, the foreach loop cycles through the array looking for non-empty elements.
This code gives us a search query that no longer has empty elements.
Here’s the new query for the search “bull, matador, cape”:
Test Drive Update the Search script to preprocess the user search string.
Update the search.php script to use the explode() and implode() functions to preprocess the user search string and generate a more robust SELECT query.
Then upload the script to your web server and try out a few searches.
Selma’s “tightrope, walker, circus” search now appears to be finding more relevant jobs.
I’m getting job listings, but I’m getting huge descriptions for each job.
I may have to try hazardpays.com, where they show only part of the job, and I can see more listings per page.
Although Risky Jobs is doing much better at finding jobs, the huge job descriptions are a bit much.
What’s really irking Selma is her inability to see more job listings in her browser without doing a bunch of  scrolling.
It isn’t necessary to show the entire description of  each job in the search results.
Ideally, we really need to show part of  the description of  each job, maybe just the first few sentences.
Write down how you think we could trim the job descriptions so that they aren’t quite so huge in the search results:
This is the original string we want to extract a substring from.
Sometimes you just need part of a string Since the lengths of  the job descriptions in the Risky Jobs database vary quite a bit and some are quite long, we could clean up the search results by chopping all the descriptions down to a smaller size.
The PHP substr() function is perfect for extracting part of  a string.
You pass the “substring” function the original string and two integers.
The first integer is the index of  where you want the substring to start, and the second integer is its length, in characters.
The PHP substr() function allows you to extract a portion of a string.
When it comes to the substr() function, you can think of  a string as being like an array where each character is a different element.
Similar to elements in an array, each character in this string has an index, starting at 0 and counting up until the end of  the string.
We can use these character indexes with the substr() function to grab portions of  the string:
Start at 49, and since we left off the second argument, it means go to the end of the string.
Extract substrings from either end The substr() function is not limited to grabbing substrings from the start of  a string.
You can also extract characters starting from the end of  a string.
The extraction still works left to right; you just use a negative index to identify the start of  the substring.
Below is PHP code that generates an HTML table for the Risky Jobs search results.
Finish the missing code, whose task is to limit the job description text to 100 characters, and also trim down the date posted text to only show the month, day, and year.
Start at -9 and take the rest of the string.
Below is PHP code that generates an HTML table for the Risky Jobs search results.
Finish the missing code, whose task is to limit the job description text to 100 characters, and also trim down the date posted text to only show the month, day, and year.
Stick an ellipsis on the end to indicate that this is only part of the description.
It’s possible to skip the PHP substr() function and limit the job description data in the SQL query itself.
You use a very similar MySQL function called SUBSTRING() that accepts the same arguments as substr()
So grabbing the first 100 characters of the job description looks like this:
If we use MySQL, we only get the partial job description, and would have to make another query to get the full description.
Q: Does substr() work on numeric values? A: No, it operates strictly on strings.
However, If you have a number stored as a CHAR, VARCHAR, or TEXT, when you retrieve it via SQL, it’s treated by PHP as a string, not a number, so you can use a substr() function on it.
Q: What if your length value is longer than the string? Will it return a string with spaces at the end to make it match the length value?
But it won’t pad the end of the string with spaces to change the length.
I’d really like to see the results sorted by date posted, or maybe by state.
I really want to find a matador job in Vermont.
How can we change the page layout and query to allow us to sort by date posted, state, or job title?
Test Drive Tweak the Search script to limit the text displayed for job descriptions and dates posted.
Modify the search.php script so that it uses the PHP substr() function to trim down the job description and date posted text for the search results.
Then upload the script to your web server and test it out with a few searches.
Selma is pleased now that she can see job search results without having to scroll through humongous job descriptions.
The posting date is also a bit easier to read now that it only shows the date and not the date and time.
We can use these links to reload the same Search script but with a query that sorts the results according to the link clicked.
We already know how to use ORDER BY to structure a query with sorted results.
If  we create different SQL queries to ORDER BY each individual column, we can allow the user to sort the search results alphabetically by job title, description, or state, or chronologically by date posted.
Here is the SQL query to sort results alphabetically by job description:
Users can hone in on certain jobs by sorting the results based on these headings.
We can turn the headings into links that allow our users to click on them to sort the job listings.
Multiple queries can sort our results In order to allow visitors to sort their search results, we need a way for them to identify how they want their results ordered.
We can use HTML to turn each of  the column headings in the search result table into links.
Users can click a link to indicate which column they want to sort the results by.
This sorts the results of the query on job descriptions in ascending alphabetical order.
Write three different queries that sort the Risky Jobs results according to job title, state, and date posted.
Assume the user has typed in the search string “window, washer, skyscraper”
How could we rewrite these queries if you wanted to see the job titles and states in reverse order? What about the newest jobs first?
Write three different queries that sort the Risky Jobs results according to job title, state, and date posted.
Assume the user has typed in the search string “window, washer, skyscraper”
How could we rewrite these queries if you wanted to see the job titles and states in reverse order? What about the newest jobs first?
The default for ORDER BY is ASCending order, which is the same as saying ORDER job_title ASC.
We might want these if we’ve already ordered one of the columns and the user clicks on it again to reverse the order.
It seems like a lot of redundant code will be needed to generate all those queries.
Can’t we avoid having the same query generation code repeated three, or even six times?
This might look like a lot of  work, but we already have most of  the code written.
But before we do that, let’s take a look at how to put together custom functions...
Preprocess the search keywords, and store them in an array.11
Check to see if  the sort parameter has a value.
Create a WHERE clause containing all of  the search keywords.
Optionally take a sort parameter that tells the function what column to sort by.
While it’s true that we’ll need to run a different query when a user clicks a different link, it’s possible construct a single query based on the link clicked.
The first time the results are displayed, no links have been clicked so we don’t have to worry about sorting.
We can just take the keywords submitted into our form and build a query without an ORDER BY.
The results are displayed with clickable headings, each of  which links back to the script, but with a different sort order.
So each link consists of  a URL with the original keywords and a parameter named sort that indicates which order the results should be in.
What would really help in pulling this off  is if  we create our very own custom function that takes information about how to sort the job data, and returns a string with the WHERE clause and ORDER BY in place.
Our new custom function takes a look at the sort parameter to figure out how to sort the search results.
To create a custom function, you begin it with the word “function”
You can send one or more values into your function as arguments, each separated by a comma - in this case, there’s just one value.
This is whatever you decide you want to name your function - make it as descriptive as possible.
Curly braces indicate where the function code should go, just like in a loop or if statement.
When you’re ready to use a custom function, just call it by name and enter any values that it expects in parentheses.
If  the function is designed to return a value, you can assign it to a new variable, like this:
The function returns a new string with the commas replaced by spaces.
Functions let you reuse code A function is a block of  code separate from the rest of  your code that you can execute wherever you want in your script.
Until now, you’ve used built-in functions that PHP has already created.
But you can also write your own custom functions to provide features not supplied by the language.
By creating a custom function, you can use your own code again and again without repeating it in your script.
Instead, you just call the function by name when you want to run its code.
Following is an example of  a custom function called replace_ commas() that replaces commas with spaces in a string:
Custom functions allow you to organize a chunk of PHP code by name so that it can be easily reused.
A function can return a value to the code that called it - in this case we return the altered string.
Here’s where we return the new query so the code that called the function can use it.
We’re passing into the function the $user_search array we created from the data entered into the search form.
This is the value from the search form the user submitted.This lets us capture the value our function returns, in this.
Build a query with a custom function We’ve already written much of  the code we need to create the custom function that generates a Risky Jobs search query.
All that’s left is dropping the code into a PHP function skeleton.
To use the function, we just pass along the search data entered by the user, and then store the result in a new string that we’ll call $search_query:
Head First: Look, we’re all wondering one thing: what’s so wrong with redundant code? I mean really, it’s easy to create, you just copy and paste and boom.
Custom Function: Oh, don’t get me started about redundant code.
It’s just plain ugly and makes your code more difficult to read.
But there is a much much more important reason to avoid redundant code.
Custom Function: Well, what if  something changes in your code? That happens pretty often.
Custom Function: But what if  the thing that changed was in your redundant code? And was in five, or maybe ten places throughout your application?
But what if you missed changing it in one place? You’re only human, you programmers.
If  you missed it, you might have a very tough time tracking it down.
Custom Function: Ah, but that’s the beauty that is me.
If  that code had been in a function, you could have changed it once.
But I still don’t see why I should go out of  my way to use you.
I mean, you’re pretty limited, right? You can only use strings.
Custom Function: Whoa! Wait a sec there, buckaroo! I can take any data type you care to send me.
As long as the code inside me handles that data the way it should, I can use any data you want me to.
It’s all about making the most of  what I offer and using me correctly.
Custom Function: Where are you getting these crazy ideas? You can call me with no variables if you want, and if  I’m set up that way.
If  you don’t want to send me data, don’t write any variables in the parentheses next to my name when you create me.
Although I can’t think of  many reasons why you wouldn’t want to pass data to me.
And get data back out again with a return statement.
Or is that serve to live? Or serve liver? Something like that.
Custom Functions Exposed This week’s interview: Custom functions: how custom are they really?
Custom Functions Exposed This week’s interview: Custom functions: how custom are they really?
We can pass the build_query() function two parameters instead of just one.
We’re already passing the function the $user_search argument, which contains the user’s search terms.
Now we need another argument, $sort, that indicates how to sort the data.
We could store the actual ORDER BY strings in $sort to indicate the sort order.
There’s not much point in sorting by job description, as alphabetical order doesn’t mean much there.
We just arbitrarily chose these numbers and the meaning that each one has.
There are no special rules about it other than to use them consistently.
Test Drive Modify the Search script to use the build_query() function.
Create the new build_query() function in the search.php script, making sure to replace the original code with a call to the new function.
Upload the script to your web server and try out a search in a web browser to make sure it works OK.
That new custom build_query() function is cool, but it doesn’t yet sort the search results.
Yes, users must specify how to sort the search results, just as they specify the search terms themselves.
The good news is we already know how we want to implement this functionality: we’re going to turn the column headings on our results page into hyperlinks.
When a user clicks on a given heading, like “State,” we’ll pass the number for sorting by state into our build_query() function.
But we still have to get the sort order from the link to the script.
We can do this when generating custom links for the headings by tacking on a sort parameter to the URL:
We want to reload the page when users click a column heading to sort results, so we make this a self-referencing form.
Our build_query() function needs the user’s search keywords to display results, so we pass that in the URL.
We pass along sort data to indicate the desired sorting of the search.
When the results page is generated, each heading link (except “Job Description”) has its own customized URL, including a sort value for how the results should be sorted.
Ordering by description wouldn’t tell us much so there’s no reason to turn it into a sort link.
The search results are generated as part of an HTML table, which is why there’s a <td> tag here.
Joe:  Normally, the same heading would allow the user to sort in either ascending or descending order.
Each time they click a heading it just reverses the order.
Frank:  Doesn’t that mean we now have to somehow keep up with the state of  the headings each time the user clicks them because they now have to link differently depending on what link they currently hold.
Frank:  Well, the headings don’t always do the same sort.
For example, if  you click the “Job Title” heading and it sorts the results by ascending job titles, then the link must change to now sort on descending job titles the next time it is clicked.
But keep in mind that each type of  sort has a number in the link URL to let the script know what kind of  sort to carry out.
And since we’re generating those links, we can control exactly what sort numbers get put in them.
So the challenge for us is to somehow structure our code to be able to generate the correct link based on the current state of  the sort, right?
Frank:  Ah, I’ve got it! Isn’t that something we can solve with a few if statements? I mean, that’s the kind of  decision making they’re good for, right?
Joe:  Yes, that would work but we’re talking about several decisions involving the exact same piece of  data, the sort type.
It would really be nice if  we could come up with a better way to make those decisions other than a bunch of  nested if-else statements.
Jill:  That’s a great point, and it’s a perfect opportunity to try out a new statement I heard about.
The switch statement lets you make multiple decisions, way more than two, based solely on a single value.
I think the switch statement might just be the ticket...
I see how those links work for the first three queries, but what about the other three ORDER BYs that sort in descending order? Where do they go?
This is something that would require a small army of  if-else statements, especially in situations involving quite a few options.
Instead of  writing nested if-else statements to check for each possible value, you instead write a switch statement that has a case label corresponding to each possible value.
At the end of  each case label, you put the statement break;, which instructs PHP to drop out of  the entire switch statement and not consider any other cases.
This ensures that PHP will execute the code in no more than one case.
Let’s take a look at an example that uses switch:
A SWITCH statement contains a series of CASE labels that execute different code blocks depending on the value of a variable.
This is the value the switch statement is checking - it controls the entire switch.
If you need to do the same thing for two or more values, just leave off the break statement until you reach the last value.
The break statement tells PHP to drop out of the switch statement.
This is the default set of headings that should appear when the user hasn’t chosen a sort method.
This switch statement checks the value of $sort and adds the corresponding ORDER by statement to the end of the search query.
We return $search_query as before, only this time with an ORDER BY clause at the end.
When users load the results page without clicking a column heading, $sort will be empty, so as a default we won’t sort the results at all.
Give build_query() the ability to sort We now have two functions to handle Risky Jobs searches.
But build_query() isn’t quite finished since the query it generates doesn’t yet sort.
The function needs to append an ORDER BY clause to the query.
But it has to be the correct ORDER BY clause, as determined by a new $sort argument:
Test Drive Revamp the Search script to use the two new custom functions.
Upload the script to your web server, open the search.html page in a browser, and try doing a search.
Now click the headings above the search results to sort the jobs based on the different data.
Make sure to click the same heading more than once to swap between ascending and descending order.
The build_query() function takes the search terms the user entered, explodes the query into an array, cleans out any empty strings in the array, and builds an SQL query with the terms and an ORDER BY corresponding to the sort value, if any.
Now I can see the oldest jobs, the ones where they are getting truly desperate to hire a matador in Vermont.
How do other sites avoid having lots of search results on a single page?
But sometimes I try a broader search and the results are overwhelming.
This is an awful lot of job listings to try and take in at once.
Pagination breaks query results into sets, and displays each set on its own web page.
Each page shows five results, along with links to access the other pages of results.
Users can easily click through each page and avoid having to scroll.
That’s great, but how do we break up our results into groups like that? Our SQL query returns all the results that match the search string.
We need a query that will return just a subset of the results, not all of them.
Luckily, SQL already gives us a way to do that: the LIMIT clause.
Let’s revisit LIMIT and see how we can use it to split our results up into groups of  five...
We can paginate our results We’re displaying all of  our results on a single page right now, which is a problem when a search matches lots of  jobs.
Instead of  forcing users to scroll up and down a huge page to see all the job matches, we can use a technique called pagination to display the search results.
When you paginate results, you break the collection of  job matches into groups, and then display each group on a separate web page, like this:
The current page is not a link - this is the second page of job results.
Get only the rows you need with LIMIT The key to controlling which rows we display on any given page is to add another clause to our search query, a LIMIT clause.
To get a maximum of five rows, we add LIMIT 5 to the end of  our query, like this:
Only return the first five matches no matter how many matches are actually found.
Without a WHERE clause, this query returns all the jobs in the database, which is equivalent to searching with no search terms.
If  you recall, we use the custom build_query() function to create our Risky Jobs query.
To force it to only display the first five matches, we just concatenate LIMIT 5 to the end of  the query string after it’s built:
This works well for getting the first five rows of  results, but what about the next five rows, and the five rows after that? To pull out rows deeper in the result set, we have to change our LIMIT up a bit.
When you add two arguments to LIMIT, the first arguments controls how many rows you skip, and the second argument controls how many rows you get back.
Adding a LIMIT clause to the end of a query limits the number of rows returned by the query, in this case to five rows.
The first argument tells LIMIT how many rows to skip - the first ten.
The second argument controls how many rows are returned - five, same as earlier.
We need a different LIMIT depending on the page and link, but we can generate it instead of writing multiple queries.
All we need to do is  modify our build_query() function a little further to add the correct LIMIT at the end of  the query it constructs.
Control page links with LIMIT An important part of  pagination is providing links that allow the user to move back and forth among the different pages of  results.
We can use the LIMIT clause to set up the naviagation links for the bottom of  each page of  results.
For example, the “next” and “previous” links each have their own LIMIT.
The same thing applies to the numeric links that allow the user to jump straight to a specific page of  results.
Here are the LIMIT clauses for the first three pages of  search results, along with LIMITs for some of  the page links:
We just need to write a bunch of queries with a different LIMIT on each one, right?
Keep track of the pagination data In order to add the new pagination functionality to build_query(), we need to set up and keep track of  some variables that determine which search results to query and show on a given page.
These variables are also important in determining how the navigation links at the bottom of  the page are generated.
This is the number of  results per page, which you choose based on the look and feel of  the page, and how many search results fit nicely on the page with the layout.
This is where the second argument to the LIMIT clause comes from.
Compute the number of  rows to skip before the rows on the current page.
This variable is what controls where each page begins in terms of  results, providing the first argument to the LIMIT clause.
Run a query that retrieves all the rows with no LIMIT, and then count the results and store it in $total.
In other words, this is the total number of  search results.
Get the current page, $cur_page from the URL via GET.
Compute the number of the first row on the page, $skip.
Default to the first page if the page number isn’t set.
Set up the pagination variables Most of  the pagination variables can be set up purely through information provided via the URL, which is accessible through the $_GET superglobal.
We can then use these variables to calculate how many rows to skip to get to the first row of  data, $skip.
The $results_per_page variable is a little different in that we just set it to however many search results we want to appear on each page, which is more of  a personal preference given the layout of  the results page.
These variables can only be set after performing an initial query to find out how many matches are found in the database.
Once we know how many matches we have, it’s possible to set these variables and then LIMIT the results...
Grab the search string that the user entered into the form.
Compute number of pages by dividing the total number of rows by the number of results per page, and then rounding up the result.
The ceil() function rounds a number up to the nearest integer - the “ceiling”
Issue a second query, but this time LIMIT the results to the current page.
Revise the query for paginated results Now that we’ve got our variables set up, we need to revise the Search script so that instead of  querying for all results, it queries for just the subset of  results we need for the page the user is currently viewing.
Here’s the revised section of  the search.php script with these new additions highlighted:
Store away the total number of rows with a call to the mysqli_num_rows() function.
Generate the page navigation links So we’ve set up some variables and built a new SQL query that returns a subset of  results for the page.
All that’s left to do is to generate the page navigation links for the bottom of  the sarch results page: the “previous” link, numerical links for each page of  results, and the “next” link.
We already have all the information we need to put together the links.
Let’s go over it again to make sure it’s clear how it will be used.
OK, we know what information we need in order to generate the page navigation links, so we’re ready to crank out the PHP code to make it happen.
The only catch is that we don’t want this function to get called if  there is only one page of  results.
Here’s how we can perform the check and call the function, making sure to pass along the required information as function arguments:
First check to make sure there is more than one page of search results; otherwise, don’t generate the page links.
Pass along the search string, sort order, current page, and total number of pages to use in generating the page links.
If this page is not the first page, generate the "previous" link.
If this page is not the last page, generate the "next" link.
Use the magnets to plug in the missing code and give Risky Jobs the ability to generate page navigation links.
The “previous” link appears as a left arrow, as in “<-”
The “next” link appears as a right arrow, as in “->”
If this page is not the first page, generate the "Previous" link.
If this page is not the last page, generate the "Next" link.
Use the magnets to plug in the missing code and give Risky Jobs the ability to generate page navigation links.
The “previous” link appears as a left arrow, as in “<-”
The “next” link appears as a right arrow, as in “->”
The link to a specific page is just the page number.
We still have to pass along the user search data and the sort order in each link URL.
Make sure each page link points back to the same script - we’re just passing a different page number with each link.
Grab the sort order and search string that were passed through the URL as GET data.
Initialize the pagination variables since we’ll need them in a moment to LIMIT the query and build the pagination links.
Putting together the complete Search script And finally we arrive at a complete Risky Jobs Search script that displays the appropriate search results based on the user’s search terms, generates clickable result heading links for sorting, paginates those results, and generates page navigation links along the bottom of  the page.
We’ve already built these functions, so there’s no need to rehash every line of their code here.
And the reason has to do with the fact that well-designed functions shouldn’t manipulate data outside of their own code.
So a function should only access data passed to it in an argument, and then only make changes to data that it returns.
By echoing data to the browser, the function would be effectively reaching beyond itself to make a change somewhere else.
It’s much harder to debug and maintain functions when it isn’t clear what data they change.
The solution is to always return the data affected by a function, and then do whatever you want with the data returned by the function, outside of the function.
Here’s the LIMIT clause we created to query only a subset of job results.
And here’s the code we wrote that trims down the job description and date posted using the substr() function.
Call the build_query() to build the SQL job search query.
Also create and initialize the variables used as arguments to the function.
And don’t forget to update the query code so that it uses LIMIT to pull out the correct subset of  results for each page.
When all that’s done, upload the new search.php script to your web server, and then open the search.html page in a web browser.
Try a few searches, making sure to search on some terms that will end up with lots of  results so that the new pagination features kick in.
For maximum result pages, do a search with an empty search form.
Don’t forget, the complete source code for the Risky Jobs application is available for download from the Head First Labs web site:
At last, I’ve found my dream job! Vermont, here I come.
Ernesto has found a job with the perfect amount of risk!
Put a % in front of and/or after a search term to let LIKE know that the term can have other characters surrounding it.
Custom function A chunk of PHP code organized into a named, reusable package.
The idea is to isolate code that performs a certain task so that it can be reused with minimal effort and code duplication.
You can grab the beginning of a string, the end of a string, or some piece in between.
If you find yourself with a bunch of nested if-else statements, you may find that you can code it more efficiently as a switch statement.
Not only that, but LIMIT can skip rows in the result set, allowing you to isolate a subset of results.
Sure, they can tell the length of your string, truncate it, and change certain characters to other certain characters.
They can precisely modify strings based on a set of rules rather than a single criterion.
Blatt replaced the class hamster! Did she think we wouldn’t notice?
Our job seeker information is stored in a table that can be searched by employers, recruiters, and headhunters to identify potential new employees.
But there’s a problem… the data entered into the form apparently can’t be trusted!
Risky Jobs lets users submit resumes Riskyjobs.biz has grown.The company now lets job seekers enter their resumes and contact information into a web form so that our Risky Jobs employers can find them more easily.
First, I couldn’t get a ninja because his phone number is missing, and now my email to this knife juggler has bounced.
I’ve pretty much had it with the bad data in the Risky Jobs resume bank.
The new Risky Jobs Registration form allows job candidates to enter information about themselves so that potential employers can find them.In addition to.
Employers can search the Risky Jobs candidate database and then contact people to possibly hire them...
Below is some of the code for the registration.php script, which displays and processes the user data entered into the form to register a new job candidate.
Annotate what you think is wrong with the code, and how it could be changed to resolve the bad data problem.
Below is some of the code for the registration.php script, which displays and processes the user data entered into the form to register a new job candidate.
Annotate what you think is wrong with the code, and how it could be changed to resolve the bad data problem.
The script checks for empty form fields, which is good, but some of the form fields have more specialized data that must adhere to a certain format.
An email address has a very specific format that we should enforce before accepting form data from the user.
Same thing with a phone number - the user’s form submission shouldn’t be allowed unless we can be certain that their phone number is in the correct format.
What we really need is a way to verify email addresses and phone numbers, the two fields in the form that have a specific format.
For the other fields it’s OK to just make sure they aren’t empty.
There isn’t much else we can check in regard to first and last names, so this code is fine.
Four Fingers McGraw left a dot out of his email address near the end - the form should catch those kind of errors!
Jimmy Swift didn’t provide an area code with his phone number, which the form should’ve demanded.
Why don’t we use some string functions to fix the bad data? Can’t we use str_replace() to add in the missing data?
You can fix some data with string functions but they don’t help much when data must fit a very specific pattern.
For example, if  users submitted their phone numbers using dots to separate the blocks of  digits instead of  hyphens, we could easily write some str_ replace() code to substitute in hyphens in their place But for anything that we can’t possibly know, like the area code of  Jimmy Swift’s phone number, we need to ask the person who submitted the form to clarify.
And the only way we can know that he’s missing an area code is to understand the exact pattern of  a phone number.
What we really need is more advanced validation to ensure that things like phone numbers and email addresses are entered exactly right.
OK, but can’t we still use string functions to do this validation?
String functions really aren’t useful for more than the most primitive of data validation.
Think about how you might attempt to validate an email address using string functions.
But there’s no predefined character length for data like email addresses.
Sure, this could potentially help with phone numbers because they often contain a consistent quantity of  numbers, but you still have the potential dots, dashes, and parentheses to deal with.
Getting back to email addresses, their format is just too complex for string functions to be of  much use.
We’re really looking for specific patterns of data here, which requires a validation strategy that can check user data against a pattern to see if  it’s legit.
Modeling patterns for your form data is at the heart of  this kind of  validation.
Decide what your data should look like Our challenge is to clearly specify exactly what a given piece of  form data should look like, right down to every character.
It’s pretty obvious to a human observer that his number is missing an area code.
But form validation isn’t carried out by humans; it’s carried out by PHP code.
This means we need to “teach” our code how to look at a string of  data entered by the user and determine if  it matches the pattern for a phone number.
Coming up with such a pattern can be a challenge, and it involves really thinking about the range of  possibilities for a type of  data.
Phone numbers are fairly straightforward since they involve 10 digits with optional delimiters.
Email addresses are a different story, but we’ll worry about them a bit later in the chapter.
Q: I’m still not sure I see why I can’t just stick with isset() and empty() for our form validation.
A: These two functions will tell you whether or not someone who submitted a form put data in a text field, but they won’t tell you anything about the actual data they entered.
This would be a huge problem for sites like Risky Jobs, which depends on reliable data to get in touch with job candidates.
Q: If isset() and empty() won’t work, can’t we simply have someone check the data after it goes into the database?
A: You can, but by then it’s often too late to fix the bad data.
If a phone number is missing an area code, we need to ask the user to clarify things by resubmitting the data in that form field.
If you wait until later and check the data once it’s already in the database, you may have no way of contacting the user to let them know that some of their data was invalid.
And since the user probably won’t realize they made a mistake, they won’t know anything’s wrong either.
So, the best plan of action is to validate the users form data immediately when they submit the form.
That way you can display an error message and ask them to fill out the form again.
Q: So then how do you decide whether the data the user entered is valid or not?
A: That depends on what kind of data it is.
Different types of information have different rules that they need to follow: what kind of characters they contain, how many characters they have, what order those characters are in.
So you need to communicate those rules in your PHP code.
Let‘s take a closer look at the rules governing phone numbers...
It’s easy for a human to look and see that Jimmy forgot his area code, but not so trivial making the same “observation” from PHP code.
Write down all the different ways you can think of to represent a phone number.
What are some rules that are reasonable to expect your users to follow when filling out your form? For example, phone numbers should not contain letters.
We could insist on rules such as only digits and all 10 digits must.
Spaces, dashes, right and left parentheses, and sometimes periods can show up in phone numbers.
How can we make rules to cover all of them?
There are some things we know for sure about phone numbers, and we can use those things to make rules.
And even though some people might have clever ways to represent their phone numbers with letters, phone numbers are esentially numbers—10 digits when we include an area code.
Write down all the different ways you can think of to represent a phone number.
What are some rules that are reasonable to expect your users to follow when filling out your form? For example, phone numbers should not contain letters.
It’s even possible to include letters in a phone number, although this is stretching the limits of what we should consider a valid number.
Or we could tell the people filling out the form that their number must look like (555)636-4652
We could break the number into three form fields, one for area code, one for the first three digits, and the final one for the last four digits.
We could insist on rules such as only digits and all 10 digits must be run together.
This is missing digits, a dash, and the dash that’s there seems out of place.
Q: Do I have to use that pattern for matching phone numbers?
A: That’s what we’re using for Risky Jobs because it’s pretty standard, but when you’re designing your own forms you should pick one that makes sense to you.
Just keep in mind that the more commonly accepted the pattern is, the more likely users will follow it.
A: You could, and that would be sufficient if that was the pattern your users expected.
Unfortunately, it’s not really a very good pattern because most people don’t run their phone number together like that when filling out forms.
It’s a bit non-standard, which means users won’t be used to it, and will be less likely to follow it.
A: Sure, but at the same time you want your users to have a good experience.
Q: OK, so couldn’t I use three text fields for the phone number: one for area code, then three digits in the second, and then the last four digits in the third.
But being able to match patterns gives you more flexibility.
And matching patterns is useful for lots more things than just making sure your user enters the right pattern for a phone number, as you’ll see later in this chapter.
Formulate a pattern for phone numbers To go beyond basic validation, such as empty() and isset(), we need to decide on a pattern that we want our data to match.
In the case of  a phone number, this means we need to commit to a single format that we expect to receive from the phone field in our form.
Once we decide on a phone number format/pattern, we can validate against it.
Following is what is likely the most common phone number format in use today, at least for domestic U.S.
Committing to this format means that if  the phone number data users submit doesn’t match this, the PHP script will reject the form and display an error message.
Regular expressions are rules used to match patterns in one or more strings.
The carat means to start matching at the beginning of the string.
The first character in the string must be a digit...
There’s also a more concise way of  writing this same regular expression, which makes use of  curly braces.
Match patterns with regular expressions PHP offers a powerful way to create and match patterns in text.
You can create rules that let you look for patterns in strings of  text.
These rules are referred to as regular expressions, or regex for short.
A regular expression represents a pattern of  characters to match.
With the help of regular expressions, you can describe in your code the rules you want your strings to conform to in order for a match to occur.
As an example, here’s a regular expression that looks for 10-digits in a row.
This pattern will only match a string that consists of  a 10 digit number.
If  the string is longer or shorter than that, it won’t match.
If  the string contains anything but numbers, it won’t match.
It’s true, regular expressions are cryptic and often difficult to read...
Power often comes at a cost, and in the case of  regular expressions, that cost is learning the cryptic syntax that goes into them.
You won’t become a master of  regular expressions overnight, but the good news is you don’t have to.
You can do some amazingly powerful and useful things with regular expressions, especially when it comes to form field validation, with a very basic knowledge of  regular expressions.
Besides, the more you work with them and get practice breaking them down and parsing them, the easier they’ll be to understand.
These metacharacters are cool, but what if  you really want a specific character in your regex? Just use that character in the expression.
For example, if  you wanted to match the exact phone number.
Build patterns using metacharacters Being able to match digits in a text string using \d is pretty cool, but if that’s all the functionality that regular expressions provided, their use would be sorely limited.
Just matching digits isn’t even going to be enough for Risky Jobs phone number validation functionality, as we’re going to want to be able to match characters like spaces, hyphens, and even letters.
Luckily, PHP’s regex functionality lets you use a bunch more special expressions like \d to match these things.
Let’s take a look at some of  the most frequently used regex metacharacters.
As you saw on the previous page, this metacharacte r.
Keep in mind, on its own, \d matches just one digit, so if  you wanted to match a two-digit number, you’d n.
Looks for any alphanumeric character—in other words, either a letter or a number.
It looks for the beginning of  a string, so you.
Metacharacters let us describe patterns of text within a regular expression.
Match each different phone number regular expression with the phone number that it matches.
Match each of  the phone number regular expressions with the phone number that it matches.
This is the pattern Risky Jobs needs to match phone numbers in the form ###-###-####
This pattern is all digits, so it can only match a phone number with no spaces or hyphens.
Surfing can be quite risky, especially when you work as professional shark bait!
This is the phone number regular expression - be it!
This is the phone number regular expression - be it!
A quantifier specifies how many times a metacharacter should appear.
Sometimes people add additional digits to their telephone numbers, like a four-digit extension at the end.
Is there any way we can match these patterns, too?
So, if  we wanted to match those optional digits at the end of  our phone number, we could use the following pattern:
The preceding character or metacharacter must appear once or not at all.
Character classes let you match characters from a specific set of values.
You can look for a range of  digits with a character class.
And you can add a caret to look for everything that isn’t in the set.
To indicate that a bunch of  characters or metacharacters belongs to a character class, all you need to do is surround them by square brackets, []
Let’s take a look at a few examples of character classes in action:
A character class is a set of rules for matching a single character.
This carat has a different meaning when it’s used inside a character class.
Instead of  saying, “the string must start with...”, the caret means “match everything except...”
This will match everything except b, c, d, e, or f.
In other words, the string can’t contain any other characters that don’t belong to the phone number.
Q: So character classes let you specify a range of characters that will match the text string.
A: Yes, a character class lets you specify in your regular expression that any member of a specified set of characters will match the text string, instead of just one.
For example, the character class [aeiou] will match one instance of any lowercase vowel, and the class [m-zM-Z] will match one instance of any letter in the second half of the alphabet, lowercase or uppercase.
Q: Don’t I need to put spaces or commas in between the characters or ranges I specify in character classes?
A: No, if you do that, those extra characters will be interpreted as part of the set of characters that should match the text string.
For example, the character class [m-z, M-Z] would match not only uppercase and lowercase letters from m to z, but also a comma or space, which is probably not what you want.
Q: What if I want to match a character in a character class more than once? Like one or more vowels consecutively.
The expression /[aeiouAEIOU]+/ will match one or more vowels in a row.
Q:I thought quantifiers only applied to the character that immediately preceded them.
A: Usually that’s the case, but if a quantifier directly follows a character class, it applies to the whole class.
And if you want to make a quantifier apply to a whole series of characters that aren’t in a character class, you can surround these characters with parentheses to indicate that they should be grouped together.
As an example, the regular expression /(hello)+/ will match one or more consecutive instances of the word “hello” in a text string.
Q: What if I wanted to match two different spellings of a word, like “ketchup” or “catsup”?
A: You can use the vertical-pipe character (|) in your regular expressions to indicate a set of options to choose from.
Fine-tune patterns with character classes With the help of  character classes, we can refine our regular expression for phone numbers so that it won’t match invalid digit combinations.
Instead, both the opening and closing parentheses need to be preceded by backslashes to indicate that they should be interpreted as actual parentheses:
What about putting characters like periods or question marks in a regular expression.
If I type those in, won’t PHP think they’re metacharacters or quantifiers and screw up processing my regex?
If you want to use reserved characters in your regular expression, you need to escape them.
In regular expression syntax, there are a small set of  characters that are given special meaning, because they are used to signify things like metacharacters, quantifiers, and character classes.
If  you want to use these characters in your regular expression to signify their literal meaning instead of  the metacharacters or quantifiers they usually represent, you need to “escape” them by preceding them with a backslash.
For example, if  you wanted to match parentheses in a phone number, you couldn’t just do this:
Come up with a string that will match each pattern shown.
Suppose we want to expand the Risky Jobs validation scheme for phone numbers to allow users to submit their numbers in a few more formats.
Your pattern should only allow digits, parentheses, spaces, and dashes.
Come up with a string that will match each pattern shown.
Suppose we want to expand the Risky Jobs validation scheme for phone numbers to allow users to submit their numbers in a few more formats.
Your pattern should only allow digits, parentheses, spaces, and dashes.
I’ve pretty much had it with the bad data in the Risky Jobs resume bank.
What good do these expressions do me if we don’t use them in some way?
Risky Jobs needs to put regular expressions to work validating form data!
You can put the actual pattern in the function like this, but usually it’s best to store it in a variable.
The function expects a string, which means the regex should be surrounded by single quotes.
The string you are checking for a match goes here.
Here’s an example of  the preg_match() function in action, using a regex that searches a text string for a four-character pattern of  alternating uppercase letters and digits:
When regexes are passed to preg_match(), they should be enclosed in quotes.
We can take advantage of  the preg_match() function to enable more sophisticated validation functionality in PHP scripts by building an if statement around the return value.
The preg_match() function is nested in the condition, so its result determines what code will run.
If the match is successful, preg_match() returns true, which signifies to PHP that the condition is true.
If the match is not successful, preg_match() returns false, which makes the condition evaluate to false.
Check for patterns with preg_match() We haven’t been developing patterns just for the fun of  it.
You can use these patterns with the PHP function preg_match()
This function takes a regex pattern, just like those we’ve been building, and a text string.
It returns false if  there is no match, and true if  there is.
Rewrite the highlighted portion of the Risky Jobs PHP script for checking the Registration form data below to validate the text entered into the phone field using preg_match() instead of empty()
Use the regex you created earlier in the preg_match() function.
Rewrite the highlighted portion of the Risky Jobs PHP script for checking the Registration form data below to validate the text entered into the phone field using preg_match() instead of empty()
Use the regex you created earlier in the preg_match() function.
Instead of empty(), we use a preg_match to validate the phone number.
The echo needs to be changed a bit, since we’re not only checking to make sure data is entered, but that it matches a standard phone number pattern.
I got an error and then entered my entire phone number.
Download the registration.php script from the Head First Labs site at www.
Then modify the registration.php script so that it uses the preg_match() function to validate phone numbers against the phone number regular expression.
Make sure to tweak the error message so that users know the phone number is invalid, not just empty.
Upload the changed script to your web server, and then open it in a web browser.
Try entering a few phone numbers with varying formats, and notice how the script catches the errors.
The complete source code for the Risky Jobs application is available for download from the Head First Labs web site:
The script now displays an error message when a phone number is entered incorrectly, in this case with periods instead of hyphens.
When we find an unwanted character, we want to turn it into this.
If our regex matches multiple patterns for the phone number, isn’t the text going to be in all different formats in our database? That’s not good.
Just because you’re permitting data to be input in all different formats doesn’t necessarily mean you want your data stored in all those formats.
Luckily, there’s another regex function that’ll let us take the valid phone number data submitted by Risky Jobs’s users and make all of  it conform to just one consistent pattern, instead of  four.
In addition to determining whether a given pattern matches a given string of  text, it allows you to supply a replacement pattern to substitute into the string in place of  the matched text.
It’s a lot like the str_replace() function we’ve already used, except that it matches using a regular expression instead of  a string.
Standardize the phone number data entered into the Risky Jobs form by writing in each of the following numbers in the phone column of the database table below.
Make sure to use a format that stores as little data as possible to represent a user’s phone number.
Standardize the phone number data entered into the Risky Jobs form by writing in each of the following numbers in the phone column of the database table below.
Make sure to use a format that stores as little data as possible to represent a user’s phone number.
The cleanest way to store a phone number is to strip out everything but the numeric digits.
This will match phone numbers that fall into these four patterns:
While these formats are easily interpreted by people, they make it difficult for SQL queries to sort results the way we want.
Those parentheses will most likely foil our attempts to group phone numbers by area code, for example, which might be important to Risky Jobs if  we want to analyze how many of  the site’s users came from a specific geographical location.
To make these kinds of  queries possible, we need to standardize phone numbers to one format using preg_replace() before we INSERT data into the database.
Our best bet is to get rid of  all characters except numeric digits.
That way, we simply store 10 digits in our table with no other characters.
We want our numbers to be stored like this in the table:
This leaves us with four characters to find and replace.
We want to find and remove open and closing parentheses, spaces, and dashes.
We know we’re looking for any one of  a set, so we can use a character class.
Standardize the phone number data Right now, Risky Jobs is using the following regular expression to validate the phone numbers users submit via their registration form:
We store the results of our find-and-replace in this new phone number variable.
Get rid of the unwanted characters Now that we have our pattern that finds those unwanted characters, we can apply it to phone numbers to clean them up before storing them in the database.
But how? This is where the preg_replace() function really pays off.
The twist here is that we don’t want to replace the unwanted characters, we just want them gone.
So we simply pass an empty string into preg_replace() as the replacement value.
Here’s an example that finds unwanted phone number characters and replaces them with empty strings, effectively getting rid of  them:
All of these phone number formats are considered valid, and are accepted by the Registration form.
Each phone number is standardized into this format so that the phone numbers all have an identical format within the database.
I don’t know, it seems kinda like overkill to worry about having 10 digit strings in our database.
Couldn’t we just insist that users type that in in the first place?
Sure, but it would end up causing problems later since phone number queries won’t work as expected.
Most users are accustomed to entering phone numbers with some combination of  dashes (hyphens), parentheses, and spaces, so attempting to enforce pure numeric phone numbers may not work as expected.
It’s much better to try and meet users halfway, giving them reasonably flexible input options, while at the same time making sure the data you store is as consistent as possible.
Besides, we’re only talking about one call to preg_replace() to solve the problem, which just isn’t a big deal.
If  we were talking about writing some kind of  custom function with lots of  code, it might be a different story.
But improving the usability and data integrity with a single line of  code is a no-brainer!
Test Drive Clean up phone numbers in the Registration script.
Modify the registration.php script to clean up phone numbers by adding the following lines of  code to the script, right after the line that thanks the user for registering with Risky Jobs:
Upload the script to your web server, and then open it in a web browser.
Notice how the regular expression and preg_replace() get rid of the extra characters.
The phone number is crunched down to just the numbers - no extra characters!
Similar to phone numbers, email addresses have enough of a format to them that we should be validating for more than just being empty.
Just like with validating phone numbers earlier, we first need to determine the rules that valid email addresses must follow.
Then we can formalize them as a regular expression, and implement them in our PHP script.
So let’s first take a look at what exactly makes up an email address:
These will contain alphanumerics, where LocalName is at least one character and DomainPrefix is at least two characters.
See if you can come up with a regular expression that is flexible enough to match the email addresses to the right.
I can’t believe this stupid form lets people enter email addresses that don’t even work!
This would allow any alphanumeric character in the local name, but unfortunately, it doesn’t include characters that are also legal in email addresses.
Believe it or not, valid email addresses can contain any of  these characters in the LocalName portion, although some of  them can’t be used to start an email address:
The rest of the characters can be any of these…
All these characters can appear in the LocalName part of an email address.
This won’t match every single valid LocalName, as we’re still skipping some of  the really obscure characters, but it’s very practical to work with and should still match the email addresses of  most of  Risky Jobs users.
Matching email addresses can be tricky It seems like it should be pretty simple to match email addresses, because at first glance, there don’t appear to be as many restrictions on the characters you can use as there are with phone numbers.
For example, it doesn’t seem like too big of  a deal to match the LocalName portion of  an email address (everything before the @ sign)
Since that’s just made up of  alphanumeric characters, we should be able to use the following pattern:
We just use the same pattern we used for the local name to validate the domain name...
That would work for part of the domain, the prefix, but it wouldn’t account for the suffix.
While the domain prefix can contain pretty much any combination of alphanumerics and a few special characters, just like the LocalName, the restrictions on domain suffixes are much more stringent.
Most email addresses end in one of  a few common domain suffixes: .com, .edu, .org, .gov, and so on.
We’ll need to make sure email addresses end in a valid domain suffix, too.
Q: What if I want to allow every possible valid email address? A: You can, and if it makes sense for your web site you certainly should.
But sometimes it’s best to take commonly accepted formats and not necessarily accept every possible variation.
Validation is really a trade-off between what’s allowed and what is practical to accept.
If you do want to implement more robust email validation on your site, you can find some great open source (i.e., free) PHP code here: http://code.google.com/p/php-email-address-validation/
Q: Won’t people get angry at me if they have an email address I refuse to validate?
A: Possibly, but most people willl not have crazy email addresses.
Validation is often a trade-off between what’s allowed and what is practical to accept.
Instead of  keeping track of  all the possible domains and having to change our code if  a new one is added,  we can check the domain portion of  the email address using the PHP function checkdnsrr()
This function connects to the Domain Name System, or DNS, and checks the validity of  domains.
The Domain Name System is a distrubuted data service that provides a worldwide directory of domains and their IP addresses.
Domain suffixes are everywhere In addition to super-common domain suffixes that you see quite frequently, like .com and .org, there are many, many other domain suffixes that are valid for use in email addresses.
Other suffixes recognized as valid by the Domain Name System (DNS) that you may have seen before include .biz and .info.
In addition, there’s a list of  suffixes that correspond to different countries, like .ca for Canada and .tj for Tajikistan.
Here is a list of  just a few possible domain suffixes.
So do we need to keep a list of them and see if there’s a match?
Even I wouldn’t want to juggle all of those domains.
If you’re running PHP on a Windows server, this command won’t work for you.
This exec commands calls an external program running on the server to check the domain.
Just for fun, try echoing $line just after the foreach.
Use PHP to check the domain PHP provides the checkdnsrr() function for checking whether a domain is valid.
This method is even better than using regular expressions to match the pattern of  an email address, because instead of  just checking if  a string of  text could possibly be a valid email domain, it actually checks the DNS records and finds out if  the domain is actually registered.
This is only an issue if your web server is Windows.
If you’re using a Windows computer to build your web site, but you’re actually posting it to a UNIX/Linux server, then this is not a problem.
Use preg_match() to determine whether the LocalName portion of  our email address contains a valid pattern of  characters.
The email must start with an alphanumeric character, and then can contain any number of alphanumerics and certain special characters.
This time, we’ll also search for an at symbol (@), to make sure our email address contains one before the domain.
Note that there’s no dollar sign at the end of this regex, as there will be characters following the @
If  validation of  the LocalName fails, echo an error to the user and reload the form.22
If  validation of  the LocalName succeeds, pass the domain portion of  the text string users submitted to checkdnsrr()
If  checkdnsrr() returns 0, then the domain is not registered, so we echo an error to the user and reload the form.
If  checkdnsrr() returns 1, then the domain is registered, and we can be fairly confident that we’ve got a valid email address.
We can proceed with validating the rest of  the fields in the form.
Email validation: putting it all together We now know how to validate both the LocalName portion of  an email address using regular expressions, and the domain portion of  an email address using checkdnsrr()
Let’s look at the step-by-step of  how we can put these two parts together to add full-fledged email address validation to Risky Jobs’s registration form:
Below is new PHP code to validate users’ email addresses, but some pieces have disappeared.
Fill in the blanks to get the code up and running.
Below is new PHP code to validate users’ email addresses, but some pieces have disappeared.
Fill in the blanks to get the code up and running.
Quantifiers allow you to control how many times a character or set of characters can appear in a row.
You can specify a set of characters to allow in your pattern using a character class.
Our regex for matching the LocalName portion of an email address, ending in an at symbol.
If you’re on a Windows server, don’t forget to include the code for win_checkdnsrr(), and then call it here.
Nothing to do now but add up all the money I just made.
With the help of validation in the Risky Jobs Registration form, it’s no longer a problem getting in touch with promising job candidates, and filling job openings in record time.
Use the code on the facing page to add email validation to the registration.php script.
Then upload the script to your web server, and open it in a web browser.
Try submitting an invalid email address, and notice how the new regular expression code rejects the form submission, and displays an error message to explain what happeened.
An error message points out that the user’s email address is invalid (it has a space instead of an @ symbol)
Your PHP & MySQL Toolbox Looking for patterns in text can be very handy when it comes to.
Here are some of the PHP techniques used to validate data with the help of regular expressions:
Rules that are used to match patterns of text in strings.
Character class A set of rules for matching a single character within a regular expression.
The function does a find-and-replace using a regular expression for the find, and replacing with a string you provide it.
This PHP function checks a domain name to see if it actually exists.
This is handy when validating an email address because you want to make sure that the domain part of the email is real.
OK, let’s try crossing your columns and tilting your primary key just a bit to the left.
Sure, we all know the power of  a good query and a bunch of juicy results.
Sometimes it’s helpful to cast data in a different light, a more visual light.
Robots have already been let loose in the virtual world and there isn’t much to stop them other than some PHP coding vigilance.
The robots are spam bots, which troll the Web for input forms that allow them to inject advertisements.
These robots are chillingly efficient and care nothing about the intended usage of  the forms they attack.
Their one and only goal is to overrun your content with theirs in a bloodthirsty conquest of  ad revenue for their masters.
Sadly, the Guitar Wars high score application has fallen prey to the bots.
Spam bots excel at mindless repetition, in this case filling out and submitting form after form of  Guitar Wars high score data that really contains ads instead of  scores.
All web forms are at risk of attack from spam bots.
It’s nothing personal; the bots just want access to your users’ eyeballs for ad revenue.
Add score, add score, add score, add score, add score, add score...
However, the human moderator is now being completely overwhelmed by the huge volume of  spam bot posts, making it tough to sift through and approve legitimate high scores.
Human moderation is a great feature, but humans are at a disadvantage when facing an automated adversary that never gets tired.
I can’t possibly moderate all these posts, most of which appear to be bogus.
We really need a way to prevent robots from being able to submit scores—head them off  at the pass, so to speak.
But this involves somehow discerning between an automated piece of  software and a human with a real brain...
Our fearless Guitar Wars moderator has found himself in a losing battle with bots that never tire of posting bogus spam scores.
Write down three questions you would ask to distinguish between a real human and the artificial brain of  a robot:
We need to separate man from machine In order to figure out how to detect a real human on the other side of  the Guitar Wars Add Score page, you have to first assess what exactly a spam bot is doing when filling out the form with bogus data.
The problem with the Add Score form is that it does nothing to prevent automated submissions, meaning that any reasonably crafty bot programmer can create a bot that repeatedly fills the form with ad data and submits it.
Sure, it never makes it to the front page of  the Guitar Wars site thanks to the moderation feature, but it in many ways renders moderation useless because the human moderator is left manually removing hundreds of  bogus ad posts.
The form needs a new verification field that must be entered successfully in order for the score to submit.
And the specific verification of  this field needs to be something that is easy for a real human but difficult for a machine.
The Add Score form needs a new field that requires human verification before allowing a high score to be submitted.
The Guitar Wars database is being inundated with bogus high scores because the spam bots are abusing the Add Score form.
It’s nothing for a spam bot script to repeatedly blast a form with data tens, hundreds, even thousands of times...
Following are some ideas for form fields that could potentially be used to prevent spam bots from submitting forms.
Circle the form fields you think would simply and successfully allow only human form submissions, making sure to annotate why.
Following are some ideas for form fields that could potentially be used to prevent spam bots from submitting forms.
Circle the form fields you think would simply and successfully allow only human form submissions, making sure to annotate why.
Too easy to guess - even with just a 50% success rate through guessing, you’d end up with a ton of bogus high score posts.
Definitely difficult for robots but potentially difficult for some humans as well.
Not everyone knows Elvis loved peanut butter and banana sandwiches.
This would also require a hefty database of trivia questions and answers.
Excellent bot stopper but technically difficult and expensive to implement.
Not bad, assuming the pass-phrase letters appear as an image and not text, but potentially thwarted by bots smart enough to use optical character recognition (OCR)
Simple and effective, most bots aren’t smart enough to parse mathematical expressions - let’s just hope most humans are!
Deceptively effective - bots struggle at interpreting the content of images.
But it does require a database of images and answers.
Remember Fang, the dog that was abducted by aliens earlier in the book?
We can defeat automation with automation A test to verify that the entity on the other side of  a form is a real person is known as CAPTCHA, which stands for Completely Automated Public Turing Test to Tell Computers and Humans Apart.
That’s a long-winded way of referring to any “test” on a form that is ideally passable only by a human.
Lots of  interesting CAPTCHAs have been devised, but one of  the most enduring involves generating a random pass-phrase that the user must enter.
To help prevent craftier bots with optical character recognition (OCR) from beating the system, the pass-phrase letters are distorted or partially obscured with random lines and dots.
Since the letters in the pass-phrase are randomly generated, the phrase is different every time the form is displayed.
A CAPTCHA is a program that protects a web site from automated bots by using a test of some sort.
Random lines and dots help to obscure the text just enough to thwart optical character recognition, while still allowing humans to discern it.
A normal text field is used to allow the user to enter the CAPTCHA pass-phrase.
A CAPTCHA form field is just like any other form field except that its whole purpose is to prevent a form from being submitted unless the CAPTCHA test has been successfully completed.
So unlike other form fields, which typically pass along data to the server upon submission, a CAPTCHA field is verified and used to control the submission process.
Since the spam bot can’t make out the pass-phrase, all it can do is guess.
Identifying the pass-phrase successfully is easy for a real human.
It’s very important for the CAPTCHA pass-phrase to be displayed on the form as an image and not just text; otherwise bots would have a much easier time figuring out the text.
Q: That image CAPTCHA with the dog is really cool.
Just keep in mind that you’ll need to maintain a database of images and descriptions of what they are, because one of the keys to any successful CAPTCHA is variety.
A good CAPTCHA should have a deep enough repository of content that a form rarely displays the same test twice.
That’s the benefit of pass-phrase CAPTCHA: since the pass-phrase is generated from random letters, it’s very unlikely the exact same test will appear twice to any given user, even with lots of repeated attempts.
Q: How does CAPTCHA impact the visually impaired? What if they can’t pass a visual CAPTCHA test?
A: Visual CAPTCHAs aren’t the best answer for users who are visually impaired.
An ideal CAPTCHA solution might involve an audio alternative to visual CAPTCHAs.
For example, there is an audio CAPTCHA where a series of numbers are read aloud, after which the user must enter them to pass the test.
But the same problem exists, where crafty bots use voice recognition to defeat such CAPTCHAs, which is why some of them use highly distorted audio that sounds a little creepy.
CAPTCHAs in that they require a database of audio clips and their respective answers.
Such services are excellent in terms of offering the latest in CAPTCHA technology, but they typically don’t integrate quite as seamlessly as a custom CAPTCHA that is tailored specifically to your web application.
Q: But there are also people who have poor eyesight and are also hearing impaired.
A: Ultimately, CAPTCHA is all about weighing the reward of thwarting spam bots against the risk of alienating some users.
Similar to viruses and anti-virus software, spam bots and CAPTCHAs will likely continue to play a cat and mouse game where bots are created to defeat a certain CAPTCHA, requiring a more sophisticated CAPTCHA, and on and on.
Caught in the crossfire are users who may be left out due to the limited accessibility of some CAPTCHAs.
It’s up to the individual web developer to weigh the risks of a bot attack against the potential loss of users who may not be able to access parts of the site protected by CAPTCHA.
If it’s any consolation, keep in mind that the most sophisticated bots typically aim for large targets with huge ad revenue upside, meaning that you may not encounter a truly evil bot until your site grows to the point of being a big enough target for high-powered bots.
With the help of  a graphics library called GD (Graphics Draw), our PHP scripts can dynamically generate images in popular formats such as GIF, JPEG, and PNG, and either return them to a web browser for display or write them to a file on the server.
This capability of  PHP is extremely important because there is no notion of  being able to “draw” on a web page purely through HTML.
OK, so a CAPTCHA pass-phrase has to be displayed as an image with random lines and dots.
That’s fine, but how in the world can that be created with PHP? PHP can only generate HTML code, right?
This built-in function converts a number to its ASCII character equivalent.
As an example, the number 97 is the ASCII code for the lowercase letter 'a'
Generate the CAPTCHA pass-phrase text Before we can even think about the graphical side of  a pass-phrase CAPTCHA, we need to figure out how to generate the random pass-phrase itself, which begins as a sequence of  text characters.
A pass-phrase can be any number of characters, but somewhere in the range of  six to eight characters is usually sufficient.
We can use a constant for the pass-phrase length, which allows us to easily change the number of  pass-phrase characters later if  need be.
So how exactly do we go about generating a random string of  text that is six characters long? This is where two built-in PHP functions enter the story: rand() and chr()
The rand() function returns a random number in the range specified by its two arguments, while chr() converts a numeric ASCII character code into an an actual character.
We only need ASCII character codes in the range 97122, which map to the lowercase letters a-z.
If  we generate a code in this range six times, we’ll get a random six-character pass-phrase of  lowercase letters.
The rand() function returns a random integer within a certain range.
The pass-phrase is constructed one random character at a time.
This code will eventually go into its own reusable script file, captcha.php.
The size of the CAPTCHA image is stored in constants to make it easier to adjust the size later if desired.
Drawing the CAPTCHA image involves calling several functions in the GD library, all of  which operate on an image in memory.
In other words, you create an image in memory, then you draw on it, and then when you’re all finished, you output it to the browser so that it can be displayed.
This code creates colors to be used by the other GD functions.
Drawing a dynamic image in PHP requires using GD library functions.
Newly created images start off with a blank black background.
We need a white background to draw the CAPTCHA graphics on.
Draw the text in a darker color over the lines and dots.
Finally, return the image as a PNG to the browser.
Once the browser receives the image, it can display it using a normal <img> HTML tag.
Inside the GD graphics functions The magic behind CAPTCHA image creation is made possible by the GD graphics library, which you’ve already learned offers functions for dynamically drawing graphics to an image using PHP code.
Let’s examine some of  these functions in more detail as they relate to generating a CAPTCHA image.
The image starts out solid black, so you’ll typically want to fill it with a background color, such as white, before drawing anything.
The first argument is the image resource identifier, followed by three arguments representing the three numeric components of  the RGB (Red-Green-Blue) color value.
The return value is a color identifier that can be used to specify a color in other drawing functions, often as the last argument.
The function returns an image identifier that is required by other drawing functions to actually draw on the image.
The return value is a color identifier that you can use in other drawing functions to control the color being used, such as the color of CAPTCHA text.
The identifier of the image the color will be used with.
The red, green, and blue components of the color, in this case black.
This code creates an image that is 100x25 in size thanks to our constants.
The coordinates are specified relative to the upper-left corner of  the image, and the line is drawn in the color passed as the last argument to the function.
Coordinates start at 0,0 in the upper left corner of  the image, and increase to the right and down.
Like most GD functions, the pixel is drawn using the color that is passed as the last argument to the function.
The coordinate system for most GD function calls starts in the upper-left corner of the image and increases down and to the right.
The two points and the color are provided as the second through sixth arguments of  the function, following the image identifier argument.
The XY coordinate of the pixel, relative to the upper-left corner of the image, which in this case ends up being a random location within the CAPTCHA image.
The XY coordinate of the start of the line, in this case along the left edge of the CAPTCHA image.
The XY end point of the line, which here lies on the right edge of the CAPTCHA image.
The XY coordinates of the start and end points - here it fills the entire CAPTCHA image.
Either way, the end result is an image that can be used with the HTML <img> tag for display on a web page.
If  you elect to generate a PNG image directly to memory (i.e., no filename), then you must also call the header() function to have it delivered to the browser via a header.
A perfect circle is just an ellipse with an equal width and height.
The color of  the ellipse/circle is passed as the last argument to the function.
An image can be output directly to the browser or to an image file on the server.
The width and height of the ellipse - set these the same to draw a perfect circle.
The function returns true or false depending on whether the image was successfully created.
The image identifier that you’ve been using in other draw functions.
Ellipses aren’t used in the CAPTCHA image but they’re still quite handy!
Just call it after you output the image with imagepng() to clean up.
Cleaning up after your images is a good idea to keep the server from wasting resources after you’re finished with them.
In addition to the image resource identifier, you pass the function the size of  the font as a number (1–5), along with the coordinate of  the upper left corner of  the string, the string itself, and then the color.
The function is called with the same arguments as imagestring()
Text drawn with imagestringup() is rotated 90 degrees counter-clockwise so that it appears vertically.
The built-in font is adequate for basic text drawing but is limited in terms of its size.
Always try to pair up a call to this function with each image that you create so that all images are destroyed.
The XY coordinate of the upper-left corner of the string.
Always free up images in memory with imagedestroy() once you’ve output them.
Not only do you get to use any font of  your choosing, but you also get more flexibility in the size of  the font and even the angle at which the text is drawn.
Unlike imagestring(), the coordinate passed to this function specifies the “basepoint” of  the first character in the text, which is roughly the lower-left corner of  the first character.
This function does require you to place a TrueType font file on your server, and then specify this file as the last argument.
TrueType font files typically have a file extension of  .ttf.
It’s an online font-building community including a web-based tool for creating custom fonts.
Highly customized text drawing requires a TrueType font and the imagettftext() function.
Unlike imagestring(), the coordinate used to draw text with imagettftext() is at the lower-left corner of the text.
Drawing text with a font The imagestring() function is easy to use for drawing but it’s fairly limited in terms of  the control you have over the appearance of  the text.
To really get a specific look, you need to use a TrueType font of  your own.
The CAPTCHA pass-phrase image is a good example of  this need, since the characters must be drawn fairly large and ideally in a bold font.
To get such a custom look, you need the help of  one last GD graphics function, which draws text using a TrueType font that you provide on the server.
Use the imagettftext() function to draw highly customized text with your own TrueType font.
You must place the TrueType font file on your web server so that the GD graphics library can find it.
The XY coordinate of the lower left corner of the text.
The angle of the font, specified in counter-clockwise degrees (0 is normal text)
Match each piece of  PHP graphics drawing code to the graphical image that it generates.
Match each piece of  PHP graphics drawing code to the graphical image that it generates.
Generate a random CAPTCHA image Putting all the CAPTCHA code together results in the brand-new captcha.
Create constants to hold the number of characters in the CAPTCHA and the width and height of the CAPTCHA image.
Although you could store the encrypted pass-phrase in the database, it’s simpler to just stick it in a session variable - we have to store it so the Add Score script can access it.
Generate a PNG image based on everything that has been drawn.
The PNG image is actually delivered to the browser through a header.
Some versions of the GD graphics library require a relative path to the font file, such as.
Finish up by destroying the image from memory (it still gets sent to the browser via the header)
The captcha.php script is completely self-contained - you can open it in your browser and view the image that it generates.
Test Drive Create the CAPTCHA script and try it out.
Upload the script to your web server, and then open it in a web browser.
You’ll immediately see the CAPTCHA image with the random pass-phrase in the browser.
Refreshing the CAPTCHA script results in a new random pass-phrase image being generated.
Each CAPTCHA image generated consists of six random characters with some extra lines and dots for added “background noise.”
Returning sanity to Guitar Wars Now that we’ve conjured up your inner PHP artist with some GD functions and a CAPTCHA image, it’s time to use the CAPTCHA image to rescue the Guitar Wars moderator from the spam bot assault.
There are actually a few steps involved in solving the bot problem with a pass-phrase CAPTCHA.
The good news is we’ve already knocked out two of  them: generating the random pass-phrase and drawing the CAPTCHA image.
Let’s knock out the remaining steps to make Guitar Wars officially bot-free!
These robots are making me crazy! I need help stopping them now!
Display the CAPTCHA image on the Guitar Wars Add Score form and prompt the user to enter the pass-phrase.
The Guitar Wars moderator is so frazzled that he’s lashing out at imaginary robots - he needs a solution now!
Complete Step 3 of the Guitar Wars Add Score CAPTCHA by writing the HTML code for a new Verification text input form field that prompts the user to enter the CAPTCHA pass-phrase.
Make sure to give it a label, and follow it with an <img> tag that displays the CAPTCHA image generated by the captcha.php script.
The CAPTCHA image is displayed on the form next to a verification text input field.
The “source” of the image is the name of the PHP script that dynamically generates the CAPTCHA image.
This works because the captcha.php script returns an image directly to the browser via imagepng() and a header.
Complete Step 3 of the Guitar Wars Add Score CAPTCHA by writing the HTML code for a new Verification text input form field that prompts the user to enter the CAPTCHA pass-phrase.
Make sure to give it a label, and follow it with an <img> tag that displays the CAPTCHA image generated by the captcha.php script.
Display the CAPTCHA image on the Guitar Wars Add Score form and prompt the user to enter the pass-phrase.
A <label> tag is used to label the new Verification text field.
This text field is where the user will enter the pass-phrase revealed in the CAPTCHA image.
Add CAPTCHA to the Add Score script On the client side of  the equation, the addscore.php script contains the new Verification text field with the CAPTCHA image beside it.
The most important change, however, is the new if statement in the Add Score script (Step 4) that checks to make sure the user-entered pass-phrase matches the CAPTCHA pass-phrase.
Check to make sure the user entered the correct CAPTCHA pass-phrase.
Change the addscore.php script so that it has a new Verification form field, as well as using the captcha.php script to display a CAPTCHA image.
Also add the code to check and make sure the user entered the correct pass-phrase before adding a score.
Upload both scripts to your web server, and then open addscore.php in a web browser.
Try to add a new score without entering a CAPTCHA pass-phrase.
Now try again after entering the pass-phrase displayed in the CAPTCHA image.
A constantly changing CAPTCHA pass-phrase makes it tough for automated bots to spam the Guitar Wars form.
Our human moderator finally gets some peace thanks to a little automation of our own!
Q: Can I use the GD functions to create images in formats other than PNG?
The imagegif() and imagejpeg() functions work very similarly to imagepng() but create GIF and JPEG images, respectively.
Q: Can the image creation functions create images with transparency?
Q: When using imagepng() to output a PNG image directly to the client browser, where is the .png file for the image stored, and what is its name?
A: There is no .png file for the image, and the reason is because the image isn’t stored in a file.
Instead, the imagepng() function generates a binary PNG image in memory on the server and then delivers it directly to the browser via a header.
Since the image data is created and sent directly to the browser, there’s no need to store it in an image file.
Q: Is that why I’m able to put the name of the CAPTCHA script directly in the src attribute of an <img> tag?
Referencing a PHP script in the src attribute of an <img> tag, as was done with the captcha.php script in Guitar Wars, results in the image being delivered directly by the script.
This is in contrast to the normal way the <img> tag works, where the name of an image file is specified in the src attribute.
Since the script is sourcing the image directly to the browser through a header (by way of the imagepng() function), no file is involved.
And the browser knows to connect the image from the header to the <img> tag because the script is specified in the src attribute.
All web forms are at risk of attack from spam bots, but all spam bots are at risk from clever PHP programmers who use techniques such as CAPTCHA to thwart them.
To output a PNG image to the browser or to a file on the server, call the imagepng() GD function.
When you’re finished working with an image, call imagedestroy() to clean up after it.
However, users want a little more out of  the mismatch feature of  the site, primarily the “five degrees of  opposability” that they’ve been hearing about.
Mismatch users want more than just a list of  topics for their ideal mismatch—they want some visual context of  how those topics break down for each major category of  “mismatchiness.”
I see a bunch of topics, but I don’t really know how we mismatch in different categories.
I was sold on the “five degrees of opposability,” but I can’t even see how they relate to my mismatch.
The list of mismatched topics is interesting and all, but users really want a more visual perspective on how they mismatch with each other.
Mismatch’s “five degrees of opposability” involves measuring mismatched topics by category.
Belita is a visual person, and wants to see more than just a list of topics for her perfect mismatch.
Charting mismatchiness If  you recall, Mismatch includes a categorized questionnaire where users selcet Love or Hate for a variety of  topics.
These responses are what determine the topics for an ideal mismatch.
When presenting a user’s ideal mismatch, the My Mismatch script displays a list of  mismatched topics that it builds as an array from the Mismatch database.
But users now want more than a list of  topics...
We somehow need to turn this list of topics into a bar graph of categories.
Draw a bar graph for the Mismatch data that visually shows the “five degrees of opposability” for Belita and Jason.
Although there are lots of different ways you could visualize the mismatch data, a bar graph isn’t a bad option since the categories have an equal number of topics each.
Each bar represents the number of mismatches in a given category of topics.
The height of a bar reflects the magnitude of the value for a heading.
The range of a bar graph establishes the possible values for each bar.
Storing bar graph data When it comes down to it, the data behind a bar graph is perhaps even more important than the graphics.
Knowing that a bar graph is really just a collection of  headings and values, we can view the data for a bar graph as a twodimensional array where the main array stores the bars, while each sub-array stores the heading/value pair for each bar.
Each sub-array stores the heading and value for a given bar in the bar graph.
Each item in the main array corresponds to a single bar.
Draw a bar graph for the Mismatch data that visually shows the “five degrees of opposability” for Belita and Jason.
The database schema for the Mismatch application is shown below.
Circle all of the pieces of data that factor into the dynamic generation of the “five degrees of opposability” bar graph, making sure to annotate how they are used to create the graph.
Q: Does a bar graph have to be fed with a two-dimensional array of data?
But keep in mind that each bar in a bar graph typically involves two pieces of information: a heading and a value.
And each bar graph consists of multiple bars, so a two-dimensional.
As the old saying goes, “If you only see one solution, you really don’t understand the problem.” In this case, the problem is how to best store the data that is injected into a bar graph, and one particular solution that works out pretty well is a two-dimensional array.
Of course, the challenge still remaining is how exactly to build this two-dimensional array of Mismatch category totals.
The first step is to isolate what data in the database factors into the solution.
The database schema for the Mismatch application is shown below.
Circle all of the pieces of data that factor into the dynamic generation of the “five degrees of opposability” bar graph, making sure to annotate how they are used to create the graph.
The user_id column is used to query for questionnaire responses so that the best mismatch for a user can be determined.
The response_id column is used to match up responses for two users to determine if they are set to opposite values - a mismatch!
The topic_id column serves as the go-between for categories and responses, which is what allows you to figure out the category of each mismatched response.
The category_id column is used to associate a category with a topic, which leads to a mismatched response.
The name of the category is important for providing headings for the bar graph.
The bar graph ultimately requires a count of how many mismatches there are for each category; the count is the value for a given bar, while the category name is its heading.
Head First: So you’re the guy people call when they need a visual representation of  some data.
I’m adept at all facets of  data visualization, especially the rectangular variety.
Head First: So your drawing capabilities are limited mostly to rectangles?
Bar Graph: I’d say “limited” is a strong word in this case.
It’s one of  those deals where simpler is betterpeople just seem to relate to the bars, maybe because they’re used to seeing things measured that way.
You know, like the little meter on mobile phones that tells you how good your signal is.
But I’ve also seen some pretty effective graphs that are round.
Look, it’s two different ways of thinking about the same thing.
Pie Chart sees the world in curves; I see it a bit straighter, that’s all.
Head First: But don’t people inherently relate better to pie than a bunch of  bars?
Bar Graph: Yes, but keep in mind that I’m much more flexible than Pie Chart.
You can add as many bars to me as you want and I have no problem at all showing them.
The more you add to Pie Chart, the smaller the slices have to get.
At some point the parts get hard to visualize because of  the whole.
All that matters with me is that the bars all have values that can show up on the same scale.
Bar Graph: Well, it’s difficult for me to graph things that have wildly different values, unless of  course, you don’t mind the bars being dramatically different.
Where I really excel is at showing the difference between values that are within the same range.
For example, maybe you want to use me to show the price of  gasoline over a one-year period, in which case all the values would be within a reasonably constrained range, like within a few dollars of each other.
Bar Graph: I know, the price of  gasoline seems like a wildly varying value, but not really within the realm of what I deal with.
I once had a guy who built a web application that kept up with how many miles he dragged his mouse in a given month.
He blogged about it constantly, and used me to chart his “travels.” Pretty crazy but people loved it.
Head First: So is that where you fit into the web picture—providing visual glimpses into people’s data?
Anytime I can drop into a page and provide some eye appeal to data that might otherwise be a little dull and hard to grasp, I consider it a good day.
Hey, I appreciate you sharing your thoughts, and I hope we can do this again.
Bar Graph Exposed This week’s interview: Reading between the lines with the master of  charts.
Bar Graph Exposed This week’s interview: Reading between the lines with the master of  charts.
From one array to another When we last left off  at Mismatch, we had a list of  topics that corresponded to mismatches between two users.
Problem is, the bar graph we’re trying to draw isn’t about topics per se—it’s about the categories that are associated with the topics.
So we’re one level removed from the data we actually need.
It appears that some additional SQL querying is in order.
Not only do we need the array of  mismatched topics, but we also need a similar, parallel array of  mismatched categories.
An alias is used to eliminate confusion when referring to the name column of the mismatch_category table.
A multiple join connects the category table to the response table so that the category name can be extracted.
The additional join in this query causes the category name corresponding to each response topic to be tacked on to the result data, ultimately making its way into the $user_responses array.
But remember, we need only the mismatched categories, not all of  the categories.
We need to build another array containing just the mismatched categories for the responses.
The new “column” of mismatch result data holds the category name of every response.
But we’re still falling short of  our goal of  building an array of  mismatched categories.
To do that, we need to revisit the code that builds the array of mismatched topics...
We still need a new array holding only the mismatched response categories for this pair of users.
Test Drive Try out the new query to grab mismatched topics and categories.
Using a MySQL tool, issue the following query to SELECT mismatched topics and categories for a specific user.
Make sure to specify a user ID for a user who not only exists in the database, but who also has filled out the Mismatch questionnaire form:
The user ID must be for a valid user who has answered the Mismatch questionnaire.
Notice that the results of this query match up with the $user_responses array on the facing page, which is what we want.
It’s always a good idea to test out a query in a MySQL tool before sticking it in PHP code.
Build an array of mismatched topics We now have a query that performs a multiple join to grab the category of  each response in addition to the topic, which is then extracted into the $user_responses array.
Remember that another similar query also grabs data for each other user in the database so that mismatch comparisons can be made.
We’re already using these two arrays to score mismatches and build an array of  mismatched topics.
We can now add a new line of  code to also construct an array of  mismatched categories—this array contains the category of each mismatched topic between two users.
An array of mismatched categories is built by storing away the category associated with each mismatched response.
This is the same code from the earlier version of Mismatch, except now it builds an array of mismatched categories in addition to the array of topics.
When all is said and done, the $categories array contains one category for each and every mismatch.
This code results in an array containing only the mismatched categories.
What’s the difference between a MySQL result set and a PHP array?
A result set is only made available a row of data at a time, while an array can hold multiple “rows” of data thanks to multiple dimensions.
Extracting a result set into a two-dimensional array lets us move through rows of data efficiently without having to constantly go back to the database server to fetch and re-fetch rows.
This doesn’t work with huge sets of data, as you’d be creating huge arrays, but in the case of Mismatch responses, the arrays are never larger than the total number of topics in the system.
Q: Don’t we still need to count how many times a category was mismatched in order to generate the bar graph?
Remember that the idea behind the Mismatch bar graph is that each bar represents a mismatched category, and the height of the bar represents how many times the category was mismatched.
So we need to come up with a count of how many times each category was mismatched.
But it’s probably worth taking a step back to formulate a general plan of attack...
Formulating a bar graphing plan With an array of  mismatched categories and a bunch of  big ideas about how to use it to generate a bar graph image for the My Mismatch page, we’re still missing a plan.
As it turns out, there are only three steps required to dynamically generate the bar graph, and we’ve already knocked out one of  them.
To complete Step 2 of  our plan, we somehow need to take the array of mismatched categories and turn it into a set of  category totals, meaning a count of  how many times each category appears in the mismatched category array.
If  you recall, this is precisely the kind of  data required to drive a bar graph, where the categories are the headings and the count for each category is the value of  each bar.
A two-dimensional array can be used to combine categories and totals into a single data structure.
This step provides us with the list of mismatched categories.
The list of categories needs to be converted into a list of category totals.
With the category totals in hand, we can get down to the fun part of drawing the bar graph with GD functions.
This array contains each category name along with how many times it was mismatched.
Looking at the new categories array from a different angle reveals how it is used to feed data to the bar graph.
The new mismatched category data is exactly what we need for the bar graph.
Once this array of  category totals is built, we’ll be ready to move on to Step 3 and actually use some GD functions to crank out the bar graph visuals.
Crunching categories The challenge now is to get the array of  categories totaled up and put into a two-dimensional array of  headings and values.
We have an array of  mismatched categories stored in the $categories array.
We need to build a new array called $category_totals that contains one entry for each category, along with the number of  mismatches for each.
Doing the category math Moving from a one-dimensional array of  mismatched categories to a twodimensional array of  category totals is a bit trickier than you might think at first glance.
For this reason, it’s helpful to work through the solution in pseudocode before actually cranking out any PHP.
Pseudocode frees you from syntactical details and allows you to focus on the core ideas involved in a particular coding solution.
Is the last element in the category totals array a different category than the current mismatched category?
This is another instance of the current category, so increment the count of the last element in the category totals array.
The product of  this code is a two-dimensional array of  category totals where the main array holds a single category, while each sub-array contains the category name and its value.
Translate the pseudocode to finish the real PHP code that builds a two-dimensional array of Mismatch category data called $category_totals.
We can now safely scratch this step off the list, leaving us only with the drawing of the bar graph.
The $category_totals variable now holds precisely the data needed to generate a bar graph for the mismatched categories.
Translate the pseudocode to finish the real PHP code that builds a two-dimensional array of Mismatch category data called $category_totals.
Arrays are zero-indexed, so the last element in an array is always count() minus one.
The increment operator (++) is applied to the second element in the sub-array, which is the category count.
This is revealed in how the code assumes that any change in the category is the start of a new category, which works as long as categories are grouped together.
Fortunately, the query in the Questionnaire script that originally selects topics for insertion into the mismatch_response table is smart enough to order the responses by category.
This query is the one that first grabs topics from the database and then inserts them as empty responses for a given user.
This ensures that user responses are stored in the database ordered by category, which allows the category total code to work properly.
Q: But isn’t it risky writing code that is dependent upon the order of data stored in a database table? A: Yes and no.
Remember that this database is entirely controlled by script code that you write, so the order of the data really only changes if you write script code that changes it.
Even so, an argument could certainly be made for ordering the join query in the My Mismatch script by category to make absolutely sure that the mismatched category list is in order.
Bar graphing basics With a shiny new two-dimensional array of  mismatched category data burning a hole in your pocket, it’s time to get down to the business of  drawing a bar graph.
But rather than focus on the specifics of  drawing the Mismatch bar graph, why not take a more generic approach? If  you design and create an all-purpose bar graph function, it’s possible to use it for Mismatch and have it at your disposal for any future bar graphing needs.
This new function must perform a series of  steps to successfully render a bar graph from a two-dimensional array of  data.
Create the colors you’ll be using to draw the graphics and text.22
Draw the range up the left side of the graph.66
The number of bars is determined by the length of the array of data.
The width of each bar and the spacing between bars must be calculated based on the width of the bar graph and the number of bars.
The value of each bar must be within the maximum range specified when calling the function.
Use the magnets to add the missing GD drawing function calls.
Set a white background with black text and gray graphics.
Use the magnets to add the missing GD drawing function calls.
Set a white background with black text and gray graphics.
Create some colors to use for drawing the parts of the bar graph.
Clear the background to get it ready for the bar graph graphics.
Draw the heading for the bar as a string of text oriented vertically.
Draw the range up the left side of the graph as normal horizontal strings of text.
The folder on the server where the file is to be written must be writeable in order for this function to work.
Q: Why does the draw_bar_graph() function write the bar graph image to a file instead of just returning it directly to the browser?
A: Because the function isn’t contained within its own script that can return an image through a header to the browser.
Remember, the only way to return a dynamically generated image directly to the browser is for a script to use a header, meaning that the entire purpose of the script has to be the generation of the image.
Q: So then why isn’t the draw_bar_graph() function placed in its own script so that it can return the bar graph image directly to the browser using a header?
A: While it is a good idea to place the function in its own script for the purposes of making it more reusable, there is still a problem when it comes to returning an image via a header.
The problem has to do with how you reuse code.
This works great for code that doesn’t do anything that manipulates the browser.
But sending a header impacts the output of a script, which can be problematic for included code.
It’s not that you can’t send a header from included code; you’ve actually done so in earlier examples.
The problem is that you have to be extremely careful, and in some cases it isn’t safe to assume that headers haven’t already been sent.
The My Mismatch script, for example, can’t return an image to the browser because its job is to output HTML code containing mismatch results.
Including script code that dynamically generates and returns an image would cause a header conflict.
Q: OK, so can I just reference the bar graph code like the captcha.php script from Guitar Wars.
A: Yes, it did, and it referenced the captcha.php script directly from the src attribute of an <img> tag.
The problem here is that we have a lot of data that needs to be passed to the bar graph code, and this would be very cumbersome to try and pass via GET or POST.
The same path and image filename are specified in the src attribute of the <img> tag.
With the help of a reusable function, it’s possible to go from database data to a bar graph stored in an image file.
Also add a new menu item for My Mismatch to the navmenu.php script.
Upload the scripts to your web server, and then open the main Mismatch page (index.php) in a web browser.
Log in if  you aren’t already logged in, and the click “My Mismatch” on the main navigation menu.
Now that’s what I’m talking about! The visual category breakdown is all I needed to see to know Jason’s the one.
The bar graph fits neatly on the My Mismatch page along with the list of mismatched topics.
The topics have been reformatted into a table to make room for the bar graph.
How would you change the Mismatch code to ensure that users don’t share the same bar graph image?
A single image is continuously regenerated for every user’s My Mismatch bar graph.
So I’m curious, how are we able to store the My Mismatch bar graph image in a single file when a unique image is generated for every different user?
It’s true, there is only one bar graph image at any given time, no matter how many users there are.
This could present a problem if  two users ever happen to view the My Mismatch page at the exact same moment.
We run the risk of generating separate images for the two people and then trying to write them to a single image file.
This problem is probably fairly isolated in reality, but as Mismatch grows in popularity and expands to thousands and thousands of  users, it could become significant.
The fact that each one of  the users thinks of  the bar graph image as their own is a clue that there’s a weakness in the single image bar graph design.
Here we clearly have three different bar graph images in view, but we know only one image file is used to store them.
Individual bar graph images for all The solution to the shared bar graph image problem lies in generating multiple images, one for every user, in fact.
But we still need to ensure that each of these images is tied to exactly one user and no more.
That’s where a familiar database design element comes into play...
All we have to do is prepend the users’ IDs to the filename of  their bar graph image.
Giving each of the users their own unique bar graph image eliminates sharing a single image throughout the entire application.
One bar graph image for all users just won’t cut it in the long run.
The user_id column of the user table is prepended to the filename of each user’s bar graph image, assuring uniqueness.
The user_id column serves as the primary key for the user table.
Below is the Mismatch code that dynamically generates a bar graph image and then displays it on the page.
Rewrite the code so that it generates a unique image for each user.
Q: Is there any advantage to outputting dynamically generated images as PNG images versus GIFs or JPEGs?
A: No, none beyond the reasons you would choose one image format over another for static images.
For example, GIFs and PNGs are better for vector-type graphics, whereas JPEGs are better for photorealistic graphics.
In the case of Mismatch, we’re dealing with vector graphics, so either PNG or GIF would work fine.
To output a GD image to a GIF and JPEG, respectively, call the imagegif() and imagejpeg() functions.
Q: How do I know what compression level to use when outputting PNG images to a file?
There are no hard rules about how much compression to use when, so you may want to experiment with different settings.
Mismatch uses 5 as the compression level for the bar graphs, which appears to be a decent tradeoff between quality and efficiency.
Q: Are there file storage issues introduced by generating a bar graph image for each user?
This question relates back to the compression level question to some degree, but it’s unlikely that you’ll overwhelm your server with too many or too huge files unless you really go crazy generating thousands of large image files.
Granted, that’s a decent little chunk of web hosting space, but a site with 50,000 users should be generating plenty of cash to offset that kind of storage.
Below is the Mismatch code that dynamically generates a bar graph image and then displays it on the page.
Rewrite the code so that it generates a unique image for each user.
The standard file upload path is still used to ensure that the image is stored in the desired place on the server.
The same image filename is used when setting the src attribute of the <img> tag for the bar graph image in HTML code.
Make sure this folder on the server is writeable so that the image file can be written.
Test Drive Change the My Mismatch script to generate unique bar graph images.
Modify the My Mismatch script so that it generates a unique bar graph image for each user.
Upload the mymismatch.php script to your web server, and then open it in a web browser.
The page won’t look any different, but you can view source on it to see that the bar graph image now has a unique filename.
We can use the user ID that we already have stored away in a session variable.
Mismatch users are digging the bar graphs With the shared bar graph image problem solved, you’ve helped eliminate a potential long-term performance bottleneck as more and more users join Mismatch and take advantage of  the “five degrees of  opposability” graph.
Each user now generates their own unique bar graph image when viewing their ideal mismatch.
Fortunately, this fix took place behind the scenes, unbeknownst to users, who are really taking advantage of  the mismatch data in the hopes of making a love connection.
Each user’s mismatch bar graph image is now stored in its own file.
Owen has already lined up a date with his mismatch, and is gearing up for a night on the town.
Elmer is perfecting a few new dance moves to share with his ideal mismatch.
Ethel has some minor doubts about all this “opposites attract” business, but she’s willing to give it a go.
This function is part of the GD graphics library, and is used to create a new image for drawing.
The image is initially created in memory, and isn’t output for display purposes until calling another function, such as imagepng()
Your PHP & MySQL Toolbox Dynamic graphics open up all kinds of interesting possibilities in terms.
The GD graphics library offers lots of functions for drawing graphics primitives, such as lines, rectangles, ellipses, and even individual pixels.
For example, a CAPTCHA test might involve discerning letters within a distorted pass-phrase, identifying the content of an image, or analyzing an equation to perform a simple mathematical computation.
The GD library allows you to dynamically create and draw on images, and then either return them directly to the browser or write them to image files on the server.
You can choose to output the image directly to the web browser or to an image file on the server.
PHP&MySQLcross When you could actually use a robot, they’re nowhere to be found.
Oh well, your analog brain is up to the challenge of solving this little puzzle.
The visual used to show how mismatched users compare on a categorized basis.
Mismatch, this piece of information is used as part of the image filename.
Mismatch uses this kind of array to store bar graph data.
Give it two points and this graphics function will draw a rectangle.
If you want to draw text in a certain font, call the image...text () function.
Always clean up after working with an image in PHP by calling this function.
Call this function to output an image as a PNG.
A test used to distinguish between people and automated spam bots.
When PHP outputs an image, the image is either sent directly to the client browser or stored in a .....
The visual used to show how mismatched users compare on a categorized basis.
Mismatch, this piece of information is used as part of the image filename.
Mismatch uses this kind of array to store bar graph data.
Give it two points and this graphics function will draw a rectangle.
If you want to draw text in a certain font, call the image...text () function.
Always clean up after working with an image in PHP by calling this function.
Call this function to output an image as a PNG.
A test used to distinguish between people and automated spam bots.
When PHP outputs an image, the image is either sent directly to the client browser or stored in a .....
The visual used to show how mismatched users compare on a categorized basis.
Mismatch uses this kind of array to store bar graph data.
Give it two points and this graphics function will draw a rectangle.
If you want to draw text in a certain font, call the image...text () function.
Always clean up after working with an image in PHP by calling this function.
Call this function to output an image as a PNG.
A test used to distinguish between people and automated spam bots.
When PHP outputs an image, the image is either sent directly to the client browser or stored in a .....
Instead of having to travel around asking people what’s going on, we can get news delivered to us...
It’s a big world out there, and one that your web application can’t afford to ignore.
Perhaps more importantly, you’d rather the world not ignore your web application.
One excellent way to tune the world in to your web.
Owen needs to get the word out about Fang One of  the big problems facing any web site is keeping people coming back.
It’s one thing to snare a visitor, but quite another to get them to come back again.
Even sites with the most engaging content can fall off  a person’s radar simply because it’s hard to remember to go visit a web site regularly.
Knowing this, Owen wants to offer an alternative means of  viewing alien abduction reports—he wants to “push” the reports to people, as opposed to them having to visit his site on a regular basis.
Owen hopes that more exposure for the site will increase his odds of finding Fang.
It looks like Fang's been spotted a few times but this information hasn’t led Owen to Fang’s location.
The Report an Abduction form is working great, but Owen thinks the site needs more exposure.
Alien abduction reports are up but Fang is still missing!
Since you last saw Owen, he's created a main page for viewing user-submitted alien abduction reports.
Owen’s virtual team of alien abduction content viewers will hopefully increase the chances of him finding Fang.
Pushing web content to users is a great way to help gain more exposure for a web site.
Push alien abduction data to the people By pushing alien abduction content to users, Owen effectively creates a virtual team of  people who can help him monitor abduction reports.
With more people on the case, the odds of  identifying more Fang sightings and hopefully homing in on Fang’s location increase.
Some email clients support “push” content, allowing you to receive web site updates the same way you receive email messages.
Many regular web browsers also let you browse “push” content that quickly reveals the latest news posted to a web site.
Even mobile devices provide access to “push” content that is automatically delivered when something on a web site changes.
Owen isn’t exactly sure how to push content to users but he really likes the idea.
But what if  we want users to receive our web content without having to ask for it? This is possible with RSS, a data format that allows users to find out about web content without actually having to visit a site.
DVRs allow you to “subscribe” to certain television shows, automatically recording every episode as it airs.
Why flip channels looking for your favorite show when you can just let the shows come to you by virtue of  the DVR? While RSS doesn’t actually record anything, it is similar to a DVR in that it brings web content to you instead of  you having to go in search of  it.
By creating an RSS feed for his alien abduction data, Owen wants to notify users when new reports are posted.
This will help ensure that people stay interested, resulting in more people combing through the data.
The cool thing is that the same database can drive both the web page and the RSS feed.
An RSS view on a particular set of  data is called an RSS feed, or newsfeed.
Users subscribe to the feed and receive new content as it is posted to the web site—no need to visit the site and keep tabs.
To view an RSS feed, all a person needs is an RSS newsreader.
Most popular web browsers and email clients can subscribe to RSS feeds.
You just provide the newsreader with the URL of  the feed, and it does all the rest.
Even though the web page is dynamically generated from database data, you have to revisit it to see if new data has been posted.
A newsreader allows you to subscribe to newsfeeds, which contain news items that are derived from web site content.
Here, the newsreader built into the Safari web browser is being used.
XML’s power comes from its flexibility—it doesn’t define any specific tags or attributes; it just sets the rules for how tags and attributes are created and used.
It’s up to specific languages such as HTML and RSS to establish the details regarding what tags and attributes can be used, and how.
In order to be proficient with RSS, you must first understand the ground rules of  XML.
These rules apply to all XML-based languages, including RSS and the modern version of  HTML known as XHTML.
These rules are simple but important—your XML (RSS) code won’t work if  you violate them! Here goes:
Empty tags that have no content must be coded with a space and a forward slash at the end before the closing brace.
Incorrect! The empty tag needs a space and a forward slash before the >
Unlike PHP, which allows you to use double or single quotes in most situations, XML is rigid in only allowing double quotes for attribute values.
Q: Why is RSS so much better than someone just coming to my web site?
A: If people regularly visited your web site to seek out the latest content, then RSS wouldn’t be any better than simply displaying content on your web site.
But most people forget about web sites, even ones they like.
So RSS provides an effective means of taking your web content directly to people, as opposed to requiring them to seek it out.
Throughout its storied history there have been several different versions, but the latest incarnation of RSS (version 2.0) stands for Really Simple Syndication, which is all you need to worry about.
Q: So what does RSS consist of? A: RSS is a data format.
So just as HTML is a data format that allows you to describe web content for viewing in a web browser, RSS is a data format that describes web content that is accessible as a news feed.
Similar to HTML, the RSS data format is pure text, and consists of tags and attributes that are used to describe the content in a newsfeed.
Some email clients even include RSS readers, in which case RSS news items appear as email messages in a special news feed folder.
Annotate the highlighted code to explain what you think each tag is doing.
Annotate the highlighted code to explain what you think each tag is doing.
This line of code isn’t a tag - it’s an XML “directive” that identifies this document as containing XML code.
This <title> tag applies to the channel as a whole.
The link for a channel usually points to the web site associated with the newsfeed.
Every channel needs a description to explain what kind of news it offers.Newsfeeds can be created in different languages - this tag establishes the language of a channel.
The name of the alien abductee and the alien description data are combined to serve as the title of each news item.
The link for an individual news item typically points to the full content for the item on the web site associated with the newsfeed.
This RSS document only contains a single channel, which is perfectly fine if you don’t need to break up news items into different categories.
But you don’t typically create XML code by hand, and it often doesn’t get stored in files.
It’s true that XML can and often does get stored in files.
But with RSS we’re talking about dynamic data that is constantly changing, so it doesn’t make sense to store it in files—it would quickly get outdated and we’d have to continually rewrite the file.
Instead, we want XML code that is generated on-the-fly from a database, which is how the HTML version of  the main Aliens Abducted Me page already works.
So we want to use PHP to dynamically generate RSS (XML) code and return it directly to an RSS newsreader upon request.
OK, so RSS is really XML, which means it’s just a bunch of tags.
So all we have to do to create a newsfeed is just create an XML file, right?
From database to newsreader In order to provide a newsfeed for alien abduction data, Owen needs to dynamically generate RSS code from his MySQL database.
This RSS code forms a complete RSS document that is ready for consumption by RSS newsreaders.
So PHP is used to format raw alien abduction data into the RSS format, which is then capable of  being processed by newsreaders and made available to users.
The really cool part of  this process is that once the newsfeed is made available in RSS form, everything else is automatic—it’s up to newsreaders to show updated news items as they appear.
An RSS newsreader is designed to consume the data made available by an RSS newsfeed.
The newsreader knows how to interpret individual news items in XML code and show them to the user.
Each individual news item has its own section in the RSS newsfeed document.
Each newsreader presents news items in its own unique way - here news items are shown in much the same way as email messages.
This newsreader is built into the standard Mail application in Mac OS X.
Creating RSS feeds is all about understanding the RSS language, which means getting to know the tags that are used to describe news items.
But it sure sounds like a cool name for a piece of  news data!
This tag represents a single channel in an RSS feed, and acts as a container for descriptive data and individual news items.
Encloses an entire RSS feed—all other tags must appear inside of  this tag.
This tag always contains a URL that serves as the link for a channel or news item.
Represents an individual news item, or story, which is further described by child elements.
The publication date is an important piece of  information for any news item, and this tag is used to specify it.
Creating RSS feeds is all about understanding the RSS language, which means getting to know the tags that are used to describe news items.
But it sure sounds like a cool name for a piece of  news data!
This tag represents a single channel in an RSS feed, and acts as a container for descriptive data and individual news items.
Encloses an entire RSS feed—all other tags must appear inside of  this tag.
This tag always contains a URL that serves as the link for a channel or news item.
Represents an individual news item, or story, which is further described by child elements.
The publication date is an important piece of  information for any news item, and this tag is used to specify it.
Every RSS feed consists of at least one channel, which is basically a group of related news items.
The <rss> tag is the “root” tag for an RSS document - all other tags must appear inside of it.
Below is a brand-new alien abduction report that has been added to the aliens_abduction database.
Write the XML code for an RSS <item> tag for this abduction report, making sure to adhere to the RSS format for newsfeeds.
You already learned that XML code consists of  tags, which are also sometimes referred to as elements, that form parent-child relationships within the context of  a complete XML document.
It is very helpful to be able to visualize this parent-child relationship as you work with XML code.
As an example, the RSS document on the facing page can be visualized as a hierarchy of  elements, kind of  like a family tree for newsfeed data, with parent elements at the top fanning out to child elements as you work your way down.
The topmost element is the root of the document, which means it is the parent of all other elements.
The title, link, pubDate, and description elements for a given news item appear as children of the item element.
The title, link, description, and language elements for a channel appear alongside the news items as children of the channel element.
Q: Is XML case-sensitive? A: Yes, the XML language is case-sensitive, so it matters whether text is uppercase or lowercase when specifying XML tags and attributes.
A good example is the RSS <pubDate> tag, which must appear in mixed case with the capital D.
The majority of whitespace in most XML documents is purely for aesthetic formatting purposes, such as indenting child tags.
This “insignificant” whitespace is typically ignored by applications that process XML data, such as RSS news readers.
However, whitespace that appears inside of a tag is considered “significant,” and is usually rendered exactly as it appears.
This is what allows things like poems that have meaningful spacing to be accurately represented in XML.
Just keep in mind that not every news reader is able to display images.
Also, in RSS 2.0 you can only add an image to a channel, not individual news items.
While this is possible, it requires you to encode the HTML tag using XML entities, and in many ways, it goes against the premise of an RSS item being pure text content.
Below is a brand-new alien abduction report that has been added to the aliens_abduction database.
Write the XML code for an RSS <item> tag for this abduction report, making sure to adhere to the RSS format for newsfeeds.
Head First: So I hear that when people are looking for news on the Web, they turn to you.
RSS: I suppose it depends on what you consider “news.” I’m mainly about packaging up information into a format that is readily accessible to newsreaders.
Head First: Ah, so by “newsreaders,” you mean individual people, right?
RSS: No, I mean software tools that understand what I am and how I represent data.
For example, a lot of email programs support me, which means that you can subscribe to a newsfeed and receive updates almost like receiving email messages.
For one thing, email messages are sent from one person to another, and are usually part of  a two-way dialog.
So you can respond to an email message, get a response back, etc.
I only communicate one way, from a web site to an individual.
Head First: How does that make it a one-way communication?
RSS: Well, when a person elects to receive a newsfeed by subscribing to it in their newsreader software, they’re basically saying they want to know about new content that is posted on a given web site.
When new content actually gets posted, I make sure it gets represented in such a way that the news reader software knows about it and shows it to the person.
But they aren’t given an opportunity to reply to a news item, which is why it’s a one-way communication from a web site to an individual.
RSS: I’m really just a data format, an agreed-upon way to store content so that it can be recognized and consumed by news readers.
Use me to store data, and newsreaders will be able to access it as a newsfeed.
Head First: OK, so how are you different than HTML?
RSS: Well, we’re both text data formats that are ultimately based on XML, which means we both use tags and attributes in describing data.
But whereas HTML is designed specifically to be processed and rendered by web browsers, I’m designed to be processed and rendered by newsreaders.
You could say that we provide different views on the same data.
Head First: But I’ve seen where some web browsers can display newsfeeds.
As it turns out, some web browsers include built-in newsreaders, so they are really two tools in one.
But when you view a newsfeed in a web browser, you’re looking at something completely different than an HTML web page.
Head First: But most newsfeeds link to HTML web pages, correct?
So I work hand in hand with HTML to provide better access to web content.
The idea is that you use me to learn about new content without having to go visit a web site directly.
Then if  you see something you want to find out more about, you click through to the actual page.
Head First: So you’re sort of  a preview for web pages.
But remember that I come to you, you don’t have to come to me.
That’s what people really like about me—I keep them from having to revisit web sites to keep tabs on new content.
Loop through the data generating RSS code for each news item.55
Dynamically generate an RSS feed Understanding the RSS data format is all fine and good, but Owen still needs a newsfeed to take alien abduction reports to the people.
It’s time to break out PHP and dynamically generate a newsfeed full of  alien abduction data that has been plucked from Owen’s MySQL database.
Fortunately, this can be accomplished by following a series of  steps:
The resulting newsfeed isn’t stored in a file but it is an XML document.
This code isn’t affected by the database - it’s always the same for this newsfeed.
We have to set the content type of the RSS document to XML by using a header.
This code contains data extracted from the database, and therefore must be carefully generated.
Before generating the RSS code for news items, we must query the MySQL database for alien abduction data.
Generate the XML directive to indicate that this is an XML document.22
Generate the static RSS code that doesn’t come from the database, such as the <rss> tag and the channel information.
Carefully choose the appropriate magnets to finish the code and dynamically generate the newsfeed.
Carefully choose the appropriate magnets to finish the code and dynamically generate the newsfeed.
Similar to the header we used earlier in the CAPTCHA example to output a PNG image, this header causes the script to output an XML document.
Upload the script to your web server, and then open it in a newsreader.
Most web browsers and some email clients allow you to view newsfeeds, so you can try those first if  you don’t have a stand-alone newsreader application.
The Newsfeed script should display the latest alien abductions pulled straight from the Aliens Abducted Me database.
If your browser has trouble viewing the newsfeed, try using feed:// in the URL instead of http://
The newsfeed looks great, but how do site visitors find out about it?
Just provide a link to it from the home page.
Don’t forget that newsfeed.php is nothing more than a PHP script.
The only difference between it and most of  the other PHP scripts you’ve seen throughout the book is that it generates an RSS document instead of  an HTML document.
But you still access it just as you would any other PHP script—just specify the name of  the script in a URL.
What Owen is missing is a way to share this URL with people who visit his site.
This is accomplished with very little effort by providing a syndication link, which is just a link to the newsfeed.php script on Owen’s server.
The newsfeed.php script generates an RSS newsfeed document that can be viewed by any RSS newsreader.
Link to the RSS feed It’s important to provide a prominent link to the newsfeed for a web site because a lot of  users will appreciate that you offer such a service.
To help aid users in quickly finding an RSS feed for a given site, there is a standard icon you can use to visually call out the feed.
We can use this icon to build a newsfeed link at the bottom of  Owen’s home page (index.php)
A standard RSS icon is available to make it clear to users that you offer an RSS newsfeed.
This icon is available in all kinds of different sizes and image formats, but the look and feel of it is always the same.
The URL of the newsfeed is just the newsfeed.php script, which works as long as the script is stored in the same folder as the main web page below.
A prominent link on the main Aliens Abducted Me page offers visitors a quick way to access Owen’s newsfeed.
The HTML newsfeed link includes both an RSS icon and descriptive text.
Modify the index.php script for Aliens Abducted Me to display the newsfeed link near the bottom of  the page.
Upload the index.php script and rssicon.php image to your web server, and then open the script in a web browser.
With all these abductions going on, I’m always on the lookout for aliens.
Chloe, an avid Aliens Abducted Me newsfeed reader, thinks she might have seen Fang in a YouTube video.
Thanks to RSS, new alien abduction reports are “pushed” to subscribers without them having to visit the Aliens Abducted Me web site directly.
I wonder if that’s the same dog I saw on that YouTube video...
But how? If  Owen could incorporate YouTube videos into Aliens Abducted Me, his users could all be on the lookout for Fang.
Not only that, but he really needs to come up with a way to avoid constantly doing manual video searches on YouTube.
YouTube is an amazing tool for gathering alien abduction evidence in my search for Fang...
Owen thinks video may hold the final answer to finding Fang.
Although YouTube holds a lot of promise for helping Owen in his quest to find Fang, he currently has to do an awful lot of manual video searching.
Wouldn’t it be dreamy if I could see videos directly on Aliens Abducted Me rather than having to search on YouTube? If only there was a way I could just go to a web page and have the search already done for me.
Watch a few of the alien abduction videos that Owen has found.
Do you think the dog in the videos is Fang?
Pulling web content from others The idea behind an RSS newsfeed is that it pushes your content to others so that they don’t have to constantly visit your web site for new content.
This is a great way to make it more convenient for people to keep tabs on your site, as Owen has found out.
But there’s another side to the web syndication coin, and it involves pulling content from another site to place on your site.
So you become the consumer, and someone else acts as the content provider.
In Owen’s case of  showing YouTube videos on his site, YouTube becomes the provider.
It’s important to understand that Owen doesn’t just want to embed a specific YouTube video or a link to a video.
That’s easy enough to accomplish by simply cutting and pasting HTML code from YouTube.
He wants to actually perform a search on YouTube videos and display the results of  that search.
So Aliens Abducted Me needs to perform a real-time query on YouTube data, and then dynamically display the results.
This allows Owen and his legion of  helpful Fang searchers to keep up-to-the-minute tabs on alien abduction videos that have been posted to YouTube.
Videos that are the result of a YouTube alien abduction search are returned by YouTube and fed into Owen’s main page.
The design of the Aliens Abducted Me home page will need to change slightly to make room for the video search results.
Process the response data and format it as HTML code.44
Syndicating YouTube videos In order to source videos from YouTube, we must learn exactly how YouTube makes videos available for syndication.
YouTube offers videos for syndication through a request/response communication process where you make a request for certain videos and then receive information about those videos in a response from YouTube’s servers.
Following are the steps required to pull videos from YouTube and display them:
The YouTube server returns an XML document containing video data.
The PHP script processes the video data and returns a formatted HTML web page.
This XML document contains detailed information about the videos requested.
In addition to querying the MySQL database for alien abduction data, the PHP script now also processes the YouTube video response.
The final web page that is delivered to the browser is pure HTML.
This request is often in the form of a URL.
Syndicating videos from YouTube involves issuing requests and handling responses.
Make a YouTube video request Pulling videos from YouTube and incorporating them into your own web pages begins with a request.
YouTube expects videos to be queried through the use of a REST request, which is a custom URL that leads to specific resources, such as YouTube video data.
You construct a URL identifying the videos you want, and then YouTube returns information about them via an XML document.
The details of  the URL for a YouTube request are determined by what videos you want to access.
For example, you can request the favorite videos of  a particular user.
In Owen’s case, the best approach is probably to perform a keyword search on all YouTube videos.
The URL required for each of  these types of  video REST requests varies slightly, but the base of  the URL always starts like this:
This is definitely one of those acronyms that sounds way fancier and more technical than it really is.
The main idea behind REST is that web resources should be accessible through unique links, which means you should be able to access “RESTful” data simply by constructing a URL for it.
In terms of YouTube, it means that you can perform video queries purely through a URL that contains the search criteria.
Requesting the favorite videos for a particular YouTube user involves adding onto the base URL, and also providing the user’s name on YouTube.
To request the favorite videos for the user elmerpriestley, use the following URL: http://gdata.youtube.com/feeds/api/users/elmerpriestley/favorites.
A more powerful and often more useful YouTube video request is to carry out a keyword search that is independent of  users.
You can use more than one keyword as long as you separate them by forward slashes at the end of  the URL.
To request the favorite videos for the keywords “elvis” and “impersonator,” use the following URL:
The user name of a YouTube user provides access to that user’s favorite videos.
The result of this REST request are the favorite videos for the YouTube user elmerpriestley.
Multiple keywords can be used in a video search by separating them with forward slashes.
Here the search keywords “elvis” and “impersonator” are used to search for videos.
This base URL is used for all YouTube REST requests.
The keywords are case-insensitive, so “elvis”, “Elvis”, and “eLvIs” all give you the same result.
The URL starts the same as requesting by user but here you use “videos” instead of “users”
Use the magnets below to assemble video REST requests for the.
All videos that match the keywords “ufo”, “sighting”, and “dog”:
All videos that match the keywords “ufo”, “sighting”, and “dog”:
The URL for a user’s favorites requires the word “users” here instead of “videos”
This is the name of the user whose favorite videos you want to access.
Each of the search keywords appear at the end of the URL, and are separated by forward slashes.
The same base YouTube URL is used for all of the REST requests.
You may have used some of the magnets more than once.
Any time you’ve used a GET request, such as simply requesting a web page, you’re using REST.
You can think of a normal web page as a REST resource in that it can be accessed via a URL, and GET is the REST “action” used to access the resource.
Where REST gets more interesting is when it is used to build queries, such as YouTube video requests.
In this case you’re still dealing with REST requests but they are querying a database for data instead of simply requesting a static web page.
Q: Does the order of arguments matter when performing a YouTube keyword search?
The first keywords are given a higher precedence than later keywords, so make sure to list them in order of decreasing importance.
Q: When there are multiple matches for a video search, how does YouTube determine what videos to return?
A: YouTube keyword video requests return videos based on search relevance, meaning that you will get the videos that best match the keywords, regardless of when the videos were posted to YouTube.
Owen is ready to build a REST request Since Owen’s goal is to scour YouTube for alien abduction videos that might have Fang in them, a keyword search makes the most sense as the type of  REST request to submit to YouTube.
There are lots of  different keyword combinations that could be used to search for possible Fang videos, but one in particular will help home in on videos related specifically to Fang:
The last two keywords help to make sure you find the alien abduction videos related to Owen and Fang!
While you probably wouldn’t reference the title of  a book series when carrying out a normal YouTube video search, it just so happens to be a good idea in this particular case.
Let’s just say it’s a coincidence that a lot of  alien abduction videos have been made by Head First fans! With a REST request URL in hand, Owen can scratch off  Step 1 of  the YouTube video syndication process.
Process the response data and format it as HTML code.
The first step is knocked out thanks to the YouTube request URL.
What does the browser show? Try viewing the source of  the page to take a look at the actual code returned by YouTube.
The web browser views the XML data returned by the YouTube response as a newsfeed, except in this case each item is actually a video.
Requesting videos from YouTube by typing a URL into a web browser is neat and all, but what does that have to do with PHP? Why can’t we access the video results from a script?
We can, we just need a PHP function that allows us to submit a REST request and receive a response.
The function actually loads an XML document into a PHP object, which we can then use to drill down into the XML data and extract whatever specific information is needed.
Don’t sweat it if  you don’t know what an object is, especially in the context of  PHP.
A PHP object is a special data type that allows data to be packaged together with functions in a single construct.
All you need to know for now is that it’s much easier to process XML data in PHP by using objects.
You’ll learn more about how this is possible in just a bit.
Although not strictly necessary, it’s generally a good idea to store static URLs in constants so that you know where to change them if the need ever arises.
Process the response data and format it as HTML code.
So prior versions of PHP don’t have built-in support for XML processing.
I video taped it for a few seconds, and then I grapped my camera to take som.
Unfortunately it was too dark for the ph oto camera, so the pictures didn't come out.
The ball of light with the huge halo moved across the sk.
After about 2 minutes the ball of li ght disappeared, and only the trail remained.
A few minutes later several Air Force jets appeared and.
In the evening, on my way out of the park, I wa s driving down a winding road, when I saw a small ball o.
I vi deo taped it for a few seconds, and then I grapped my ca.
Unfortunately it w as too dark for the photo camera, so the pictures didn't.
All I have is the video I took before and.
The ball of light with the huge halo moved across the sk.
After about 2 minutes the ball of li ght disappeared, and only the trail remained.
A few minutes later several Air Force jets appeared and.
Oh, but there is! The XML code returned by YouTube isn’t really as messy as it looks...
YouTube speaks XML The video response from YouTube isn’t exactly a DVD packaged up in a shiny box and delivered to your front door.
No, it’s an XML document containing detailed information about the videos you requested, not the videos themselves.
Although there’s a lot going on in this XML code, one thing to home in on is that each individual video appears inside of an <entry> tag.
YouTube responds to video requests with XML data that describes the videos.
This <entry> tag starts another video within the XML response data.
Study the highlighted XML code for the YouTube response on the facing page and answer the following questions.
You might just know more about YouTube’s video XML format than you thought at first glance!
Study the highlighted XML code for the YouTube response on page 690 and answer the following questions.
You might just know more about YouTube’s video XML format than you thought at first glance!
Hmm, I’m a little confused with those XML tags that have two names separated by a colon.
Is that somehow a way to organize tags? And what about the weird &amp; code in the video category?
The unusual XML code uses namespaces and entities, which help organize tags and encode special characters.
When you see an XML tag that has two names separated by a colon, you’re looking at a namespace, which is a way of  organizing a set of  tags into a logical group.
The purpose of  namespaces is to keep tags with the same name from clashing when multiple XML vocabularies are used in the same document.
Without the media namespace in the second <title> tag, it would be impossible to tell the two tags apart if  they appeared in the same XML code.
So you can think of  a namespace as a surname for tags—it helps keep an XML document full of.
The YouTube response code uses several different namespaces, which means it is using several different XML languages at once—namespaces allow us to clearly tell them apart.
To ensure uniqueness, an XML namespace is always associated with a URL.
For example, the media namespace used in YouTube XML data is established within the <feed> tag like this:
Namespaces are named groups of XML tags, while entities are used to encode special characters within XML documents.
Following are the five predefined XML entities that you will likely encounter as you delve deeper into XML code:
This URL isn’t actually a web page - it’s just a unique identifier for a namespace.
It may seem odd that a Yahoo! namespace appears in YouTube XML code - it just means that YouTube relies partly on an XML data format created by Yahoo!
Deconstruct a YouTube XML response Once you get to know the structure of  a YouTube response, extracting the video data you need is pretty straightforward.
In addition to understanding what tags and attributes store what data, it’s also important to understand how the tags relate to one another.
If  you recall from earlier in the chapter when analyzing an RSS feed, an XML document can be viewed as a hierarchy of  elements.
The same is true for the XML data returned in a YouTube video response.
One important clue toward understanding the video data buried in this XML code is the different namespaces being used.
The media namespace accompanies most of the tags specifically related to video data, while the yt namespace is used solely with the <statistics> tag.
Finally, comments are enclosed within the <comments> tag, which falls under the gd namespace.
These namespaces will matter a great deal when you begin writing PHP code to find specific tags and their data.
The number of times the video has been viewed.The “gd” namespace stands for Google Data, and includes tags defined by.
Google for representing various kinds of data - YouTube is part of Google.
Visualize the XML video data Earlier in the chapter when working with RSS code, it was revealed that an XML document can be visualized as a hierarchy of  elements (tags) that have a parent-child relationship.
This relationship becomes increasingly important as you begin to process XML code and access data stored within it.
In fact, it can be an invaluable skill to be able to look at an XML document and immediately visualize the relationship between the elements.
Just remember that any element enclosed within another element is a child, and the enclosing element is its parent.
Working through the XML code for the YouTube video on the facing page results in the following visualization.
Q: Why do I even need to worry about namespaces? A: Because XML code generated by others often involves namespaces, which affects how you access XML elements programmatically.
As you’re about to find out, the namespace associated with an element directly affects how you find the element when writing PHP code that processes XML data.
So the namespace must be factored into code that is attempting to grab the data for a given element.
Q: How do I know if a tag is part of a namespace? A: Although it’s possible to have a default namespace that doesn’t explicitly appear in the code for a tag, in most cases you’ll see the namespace right there in the tag name, so the tag is coded as <media:title> instead of just <title>
The name to the left of the colon is always the namespace.
An element is just an abstract way of thinking of an XML tag and the data it contains.
The XML data is organized into a hierarchy of elements (tags)
The significance of  this hierarchy of  elements is that you can navigate from any element to another by tracing its path from the top of  the hierarchy.
So, for example, if  you wanted to obtain the title of  the video, you could trace its path like this:
The entry element is the topmost element in this particular chunk of XML code.
Access XML data with objects There are lots of  different ways to work with XML data with PHP, and one of the best involves objects.
An object is a special PHP data type that combines data and functions into a single construct.
But what does that have to do with XML? The entire hierarchy of  elements in an XML document is contained within a single variable, an object.
You can then use the object to drill down into the data and access individual elements.
Objects also have methods, which are functions that are tied to an object, and let us further manipulate the object’s data.
For an object that contains XML data, methods let us access the collection of  child elements for an element, as well as its attributes.
Objects are a special PHP data type that combine data and functions together.
You’ve already seen how to create this XML object for Owen’s alien abduction YouTube keyword search:
This code results in a variable named $xml that contains all of  the XML YouTube video data packaged into a PHP object.
To access the data you use object properties, which are individual pieces of  data stored within an object.
Take a look at the following example, which accesses all of  the entry elements in the document:
This code accesses all the entry elements in the XML data using a property.
Since there are multiple entry elements in the data, the $entries variable stores an array of  objects that you can use to access individual video entries.
And since we’re now dealing with an array, each video <entry> tag can be accessed by indexing the array.
For example, the first <entry> tag in the document is the first item in the array, the second tag is the second item, etc.
Each element in an XML document can be accessed as a property of an XML object.
A SimpleXMLElement object has methods that allow you to find out more about elements, such as their child elements and attributes.
This function creates a PHP object of type SimpleXMLElement containing all of the XML data in the YouTube video response.
By specifying the name of the element (entry), you can grab all of the elements that are in the XML data.
The type of PHP object that is used to store and manipulate XML data is SimpleXMLElement.
The -> operator lets you access a property within an object.
All of the video entries are stored in the $entries array.
From XML elements to PHP objects When it comes to XML data and PHP objects, you’re really dealing with a collection of  objects.
Remember that stuff  about visualizing an XML document as a hierarchy of  elements? Well, that same hierarchy is realized as a collection of  objects in PHP.
When viewed through the lens of an XML object, the hierarchy of XML elements becomes a nested collection of objects.
This element hieararchy/object collection stuff  forms the basis of  understanding how to dig through XML data in PHP.
With the relationship between individual pieces of  XML data in mind, it becomes possible to write code that navigates through the data.
Then we can isolate the content stored in a particular tag or attribute down deep in an XML document.
Most of the interesting content for a YouTube video is contained within child objects of the group object.
Drill into XML data with objects Getting back to Owen, our goal is to pull out a few pieces of  information for videos that are returned as part of  the XML YouTube response.
We know how to retrieve the XML data into a PHP object using the simplexml_load_ file() function, but most of  the interesting data is found down deeper in this data.
How do we navigate through the collection of  objects? The answer is the -> operator, which is used to reference a property or method of  an object.
In the case of  an XML object, the -> operator accesses each child object.
So this code displays the title of  a video entry stored in a variable named $entry:
This code relies heavily on the relationship between the title, group, and entry objects, which form a parent-child relationship from one to the next.
The -> operator references a child object from a parent object.
So title is a child of  group, which is a child of  entry.
Remember that the -> operator can be used to access both properties and methods.
One method that comes in particularly handy is the attributes() method, which is able to pluck out the value of  an XML attribute for a given element.
This code drills down to the duration element and then grabs all of  its attributes and stores them in the $attrs variable, which is an array of  all the attributes.
The value of  the seconds attribute is then retrieved from the array.
Here the -> operator is used to drill down through nested child objects to access the title object.
The title object is a child of the group object, which is a child of the entry object.
The attributes() method obtains an array of attributes for an object (element)
A specific attribute value can be retrieved by using the name of the attribute as the array key.
Not without a namespace! There’s a small problem with the code on the facing page that accesses XML data using objects, and it has to do with namespaces.
If  you recall, namespaces act as surnames for tags by organizing them into meaningful collections.
When an element is associated with a namespace, you can’t just reference it by tag name in PHP code.
Instead, you have to first isolate it by namespace by calling the children() method on the parent object.
This code retrieves all the child objects of  the video entry whose namespace is http://search.yahoo.com/mrss/
But that’s the URL for a namespace, not the namespace itself.
This URL is located in the <feed> tag at the start of the XML document.
This is where you’ll find all the namespaces being used.
This code reveals how each namespace is associated with a URL.
More specifically, it shows how the media and yt namespaces are specified for use in the document.
This is all you need to find tags related to these two namespaces.
Once you’ve isolated the child elements for a particular namespace by calling the children() method on the parent element, you can then resume accessing child objects with the -> operator.
For example, this code obtains the video title from the <media:group> tag:
Using the namespace information and PHP code above, finish the PHP code that gets the duration (in seconds) of a video clip.
Namespaces make it a bit trickier to access elements within XML data.
Use the children() method to isolate all elements associated with a namespace.
The children() method returns an array containing all of the child elements that are within the specified namespace.
Using the namespace information and PHP code above, finish the PHP code that gets the duration (in seconds) of a video clip.
The name of the attribute is used as the key for accessing the attribute array.
Q: How is an object different than an array? Don’t arrays also store collections of data?
But one huge difference is that objects can have executable code attached to them in the form of methods.
Methods are pretty much the same as functions except that they are tied to an object, and are usually designed to work specifically with the data stored in an object.
Arrays are purely about storing a set of related data, and have no notion of methods.
Additionally, array elements are accessed by specifying the index or key of an element inside square brackets ([]), while object properties and methods are accessed by name using the -> operator.
Q: What exactly is an object? Is it like a normal variable? A: Yes.
An object is exactly like any other variable in PHP; it’s just that it is able to store more complex data.
So instead of just storing a string of text or a number, an object is able to store a combination of strings, numbers, etc.
The idea is that by combining related data together with functions that act on them, the overall design and coding of applications becomes more logical.
Q: So how do objects help in processing XML data? A: Objects help in regard to XML data processing because they are able to model the element hierarchy of an XML document in nested child objects.
The benefit to this approach is that you can navigate through child objects using the -> operator and access whatever data you need.
Q: I thought the -> operator was for accessing object properties.
How does it allow me to access a child object?
A: The reason is that when dealing with XML objects in PHP, child objects are actually stored as properties.
So when you use the -> operator to access a child object, you really are just accessing a property.
Q: Hang on, what’s the SimpleXMLElement object? A: Every object in PHP has a specific data type, meaning that “object” is really a generic term.
So when you create an object, you’re creating an object of a specific type that is designed to accomplish a specific task.
Q: What do I need to know about SimpleXMLElement? A: Surprisingly, not a whole lot.
The main thing to know is that it exposes the elements in an XML document as properties, and that these properties lead to child objects that themselves are instances of the SimpleXMLElement object, and so on.
The SimpleXMLElement object also has methods that allow you to access data within an element, such as children() and attributes()
Fang sightings are on the rise While Owen has been busy brushing up on XML and figuring out how to communicate with YouTube, Fang has been busy.
Numerous video sightings have turned up with the little guy apparently serving as a tour guide for his alien abductors.
Owen is ready to finish up the YouTube script, get some videos showing on the Aliens Abducted Me home page, and find his lost dog.
Process the response data and format it as HTML code.
This XML stuff is fascinating but I have a dog to find.
I keep hearing rumors about new Fang sightings on YouTube...
I really need to get those videos on my home page.
The good news is that Owen is almost finished with the YouTube script.
In fact, all that’s left is to finish processing the XML data and format it as HTML code.
Knock out this step and the youtube.php script will be done!
Draw how you would format YouTube response data as videos along the bottom of  the main Aliens Abducted Me page:
Lay out videos for viewing The idea behind the youtube.php script is that it will be included in the main index.php script for Aliens Abducted Me.
A good way to accomplish this is to arrange the videos horizontally along the bottom of  the page.
Arranging the videos horizontally on the main page keeps them from detracting too much from the alien abduction reports.
Also, we’re talking about arranging the video thumbnail images, not the videos themselves, so users will have to click a thumbnail to visit YouTube and see the actual video.
It would eat up too much screen real estate to attempt to show multiple videos large enough to be embedded directly on the Aliens Abducted Me page.
Five video thumbnails is a decent number to arrange horizontally without taking up too much room.
The youtube.php script will be included so that the videos appear just below the alien abduction reports.
These are the videos dynamically accessed from YouTube as XML data.
This row of video thumbnail images is what the youtube.php script is responsible for generating.
This is a good spot to show the row of video thumbnails so that visitors can easily access them.
Format video data for display Although a video thumbnail image is certainly one of  the most important pieces of  information when assessing whether or not a video is worth watching, it isn’t the only data useful for Owen’s YouTube script.
For example, the title of  a video could hold some important information about the nature of  the video—like whether it might include a dog.
And of  course, we need the URL of  the video link to YouTube so that the user can click on a video thumbnail to actually view a video.
So the following information is what we need to extract from the XML data in the YouTube response:
This data forms the basis for the HTML code that displays a horizontal row of videos.
In fact, each video in the row ends up looking like this:
In the YouTube response data, the length of  a video is specified in the seconds attribute of  the <yt:duration> tag.
Unfortunately, most people don’t think in terms of  total seconds because we’re accustomed to times being specified in minutes and seconds.
Knowing this, it’s a good idea to go ahead and do the math for users when displaying the length of  a video, converting seconds into minutes and seconds.
It isn’t necessary to factor in hours in the video length calculation because YouTube doesn’t currently allow videos longer than 10 minutes to be posted.
Several pieces of video data are required in order to place YouTube videos on a web page.
This link leads to the video on YouTube, and is followed whenever the video title, length, or thumbnail image is clicked.
That is, unless you’re part of the YouTube Director program, in which case you can post videos longer than 10 minutes.
The youtube.php script uses PHP code to grab the top five matches for an alien abduction YouTube video search.
It then displays thumbnail images for those videos in a horizontal row, with links to the actual videos on YouTube.
Fill the missing code for the script, using the example YouTube XML video response data on the facing page as a guide.
Feel free to reference this example XML code while writing the missing PHP code.
Yosemite Park is very close to the border between California and Nevada, and close to Area 51..
The URL of a thumbnail image (preview) of the video.
The youtube.php script uses PHP code to grab the top five matches for an alien abduction YouTube video search.
It then displays thumbnail images for those videos in a horizontal row, with links to the actual videos on YouTube.
Fill in the missing code for the script, using the example YouTube XML video response data on the facing page as a guide.
Grab the video link (URL) from the url attribute of the <media:player> tag.
The number of videos to be displayed is stored as a constant.
Check to see how many videos were actually returned by YouTube by counting the number of <entry> tags.
Loop through the video data one entry at a time.
Grab all of the children for this entry that are in the Yahoo! media namespace, media.
Extract the title of the video entry, which is stored in the <media:title> tag.
Grab all of the children for this entry that are in the YouTube namespace, yt.Get the duration of the.
Yosemite Park is very close to the border between California and Nevada, and close to Area 51..
The URL of a thumbnail image (preview) of the video.
Format the video results as a table cell with the video title, length, and thumbnail image.
Extract the first thumbnail image URL from the url attribute of the <media:thumbnail> tag.
Process the response data and format it as HTML code.
You still need to plug the script into the index.php script to turn YouTube videos loose on the main Aliens Abducted Me page.
Here are the two lines of  PHP code to do it:
Including the youtube.php script in the main page is all it takes to add the row of alien abduction videos.
Upload the scripts to your web server, and then open index.php in a web browser.
The bottom of  the page should show a dynamically generated row of  YouTube video links that are related to alien abductions.
Your PHP & MySQL Toolbox With Fang now accounted for, it’s possible to reflect a little on what all.
As it turns out, PHP and MySQL required some help from a few other technologies.
There are many different markup languages built from XML, such as XHTML and RSS.
The idea is that you create a set of tags specific to whatever data you’re storing as XML.
SimpleXMLElement A built-in PHP object that is used to access XML data.
Namespace A way of organizing a set of XML tags into a logical group, sort of like how your last name organizes your family into a named group.
A namespace is always associated with a URL, which ensures uniqueness among all other namespaces.
There are just a few more things we think you need to know.
We’ve used the mysqli family of  functions in this book, which are only available in PHP 4.1 and later, and since the library has to be manually installed, some servers won’t support mysqli.
Mysqli functions are generally faster, but this really only begins to matter when your database becomes huge.
Small or average databases won’t be perceptibly slower with the older mysql functions.
This section is designed to tell you how to retrofit your mysqli functions to work as mysql functions with older versions of  PHP.
In general, you just remove the i from mysqli, making it mysql, and then swap the order of the arguments so that the database connection variable ($dbc in this example) appears last.
There’s nothing quite like that in the mysql family of functions.
For the single mysqli_connect() function that uses a database name, you’ll need two mysql functions.
The database connection variable is not the first argument here, as it is with mysqli_select_db()
Here the database is selected as part of making the connection - something that isn’t possible in one step with mysql functions.
With mysql functions, it always takes two function calls to establish a connection with a specific database.
This connection variable is also known as a database connection “link.”
Return the text of  the error message from previous MySQL operation.
The order of  arguments is opposite, expects the string, then the connection (link)
Fetch a result row as an associative array, a numeric array, or both.
The order of  arguments is opposite, expects the string, then the connection (link)
The order of  arguments is opposite, expects the string, then the connection (link)
User permissions in MySQL Suppose you’ve created a web application that only allows visitors to SELECT data from your table.
You perform queries on your data using a specific database, and MySQL gives you power over your data.
But consider this: the login and password you use in your mysqli connection string would, if  connected directly to the database via the MySQL terminal or GUI, allow the user to INSERT, UPDATE, and DELETE data.
If  your application doesn’t need to do those things, there’s no reason why the user/password you are using to connect with needs to be able to.
With MySQL, you can limit the access to your database.
You can tell MySQL to only allow the user to SELECT.
And what’s even more impressive, you can control access to specific tables.
First, you may want to create an entirely new user/password to be used for your application.
Then you can use the MySQL GRANT command to control what alienguy can do to your database.
If he only needed to SELECT and INSERT data into your database, this would work:
You can set very specific user privileges, even control what your user can do to a specific column.
If  you don’t like using the MySQL terminal to create users and set privileges, you can download and install a handy program caled MySQLAdministrator.
The MySQL Administrator lets you control your user accounts and what each user account can access in your database.
It even allows you to specify which kind of  queries that user can perform on each table in your database.
To control the access every user has to each table and each query, open the MySQL Administrator application, and click on the Accounts tab.
Here’s the interface and an overview of  how to control what each user can do.
You can create new users to specifically set the control each has for a given application.
Here is your list of tables in a given database.
If you look through this list, you’ll recognize the main MySQL statements you’ve seen in this book.
After you give your new user a name and a password, click this to GRANT him privileges.
Error reporting for MySQL In many of  our code examples, you’ll see lines like this:
It tells us that something went wrong, but it doesn’t give us information beyond that.
Fortunately, PHP offers a function, mysql_error(), that will give us a clue as to exactly what went wrong.
Consider this code where we are trying to connect to a MySQL server that doesn’t exist:
There are dozens more, and it would be a waste of  paper to list them here.
Browse on over to this site to get more information:
We try to connect to a database that doesn’t exist.
We try to SELECT from a table that doesn’t  exist.
The “try” block is used to test our value without ending the code flow.
If our exception occurs, we execute the code in this block.
Exception handling allows you to change the normal flow of  your code and execute a special block of  code when a specific exception occurs.
Let’s say you want to withdraw $200 bucks from an ATM.
Here’s how this scenario might play out in PHP code with the help of  exception handling to catch the failure.
Try - This block is where you check to see if  your value is what you expect it to be.
If  it is, everything is great, and your code continues on its way.
And when something is thrown, there needs to be something to catch it.
If  there is an exception, the “catch” block code is executed.
Throw - The “throw” commands the “catch” block and sends it an error message.
Catch - An object is created with the exception information.
Object-oriented PHP Object-oriented languages use a very different progamming model than their procedural counterparts.
You’ve been using PHP procedurally, but it also has an object-oriented side.
Instead of  a chronological step-by-step set of  instructions, particular structures become objects.
Objects include not only a definition of  your data, but also all the operations that can be performed on it.
When you use object-oriented PHP, you create and work with objects.
Before we discuss why you might want to use OO PHP, let’s write some:
This is a method that uses the instance variables of the object.
This sets the title and lyrics of a song when we create one.
Here’s where we call the sing() method for our object.
But if  you can just write the echo code without all the object stuff, why use OO PHP?
Instead of  a chronological step-by-step set of  instructions, your data structures become objects.
Objects include not only a definition of  your data, but also all the operations that can be performed on it.
In our Song example, we set the title and lyrics of  the song inside the class, and we create the sing() method inside the class.
If  we needed to add more functionality to our Song object, we’d add new methods and variables to our Song class.
For example, if  we wanted the songwriter for each song to be associated with each song object, we could add that as a variable in our class.
The power of  OO really shines as an application grows.
Suppose we decided to use the Song class as part of  a karaoke application with hundreds or even thousands of  individual song objects, all with their own unique titles, lyrics, and songwriters.
Now let’s say someone wants to choose from only songs that were written by Elvis.
All we’d have to do is look at the songwriter instance variable of  each object.
And to actually feed the lyrics to the karaoke application? We could just call the sing() method on each song object when it is being performed.
Even though we’re calling the exact same method on each object, it is accessing data unique to each of  the objects.
So two big advantages of using Object Oriented PHP are: Objects can be easily reused.
They are designed to be independent of  the code where they are used and can be reused as needed.
If  a data type needs to change, the change occurs only in the object, nowhere else in the code.
A big disadvantage is that, in general, OO code can be longer and take more time to write.
If  you simply need to display the lyrics from one song, then writing a small procedural program might be your best bet.
But if  you think you might want to build that online karaoke app, consider diving further into object-oriented PHP.
There are some simple steps you can follow to protect your PHP scripts from those nefarious hackers that are crouched over their keyboards waiting for you to slip up.
When you first start building PHP applications on new web servers, you’ll probably create a script that contains the phpinfo() function, so you can see what version of  PHP you are using and if  it has MySQL support, along with a list of  other installed libraries.
It’s fine to check with phpinfo(), but you should remove that function after you’ve taken a look.
If  you don’t, any hacker out there who discovers a new PHP vulnerability will be able to see if your site is susceptible to it.
If  you aren’t using a web hosting service and have access to the php.ini file, there are a few changes you can make to it to further secure your PHP applications.
Ironically, the location of  your php.ini file can be found by using phpinfo():
After you write it down, remember to delete the phpinfo() function.
Here are some specific settings you should consider changing in the php.ini file.
Open the file in a text editor, make the changes, save them, and then restart your web server.
Obviously, if  you need to allow scripts from other owners to call yours, you can’t use this setting.
Turning it off  hides that information and makes your server a little less exposed.
Hopefully, you’ve already addressed errors, but sometimes things slip through the cracks.
To hide the error messages from site visitors, set this to Off.
When you want to check your application for errors, this is a good place to begin.
This is where your errors will be written when log_errors is set to On.
Protect your app from cross-site scripting You may have heard of  cross-site scripting sometimes referred to as XSS.
Cross-site scripting is an attack against a web app where script code is passed to your form processing script and hijacks your output.
Let’s take a look at precisely what it is and how to defend against it.
Cross-site scripting usually takes advantage of  sites that display user-submitted data.
Any data you get from your users and display could potentially be corrupt and cause visitors to your site to be vulnerable to a hacker.
Using an XSS attack, a hacker can do any number of things.
One of  the worse is to redirect your results page to a page on a site under their control that might ask the user for further information.
Your user might not notice that he’s no longer on your site, and since he trusts your site, he might willingly submit sensitive information directly on the attackers server.
Here’s how it might happen on the Guitar Wars site:
Ethel, instead of  submitting her name in the Name field on the form, types in some JavaScript code.
In the example, she’s using the window.location function to redirect the browser to her own site.
And since she controls her own site, she can show the visitor anything she wants, including a site that looks just like Guitar Wars.
She could do something even more nefarious with sites that expect people to submit more important information than high scores, such as financial information.
There are other, even more insidious things that she could do, including stealing cookies or presenting the user with a screen that appeared to be a login screen.
As soon as the user logs in, she has his username and password and can pretend to be him back on the original site.
So how do you avoid cross-site scripting attacks on your web applications?
I’m going to hijack your site, and you’re going down!
If Ethel can’t cheat, she’ll redirect the scores page to her own site with cross-site scripting.
All she has to do is submit this code in the name field on the form.
When someone views the score, their browser will be redirected to her web site with this JavaScript code.
Fortunately, if  you are validating your data, you are already on the road to protecting your application.
You’ve already learned how to do just that in Guitar Wars.
Here are three guidelines that will keep your applications safe:
Validate everything Any data that you receive, such as form input, needs to be validated so that hacker code is detected before it can harm your application.
If  you assume the data is bad until you prove that it’s not through validation, you’ll be much safer.
Built-in PHP functions can help Use built-in PHP functions such as strip_tags() to help you sanitize external data.
Data is guilty until proven innocent Start with the most restrictive validation you can, and then only ease up if  you have to.
For example, if  you begin by accepting only numbers in a phone number field, then start allowing dashes or parentheses, you’ll be much safer than if  you allowed any alphanumeric characters in the first place.
Or in the case of  Guitar Wars, if  we don’t allow anything except letters in the name field, we’ll never even get the less than sign (<) that opens Ethel’s evil JavaScript code.
Regular expressions (Chapter 10) can go a long way toward making sure only the exact data you want is allowed.
We can’t tell from the code, but we can assume certain rules of  precedence.
By precedence, we mean the order in which they are executed.
Operators in PHP are carried out in a certain order.
Depending on what we need our code to output, we could have written it two different ways.
Using parentheses allow you to precisely control the order of  operations.
But knowing the precedence of  operators in PHP can help you figure out what’s going on in a complex expression.
And, trust us, it will help you debug your code when you’ve forgotten to use parentheses.
Before we get to the PHP operator precedence list, here’s another reason why you should use parentheses.
Instead, it’s better to code with parentheses, like in these two lines:
Now the list, from highest precedence (evaluated first) to lowest (evaluated last)
Comparison operators, like those you use in IF statements, also have a precedence.
More Unicode support Suppose your application needed to output text in Greek.
Consider the kinds of  things you sometimes have to do with strings, such as needing to know the length of  them or sorting them.
It’s straightforward in English, but when you are working with characters in other languages, string operations become more complicated.
Unicode is a set of  characters and technologies to encode them.
In Unicode, the Greek character that looks like a triangle has a specific numeric value assigned to it, along with other characters in other languages.
Unicode is a standard, which means it receives wide support from major technology providers.
In Unicode, every character has a unique number, no matter what language, program, or platform is used.
Before the advent of  PHP 5, PHP had no real support for Unicode.
But PHP 6 is being worked on and is available for developers here: http://snaps.php.net/
One of  the biggest changes here is that dynamic functions will no longer be permitted to be called with static syntax.
There are any number of  small, but important, changes to the way PHP handles its OO code that make it more consistent with other OO languages such as C++ and Java.
Both XML Reader and XML Writer will be extensions in PHP 6, making it easier to work with XML files.
The ereg extension, which provided another way to build regular expressions, is removed.
Version 6 of  PHP is, more than anything, a version that cleans up and refines the language.
Reusing other people’s PHP It’s not always necessary to write your own PHP code from scratch.
The following are several popular and highly successful PHP-based software packages that you should consider using if  you have a need and would prefer not reinventing the PHP wheel.
Drupal One of  the most impressive PHP projects to date, Drupal is a powerful content management system that can be used to build just about any kind of  content-driven web site.
It’s flexible enough to build just about anything that is heavy on content.
It is extremely flexible and hard to beat at the one thing it does so well—managing threaded discussions.
Coppermine Gallery If  image hosting is what you have in mind, Coppermine Gallery is the PHP application to check out.
In an era of Flickr, Photobucket, Shutterfly, and Snapfish, hosting your own photo library sounds downright quaint.
But with control comes power, and if  you want complete control over your photos, take a look at Coppermine Gallery at http://coppermine-gallery.net/
WordPress One of  the heavy hitters in the blogosphere, WordPress is PHP-based blogging software that lets you build and maintain a blog with minimal hassle.
There’s lots of  competition out there, so you might want to do some exploring, but you could do worse than to pick WordPress if  you’re launching a blog.
Hold it right there! Why bother learning PHP if you’re just going to reuse other people’s code?
Because reusing code isn’t always as simple as it sounds—sometimes it requires PHP skills.
Many PHP software packages still require customization, and that often requires some strong PHP development skills.
Not only that, but you may elect to only reuse a small component of someone else’s code, or not reuse it at all.
Either way, by having PHP knowledge, you have options, and options are always a good thing!
Another really nice PHP-based content management system is Joomla!, which you can learn about at http://www.joomla.org/
He thinks I’m a great cook, but I hide all my mistakes before he sees them.
You need a place to practice your newfound PHP and MySQL skills without making your data vulnerable on the web.
It’s always a good idea to have a safe place to develop your PHP application before unleashing it on the world (wide web)
Before trying to install any of  the pieces of  the PHP development puzzle, your best bet is to first evaluate what you already have installed.
Let’s take a look at the three pieces and how you can tell what’s already on your system.
The platform of  your local computer makes a big difference when it comes to what’s already installed.
For example, Mac OS X has a web server installed by default, while most Windows computers do not.
Before you can put your finished application on the web, you need to develop it.
And it’s never a good idea to develop your web application on the Web where everyone can see it.
You can install software locally that lets you build and test your application before you put it online.
There are three pieces of  software you’ll need on your local computer to build and test PHP applications:
Both the web server and the MySQL server are executable programs that run on a computer.
Keep in mind that we’re talking about setting up your local computer as a web server for PHP development.
You’ll ultimately still need an online web server to upload your finished application to so that other people can access and use it.
The MySQL database server is often installed on the same computer as the web server software - in this case your local computer!
In a PHP development environment, your local computer acts as a server computer for the purposes of running PHP scripts.
Web server software such as Apache is required to serve up PHP scripts as web pages.
You probably already have a web server if  you are using a newer PC or Mac.
To find out quickly on either system, open a brower window and type http://localhost in the address bar.
If  you get an introductory page, that means your web browser is alive and well on you local machine.
Save this file to the directory your web server uses.
If you have a Windows machine with IIS, you might see something like this.
If you have a Mac or Windows machine with the Apache web server installed, you might see something like this.
To determine if  you have MySQL on the Mac, open your terminal and type:
The MySQL Terminal is also known as the MySQL “monitor.”
Start with the Web Server Depending on the version of  Windows you have, you can download Microsoft’s Internet Information Server (IIS), or the open source Apache web server.
If  you need a server on the Mac, you should probably go with Apache since it’s already installed.
This will automatically install Apache for you after you download and double click it.
Grab this version and double click on it after you’ve downloaded it.
Most of the instructions are straightforward, and you can accept the default choices.
Your best bet is to choose the typical installation option.
You can usually choose the default directory for installation of  the software.
Click Install and wait a minute or so for the installation to complete.
Your web server is set to start automatically when you start up your computer.
This will automatically install PHP for you after you download and double click it.
After you click the file, click one of the locations and download it.
Selecting the default installation folder is usually a good idea.
If  you’re using IIS, you will probably select the IISAPI module.
Check with your particular software to determine exactly what you need.
You need to scroll down under Extensions and choose MySQLi.
This will enable you to use the built in PHP mysqli functions that we use throughout this book!
You still need MySQL, so let’s work through the downloading and installing of MySQL.
The official name for the free version of  the MySQL RDBMS server these days is MySQL Community Server.
The following is a list of  steps for installing MySQL on Windows and Mac OS X.
This is not meant to replace the excellent instructions found on the MySQL web site, and we strongly encourage you to go there and read them! For much more detailed directions, as well as a troubleshooting guide, go here:
You’ll also like the MySQL Query Browser we talked about.
There, you can type your queries and see the results inside the software interface, rather than in a console window.
Under Windows downloads, we recommend that you choose the Windows ZIP/Setup.EXE option because it includes an installer that greatly simplifies the installation.
You’ll see a list of  locations that have a copy you can download; choose the one closest to you.
When the file has finished downloading, double-click to launch it.
At this point, you will be walked through the installation with the Setup Wizard.
When you’ve double-clicked the file and the Setup Wizard dialog appears, click the Next button.
You can change the location on your computer where MySQL will be installed, but we recommend that you stay with the default location:
If  you are running Mac OS X Server, a version of  MySQL should already be installed.
Before you begin, check to see if  you already have a version installed.
You have to access the main Apache configuration file and comment out a line of  code in order to get PHP going.
This file is called http.conf, and is a hidden file located down inside the Apache install folder.
You're looking for the following line of  code, which has a pound symbol (#) in front of  it to comment it out:
You need to remove the pound symbol and restart the server to enable PHP.
The http.conf  document is owned by "root," which means you'll have to enter your password to change it.
You'll probably also want to tweak the php.ini file so that Apache uses it.
For more detailed information about how to carry out these steps and enable PHP, visit http://foundationphp.com/tutorials/php_ leopard.php.
Choose the appropriate package for your Mac OS X version.
You’ll see a list of  locations that have a copy you can download; choose the one closest to you.
When the file has finished downloading, double-click to launch it.
You can now open a Terminal window on your Mac and type:
Moving from production to a live site You’ve spent days or weeks working on your site, and you feel it’s ready to go live.
To move your PHP and MySQL site from your local computer to the web requires a little planning and a few specific techniques.
First, you need to make sure that the place your site is going has the same versions of  PHP and MySQL you expect.
If  not, you may need to make your code to match what is available.
Most of  the code in this book is portable, but you may need to retrofit your PHP code back to the mysql functions, as opposed to the mysqli functions we use in this book.
If  that’s the problem, check out #1 of  The Top Ten Topics (we didn’t cover) for more information.
If  the software on your live site is compatible, then moving your site over is simple.
Upload the PHP files from your production server to the web directory on your live server.
Keep the file structure intact, and make sure you don’t lose any folders you might have created to contain your included files.
Do a database dump (which we’ll show you in a moment) to get the MySQL statements you need to create your tables and the INSERT statements you need to move your data from the table on the production server to the live server.
MySQL statements to move your data from your local site to the live site.
Modify any database connection code in your PHP files to point at the live database server.
If  you don’t change this, your live code will try to connect to your production site and won’t be able to connect.
You need to get at the structure of your tables and the data stored in them.
Your PHP files need to be FTP'ed to the web directory of your live site.
Your SQL dump will give you the exact syntax of your CREATE TABLE statements and INSERT statements.
Change those mysqli_connect() statements to point at your MySQL server associated with your live site, along with the correct username and password to get you connected.
Dump your data (and your tables) You’ve FTP'ed your PHP files to the live server, but your data is still not on the live site’s MySQL server.
When your table is full of  data, the idea of  moving it to another MySQL server can be daunting.
Fortunately, bundled with MySQL is the MySQLdump program, which gives you an easy way to recreate the CREATE TABLE statement that can recreate your table and all the INSERT statements with the data in your table.
To make a copy of  your data that you can move to another MySQL server, type this in your terminal:
It’s not very useful, but you’ll see all your data fly by, nicely formatted in INSERT statements.
Once you’ve sent all that data to your new file using the greater than sign, you can grab that file and use the contents as MySQL queries at your hosting site to move your tables and your data.
Get ready to move your data by running a CREATE DATABASE statement on your live MySQL statement.
Now you are ready to move your data from your production server to your live server.
The mysqldump always writes a DROP statement to start with a clean slate before doing a CREATE and INSERT.
Mysqldump makes a single INSERT statement that inserts every row in the table.
You can ignore this LOCK statement and copy and paste starting at the INSERT statement.
If you know there isn’t a table named “jobs” where you are creating this one, you can ignore this command.
Take the entire text of the .sql file and paste it into your MySQL terminal or the query window of your MySQL graphical client (like phpMyAdmin)
In the case of  the example on this page, the dumped file contains a CREATE TABLE statement and an INSERT statement.
Along the way, the dumped file tells your MySQL server to drop any existing table and to LOCK (or keep anyone from using) the table while you INSERT the new data.
You’ve taken your table structures as CREATE TABLE statements and your data as a massive INSERT statement from the mysqldump and executed them on your live web server, so your data has been moved.
The PHP code you FTP'ed to your live web site isn’t connecting to your live MySQL server.
You need to change the connection string in your mysqli_connect() function to point to your live MySQL server.
Anywhere in your PHP code where you call the mysqli_connect() function, you’ll need to change it.
This will be the name or IP address of your live site.
It will only be “localhost” if your MySQL server is on the same machine as your PHP pages.
This will be the name of the database you created on your live server.
Yes, you can program with PHP and MySQL and create great web applications.
This short appendix will show you how to install the mysqli extension.
You probably already have both the mysqli and GD modules on your computer.
And even if  you don’t, adding them is relatively easy.
We’ll show you how to check to see what you have, if  you’re missing one of  them, how to get it, and how to activate one or both modules.
This book discusses installing both the mysqli and GD modules on Windows.
In this section, we’ll show you how to see what modules you have, how to get GD or mysqli if  you are missing them, and how to install them in Windows.
Unfortunately, installing these modules on a Mac or Linux system is kinda tricky.
First, figure out if  GD or mysqli is on your system.
To do that, begin by navigating to the directory where the PHP extensions are installed.
They are typically in the C:/PHP/ ext directory, although the path may be different on your machine.
In general, these are installed with PHP 5 and later, and simply need to be activated.
Chances are you already have both DLLs on your machine, but if  you don’t, you can find php_gd2.dll at: http://www.libgd.org/Downloads.
Download it and copy it to the folder ext under your PHP install.
Grab the version of mysqli to match your version of PHP.
We need to tell our php.ini file to use these DLLs.
To do that, browse to the directory it’s in, and open the file in a text editor.
Sometimes your PHP install ends up in the Program Files\PHP directory.
Find your php.ini file and open it for the next step.
Delete the semicolons from in front of these two lines if they have them.
The last step is to restart your Apache web server so that the changes you made to your php.ini file will take effect.
Click the Apache service, then click on Restart from the menu on the left.
The next time you try to use the GD or mysqli functions, they should work correctly.
Adding modules on the Mac means recompiling the PHP source code and passing in arguments to add in the modules you want.
There are simply too many possible combinations of Mac operating systems and PHP versions to include in this short appendix.
There is a terrific guide that may help you install the GD module located here:
It will only work if  you have the right OS X version (Leopard), and the right PHP version (5)
If  you don’t, or the instructions don’t work for you, you may want to dig through the comments on that site and on the original GD website, http://www.libgd.org/, for more detailed and specific installation instructions for your flavor of  OS X and PHP.
For help in adding mysqli to your Mac version of  PHP, which also means recompiling PHP, we recommend the instructions here:
Keep in mind that this complication of installing the GD and mysqli extensions only applies if you’re trying to run a web server on a Mac, such as a local development server.
But if you’re just using a Mac to write PHP code that is being uploaded and tested on some other server, it’s not an issue.
