There are books you buy, books you keep, books you keep on your desk, and thanks to O’Reilly and the Head First crew, there is the ultimate category, Head First books.
They’re the ones that are dog-eared, mangled, and carried everywhere.
Head First SQL is at the top of  my stack.
This is not SQL made easy; this is SQL made challenging, SQL made interesting, SQL made fun.
Even many of  the more advanced concepts are covered in a way that almost anyone should be able to easily follow...if  your database does ever grow to the point where you need to use the more advanced commands this same book will show you how.
Jammed with exercises, thoughtful questions, cartoons and side comments that make you giggle while making an important point, this book provides the most enjoyable way to learn SQL than I can imagine—well, short of  learning it pool side in the Bahamas anyway.
It even includes crossword puzzles to help the reader quiz himself  on what he’s learned.
If  you want to have a fun time learning SQL, this is the way to do it.
It gets down to hardcore SQL and keeps you thinking not just about what you’re doing, but why you’re doing it with its lively examples.
If  you thought Ajax was rocket science, this book is for you.
Head First Design Patterns managed to mix fun, belly-laughs, insight, technical depth and great practical advice in one entertaining and thought provoking read.
This book is close to perfect, because of  the way it combines expertise and readability.
Just the right tone for the geeked-out, casual-cool guru coder in all of  us.
Wouldn’t it be dreamy if there was a book that could teach me SQL without making me want to relocate to a remote island in the Pacific where there are no databases? It’s probably nothing but a fantasy...
O’Reilly Media books may be purchased for educational, business, or sales promotional use.
Many of  the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks.
Where those designations appear in this book, and O’Reilly Media, Inc., was aware of  a trademark claim, the designations have been printed in caps or initial caps.
While every precaution has been taken in the preparation of  this book, the publisher and the authors assume no responsibility for errors or omissions, or for damages resulting from the use of  the information contained herein.
No clowns, doughnuts, or Girl Sprouts were harmed in the making of  this book.
Lynn is a fiction writer stuck in a technical book writer’s body.
Upon discovering that technical book writing actually paid real money, she learned to accept and enjoy it.
After going back to school to get a Masters in computer science, she worked for the acronyms NRL and LANL.
A victim of  bad timing, she moved to Silicon Valley just before the great crash.
She spent several years working for Yahoo! and writing other books and training courses.
Finally giving in to her creative writing bent, she moved to the New York area to get an MFA in creative writing.
Her Head First–style thesis was delivered to a packed room of professors and fellow students.
It was extremely well received, and she finished her degree, finished Head First SQL, and can’t wait to begin her next book.
Lynn loves traveling, cooking, and making up elaborate background stories about complete strangers.
Here you are trying to learn something, while here your brain is doing you a favor by making sure the learning doesn’t stick.
So turn the page, come on in, and take a walk through the world.
Think of a database like a container that holds information…
Why be normal?You’ve been creating tables without giving much thought to them.
But as you get more data, you start seeing things you wish you’d done to make your WHERE clauses simpler.
What you need is to make your tables more normal.
Even better, you can do it without affecting your data.
It’s time to turn your tired old hooptie table into a date magnet and take it to a level of table pimpification you never knew existed.
Seeing your data with new eyesIt’s time to add a little finesse to your toolbox.
You already know how to SELECT data and use WHERE clauses.
But sometimes you need more precision than SELECT and WHERE provide.
Outgrowing your tableSometimes your single table isn’t big enough anymore.
Your data has become more complex, and that one table you’ve been using just isn’t cutting it.
Your single table is full of redundant data, wasting space and.
You’ve gone as far as you can go with a single table.
It’s a big world out there, and sometimes you need more than one table to.
Can’t we all just get along?Welcome to a multi-table world.
It’s great to have more than one table in your database, but you’ll need to learn some new tools and techniques to work with them.
With multiple tables comes confusion, so you’ll need aliases to keep your tables.
And joins help you connect your tables, so that you can get at all the data you’ve.
Get ready, it’s time to take control of your database again.
Queries within queriesYes, Jack, I’d like a two-part question, please.
Joins are great, but sometimes you need to ask your database more than one question.
Or take the result of one query and use it as the input to another query.
Well, not really, but two out of three ain’t bad.
New maneuversYou only know half  of  the story about joins.
You’ve seen cross joins that return every possible row, and inner joins that return rows from both tables where there is a match.
But what you haven’t seen are outer joins that give you back rows that.
Too many cooks spoil the database constraints, views, and transactions.
Your database has grown and other people need to use it.
The problem is that some of them won’t be as skilled at SQL as you are.
In this chapter we begin protecting our data from the.
You’ve put an enormous amount of  time and energy into creating your database.
You’ve also had to give other people access to your data, and you’re worried that.
There are just a few more things we think you need to know.
Besides, once you’re done here, all that’s left is another appendix...
All your new SQL skills won’t do you much good without a place to apply them.
This appendix contains instructions for getting your very own MySQL RDBMS for you to work with.
Do you want to learn, understand, and remember how to create tables, databases, and write queries using the best and most recent standards?
Do you prefer stimulating dinner party conversation to dry, dull, academic lectures?
Are you completely comfortable with beginning SQL syntax and seeking something that will help you with advanced database design?
Are you already an experienced SQL programmer and looking for a reference book on SQL?
Are you afraid to try something different? Would you rather have a root canal than mix stripes with plaid? Do you believe that a technical book can’t be serious if SQL concepts are anthropomorphized?
We’ll help you learn SQL concepts and syntax in a way that will definitely make it easier for you to understand and actually use.SQL precisely the way you need to use it.
But if you would like a refresher, and never quite understood normal form and one-to-many and left outer joins, this book can help you.
Do you have access to a computer with an RDBMS installed on it, like Oracle, MS SQL, or MySQL? Or one that you can install MySQL, or other RDBMS on?
It was built that way, and it helps you stay alive.
So what does your brain do with all the routine, ordinary, normal things you encounter? Everything it can to stop them from interfering with the brain’s real job—recording things that matter.
It doesn’t bother saving the boring things; they never make it past the “this is obviously not important” filter.
How does your brain know what’s important? Suppose you’re out for a day hike and a tiger jumps in front of  you, what happens inside your head and body?
This must be important! Don’t forget it! But imagine you’re at home, or in a library.
Or trying to learn some tough technical topic your boss thinks will take a week, ten days at the most.
It’s trying to make sure that this obviously non-important content doesn’t clutter up scarce resources.
Resources that are better spent storing the really big things.
And there’s no simple way to tell your brain, “Hey brain, thank you very much, but no matter how dull this book is, and how little I’m registering on the emotional Richter scale right now, I really do want you to keep this stuff  around.”
Which would you pay mo re attention to: a stimulat.
We think of a “Head First” reade r as a learner.
If  you really want to learn, and you want to learn more quickly and more deeply, pay attention to how you pay attention.
Most of  us did not take courses on metacognition or learning theory when we were growing up.
We were expected to learn, but rarely taught to learn.
But we assume that if  you’re holding this book, you really want to learn about SQL.
And you probably don’t want to spend a lot of  time.
And since you’re going to create databases, you need to remember what you read.
To get the most from this book, or any book or learning experience, take responsibility for your brain.
The trick is to get your brain to see the new material you’re learning as Really Important.
Otherwise, you’re in for a constant battle, with your brain doing its best to keep the new content from sticking.
I wonder how I can trick my brain into remembering.
So just how DO you get your brain to think that SQL is a hungry tiger? There’s the slow, tedious way, or the faster, more effective way.
You obviously know that you are able to learn and remember even the dullest of  topics if  you keep pounding the same thing into your brain.
With enough repetition, your brain says, “This doesn’t feel important to him, but he keeps looking at the same thing over and over and over, so I suppose it must be.”
The faster way is to do anything that increases brain activity, especially different types of  brain activity.
The things on the previous page are a big part of  the solution, and they’re all things that have been proven to help your brain work in your favor.
For example, studies show that putting words within the pictures they describe (as opposed to somewhere else in the page, like a caption or in the body text) causes your brain to try to make sense of  how the words and picture relate, and this causes more neurons to fire.
More neurons firing = more chances for your brain to get that this is something worth paying attention to, and possibly recording.
A conversational style helps because people tend to pay more attention when they perceive that they’re in a conversation, since they’re expected to follow along and hold up their end.
The amazing thing is, your brain doesn’t necessarily care that the “conversation” is between you and a book! On the other hand, if  the writing style is formal and dry, your brain perceives it the same way you experience being lectured to while sitting in a roomful of  passive attendees.
Here’s what WE did: We used pictures, because your brain is tuned for visuals, not text.
As far as your brain’s concerned, a picture really is worth a thousand words.
And when text and pictures work together, we embedded the text in the pictures because your brain works more effectively when the text is within the thing the text refers to, as opposed to in a caption or buried in the text somewhere.
We used redundancy, saying the same thing in different ways and with different media types, and multiple senses, to increase the chance that the content gets coded into more than one area of  your brain.
We used concepts and pictures in unexpected ways because your brain is tuned for novelty, and we used pictures and ideas with at least some emotional content, because your brain is tuned to pay attention to the biochemistry of  emotions.
That which causes you to feel something is more likely to be remembered, even if  that feeling is nothing more than a little humor, surprise, or interest.
We used a personalized, conversational style, because your brain is tuned to pay more attention when it believes you’re in a conversation than if  it thinks you’re passively listening to a presentation.
We included more than 80 activities, because your brain is tuned to learn and remember more when you do things than when you read about things.
We used multiple learning styles, because you might prefer step-by-step procedures, while someone else wants to understand the big picture first, and someone else just wants to see an example.
But regardless of  your own learning preference, everyone benefits from seeing the same content represented in multiple ways.
We include content for both sides of  your brain, because the more of  your brain you engage, the more likely you are to learn and remember, and the longer you can stay focused.
Since working one side of  the brain often means giving the other side a chance to rest, you can be more productive at learning for a longer period of  time.
And we included stories and exercises that present more than one point of  view, because your brain is tuned to learn more deeply when it’s forced to make evaluations and judgments.
We included challenges, with exercises, and by asking questions that don’t always have a straight answer, because your brain is tuned to learn and remember when it has to work at something.
Think about it—you can’t get your body in shape just by watching people at the gym.
But we did our best to make sure that when you’re working hard, it’s on the right things.
That you’re not spending one extra dendrite processing a hard-to-understand example, or parsing difficult, jargon-laden, or overly terse text.
In stories, examples, pictures, etc., because, well, because you’re a person.
And your brain pays more attention to people than it does to things.
These tips are a starting point; listen to your brain and figure out what works for you and what doesn’t.
Your brain works best in a nice bath of  fluid.
Dehydration (which can happen before you ever feel thirsty) decreases cognitive function.
Create something! Apply this to your daily work; use what you are learning to make decisions on your projects.
Just do something to get some experience beyond the exercises and activities in this book.
All you need is a pencil and a problem to solve…a problem that might benefit from using the tools and techniques you’re studying for the exam.
Feel something! Your brain needs to know that this matters.
Groaning over a bad joke is still better than feeling nothing at all.
If  you find yourself  starting to skim the surface or forget what you just read, it’s time for a break.
Once you go past a certain point, you won’t learn faster by trying to shove more in, and you might even hurt the process.
If  you’re trying to understand something, or increase your chance of  remembering it later, say it out loud.
Better still, try to explain it out loud to someone else.
You’ll learn more quickly, and you might uncover ideas you hadn’t known were there when you were reading about it.
Part of  the learning (especially the transfer to long-term memory) happens after you put the book down.
Your brain needs time on its own, to do more processing.
If  you put in something new during that processing time, some of  what you just learned will be lost.
They’re not optional sidebars—they’re part of  the core content! Don’t skip them.
We put them in, but if  we did them for you, that would be like having someone else do your workouts for you.
There’s plenty of evidence that physical activity while learning can increase the learning.
The more you understand, the less you have to memorize.
When the book asks you a question, don’t just skip to the answer.
The more deeply you force your brain to think, the better chance you have of learning and remembering.
Here’s what YOU can do to        bend your brain into submission.
Read me This is a learning experience, not a reference book.
We deliberately stripped out everything that might get in the way of  learning whatever it is we’re working on at that point in the book.
And the first time through, you need to begin at the beginning, because the book makes assumptions about what you’ve already seen and learned.
We begin by teaching basic SQL syntax, then SQL database design concepts, and then advanced querying.
While it’s important to create well-designed tables and databases, before you can, you need to understand the syntax of  SQL.
So we begin by giving you SQL statements that you can actually try yourself.
That way you can immediately do something with SQL, and you will begin to get excited about it.
Then, a bit later in the book, we show you good table design practices.
By then you’ll have a solid grasp of  the syntax you need, and can focus on learning the concepts.
While we could have put every single SQL statement, function, and keyword in this book, we thought you’d prefer to have a reasonably liftable book that would teach you the most important statements, functions, and keywords.
We give you the ones you need to know, the ones you’ll use 95 percent of  the time.
And when you’re done with this book, you’ll have the confidence to go look up that function you need to finish off  that kick-ass query you just wrote.
If  we covered every variation in syntax for every command in the book, this book would have many more pages.
We like trees, so we’re focusing on Standard SQL with a nod toward MySQL.
All the examples in the book will work with MySQL.
And most will work with any of  the RDBMSs listed above.
Remember that reference book we just suggested you buy? Buy one for the particular RDBMS that you use.
The exercises and activities are not add-ons; they’re part of  the core content of  the book.
Some of  them are to help with memory, some are for understanding, and some will help you apply what you’ve learned.
The crossword puzzles are the only thing you don’t have to do, but they’re good for giving your brain a chance to think about the words and terms you’ve been learning in a different context.
One distinct difference in a Head First book is that we want you to really get it.
And we want you to finish the book remembering what you’ve learned.
Most reference books don’t have retention and recall as a goal, but this book is about learning, so you’ll see some of  the same concepts come up more than once.
Our readers tell us that it’s frustrating to wade through 200 lines of  an example looking for the two lines they need to understand.
Most examples in this book are shown within the smallest possible context, so that the part you’re trying to learn is clear and simple.
Don’t expect all of  the examples to be robust, or even complete—they are written specifically for learning, and aren’t always fully-functional.
We’ve placed many of  the commands on the Web so you can copy and paste them into your terminal or database software.
For some of  them, there is no right answer, and for others, part of  the learning experience of  the Brain Power activities is for you to decide if  and when your answers are right.
In some of  the Brain Power exercises, you will find hints to point you in the right direction.
Installing an SQL server In order to create and edit databases and tables using SQL, you’ll need access to an SQL server.
You may already have SQL set up and running on your web server, but if not, you can install SQL on your home machine.
Appendix ii includes instructions for installing MySQL (a popular, free flavor of  SQL) on Mac and Windows machines.
Head First SQL: Hands On But if  you’re not keen on installing an SQL server on your machine and just want to try out the examples in the book for yourself, you’re in luck! We’ve created a special SQL sandbox online, where you can follow along with and practice most of  the examples listed in the book.
They caught innumerable blatant mistakes, subtle errors, and pathtetic typos.
Without them, this book wouldn’t be anywhere near as clean and correct as it is.
They did a thorough job of  getting the errors out of  this book.
Cary Collett put his 15 years of  experience working at startups, government labs, and currently in the financial sector to use while reviewing the book, and is looking forward to getting back to enjoying his non-work things like cooking, hiking, reading and terrorizing his dogs.
LuAnn Mazza found time in her busy Illinois professional life as a Software Developer and Analyst, to do some incredibly timely and detailed reviews, we’re happy that she can now spend her spare time enjoying her hobbies including biking, photography, computers, music, and tennis.
When Steve Milano isn’t coding in half  a dozen different languages at his day job, doing a top-notch review of  Head First SQL, or playing punk rock with his band Onion Flavored Rings in unventilated basements.
Currently she enjoys putting education courses online to meet the needs of the changing New Orleans community post-Katrina, and we thank her for being able to fit us into her overbooked schedule.
Jamie Henderson is a senior systems architect sporting purple hair and dividing what spare time she has between cello, reading, video games, and watching movies on DVD.
This fantastic team is the reason that the code and exercises in this book will actually do what they are supposed to, and why, when you are finished with this book, you’ll be a confident SQL programmer.
Their attention to detail also kept us from being too cute or too patronizing, or even, sometimes, too weird.
First of  all, I want to thank my editor, Brett McLaughlin, for not one, but two Head First boot camps.
Brett was more than an editor—he was a combination sounding board and sherpa.
There’s absolutely no way this book would have been written without his guidance, support, and interest.
Not only did he “get me” from the very first audition, his appreciation of  my sometimes over-the-top humor made this the best book writing experience I’ve ever had.
He gave me a whole lot of advice, hints, and more than a little coaching throughout this whole process.
Editor Catherine Nolan has a huge ulcer now, thanks to some incredibly bad luck I had near the end of  the editorial process.
She’s the reason this book didn’t come out in 2008, and perhaps the reason it exists at all.
It was a bit like kitten juggling at the end, and she didn’t drop a single one.
I badly needed a schedule, and Catherine is the best scheduler I’ve ever met.
And I think I’ve been her biggest challenge so far.
Let’s hope her next project goes more smoothly, she’s more than earned it.
Design Editor Louise Barr has been both a great friend and an amazing graphic designer.
Somehow she was able to channel my crazy ideas into impressive art that make the difficult concepts very clear.
All the great design is hers, and I have no doubt that at many points in this book you’ll want to thank her too.
But we would have gone to press with a whole lot of  errors had it not been for the technical review process, and Sanders Kleinfeld did a great job as production editor, getting this book ready for press.
He also went far, far beyond the call of  duty, pointing out some conceptual chasms that really needed to be bridged.
Finally, I want to thank Kathy Sierra and Bert Bates for creating this wonderful series and for the best and most mentally challenging training I’ve ever had at the first Head First boot camp.
Without those three days, well, I don’t even want to think about how much harder it would have been to be Head First-y.
And Bert’s final editorial comments were painfully accurate, and vastly improved this book.
I used to keep track of all my patients on paper, but I kept losing them! I finally learned SQL and now I never lose a soul.
So turn the page, come on in, and take a walk through the world.
He likes keeping track of  what his friends are up to, and enjoys introducing them to each other.
He has lots of  information about them scrawled on sticky notes like this:
Greg’s been using his system for a very long time.
Last week he expanded his connections to include people who are seeking new jobs, so his listings are growing quickly.
Is there a better way to organize this information? What would you do?
Well, how about a database? That is what this book is about, right?
But before you can get into creating databases, you’re going to need to have a better idea of what kinds of  data you’re going to want to store and some ways of  categorizing it.
Look for similar information that Greg’s collected about each person.
Give each common bit of data a label that describes the category of information it is, then write those labels in the space below.
Greg already gave some information the category names “B-day”, “Interests” and “Seeking” on his stickies.
Look for similar information that Greg’s collected about each person.
Give each common bit of data a label that describes the category of information it is, then write those labels in the space below.
If  you cut each note into pieces, then spread the pieces out horizontally you’d get something that looked like this:
Then if  you cut up another sticky note with the categories you just noticed, and put the pieces above their corresponding information, you’d have something that looks a lot like this:
Here’s that same information nicely displayed in a TABLE in columns and rows.
But is an SQL table different? And what do you mean by columns and rows?
A database is a container that holds tables and other SQL structures related to those tables.
In diagrams and flow charts, databases are depicted as cylinders.
Every time you search online, go shopping, call information, use your TiVo, make a reservation, get a speeding ticket, or buy groceries, a database is being asked for information, otherwise known as being queried.
Before we get into the details of  what tables, rows, and columns are, let’s step back and look at the bigger picture.
The first SQL structure you need to know about is the container that holds all your tables known as a database.
You and just a few of the databases that surround you.
Think of a database like a container that holds information…
A table is the structure inside your database that contains data, organized in columns and rows.
Remember those categories you came up with? Each category becomes a column in your table.
These values might be in the same column: Single, Married, Divorced.
A table row contains all the information about one object in your table.
In Greg’s new table, a row would be all the data about one person.
Use one of the fields as a title that gives the table a meaningful name.
Your job is to be the partially formed table and fill in the empty bits.
After you’ve done the exercise, turn the page to see if you’ve become one.
All of  the tables in a database should be connected in some way.
For example, here are the tables that might be in a database holding information about doughnuts:
You should have been able to work out what the table’s title could be from the stickies.
Don’t worry if your answers for the column names don’t match ours exactly.
Here’s an example of  what an address book table containing your personal information might look like.
You’ll often see the word field used instead of  column.
A column is a piece of  data stored by your table.
A row is a single set of  columns that describe attributes of  a single thing.
Put the columns and rows together and you’ve got yourself a table.
Data from a single sticky laid out to form a row.
So we have enough data from my stickies to turn them into a table?
You can identify categories for the type of data you’re collecting for each person.
You can take all that information from your stickies and turn it into a table.
Think about what categories of data you might find in each.
Think about what categories of data you might find in each.
Don’t worry if your answers for the column names don’t match ours exactly.
We’re using MySQL to command our databases, so commands in your Database Management System (DBMS) might look a little different.
See Appendix II for instructions on installing MySQL on your server.
And, don’t forget, you can follow along with many of the examples in the book at http://www.headfirstlabs.com/sql_hands_on/
Start up your SQL relational database management system (RDBMS) and open a command-line window or graphical environment that allows you to communicate with your RDBMS.
First you’re going to need to create a database to hold all your tables.
Type in the line of  code below to create your database called gregs_list.1
Spaces aren’t allowed in the names of databases and tables in SQL, so an underscore can be used instead.
This is feedback from the RDBMS, letting you know your query executed successfully.
Q: Why do I need to create a database if I only have one table?
A: The SQL language requires all tables to be inside of databases.
One of the features of SQL is the ability to control access to your tables by multiple users.
Being able to grant or deny access to an entire database is sometimes simpler than having to control the permissions on each one of multiple tables.
Q: I noticed that we used all uppercase for the CREATE DATABASE command.
A: Some systems do require certain keywords to be capitalized, but SQL is case insensitive.
That means it’s not necessary to capitalize commands, but it’s considered a good programming practice in SQL.
Q: Is there anything I should know about naming my databases, tables, and columns?
A: It’s generally a good idea to create descriptive names.
Sometimes this results in you needing to use more than one word in a name.
You can’t use spaces in your names, so the underscore lets you create more descriptive names.
Here are variations you might see used: gregs_list gregslist Gregslist gregsList   Generally it’s best to avoid capitalizing   your names to avoid confusion since SQL is case insensitive..
Q: What if I prefer to use “gregsList” with no underscore?
If you use gregsList as the database name with no underscore and the second word capitalized, then you should stick to that naming convention.
Q: Shouldn’t the database be called greg’s_list? Why leave out the apostrophe?
A: The apostrophe is reserved for a different use in SQL.
There are ways you could include one, but it’s far easier to omit it.
Q: I also noticed a semicolon at the end of the CREATE DATABASE command.
A: The semicolon is there to indicate that the command has ended.
Now you need to tell your RDBMS to actually use the database you just created:
Setting the table: the CREATE TABLE statement Let’s see all this in action with the doughnut data.
Say you were having trouble remembering what type of  doughnuts a snack in your list was just from its name, you might create a table to save having to remember them instead.
Below is a single command to type into your console window.
When you’ve typed it, you can press RETURN to tell your SQL RDBMS to carry out the command.
Your table’s name should be lowercase and have an underscore in place of any spaces.
It stands for VARiable CHARacter and is used to hold information that’s stored as text.
The opening parenthesis opens the list of columns to create.
The semicolon tells the SQL RDBMS that it’s reached the end of the command.
Just hit return to start a new line in your command to make it easier to read what’s what.
Creating a more complicated table Remember the columns for Greg’s table? We’ve jotted them down on a sticky note.
Hey, what about me? How about a CREATE TABLE for my gregs_list database?
You’ll be using the CREATE TABLE command to go from this…
In which two ways do the column names on the sticky note differ from those in the table above? Why are they significant?
Look how easy it is to write SQL You’ve seen that to create a table you categorize your data into columns.
Then you come up with the right data type and length for each column.
After you estimate how long each column needs to be, writing the code is straightforward.
The code to the left is our CREATE TABLE statement for Greg’s new database.
Try to guess what each line of the CREATE TABLE command is doing.
Also include an example of the data that will go in each column.
Here’s what each line of the CREATE TABLE command is doing, and some example data for each column type.
Adds a column named ‘email’ that can hold up to.
Adds a column named ‘birthday’ that can hold a date value.
Closes the list of columns to add, and the semicolon ends the command.
Trust us, this really is the command, it’s just written out r-e-a-l-l-y small so it fits on the page!
Now you know exactly what each line is doing, you can type in the CREATE TABLE command.
You can enter it one line at a time, copying the code at the top of  this page.
Or you can enter it all as one really long single line:
Did you notice how hitting return after the semicolon ended the command and told your SQL RDBMS to process it?
So I’ll always store everything in either VARCHAR or DATE data types?
Actually, you’ll need a few more data types for other kinds of data, like numbers.
Suppose we added a price column to our doughnut table.
Values stored as VARCHARs are interpreted as text, and you won’t be able to perform mathematical operations on them  But there are more data types you haven’t met yet…
Before going further, come up with other types of data that need a data type other than VARCHAR or DATE.
Take a meeting with some data types These are a few of  the most useful data types.
It’s their job to store your data for you without mucking it up.
You’ve already met VARCHAR and DATE, but say hello to these.
She’s also got a fraternal twin, TIME, who doesn’t care what the date is.
We don’t know who he is, he just wandered in.
These data type names may not work with your SQL RDBMS!
Unfortunately, there are no universally accepted names for various data types.
Check your documentation to find the correct names for your RDBMS.
Determine which data type makes the most sense for each column.
While you’re at it, fill in the other missing info.
They just gave a demo and there were rubber duckies flying around the screen.
Was this your idea of  a joke? You might want to spend some time on Monster.com.
These two numbers show how many total digits the database should expect, and how many after the decimal.
Q: Why not just use BLOB for all of my text values?
A VARCHAR or CHAR takes up a specific amount of space, no more than 256 characters.
As your database grows, you run the risk of running out of space on your hard drive.
You also can’t run certain important string operations on BLOBs that you can on VARCHARs and CHARs (you’ll learn about these later)
A: It all comes down to database storage and efficiency.
Choosing the best matching data type for each column in your table will reduce the size of table and make operations on your data faster.
Q: Is this it? Are these all the types? A: No, but these are the most important ones.
Data types also differ slightly by RDBMS, so you’ll need to consult your particular documentation for more information.
We recommend SQL in a Nutshell (O’Reilly) as a particularly good reference book that spells out the differences between RDBMSs.
Determine which data type makes the most sense for each column.
While you’re at it, fill in the other missing info.
They just gave a demo and there were rubber duckies flying around the screen.
Was this your idea of  a joke? You might want to spend some time on Monster.com.
A zip code may not always be 10 characters long, so we use VARCHAR to save space in the database.
You might also have used CHAR here and assumed a specific length.
And we treat it like a text string because we don’t need to do any mathematical operations on it, even though it’s a number.
To see how the my_contacts table you created looks, you can use the DESC command to view it:
Where’s the table I just created in the gregs_list database? I want to check that I got everything in there correctly.
Break your data up in categories before you create your table.
Pay special attention to the type of data for each column.
Don’t worry about these right now; we’ll get to them shortly.
I wish I’d put a column in there for gender.
What do you think? What sorts of problems could adding a new column create?
Can you reconstruct the code snippets to make it work? Some of the parentheses and semicolons fell on the floor and they were too small to pick up, so feel free to add as many of those as you need!
When you finish, try typing the new CREATE TABLE code into your SQL console to add the new gender column!
Did you try entering the new CREATE TABLE statement? If you did, you’ll already know that the solution to the exercise won’t help you add the new column.
If you did enter it into your console, you probably saw something like this:
That’s a very good idea, and you’ll want to use a text editor throughout this book.
That way, you can copy and paste the statements into your SQL console whenever you need to.
Also, you can copy and edit old SQL statements to make new ones.
And once you create a database, you don’t need to create it again.
Also, check to see if you typoed any of the SQL keywords.
Q: Why isn’t there a comma after  “seeking VARCHAR(100)” like all the other columns have?
That tells the RDBMS that the end of the statement is here, so no comma is needed.
Q: So, is there a way to add the forgotten column or will I have to start over?
A: You’re going to have to start over, but before you can create the table with the added gender column you have to get rid of the old one.
Since there is no data in the table yet, we can simply get rid of the old one and start over.
Q: But what if I’ve got a table with data in it, and I need to add a column? Is there a way to do it without deleting the whole table and starting over?
A: Great question! There is a way to change your table without damaging the data in it.
We’ll get to that a bit later, but for now, since our table is empty, we’ll get rid of the table and create a new one.
If we’re going to have to type over our CREATE TABLE command again, I bet we could save time and energy if we typed all our SQL statements in a text editor like NotePad or TextEdit.
Getting rid of  a table is much easier than creating a table.
Once your table is dropped, it’s gone, along with any data that was in it.
A bunch of SQL keywords and data types, in full costume, are playing the party game “Who am I?” They give you a clue, and you try to guess who they are, based on what they say.
If they happen to say something that could be true for more than one guy, then write down all for whom that sentence applies.
Fill in the blanks next to the sentence with the names of one or more attendees.
I know exactly when your dental appointment is next week.
I can give you a peek at your table format.
To add data to your table, you’ll use the INSERT statement This pretty much does what it says in the name.
Take a look at the statement below to see how each part works.
The values in the second set of  parentheses have to be in the same order as the column names.
The command below isn’t a real command, it’s a template of  a statement to show you the format of  an INSERT statement.
This next part is a list of your column names, separated by commas.
This next part is a list of your values, separated by commas.
In Greg’s case, the list will contain the information from his sticky notes.
IMPORTANT: the values need to be in the same order as the column names.
Now, how do I get the data from the sticky notes into the table?
More column names follow, no comma after the last one.
Before you can write your INSERT statement, you need to match up your column names and values.
Before you can write your INSERT statement, you need to match up your column names and values.
The values for each column are in the second set of parentheses and are also separated by commas.
Any value that goes into a VARCHAR, CHAR, DATE, or BLOB column has single quotes around it.
The values should be listed in exactly the same order as the column names.
You can hit return before the opening parenthesis to make the code easier to read in your console window.
Hit return after the closing columns parenthesis and another after VALUES to make the code easier to read.
This is one way to add a row to your table.
Type it in a text editor first so if you make a mistake you won't have to retype the entire thing.
Here’s an INSERT statement you might use if you had a table of  doughnut purchases.
Notice how, in the values, the numbers that match the dozens of  donuts purchased and price columns have no quotes.
The values inserted into the dozens and price columns don’t need quote.
The price column is DEC(4,2) which means it’s four digits long, with two decimal places.
You just told me that CHAR, VARCHAR, DATE, and BLOB values have single quotes around them in the INSERT statement.
So that means numeric values like DEC and INT don't use quotes?
The dozens column is an INT, since you don’t usually buy part of a dozen and don’t need decimal places.
Your SQL RDBMS will tell you when something is wrong with your statement, but will sometimes be a bit vague.
First try to guess what's wrong with the statement, and then try typing it in to see what your RDBMS reports.
If this one causes your RDBMS to “hang,”  try typing a single quote followed by a semicolon after you’ve entered the rest of the statement.
Your SQL RDBMS will tell you when something is wrong with your statement, but will sometimes be a bit vague.
First try to guess what's wrong with the statement, and then try typing it in to see what your RDBMS reports.
Notice that many different problems result in the same error.
Watch out for typos; they can be tricky to track down.
We’ve got a location column in the column list, but no location in the values list, we’re short one value.
This time we have a value for all the columns, but we’re missing our email column in the column list.
Variations on an INSERT statement There are three variations of  INSERT statements you should know about.
Notice the order of the column names? Now look at the values; they’re in that same order.
So long as the values match the column names, the order you INSERT them in doesn’t matter to you, or your SQL RDBMS!
We left the column names out altogether, but if you do that, you must include ALL the values, and in the EXACT ORDER that they are in the table!
Changing the order of columns You can change the order of  your column names, as long as the matching values for each column come in that same order!
Omitting column names You can leave out the list of  column names, but the values must be all there, and all in the same order that you added the columns in.
Leaving some columns out You can insert a few columns and leave some out.
What do you think shows up in the table in columns that you don't assign a value to?
Columns without values Let's insert a record into the my_contacts database from this incomplete sticky note:
Missing last name and birthday, and we can't be sure about gender, either.
Because the sticky is missing some data, Greg will have to enter an incomplete record.
But that's okay, he'll be able to add in the missing information later.
We're using the version of INSERT where we don’t have to provide data for all columns because it lets us include just the columns where we know the values.
Peek at your table with the SELECT statement So you want to see what your table looks like? Well, DESC won't cut it anymore, because it only shows the structure of  the table and not the information inside of  it.
Instead, you should use a simple SELECT statement so you can see what data is in your table.
You'll have to stretch out your window to see all the results nicely laid out.
Now you know that NULL appears in any columns with no assigned value.
I have to admit I didn’t expect to see you.
Word on the street is that you’re nothing more than a zero, or nothing at all.
Yes, I’m here, and I’m quite real! So you think I’m nothing, just dirt under your feet?
It’s just that you show up whenever something has no value…
NULL: Sure, better me than, say, a zero, or an empty string.
NULL: That would be if  you used two single quotes with nothing inside of  them as a value.
Head First: So you aren’t just a fancy way of saying nothing?
Head First: So you’re saying that if  I compared you to a zero, or to an empty string, you wouldn’t equal that?
A value can be NULL, but it never equals NULL because NULL is an undefined value! Get it?
Head First: Calm down and let me get this straight.
You aren’t equal to zero, you aren’t an empty string variable.
And you aren’t even equal to yourself ? That makes no sense!
Anything could be in there, so you can’t compare one unopened box to another because you don’t know what’s going to be inside of  each one.
Head First: I’ve been hearing rumors that sometimes you aren’t wanted.
That maybe there are times where you NULLs cause problems.
NULL: I’ll admit that I’ve shown up where I wasn’t wanted before.
No point to having a NULL last name in a table.
Head First: So you wouldn’t go where you weren’t wanted?
NULL: Right! Just tell me, man! When you’re creating your table and setting up your columns, just let me know.
Head First: You don’t really look like an unopened box.
Controlling your inner NULL There are certain columns in your table that should always have values.
Remember the incomplete sticky note for Pat, with no last name? She (or he) isn’t going to be very easy to find when you have twenty more NULL last name entries in your table.
You can easily set up your table to not accept NULL values for columns.
Just add the words NOT NULL right after the data type.
Look at each of the columns in our my_contacts CREATE TABLE command.
Which should be set to be NOT NULL? Think about columns that should never be NULL and circle them.
We’ve given you two to start, now finish up the rest.
Primarily consider columns that you'll use later to search with or columns that are unique.
If you use these, you must provide a value for the column in your INSERT statement.
Look at each of the columns in our my_contacts CREATE TABLE command.
Which should be set to be NOT NULL? Think about columns that should never be NULL and circle them.
We’ve given you two to start, now finish up the rest.
Primarily consider columns that you'll use later to search with or columns that are unique.
It’s important to make sure your records are complete and your table has good data in it…
Here’s how the my_contacts table would look if  you set all the columns to have NOT NULL values.
Here’s where we create our table with NOT NULL in each column.
We want to make sure that we always have a value in this column.
Not only can we make it NOT NULL, we can also assign it a DEFAULT value of $1
If  we have a column that we know is usually a specific value, we can assign it a DEFAULT value.
The value that follows the DEFAULT keyword is automatically inserted into the table each time a row is added if  no other value is specified.
The default value has to be of  the same type of  value as the column.
Here’s how your table would look if you left the doughnut_cost values blank when you were inserted the records for the Cinnamondo, Rockstar, and Carameller doughnuts.
Using a DEFAULT value fills the empty columns with a specified value.
This will be the value inserted in the table for the doughnut_cost column when no other value is designated.
Tablecross Take some time to sit back and give your left brain something to do.
It’s your standard crossword; all of the solution words are from this chapter.
A _____ is a container that holds tables and other SQL structures related to those tables.
A _____ is a piece of data stored by your table.
This holds text data of up to 255 characters in length.
This is a single set of columns that describe attributes of a single thing.
This is the structure inside your database that contains data, organized in columns and rows.
Use this in your CREATE TABLE  to specify a value for a column if no other value is assigned in an INSERT.
Use this keyword to see the table you just created.
This word can be used in front of both TABLE or DATABASE.
This datatype thinks numbers should be whole, but he’s not afraid of negative numbers.
To add data to your table, you’ll use the _____ statement.
A _____ is a container that holds tables and other SQL structures related to those tables.
A _____ is a piece of data stored by your table.
This holds text data of up to 255 characters in length.
This is a single set of columns that describe attributes of a single thing.
This is the structure inside your database that contains data, organized in columns and rows.
Use this in your CREATE TABLE  to specify a value for a column if no other value is assigned in an INSERT.
Use this keyword to see the table you just created.
This word can be used in front of both TABLE or DATABASE.
This datatype thinks numbers should be whole, but he’s not afraid of negative numbers.
To add data to your table, you’ll use the _____ statement.
Your SQL Toolbox You’ve got Chapter 1 under your belt, and you already know how to create.
You should have worked these out by analyzing the kind of data you’ll be putting in your table.
You’ll need to set the columns to NOT NULL when you create your table.
Who am I?A bunch of SQL keywords and data types, in full costume, are playing the party game “Who am I?” They give you a clue and you try to guess who they are, based on what they say.
If they happen to say something that could be true for more than one guy, then write down all for whom that sentence applies.
Fill in the blanks next to the sentence with the names of one or more attendees.
I know exactly when your dental appointment is next week.
I can give you a peek at your table format.
A _____ is a container that holds tables and other SQL structures related to those tables.
A _____ is a piece of data stored by your table.
This holds text data of up to 255 characters in length.
This is a single set of columns that describe attributes of a single thing.
This is the structure inside your database that contains data, organized in columns and rows.
Use this in your CREATE TABLE  to specify a value for a column if no other value is assigned in an INSERT.
Use this keyword to see the table you just created.
This word can be used in front of both TABLE or DATABASE.
This datatype thinks numbers should be whole, but he’s not afraid of negative numbers.
To add data to your table, you’ll use the _____ statement.
Date or no date? Greg’s finished adding all the sticky notes into his my_contacts table.
He’s got two tickets to a concert, and he wants to ask one of  his contacts, a girl from San Francisco, out on a date.
He needs to find her email address, so he uses the SELECT statement from Chapter 1 to view his table.
This isn't the end of the table! Greg had a LOT of sticky notes.
You had to find all the San Fran Annes, and write down their first.
That took far too much time and was extremely tedious.
There is also the very real possibility that Greg might miss some of the matching Annes, including the one he’s looking for.
Now that Greg’s got all their email addresses, he emails the Annes and discovers…
I'm involved with a wonderful guy called Tim Woodman at the moment.
Well, he was at the party and I was just passing… you know how it is.
I've been looking for a cowpoke like you! Pick me.
If you found any Ann entries, you should ignore those.
I'm not the Anne you're looking for, but I'm sure she's a sweet girl.
Of course I remember you! I just wish you had contacted me sooner.
I've made plans with my ex‑boyfriend who wants to get back together.Can you think of a way we could write a.
Here’s a SELECT statement that would have helped Greg find Anne a whole lot sooner than painstakingly reading through the entire huge table looking for Annes.
In the statement, we use a WHERE clause that gives the RDBMS something specific to search for.
It narrows down the results for us and only returns the rows that match the condition.
The equal sign in the WHERE clause is used to test whether each value in the column first_name equals, or matches, the text 'Anne'
Add the semicolon and hit Return to put it all together and ask “If the value of the first_name column is Anne, show me the record.”
The console below shows you the rows that have been returned by this query, where the first name equals Anne.
When you see SELECT *, think of it like asking your SQL software to SELECT ALL THE COLUMNS.
That star is telling the RDBMS to give you back the values from all of  the columns in your table.
Q: What if I don’t want to select all the columns? Can I use something else instead of the star?
The star selects everything, but in a few pages you’ll learn how to just select some of the columns, making your results easier to interpret.
Q: Is this star the same thing as an asterisk?
A: Yes, it’s the same character on your keyboard, located above the 8 key.
Hit SHIFT at the same time as the 8 to type one.
But, although it’s exactly the same character as asterisk, in SQL lingo, it’s always referred to as star.
Q: Are there other characters that have special meanings like the star does?
But the star is the only one you need to know about for right now.
It's the only one used in the SELECT part of an SQL statement.
Wait a second, you’re not going to sneak that * past me.
The Head First Lounge is adding mixed fruit drinks to its menu.
Using what you learned in Chapter 1, create the table on this page and insert the data shown.
It contains the table easy_drinks with the recipes for a number of beverages that have only two ingredients.
Choose your data types carefully, and don't forget about NULL.
Use the easy_drinks table you just created and try out these queries on your machine.
Write down which drinks are returned as the result of each query.
Just type them in as you see them for now, then see if they run.
For bonus points, write down here which query doesn't work…
And I trusted you! But one of them doesn't work.
And some of them don't look like they should work.
The rest of  them work, but the results of some aren’t what you might expect.
You tried out these queries on your easy_drinks table and wrote down which drinks are returned as the result of each query.
It's a DEC variable, so you don't use quotes at all.
This query works and doesn't cause an error even though you used single quotes when you inserted the value.
These last two queries will work because most SQL RDBMSes give you a little latitude.
They will ignore the quotes and treat your DEC and INT.
The queries are NOT CORRECT, but your RDBMS is forgiving.
For bonus points, write down here which query doesn't work…
But this one works, even though it shouldn't because DEC variables don’t need quotes.
How to query your data types To write valid WHERE clauses, you need to make sure each of the data types you include is formatted properly.
Here are the conventions for each of  the major data types:
More punctuation problems Greg picked up a few more contacts the other night.
He types a few semicolons, trying to get the query to end.
Every time he hits Return, he sees this prompt: '>
Exactly! When Greg tried to add the record, the SQL program was expecting an even number of  single quotes, one before and one after each VARCHAR, CHAR, and DATE value.
The town name, Grover's Mill, confused matters because it added an extra apostrophe.
The SQL RDBMS is still waiting for one more closing single quote.
Even though the record isn’t inserted, that last > shows that at least the SQL program is responsive again.
Typing a single quote and semicolon ends the broken INSERT statement.
This error gives you a pretty clear idea of what's wrong.
It quotes part of your query, beginning with the extra single quote.
Hmm, look at that single quote that keeps appearing before the prompt.
End the statement by typing a single quote and a semicolon.
This gives the RDBMS the extra single quote it’s expecting.
You’ll get an error when you type in the other quote and semicolon, and you'll have to enter your INSERT again from scratch.
You'll get an error after you do this, but at least you'll be able to try again.
It's used to tell your SQL software where a text string begins and ends.
That means it has a specific function in the language.
It’s used to tell the SQL software that the data in between two of them is text data.
Q: What data types need them? A: The text data types.
Text data simply means that the data is a VARCHAR, CHAR, BLOB, or TIMEDATE column.
Numeric columns have no spaces, so it’s easy to tell when the number ends and the next word in the statement begins.
Q: So, it’s only used for text columns? A: Yes.
Q: Couldn’t we make it easy to tell them apart by using a double quote instead of a single quote?
When you're trying to insert a VARCHAR, CHAR, or BLOB containing an apostrophe, you must indicate to your RDBMS that it isn’t meant to end the text, but is part of  the text and needs to be included in the row.
One way to do this is to add a backslash in front of  the single quote.
You need to tell your SQL software that your quote isn’t there to begin or end a text string, but that it’s part of the text string.
Another way to “escape” the quote is to put an extra single quote in front of  it.
Telling SQL that a single quote is part of a text string by putting a backslash in front of it is called “escaping” it.
Or you can “escape” a single quote with an extra single quote in front of it.
You can do this (and fix your INSERT statement at the same time) by adding a backslash character in front of  the single quote in your text string:
If you have data in your table with quotes, you might actually have to search for it with a WHERE clause at some point.
To SELECT data containing single quotes in your WHERE clause, you need to escape your single quote, just like you did when you inserted it.
Rewrite the code below using the different methods of escaping the single quote.
If you have data in your table with quotes, you might actually have to search for it with a WHERE clause at some point.
To SELECT data containing single quotes in your WHERE clause, you need to escape your single quote, just like you did when you inserted it.
Rewrite the code below using the different methods of escaping the single quote.
You need to know how to only SELECT the columns you wish to see.
Narrowing our results means getting fewer columns in our output.
Every time I do a SELECT * my data is a big mess because it wraps.
Can I hide all those extra columns when maybe all I want is someone's email address.
Before you try this SELECT query, sketch how you think the table of results will look.
Here we get all the columns, and our results are too wide for our terminal window.
They wrap to the next line and the display is a mess.
Before you try this SELECT query, sketch how you think the table of results will look.
By specifying which columns we want returned by our query, we can choose only the column values we need.
Just as you use a WHERE clause to limit the number of  rows, you can use column selection to limit the number of columns.
It’s about letting SQL do the heavy lifting for you.
As your tables get larger, it speeds up retrieval of  your results.
You’ll also see more speed when you eventually use SQL with another programming language, such as PHP.
Many ways to get a Kiss on the Lips Remember our easy_drinks table? This SELECT statement will result in a Kiss on the Lips:
Finish the other four SELECT statements on the next page to get a Kiss also.
Now write three SELECT statements that will give you a Bull Frog.
Finish the other four SELECT statements to get a Kiss also.
This is one you'll seldom use, but it does give you the result you want.
You might use something like this when you want to make sure your drink_name column doesn't have a typo.
Now write three SELECT statements that will give you a Bull Frog.
Use single quotes in your WHERE clause when selecting from text fields.
Q: What if I need all the columns from my table returned by a query? Should I actually be naming them in the SELECT rather than using the *?
A: If you need them all, then by all means use the *
It's only when you don't need them all that you should try not to use it.
Q: I tried to copy and paste a query from the Internet, and I kept getting errors when I tried to use it.
A: Queries pasted from web browsers sometimes contain invisible characters that look like spaces but mean something different to SQL Pasting them into a text editor is one way to see and remove these.
Your best bet is to paste it into a text editor first and take a close look at it.
Q: So I should paste it into something like Microsoft Word? A: No, Word isn't a good choice, since it does nothing to show you the invisible formatting that might be in the text.
Q: About escaping the apostrophe, is there any reason to use one method over the other?
We tend to use the backslash method only because we find that it's easier to spot where that extra apostrophe is when things go wrong in a query.
Other than that, there's really no reason to favor one method over the other.
Both methods allow you to enter apostrophes into your text columns.
To find the best glazed doughnut in the table, you need to do at least two SELECT statements.
The first one will select rows with the correct doughnut type.
You need to SELECT rating to search through the highest scores, and location because that gives you the name of the winner.
All of the results will be the correct type of doughnut.
I want to find the best glazed doughnut without having to hunt through all those results.
In plain English, what is the question you're trying to answer with these queries?
I could stop with either query and dig through the results, but that table has thousands of records… I’m.
We can handle the two things we’re searching for, 'plain glazed' for the type and 10 for the rating into a single query using the keyword AND.
The results we get from the query must satisfy both conditions.
Use the word AND to combine your two WHERE clauses.
Even if  we received more than one row as a result of  our query, you would know that all locations have glazed doughnuts with a rating of  10, so you could go to any of  them.
This query combines the results for 'plain glazed' and rating= 10 to find any results that match both queries.
Write a query to find the email addresses of all computer programmers.
Write a query to find the name and location of anyone with your birthdate.
Write the query Greg could have used to find all the Annes from San Francisco.
Write a query to find the name and email of any single people who live in your town.
For extra points, only pick those of the gender you'd want to date.
Write a query to find the email addresses of all computer programmers.
Write a query to find the name and email of any single people who live in your town.
For extra points, only pick those of the gender you'd want to date.
Write the query Greg could have used to find all the Annes from San Francisco.
Write a query to find the name and location of anyone with your birthdate.
Finding numeric values Let’s say you want to find all the drinks in the easy_drinks table that contain more than an ounce of  soda in a single query.
Wouldn't it be dreamy if I could find all the drinks in the easy_drinks table that contain more than an ounce of soda in a single query.
Why can't you combine the first two queries with an additional AND?
The GREATER THAN symbol will give you all the drinks that contain more than 1 ounce of soda.
Smooth Comparison Operators So far, we’ve mainly used the equal sign in our WHERE clause.
It returns all the records that don't match the condition.
This does us no good when we want to find out if  something is less than or greater than something else.
It returns precisely the opposite results of  the equal sign.
Two values are either equal, or they are not equal.
Have you noticed that every WHERE clause so far always has a column name on the left.
Would it work if the column name was on the right?
The less than sign looks at the values in the column on the left and compares them to the value on the right.
If  the column value is less than the value on the right, that row is returned.
The only difference with the less than or equal to sign is that column values equal to the condition value are also returned.
Same thing with this greater than or equal to sign.
If  the column value matches or is greater than the condition value, the row is returned.
The greater than sign is the reverse of  the less than.
It looks at the values in the column and compares them to the value on the right.
If  the column value is greater than the value on the right, that row is returned.
Finding numeric data with Comparison Operators The Head First Lounge has a table with the cost and nutritional information about their drinks.
They want to feature higher priced, lower calorie drinks to increase profits.
Also write down what the result of each query is:
The cost of each drink with ice that is yellow and has more than 33 calories.
The cost of each drink whose calorie count is 80 or more.
The name and color of each drink which does not contain more than 4 grams of carbs and uses ice.
Drinks called Greyhound and Kiss on the Lips, along with each one's color and whether ice is used to mix the drink, without using the names of the drinks in your query.
The cost of each drink with ice that is yellow and has more than 33 calories.
The cost of each drink whose calorie count is 80 or more.
The name and color of each drink which does not contain more than 4 grams of carbs and uses ice.
Drinks called Greyhound and Kiss on the Lips, along with each one's color and whether ice is used to mix the drink, without using the names of the drinks in your query.
You had to look through the table and find some column you could use to get those drinks and just those drinks.
Also write down what the result of each query is:
But this only works with numbers, right? If I want to find all the drinks with names beginning with a specific letter I'm out of luck?
Comparing text data works in a similar way with your text columns like CHAR and VARCHAR.
So, say you want to select all the drinks that begin with an ‘L’, here’s a query that will select all the drinks that match that criteria.
This query returns drinks whose first letter is L or later, but whose first letters come earlier in the alphabet than M.
Don't worry about the order of your results for now.
In a later chapter we’ll show you ways to sort your results alphabetically.
Selecting your ingredients One of  the bartenders has been asked to mix a cocktail that has cherry juice in it.
The bartender could use two queries to find the cocktails:
I’m sure there must be a way we could combine those queries.
To be OR not to be You can combine those two queries using OR.
This condition returns records when any of  the conditions are met.
So, instead of  the two separate queries, you can combine them with OR like this:
Cross out the unnecessary parts of the two SELECTs below and add an OR to turn it into a single SELECT statement.
Use your new selection skills to rewrite your new SELECT.
Cross out the unnecessary parts of the two SELECTs below and add an OR to turn it into a single SELECT statement.
Use your new selection skills to rewrite your new SELECT.
We need to get rid of that semicolon so the statement doesn't end yet.
With this OR we get drink_names with main ingredients of orange juice OR apple juice.
Don't get your ANDs and ORs confused! When you want ALL of  your conditions to be true, use AND.
When you want ANY of  your conditions to be true, use OR.
Q: Can you use more than one AND or OR in the same WHERE clause?
You can also use both AND and OR together in the same clause.
In the queries below you’ll see examples of  all the possible combinations of  two conditions with AND and OR between them.
To improve your karma, note down why tw0 of your results are a bit different than all the rest.
Become one with these clauses and determine whether or not they.
Those NULL values may cause you problems in future queries.
It’s better to enter some sort of  value than leave a NULL value in a column because NULLs can’t be directly selected from a table.
To improve your karma, note down why tw0 of your results are a bit different than all the rest.
This won’t work because NULL isn't the same thing as zero.
And this won’t work either, because NULL isn’t a text string.
The only way to directly select a NULL value is to use the keywords IS NULL.
Keywords are not text strings, so they don’t have quotes.
If you wanted to get to the value in that column, you could use a WHERE clause on one of the other columns.
I tried selecting NULL values directly, but it didn't work.
He knows he's entered SF at least these two ways.
Saving time with a single keyword: LIKE There are simply too many cities and variations, and possible typos.
Using all those ORs is going to take Greg a very long time.
Luckily, there’s a timesaving keyword—LIKE—that, used with a wildcard, looks for part of  a text string and returns any matches.
This tells your software you're looking for all values in the location column that end with CA.
The call of the Wild(card) LIKE teams up with two wildcard characters.
Wildcards are stand-ins for the characters that are actually there.
Rather like a joker in a card game, a wildcard is equal to any character in a string.
Have you seen any other wildcards earlier in this chapter?
That's more LIKE it LIKE likes to play with wildcards.
The first is the percent sign, %, which can stand in for any number of  unknown characters.
The percent is a stand-in for any number of unknown characters.
The underscore is a stand-in for just one unknown character.
Results in names with just one character before the “im”, like Jim, Kim, and, Tim.
Results in names with any number of characters before the “im”, like Ephraim, Slim, and Tim.
The second wildcard character that LIKE likes to hang out with is the underscore, _ which stands for just one unknown character.
Magnet Matching A bunch of WHERE clauses with LIKE are all scrambled up on the fridge.
Can you match up the clauses with their appropriate results? Some may have multiple answers.
Write your own LIKE statements with wild cards for any results that are left hanging around.
Magnet Matching Solutions A bunch of WHERE clauses with LIKE are all scrambled up on the fridge.
Can you match up the clauses with their appropriate results? Some may have multiple answers.
Write your own LIKE statements with wild cards for any results that are left hanging around.
Selecting ranges using AND and comparison operators The people at the Head First Lounge are trying to pinpoint drinks with a certain range of  calories.
Not only is it shorter than the previous query, but it gives you the same results.
This will give you exactly the same results as the query on the previous page, but look how much quicker it is to type!
Write a query that will SELECT the names of drinks that begin with the letters G through O.
What do you think the results of this query will be?
Order matters, so you won't get any results from this query.
Write a query that will SELECT the names of drinks that begin with the letters G through O.
What do you think the results of this query will be?
The smaller number must always be first for the BETWEEN to be interpreted the way you expect.
This one is a bit tricky! We need to use the letter after O to make sure we get drink names that begin with O.
Greg’s friend Amanda has been using Greg’s contacts to meet guys.
She’s gone on quite a few dates, and has started to keep a.
She wants to get a list of the good dates, so she uses her positive ratings.
Instead of  using all those ORs, we can simplify it with the keyword IN.
When the value in the column matches one of  the values in the set, the row or specified colums are returned.
Using the keyword IN tells your RDBMS that a set of values is coming up.
To find the names of  those she didn’t rate highly,  we’re going to add the keyword NOT to our IN statement.
The results of the NOT IN query are the people who didn’t get positive ratings and won’t get a second date, either.
Using the keywords NOT IN tells your software that the results aren’t in the set of terms.
Why might you sometimes choose to use NOT IN rather than IN?
Q: Wait, you just said that NOT goes after WHERE.
Q: Would it work with <> the “not equal to” comparison operator?
It would make much more sense to just use an equal sign.
Q: How would it work with NULL? A: Just like you might guess it would.
The important thing to keep in mind is that NOT goes right after WHERE in your statement.
Rewrite each of the following WHERE clauses so they are as simple as possible.
Rewrite each of the following WHERE clauses so they are as simple as possible.
We never have negative calories, so we're safe with the greater than sign.
Your SQL Toolbox You’ve got Chapter 2 under your belt and now you’ve added operators to.
For a complete list of tooltips in the book, see Appendix iii.
You've got a whole bunch of equality and inequality operators at your disposal.
Greg wants to create a table of mixed drinks that bartenders can query for recipes for his speed‑dating events.
Using what you learned in Chapter 1, create the table on this page and insert the data shown.
It contains the table easy_drinks with the recipes for a number of beverages that have only two ingredients.
It’s a good idea to give yourself a few extra characters in case you ever need to enter a name that’s longer than the existing ones.
Next time will you please try to take it easy with that DELETE statement? I can't afford to keep.
Clowns are scary Suppose we want to keep track of  the clowns in Dataville.
And we could use a last_seen column to keep track of  the clowns’ whereabouts.
Elsie Cherry Hill Senior Center F, red hair, green dress, huge feet balloons, little car.
Pickles Jack Green's party M, orange hair, blue suit, huge feet mime.
Snuggles Ball‑Mart F, yellow shirt, baggy red pants horn, umbrella.
Hobo BG Circus M, cigar, black hair, tiny hat violin.
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
Scooter Oakland Hospital M, blue hair, red suit, huge nose balloons.
Babe Earl’s Autos F, all pink and sparkly balancing, little car.
We can leave out information we don’t know and fill it in later.
Every time we have a new clown sighting, we can add a new row.
We’ll have to change this table frequently to keep it up to date.
The clowns are on the move Your job is to write the SQL commands to get each field report into the clown_info table.
Notice that not all the information has changed for each clown, so you’ll need to refer back to the table on page 121 to get the rest of the information to add.
Elsie Cherry Hill Senior Center F, red hair, green dress, huge feet balloons, little car.
Pickles Jack Green's party M, orange hair, blue suit, huge feet mime.
Snuggles Ball‑Mart F, yellow shirt, baggy red pants horn, umbrella.
Hobo BG Circus M, cigar, black hair, tiny hat violin.
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
Scooter Oakland Hospital M, blue hair, red suit, huge nose balloons.
Babe Earl’s Autos F, all pink and sparkly balancing, little car.
Now fill in what that data in the clown_info table looks like once you’ve added the data using your INSERT commands.
The clowns are on the move Your job was to write the SQL commands to get each field report into the clown_info table, then fill in what that data in the table looks like after adding the data using your INSERT commands.
Elsie Cherry Hill Senior Center F, red hair, green dress, huge feet balloons, little car.
Pickles Jack Green's party M, orange hair, blue suit, huge feet mime.
Snuggles Ball‑Mart F, yellow shirt, baggy red pants horn, umbrella.
Hobo BG Circus M, cigar, black hair, tiny hat violin.
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
Scooter Oakland Hospital M, blue hair, red suit, huge nose balloons.
Babe Earl’s Autos F, all pink and sparkly balancing, little car.
Snuggles Ball-Mart F, yellow shirt, baggy blue pants horn, umbrella.
Bonzo Dickson Park M, in drag, polka dotted dress singing, dancing.
Sniffles Tracy's M, green and purple suit, pointy nose climbing into tiny car.
How can you find out the current location of a particular clown?
Is there a way to query our data and get only the most recent sighting of  Zippo? Can you tell what her location was?
How our clown data gets entered Our clown trackers work on a vounteer basis.
Sometimes clown tracking reports sit in an inbox for a week or two before they get entered in.
And sometimes two people split the pile of  reports up and enter data at the same time.
Keeping that in mind, let’s look at all the rows in our table for Zippo.
Zippo Millstone Mall F, orange suit, baggy pants dancing, singing.
Zippo Oakland Hospital F, orange suit, baggy pants dancing, singing.
Zippo Millstone Mall F, orange suit, baggy pants dancing, singing.
Zippo Oakland Hospital F, orange suit, baggy pants dancing, singing.
Unfortunately, you can't be certain that the last record is the newest.
We have more than one person entering data at the same time.
And the reports might have gotten shuffled in the inbox.
But even if  that were the case, you can’t rely on the rows in the table being in chronological order.
There are a number of  internal database factors that can change the order in which rows in a table are stored.
These include which RDBMS you use and indexes on your columns (which we’ll get to later)
You can’t guarantee that the last row in a table is the newest row added to that table.
Since you can’t count on the last record being the newest record, we’ve got a problem.
Our clown table gives us a list of  where clowns were at some point.
But the main reason the table exists is to tell us where the clown was last seen.
Notice the duplicate records? We have two rows showing Zippo at the same place doing the same thing.
They take up space and will slow down your RDBMS as your tables get bigger and bigger.
In a few chapters, we’ll be talking about why duplicates are bad and how to avoid them with good table design.
You’ll see how to create tables that will never have duplicate records.
But right now let’s focus on what we can do to fix our existing table so that it will contain useful data.
Q: Why can't we just assume the last record is the most recent?
A: The order of records in a table is not guaranteed, and soon you'll be modifying the order of the results you get.
You can't have absolute confidence that the last entry is really the last inserted record.
Suppose we enter two INSERT statements for the same clown.
Unless we make a point of remembering which sighting came first, after that data is in your table, we won't know for sure which came first.
Maybe we have assistants who track them as well and INSERT their own records.
When we SELECT, we get back those hundreds of records and have to wade through them to the last one, which we hope is the most recent.
Q: Aren't there times when we do want to keep data like this in a table? Does it ever make sense to INSERT new records and keep the old ones?
The table as it stands now not only gives us the last place a particular clown was spotted, but it also gives us a history of their movements.
The problem is that we don't have any clear information in each record that tells us when this took place.
If we add in a column with the current time and date, suddenly we're able to track clowns with great accuracy.
But for now, we need to get those nearly duplicate records out of our table to simplify things.
Q: Okay, so at the end of this book I’ll know how to design tables with no duplicate rows.
But what if the guy who had the job before me left me with a badly designed table?
A: Badly designed tables are common in the real world, and most people who learn SQL find themselves having to fix other people’s SQL messes.
There are a number of techniques for cleaning up duplicate rows.
Some of the best ones involve joins, a topic covered later in this book.
At this point you don’t have all the tools you’ll need to fix bad data, but you will when you’re done.
Piece together the fragments, and annotate what you think each part of the new command does.
The quotes, commas, equality operators, and semicolons were too small to pick up.
It looks like we’re going to have to get rid of  some records.
To make our table more useful to us, we should only have one row per clown.
While we wait for a new Zippo sighting to come in, one that we know will be the most recent, we can get rid of  some of  the old Zippo records that don’t help us.
The DELETE statement is your tool for deleting rows of  data from your table.
It uses the same type of  WHERE clause that you’ve already seen.
See if  you can come up with the right syntax before we show it to you.
Zippo Millstone Mall F, orange suit, baggy pants dancing, singing.
Zippo Oakland Hospital F, orange suit, baggy pants dancing, singing.
Zippo Millstone Mall F, orange suit, baggy pants dancing, singing.
Zippo Oakland Hospital F, orange suit, baggy pants dancing, singing.
Piece together the fragments, and annotate what you think each part of the new command does.
Our WHERE clause from the previous chapter really comes in handy here.
This is how we specify exactly which record to DELETE.
Unlike the SELECT statement, we don’t have to tell it what to delete.
You can use WHERE clauses with DELETE statements the same way you use them with SELECT statements.
Make sure you don’t forget your WHERE clause, or you’ll delete all of your rows!
All records that match the WHERE condition will be deleted from our table.
Elsie Cherry Hill Senior Center F, red hair, green dress, huge feet balloons, little car.
Pickles Jack Green's party M, orange hair, blue suit, huge feet mime.
Snuggles Ball‑Mart F, yellow shirt, baggy red pants horn, umbrella.
Hobo BG Circus M, cigar, black hair, tiny hat violin.
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
Scooter Oakland Hospital M, blue hair, red suit, huge nose balloons.
Babe Earl’s Autos F, all pink and sparkly balancing, little car.
Snuggles Ball‑Mart F, yellow shirt, baggy blue pants horn, umbrella.
Bonzo Dickson Park M, in drag, polka dotted dress singing, dancing.
Sniffles Tracy's M, green and purple suit, pointy nose climbing into tiny car.
Do you think you can delete a single column from a row using DELETE?
Q: Is there any difference in using a WHERE with a DELETE versus WHERE with SELECT?
The WHERE is the same, but what SELECT and DELETE do is significantly different.
Draw a line to the row or rows each query deleted:
DELETEs with WHERE clauses with ANDs and ORs to determine whether or not they would delete any rows.
Draw a line to the row or rows each query deleted:
Those NULL values may cause you problems in future queries.
It's better to enter some sort of value than leave a NULL value in a column because NULLs can’t be found with an equality condition.
DELETEs with WHERE clauses with ANDs and ORs to determine whether or not they would delete any rows.
There’s only one record for Clarabelle in the entire table.
Since we only want one row per clown that holds their most recent information, we just need to create one new record and delete the old one.
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
First, use the INSERT to add the new information (and all the old information, too).1
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
Our job was to add this data to this table.
We’re just showing one line of the table on page 131 to save space.
Use a WHERE clause to find and DELETE the old record.
Use INSERT and DELETE to change the drink_info table as requested.
Use INSERT and DELETE to change the drink_info table as requested.
It's not a trick question, but it is one you need to think about.
This is what your table should look like after you make.
Bonus points if you put both of your INSERT statements into a single INSERT!
Elsie Cherry Hill Senior Center F, red hair, green dress, huge feet balloons, little car.
Pickles Jack Green's party M, orange hair, blue suit, huge feet mime.
Snuggles Ball‑Mart F, yellow shirt, baggy red pants horn, umbrella.
Hobo Oakland Hospital M, cigar, black hair, tiny hat violin.
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
Scooter Oakland Hospital M, blue hair, red suit, huge nose balloons.
Zippo Millstone Mall F, orange suit, baggy pants dancing, singing.
Babe Earl’s Autos F, all pink and sparkly balancing, little car.
Snuggles Dickson Park F, yellow shirt, baggy blue pants horn, umbrella.
Bonzo Ball‑Mart M, in drag, polka dotted dress singing, dancing.
Sniffles Tracy's M, green and purple suit, pointy nose climbing into tiny car.
Hobo Dickson Park M, cigar, black hair, tiny hat violin.
Each time you delete records, you run the risk of  accidentally deleting records you didn’t intend to remove.
Take for example if  we had to add a new record for Mr.
Don't forget about the backslash character in front of your apostrophe.
Here’s the information we need to add, and the INSERT to do it..
Make sure you include a precise WHERE clause to target the exact rows you really want to delete.
Figure out which ones help us and which ones create new problems.
Now write a single DELETE statement that can clean up the extra Mr.
Figure out which ones help us and which ones create new problems.
Now write a single DELETE statement that can clean up the extra Mr.
Deletes Bonzo's and Scooter's records, along with the old records for Mr.
Right! Unless you’re absolutely certain that your WHERE clause will delete the rows you want it to, you should use a SELECT first to make sure.
Since they both can use the same WHERE clause, the rows that the SELECT returns will echo the rows that you’ll DELETE with that WHERE clause.
It’s a safe way to make sure you aren’t deleting anything accidently.
And it will help you be sure you’re getting all the records you want to delete.
If  we aren’t careful, the wrong data will be targeted.
We can avoid targeting the wrong data if  we add another step to our INSERT-DELETE two-step.
Zippo Millstone Mall F, orange suit, baggy pants dancing, singing.
First, SELECT the record you know has to be removed to confirm you’re going to delete the right record and none of  the wrong ones.
Change only the records you mean to by using a SELECT statement first.
Use the WHERE clause you used to SELECT the record in the new step 1 to find and DELETE the old record.
Finally, DELETE the old records with the same WHERE clause you used with your SELECT back at the start of  the ol’ three-step.
Zippo Millstone Mall F, orange suit, baggy pants dancing, singing.
Zippo Millstone Mall F, orange suit, baggy pants dancing, singing.
Wouldn't it be dreamy if I could change a record in just one step without worrying if my new record gets deleted along with the old one.
Change your data with UPDATE By now you should be comfortable using INSERT and DELETE to keep your tables up to date.
And we’ve looked at some ways you can use them together to indirectly modify a particular row.
But instead of  inserting a new row and deleting the old one, you can repurpose, or reuse, a row that’s already in your table, changing only the column values you want to change.
The SQL statement is called UPDATE, and it does exactly what it sounds like it does.
It updates a column, or columns, to a new value.
And just like SELECT and DELETE, you can give it a WHERE clause to indicate which row you want to UPDATE.
The SET keyword tells the RDBMS that it needs to change the column before the equal sign to contain the value after the equal sign.
In the case above, we’re changing 'plain glazed' to just 'glazed' in our table.
The WHERE says to only change rows where type is 'plain glazed'
This is where we say what the new value should be.
Here’s a standard WHERE clause, just like the ones you’ve seen with SELECT and DELETE.
Q: What happens if I leave out the WHERE clause? A: Every column specified in the SET clause for every row in your table will be updated with the new value.
Q: There are two equal signs over there in the SQL query on the left page that seem to be doing different things.
The equal sign in the SET clause says “set this column equal to this value,” while the one in the WHERE clause is testing to see if the column value is equal to the value after the sign.
Q: Could I have used this statement to do the same thing over there?
But if you had used that with a table with hundreds or thousands of records, you would have changed the type on every single Krispy King row.
Q: Ouch! How can I make sure I only update what I need to? A:Just as you saw with DELETE, unless you know for certain you are targeting the correct rows with your WHERE clause, do a SELECT first!
Q: Can you have more than one SET clause? A:No, but you shouldn’t need to.
You can put all your columns and the new values for them in the same SET clause, as shown above.
Instead, you're recycling the old record into the new one.
Our trusty WHERE clause is here to help us precisely target which record to change.
Let's see this in action as a command that will work with the clown_info table.
Here’s the WHERE clause to precisely specify the record to change—in this case, the Mr.
Using UPDATE, you’re editing in place, so there’s no risk of deleting incorrect data (although you do overwrite existing data)
Here’s the information we need to add, and the UPDATE we’ll use to do it.
Elsie Cherry Hill Senior Center F, red hair, green dress, huge feet balloons, little car.
Pickles Jack Green's party M, orange hair, blue suit, huge feet mime.
Snuggles Ball‑Mart F, yellow shirt, baggy red pants horn, umbrella.
Hobo BG Circus M, cigar, black hair, tiny hat violin.
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
Scooter Oakland Hospital M, blue hair, red suit, huge nose balloons.
Zippo Millstone Mall F, orange suit, baggy pants dancing, singing.
Babe Earl’s Autos F, all pink and sparkly balancing, little car.
Snuggles Ball‑Mart F, yellow shirt, baggy blue pants horn, umbrella.
Bonzo Dickson Park M, in drag, polka dotted dress singing, dancing.
Sniffles Tracy's M, green and purple suit, pointy nose climbing into tiny car.
Updating the clowns’ movements This time, let's do it right.
Then fill in the clown_info table as it will look after we execute all the UPDATE statements.
Elsie Cherry Hill Senior Center F, red hair, green dress, huge feet balloons, little car.
Pickles Jack Green's party M, orange hair, blue suit, huge feet mime.
Snuggles Ball‑Mart F, yellow shirt, baggy red pants horn, umbrella.
Hobo BG Circus M, cigar, black hair, tiny hat violin.
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
Scooter Oakland Hospital M, blue hair, red suit, huge nose balloons.
Babe Earl’s Autos F, all pink and sparkly balancing, little car.
Pickles Jack Green's party M, orange hair, blue suit, huge feet mime.
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
Scooter Oakland Hospital M, blue hair, red suit, huge nose balloons.
Babe Earl's Autos F, all pink and sparkly balancing, little car.
Updating the clowns’ movements Your job was to fill in an UPDATE statement for each sighting, then fill in the clown_info table as it will look after we execute all the UPDATE statements.
Elsie Cherry Hill Senior Center F, red hair, green dress, huge feet balloons, little car.
Pickles Jack Green's party M, orange hair, blue suit, huge feet mime.
Snuggles Ball‑Mart F, yellow shirt, baggy red pants horn, umbrella.
Hobo BG Circus M, cigar, black hair, tiny hat violin.
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
Scooter Oakland Hospital M, blue hair, red suit, huge nose balloons.
Babe Earl’s Autos F, all pink and sparkly balancing, little car.
Pickles Jack Green's party M, orange hair, blue suit, huge feet mime.
Snuggles Ball-Mart F, yellow shirt, baggy blue pants horn, umbrella.
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
Scooter Oakland Hospital M, blue hair, red suit, huge nose balloons.
Babe Earl's Autos F, all pink and sparkly balancing, little car.
Bonzo Dickson Park M, in drag, polka dotted dress singing, dancing.
Sniffles Tracy's M, green and purple suit, pointy nose climbing into tiny car.
The gray records haven’t changed because we didn’t UPDATE those.
Only the parts of each record that we SET on the UPDATE have changed.
We use a WHERE to choose a unique column so we know which record to update.
Let's look at how we can approach this problem using an UPDATE statement to go through each record individually and write a series of UPDATE statements like this one:
Write UPDATE statements for each record in the drinks_info table to add another dollar to the cost of each.
Why are you making us do all this work? Isn’t there an operator we can use with UPDATE instead of changing every single record by hand?
It looks like some clever operator would be just the thing to help out here.
Let’s update all those drink prices without having to do every single one by hand…and risk overwriting data we already changed once.
Q: Can I use subtraction with a numeric value? What else can I use?
Q: Can you give me an example of when I might want to use multiplication?
Suppose you had a list of items in a table, each with a price.
You could use an UPDATE statement and multiply the price of each with a fixed number to compute the price of the item with tax.
Q: So, are there other operations you can perform on data besides simple math?
Later, we’ll talk about things you can do with your text variables in addition to more with the numeric ones.
A: Okay, for one thing, you can use the function UPPER() to change the entire text column in your table to uppercase.
And as you might guess, LOWER() will make everything lowercase.
In SQL, we can perform basic math operations on number columns.
In the case of  our cost column, we can just add 1 to it for each row in our table we need to change.
Use them with basic math operators to manipulate your numeric values.
Data does change, so knowing how to update your data is crucial.
But the better job you do designing your table, the less updating you’ll have to do overall.
Good table design frees you up to focus on the data in the table.
Interested? Next, we’ll take a close, painless, look at table design made fishy...
I guess it’s good to know how to update my data, but I really wish I’d understood how to better design it in the first place.
Your SQL Toolbox Chapter 3 will soon be a memory.
For a complete list of tooltips in the book, see Appendix iii.
Use it with a WHERE clause to precisely pinpoint the rows you want to remove.
You’ve been creating tables without giving much thought to them.
But as you get more data, you start seeing things you wish you’d done to make your WHERE clauses simpler.
What you need is to make your tables more normal.
Jack and Mark both created tables to store information about record-setting fish.
Mark’s table has columns for the species and common names of  the fish, its weight, and where it was caught.
It doesn’t include the names of  the people who caught the fish.
I only want to search my table for species name or common name to get the weight and location of.
Write a query for each table to find all records from New Jersey.
This table is also about record-breaking fish, but it has almost twice as many columns.
Jack’s table has the common name and weight of  the fish, but it also contains the first and last names of  the people who caught them, and it breaks down the location into a column containing the name of  the body of  water where the fish was caught, and a separate state column.
I need to know the names of the fishermen, dates, and locations of the big catches.
Write a query for each table to find all records from New Jersey.
We have to use a LIKE to get our results from the combined city and state.
I often have to search by state, so I put in a separate state column when I created my table.
I inserted the data with states in the same column as the town.
Mark will rarely need to search directly for a state because he only really cares about the species and common names of the record‑breaking fish and how much they weighed.
Jack, on the other hand, will need to search for states when he’s querying his data.
That’s why his table has a separate column: to allow him to easily target states in his searches.
Q: Should we avoid LIKE when querying our tables? Is there something wrong with it?
A: There's nothing wrong with LIKE, but it can be difficult to use in your queries, and you risk getting results you don't want.
If your columns contain complicated information, LIKE isn’t specific enough to target precise data.
As your database grows, and as you add in new tables, your queries will get more complicated.
If you start with the simplest possible query now, you'll appreciate it later.
Q: So are you saying I should always have tiny bits of data in my columns?
As you're starting to see with Mark’s and Jack’s tables, it depends on how you’ll use the data.
For example, imagine a table listing cars for a mechanic and one for a car salesman.
The mechanic might need precise information on each car, but the auto dealer might only need the car’s make, model, and VIN number.
Why couldn't we have one column with the entire address, then other columns that break it apart?
A: While duplicating your data might seem like a good idea to you now, consider how much room on your hard drive it will take up when your database grows to an enormous size.
And each time you duplicate your data, that’s one more clause in an UPDATE statement you’ll have to remember to add when your data changes.
Let’s take a closer look at how to design your tables the best possible way for your use.
What do you think “relational” means in an SQL database?
How you’re going to use your data will affect how you set up your table.
All this means to you is that to design a killer table, you need to consider how the columns relate to each other to describe a thing.
The challenge is to describe the thing using columns in a way that makes getting the information out of  it easy.
This depends on what you need from the table, but there are some very broad steps you can follow when you’re creating a table.
Some people think that RELATIONAL means multiple tables relating to each other.
Pick your thing, the one thing you want your table to describe.
Make a list of the information you need to know about your one thing when you’re using the table.
Using the list, break down the information about your thing into pieces you can use for organizing your table.
What’s the main thing you want your table to be about?
Can you spot the columns in this sentence Mark the ichthyologist used to describe how he wants to select from his table? Fill in the column names.
Write a sentence for Jack, the writer for Reel and Creel magazine, who uses his table to select details for his articles.
Then draw arrows from each column to where it's mentioned in the sentence.
I want the weight and location when I search by common name or species.
Can you spot the columns in this sentence Mark the ichthyologist used to describe how he wants to select from his table? Fill in the column names.
I want the weight and location when I search by common name or species.
I want the first name and last name of the fisherman, as well as the date, location, state, and weight of a fish when I search by its common name.
Write a sentence for Jack, the writer for Reel and Creel magazine, who uses his table to select details for his articles.
Then draw arrows from each column to where it's mentioned in the sentence.
We could, but we don't need the data broken down to that level.
If  Jack had been writing an article about the best places to go on vacation and catch a big fish, then he might have wanted the street number and name so readers could find accommodations nearby.
But Jack only needed location and state, so he only added as many columns as he needed to save space in his database.
At that point, he decided his data was broken down enough—it is atomic.
What do you think the word atomic means in terms of SQL data?
But why stop there with Jack’s table? Couldn't you break up the date into month, day, and year? You could even break the location down into street number and street name.
Atomic data What’s an atom? A little piece of  information that can’t or shouldn’t be divided.
When it’s ATOMIC, that means that it’s been broken down into the smallest pieces of  data that can’t or shouldn’t be divided.
To get to where he’s going, he just needs a street number and address in a single column.
He never needs to look for a single street number on its own.
In fact, if  his data were broken into street number and street name, his queries would have to be longer and more complicated, making it take him longer to get the pizza to your front door.
For the pizza guy, the entire street address in one column is atomic enough.
He might want to have a separate column for the street number.
He may want to query on a given street to see all the houses for sale by street number.
For him, street number and street name are each atomic.
But for the realtor, separating street from street number lets him see all the houses for sale on a given street with an easy query.
There are some questions you can ask to help you figure out what you need to put in your tables:
How will you use the table to get at the one thing?
Do your columns contain atomic data to make your queries short and to the point?
Q: Aren’t atoms tiny, though? Shouldn’t I be breaking my data down into really tiny pieces?
Making your data atomic means breaking it down into the smallest pieces that you need to create an efficient table, not just the smallest possible pieces you can.
Don’t break down your data any more than you have to.
Q:How does atomic data help me? A: It helps you ensure that the data in your table is accurate.
For example, if you have a column for street numbers, you can make sure that only numbers end up in that column.
Atomic data also lets you perform queries more efficiently because the queries are easier to write and take a shorter amount of time to run, which adds up when you have a massive amount of data stored.
For each rule, sketch out two hypothetical tables that violate each rule.
Remember Greg's table? That has a column for hobbies that often contains multiple interests, making searching a nightmare!
For each rule, sketch out two hypothetical tables that violate each rule.
Of course, your answers will differ, but here is one example:
It’s the same here: imagine trying to find tomato amongst all those other ingredients.
Now that you know the official rules and the three steps to making data atomic, take a look at each table from earlier in this book and explain why it is or isn't atomic.
Now that you know the official rules and the three steps to making data atomic, take a look at each table from earlier in this book and explain why it is or isn't atomic.
Unlike the easy_drinks table, each column holds a different type of information.
And, unlike the clown table “activities” column, each column has only one piece of information in it.
And each column has only one piece of information in it.
Making your data atomic is the first step in creating a NORMAL table.
When your data consultancy takes off  and you need to hire more SQL database designers, wouldn’t it be great if  you didn’t need to waste hours explaining how your tables work?
Well, making your tables NORMAL means they follow some standard rules your new designers will understand.
And the good news is, our tables with atomic data are halfway there.
Normal tables won’t have duplicate data, which will reduce the size of your database.
Because, even when your tables are tiny, it adds up.
If  you begin with a normalized table, you won’t have to go back and change your table when your queries go too slowly.
With less data to search through, your queries will be faster.
Remember the clown table? Clown tracking has become a nationwide craze, and our old table isn't going to cut it because the appearance and activities columns contain so much data.
Assuming you need to search on data in the appearance and activities columns, as well as last_seen, write down some better choices for columns.
Elsie Cherry Hill Senior Center F, red hair, green dress, huge feet balloons, little car.
Pickles Jack Green's party M, orange hair, blue suit, huge feet mime.
Snuggles Ball‑Mart F, yellow shirt, baggy blue pants horn, umbrella.
Clarabelle Belmont Senior Center F, pink hair, huge flower, blue dress yelling, dancing.
Scooter Oakland Hospital M, blue hair, red suit, huge nose balloons.
Babe Earl's Autos F, all pink and sparkly balancing, little car.
Bonzo Dickson Park M, in drag, polka dotted dress singing, dancing.
Sniffles Tracy's M, green and purple suit, pointy nose climbing into tiny car.
Each row of data must have a unique identifier, known as a Primary Key.
To make our tables completely normal, we need to give each record a Primary Key.
Remember, our table is only about halfway normal when it’s got atomic data in it.
When we’re completely normal we’ll be in the FIRST NORMAL FORM or 1NF.
To be 1NF, a table must follow these two rules:
What types of columns do you think would make good Primary Keys?
In a few pages, we'll create a table and designate a primary key, but before that, let's take a closer look at what a primary key is.
The primary key is used to uniquely identify each record Which means that the data in the primary key.
Take care using SSNs as the Primary Keys for your records.
With identity theft only increasing, people don’t want to give out SSNsand with good reason.
Can you absolutely guarantee that your database is secure? If it’s not, all those SSNs can be stolen, along with your customers’ identities.
A primary key is a column in your table that makes each record unique.
Since Social Security Numbers are assigned uniquely to a particular person, maybe that could be a primary key.
These three columns can all contain duplicate va luesfor example, you will likely have a record for mo re.
Given all these rules, can you think of a good primary key to use in a table?
Do any of them have a column that contains truly unique values?
A primary key can’t be NULL If  it's null, it can't be unique because other records can also be NULL.
The primary key must be given a value when the record is inserted When you insert a record without a primary.
A primary key should contain only the information it needs to to be unique and.
The primary key values can’t be changed If  you could change the value of  your key, you’d.
There's a big debate in the SQL world about using synthetic, or made-up, primary keys (like the ID column above) versus using natural keys—data that is already in the table (like a VIN number on a car or SSN number)
The best primary key may be a new primary key.
When it comes to creating primary keys, your best bet may be to create a column that contains a unique number.
Think of  a table with people’s info, but with an additional column containing a number.
If  it weren't for the ID column, the records for John Brown would be identical.
Wait, so if I can’t use SSN as the primary key, but it still needs to be compact, not NULL, and unchangeable, what should I use?
Also a record for John Brown, but the ID column shows that this is a unique record, so this is is a different John Brown from the first one.
Does that mean there’s a second normal form? Or a third?
A: Yes, there are indeed second and third normal forms, each one adhering to increasingly rigid sets of rules.
Q: So we’ve changed our tables to have atomic values.
So far, not a single table we’ve created has a primary key, a unique value.
Q: The comments column in the doughnut table really doesn’t seem atomic to me.
I mean, there’s no reasonable way to query that column easily.
That field is not particularly atomic, but then our design of the table didn’t require it to be.
If we wanted to restrict the comments to a specific predetermined set of words, that field could be atomic.
We need to make our data atomic and add primary keys.
Creating a primary key is normally something we do when we write our CREATE TABLE code.
Do you remember how to add columns to an existing table?
But luckily for Greg, you don’t have to live with the old table, and you don’t have to dump your data.
We can add a primary key to Greg’s table and make the columns more atomic using just one new command.
But first, let's take a little trip to the past…
From what you’ve seen so far, this is how you’d have to fix Greg’s table:
Fixing Greg’s table Step 1: SELECT all of your data and save it somehow.
Fixing Greg’s table Step 2: Create a new normal table.
Fixing Greg’s table Step 3: INSERT all that old data into the new table, changing each row to match the new table structure.
Greg needs a primary key, and after all the talk about atomic data, he realizes there are a few things he could do to make his columns more atomic.
Before we look at how to fix the existing table, let’s look at how we could have created the table in the first place!
Could these columns have been more atomic when we set up the table?
But what if you don’t have your old CREATE TABLE printed anywhere? Can you think of some way to get at the code?
What if  you use the DESCRIBE my_contacts command to look at the code you used when you set up the table? You’ll see something that looks a lot like this:
But we really want to look at the CREATE code here, not the fields in the table, so we can figure out what we should have done at the very beginning without having to write the CREATE statement over again.
The statement SHOW CREATE TABLE will return a CREATE TABLE statement that can exactly recreate our table, minus any data in it.
This way, you can always see how the table you are looking at could be created.
They aren’t identical, but if  you paste the code below into a CREATE TABLE command, the end result will be the same.
You don’t need to remove the backticks or data settings, but it’s neater if  you do.
The marks around the column names and the table name are called backticks.
They show up when we run the SHOW CREATE TABLE command.
Unless we tell the SQL software differently, it assumes all values are NULL by default.
You don’t need to worry about the last line of text after the closing parenthesis.
It specifies how the data will be stored and what character set to use.
It’s a good idea to specify if a column can contain NULL or not when we create our table.
Although you could make the code neater (by removing the last line and backticks), you can just copy and paste it to create a table.
Unless you’ve deleted the original table, you’ll have to give this one a new name.
Remember, the primary key column has to be NOT NULL! If the primary key contains a value of NULL, or no value, you can’t guarantee that it will uniquely identify each row of the table.
Pretty simple syntax: we just say PRIMARY KEY and put in parentheses the name of the column we are using for it—in this case, our new contact_id column.
We’ve created a new column called contact_id that will hold an integer value that will be the primary key for our table.
Each value in this column will be unique, and make our table atomic.
When you INSERT values into your table, you’ll insert a value in the contact_id column that’s new each time.
Q: That’s quite a pain to have to assign a new value to that PRIMARY KEY column each time I insert a new record.
One is using a column in your data that you know is unique as a primary key.
We’ve mentioned that this is tricky (for example, the problem with using Social Security Numbers)
The easy way is to create an entirely new column just to hold a unique value, such as contact_id on the facing page.
You can tell your SQL software to automatically fill in a number for you using keywords.
A: You can use SHOW to display individual columns in your table:
So far, the only index we’ve looked at are primary keys, but this command will become more useful as you learn more.
There are quite a few more, but those are the ones that are related to things we’ve done so far.
Q: So what’s up with that backtick character that shows up when I use a SHOW CREATE TABLE? Are you sure I don’t need it?
A: It exists because sometimes your RDBMS might not be able to tell a column name is a column name.
If you use the backticks around your column names, you can actually (although it’s a very bad idea) use a reserved SQL keyword as a column name.
For example, suppose you wanted to name a column select for some bizarre reason.
Q: What’s wrong with using keywords as column names, then?
Imagine how confusing your queries would become, and the annoyance of typing those backticks when you can get away with not using them.
Besides, select isn’t a very good column name; it tells you nothing about what data is in it.
What do you think will happen? Better yet, try it out for yourself  and see what happens.
But how do I do an INSERT statement with that column already filled out for me? Can I accidentally overwrite the value in it?
Just add in the AUTO_INCREMENT keyword if you’re using most flavors of SQL.
Open your SQL terminal or GUI interface and run your CREATE TABLE statement.
Did all the Bradys make it? Sketch your table and its contents after trying the INSERT statements.
Write a CREATE TABLE statement below to store first and last names of people.
Your table should have a primary key column with AUTO_INCREMENT and two other atomic columns.
Open your SQL terminal or GUI interface and run your CREATE TABLE statement.
Did all the Bradys make it? Sketch your table and its contents after trying the INSERT statements.
This last statement “works”, but it overwrites the value in the AUTO_INCREMENT.
Looks like we lost Jan because we tried to give her an index that was already assigned to Marcia.
Sure, I can paste in the code from SHOW CREATE TABLE, but I’ve still got the feeling that I’m going to have to drop my table and start over entering all those records again just to add the primary key column the second time around.
You won’t have to start over; instead, you can use an ALTER statement.
A table with data in it doesn’t have to be dumped, then dropped, then recreated.
Q:Why did the first query, the one with NULL for the id column, insert the row when id is NOT NULL?
A: Even though it seems like it shouldn’t succeed, the AUTO_INCREMENT simply ignores the NULL.
However, if it was not AUTO_INCREMENT, you would receive an error and it wouldn’t insert the row.
It’s a long command, so you’ll need to turn your book.
This tells us that it added the column to the 50 records we already have in our table.
Remember, this isn't the end of the table; Greg has a lot of contacts.
The contact_id column has been added first in the table before all the other columns.
Because we used AUTO_INCREMENT, the column was filled in as each record in the table was updated.
That’s slick! I have a primary key, complete with values.
Can ALTER TABLE help me add a phone number column?
Will Greg get his phone number column? Turn to Chapter 5 to find out.
When used in your column declaration, that column will automatically be given a unique integer value each time an INSERT command is performed.
Assuming you need to search on data in the appearance and activities columns, as well as last_seen, write down some better choices for columns.
The best you can do is to pull out things like gender, shirt color, pant color, hat type, musical instrument, transportation, balloons (yes or no for values), singing (yes or no for values), dancing (yes or no for values)
To make this table atomic, you've got to get those multiple activities into separate columns, and those multiple appearance features separated out.
Bonus points if you wanted to separate out the location column into address, city, and state!
If I had it to do over again, I would have gone for a bubble bath.
Even better, you can do it without affecting your data.
Yes, you can use ALTER TABLE to add it easily.
In fact, we think you should take a stab at it yourself  since you’ve already met the ALTER command.
So, I can add that phone number column after all?
Greg wants to make a few more changes to his table, but he doesn’t want to lose any data.
Note that you won’t need to use all of the keywords in your new command.
You can even tell the software where to put the phone column with the keyword AFTER.
See if you can work out where to put the keyword to ADD the new column right after the first_name column.
Take a close look at the ALTER TABLE command we used to add the primary key column in Chapter 4, and see if you can come up with your own command to add that phone column.
Note that you won’t need to use all of the keywords in your new command.
You can even tell the software where to put the phone column with the keyword AFTER.
See if you can work out where to put the keyword to ADD the new column right after the first_name column.
The name of the table we’re altering is still my_contacts.
Here’s the bit that tells the ALTER command exactly how you want to change the table.
We made an assumption that all our phone numbers will be 10 characters long.
The keywords we left out from the previous example are NOT NULL, AUTO_INCREMENT, and FIRST.
The keyword AFTER followed by the name of the column you want the new column to be.
This puts the phone column right after the first_name column.
If you don’t use it, the column is added to the end of the table.
Create as many different commands as you can, then sketch in the columns after you’ve run the command.
Use the semicolon as many times as you need to.
Create as many different commands as you can, then sketch in the columns after you’ve run the command.
If you’d had a THIRD magnet, that would have done the same thing.
Possible loss of data may occur, no guarantees offere d.
The ALTER command allows you to change almost everything in your table without having to reinsert your data.
But be careful, if you change a column of  one data type to a different one, you risk losing your data.
It’s just a little alteration, it won’t hurt a bit.
Extreme table makeover Let’s start our alterations with a table in need of  a major makeover.
This column name tells us nothing about what’s in it.
This doesn’t tell us enough about what this table is supposed to contain.
Maybe we can give this some underscores to make it more readable.
Let’s use DESCRIBE to see how this table is constructed.
This shows us if  a columns  is the primary key and what type of  data is being stored in each column.
While the table and column names aren’t great, the data in the table is valid, and we’d like to keep it.
This description will help you figure out how else you need to ALTER the table.
Find the columns in this sentence that describes how we’re going to use our table, then fill in the column names.
The table has some problems in its current state, but thanks to ALTER, we will make it suitable to contain a list of  home improvement projects needed for a particularly run-down house.
Our first step will be to use ALTER TABLE and give our table a meaningful name.
To make our table NORMAL, we’ll also add a primary key with a unique project number in it.
Then we’ll need columns to describe each improvement, its start date, estimated cost, and the name of the contracting company working on it, along with their phone number.
This description will help you figure out how else you need to ALTER the table.
Find the columns in this sentence that describes how we’re going to use our table, then fill in the column names.
To make our table NORMAL, we’ll also add a primary key with a unique project number in it.
Then we’ll need columns to describe each improvement, its start date, estimated cost, and the name of the contracting company working on it, along with their phone number.
Don’t worry if your column names don’t exactly match these.
Some amount of abbreviation is acceptable as long as it’s clear what is being stored.Make sure the short names, like proj_id, make sense to you and anyone else who might work with the database.
It appears that data for three of  our new columns is already in place.
Instead of  creating all new columns, we can RENAME our existing columns.
By renaming these columns that contain valid data, we won’t need to insert the data into new columns.
Which existing column might be a good candidate for our primary key?
Retooling our columns Now we have a plan to get us started,and we can ALTER the columns already in our table so they fit with three of  our new column names:
This will hold the name of our contracting company, con_name.
Since it’s first in the table, this column will become our proj_id.
Structural changes We’ve decided to use existing columns for three of  our needed columns.
Beyond just changing the names, we should take a closer look at the data type that each of  these columns stores.
Look at each of the columns’ Type and decide if the current types are suitable for future data that we might be storing in this table.
This time we’re using CHANGE COLUMN since we’re changing both the name and the data type of the column formerly known as “number”
In fact, you can do it all in just one command:
We’re still using the same table, but remember, we gave it a new name.
Sketch how the table will look after you run the command above.
Here’s the part that tells our SQL software to use the newly named proj_id column as the primary key.
We’re increasing the number of characters so we can have longer descriptions.
The other old column name, “contractoronjob”, is also going to be changed…
If you change the data type to something new, you may lose data.
If the data type you’re changing to isn’t compatible with the old data type, your command won’t be carried out, and your SQL software will tell you that you have an error in your statement.
But worse news is that if they are compatible types, your data might be truncated.
You can change from one type to another, but your data will be converted to the new type, and you may lose part of your data!
We’re going to change not one, but two columns in just one statement.
We’ll alter the names of  the columns called descriptionofproj and contractoronjob, and at the same time we’re also going to change their data types.
All we have to do is include both CHANGE COLUMN lines in one ALTER TABLE statement and put a comma between them.
That would definitely work, but there’s actually a simpler way.
It changes only the data type of  a column and leaves the name alone.
For example, suppose you needed a longer column to hold the proj_desc.
The new data type.The name of the column we’re modifying.
And of course you’ve made sure that the new data type won’t cause you to truncate your old data!
If I want to change the data type of a column, say to hold more characters, but I want the name to stay the same, I can repeat the column name, right? Like this: ALTER TABLE myTable CHANGE COLUMN myColumn myColumn NEWTYPE;
A: You can’t use MODIFY to change the order of columns.
But there are some methods for changing column order we’ll get to in just a minute.
Keep in mind that column order really doesn’t matter all that much.
Q: But isn’t it going to be a problem if the columns are stored in the wrong order?
A: No, because fortunately, in your SELECT queries, you can specify the order in which your columns will be displayed in the query results.
We still need to add in three more columns: a phone number, a start date, and an estimated cost.
Write a single ALTER TABLE statement below to do this, making sure to pay attention to those data types.
You go ahead and add in those remaining columns, will you?
We still need to add in three more columns: a phone number, a start date, and an estimated cost.
Write a single ALTER TABLE statement below to do this, making sure to pay attention to those data types.
You go ahead and add in those remaining columns, will you?
A VARCHAR of 10 allows us to add the area code.
Remember our DEC fields? We’ve set this so it’s 7 digits long with two decimal places.
We just found out that our project has been placed on hold.
There’s no point in having an unnecessary column lying about taking up space in the database.
It’s good programming practice to have only the columns you need in your table.
With ALTER, you can easily add it back again, if  you need it in the future.
The more columns you have, the harder your RDBMS has to work, and the more space your database takes up.
While you might not notice it with a small table, when your tables grow, you’ll see slower results, and your computer’s processor will have to work that much harder.
Actually, you go ahead and write the SQL statement to drop the start_date column.
We haven’t shown you the syntax for it yet, but give it a try.
Once you’ve dropped a column, everything that was stored in it is removed too!
First you may want to do a SELECT from the column that you intend to drop to make absolutely certain that you.
Actually, you go ahead and write the SQL statement to drop the start_date column.
We haven’t shown you the syntax for it yet, but give it a try.
If you want to drop the start_date column, you can use the DROP command.
Take this sorry little “before” table with used car data and ALTER it into that shiny, gorgeous “after” table.
Part of the difficulty is to not disturb any of the data in the table, but to work around it.
Are you up to the challenge? Bonus points if you can do it all with a single ALTER TABLE statement.
It’s time to turn your tired old hooptie table into a date magnet and take it to a level of table pimpification you never knew existed.
Take this sorry little “before” table with used car data and ALTER it into that shiny, gorgeous “after” table.
Part of the difficulty is to not disturb any of the data in the table, but to work around it.
Are you up to the challenge? Bonus points if you can do it all with a single ALTER TABLE statement.
It’s time to turn your tired old hooptie table into a date magnet and take it to a level of table pimpification you never knew existed.
You could have done a DESCRIBE first so you could see what the data types of each column were to be sure you weren’t truncating any data.
You need to rename the column called “mo” to “model” before you move the color and year columns after it.
You have to give the renamed column “model” a data type.
Q: Earlier you said that I couldn’t reorder my columns with MODIFY.
A: Your software is actually doing a bunch of commands behind the scenes.
It is copying the values from the column you wish to move, saving them into a temporary table, dropping the column you wish to move, altering your table and creating a new column with the same name as the old one where you want it to be, copying all the values from the temporary table back into your new column, and deleting the temporary table.
It’s usually better just to leave the position of your columns alone if they already have data in them and you aren’t using software to do all those steps for you.
You can SELECT your columns in any order you like.
Q: The only time it’s easy to change the column order is when I’m adding in a new column?
The best choice is to think about the order as you design the table in the first place.
Q: What if I accidentally created a primary key, and then changed my mind and wanted to use a different column? Is there a way to remove the primary key designation without changing the data in it?
Q: What about AUTO_INCREMENT? A: You can add it to a column that doesn’t have it like this:
It’s important to keep in mind that you can only have one AUTO_INCREMENT field per table, it has to be an INTEGER data type and it can’t contain NULL.
Use CHANGE when you want to change both the name and the data type of a column.
It’s all about combining the SQL statements  you’ve already learned in the right ways.
Let’s take a look at the CREATE TABLE statement for Greg’s my_contacts table.
These four columns aren’t very atomic and could use some tweaking with ALTER TABLE.
We added these two lines to create and designate our primary key.
My table now has a primary key and a phone number column.
Some of the queries I need to do are difficult—for example, querying by the state in the location field.
A closer look at the non-atomic location column Sometimes Greg just wants to know someone’s state or city, so the location column is a good candidate to break apart into two columns.
Let’s see what the data in the column looks like:
First is the city name, followed by a comma, and then a two-letter state abbreviation.
Because the data is consistent, we can separate the city from the state.
A bit of the data from the location column of the my_contacts table.
Why do we want to separate the city from the state?
Look for patterns Every location column in the my_contacts table follows the same pattern: City Name, followed by a comma, and then the two-letter state abbreviation.
The that fact it’s consistent and follows a pattern will help us break it down so it’s more atomic.
This comma that’s always in front of the state abbreviation may come in handy...
We need a function that allows us to grab everything before the comma…
We can grab everything in front of  the comma so we can put it in a column containing city names.
And we can take the last two characters of  our location column to put in a new column called state.
Write an ALTER TABLE statement that adds city and state columns to my_contacts.
Now we need to grab the state abbreviation and add it to a new state column.
We also need everything in front of  the comma for a city column.
After we create our new columns, here’s how we can extract the values we need:
Use RIGHT() and LEFT() to select a specified number of  characters from a column.
This one will find everything in front of  a specific character or string.
So we can put our comma in quotes, and SUBSTRING_INDEX() will select everything in front of  it.
This is how many characters to select from the RIGHT side of the column.
It looks for the string in single quotes (in this case, it’s a comma) and grabs everything in front of it.
If it were “2” it would keep going until it found a second comma and grab everything in front of that.
String functions allow you to select part of a text column.
Text values and values stored in CHAR or VARCHAR columns are known as strings.
Strings are stored in text columns, typically VARCHAR or CHAR data types.
Here’s a list of some of the more common and helpful string functions.
Try each one for yourself by typing in the SELECT statements.
IMPORTANT: string functions do NOT change the data stored in your table; they simply return the altered strings as a result of your query.
We’re trying to take the information in our location column and transfer it into two new columns, city and state.
Match each step to the SQL keyword or keywords that we need to accomplish that particular step.
Take a look at the data in a particular column to find a pattern.
Put the data we grabbed in step 3 into one of the empty columns.
With what we know so far, we would have to do an UPDATE statement, one record at a time, with a SELECT to get the right data.
Turn the page to see how to put the values in our new columns.
We know how to use all the right pieces, but we still don’t know how to put them together efficiently.
Maybe we could try using those string functions with an UPDATE statement…
We’re trying to take the information in our location column and transfer it into two new columns, city and state.
Match each step to the SQL keyword or keywords that we need to accomplish that particular step.
Take a look at the data in a particular column to find a pattern.
Put the data we grabbed in step 2 into one of the empty columns.
Use a current column to fill a new column Remember our UPDATE syntax? We can use that to set every row in our table to contain the same new value.
The statement below shows the syntax for changing the value of  every row in a column.
In place of  newvalue, you can put a value or another column name.
Each row in our table is set, one at a time, to this value.
To add data to our new city and state columns, we can use the string function RIGHT() inside that UPDATE statement.
The string function grabs the last two characters from the old location column and puts them into the new state column.
But how can that work? There’s no WHERE clause to tell the table WHERE to UPDATE.
First time through, it takes the location for the first row and operates on it.
Then it starts to run through the whole table again a second time, finds the location in the second row, operates on it, and so on, until all the state records are split and it has no more records that match the statement.
Third and final time through, because there are only three records.
Takes the first record’s location column and operates on it.
You can use string functions in combination with SELECT, UPDATE, and DELETE.
Your SQL software interprets the statement for each row in the table one at a time; then it goes back and starts over until all the state abbreviations are split out into their new state column.
Altercross How does a crossword help you learn SQL? Well, it makes you think about commands and keywords from this chapter in a different way.
Our table can be given new columns with the ALTER statement and _____ COLUMN clause.
You can use _____ functions in combination with SELECT, UPDATE, and DELETE.
Use this keyword to alter the type of data stored in a column.
When you no longer need a column, use _____ COLUMN with ALTER.
Values stored in CHAR or VARCHAR columns are known as these.
Use this clause with ALTER when you only wish to change the data type.
Our table can be given new columns with the ALTER statement and _____ COLUMN clause.
You can use _____ functions in combination with SELECT, UPDATE, and DELETE.
Use this keyword to alter the type of data stored in a column.
When you no longer need a column, use _____ COLUMN with ALTER.
Values stored in CHAR or VARCHAR columns are known as these.
Use this clause with ALTER when you only wish to change the data type.
For a complete list of tooltips in the book, see Appendix iii.
String functions Let you modify copies of the contents of string columns when they are returned from a query.
The old “number” has become proj_id, and that column contains the auto-incrementing primary key values.
Our table can be given new columns with the ALTER statement and _____ COLUMN clause.
You can use _____ functions in combination with SELECT, UPDATE, and DELETE.
Use this keyword to alter the type of data stored in a column.
When you no longer need a column, use _____ COLUMN with ALTER.
Values stored in CHAR or VARCHAR columns are known as these.
Use this clause with ALTER when you only wish to change the data type.
It’s time to add a little finesse to your toolbox.
You already know how to SELECT data and use WHERE clauses.
And then I was able to see just the enemy planes using a CASE statement! Kapow!
The new shelves are in, so I want you to.
I’ll leave it to you to fi gure out how to make.
All these columns exist so that we can answer customer questions about the content of an individual movie.
The owner of  Dataville Video has a badly organized store.
In his current system, movies can end up on different shelves depending on which employee is shelving them.
He’s ordered new shelves, and he thinks it’s great time to finally label each of  his movie categories.
In the current system, true and false values are used for types of  movies.
For example, if  a movie has both T for comedy and T for scifi, where should it be shelved?
How would you reorganize the current columns into new categories? Are there any films that might fit into more than one of the new categories?
When movies are returned, we don’t know where they belong.
If  we have T values for a number of  the columns in the table, there’s no clear way to know where that movie needs to be shelved.
Adding True and False data is time‑consuming, and mistakes often happen.
Every time a new movie comes in, it has to be inserted with all those T/F columns.
And the more of  those that get entered, the more errors that crop up.
Sometimes a column that should have been T is accidently entered as F, and vice versa.
A category column would help us double-check our T/F columns, and eventually we might be able to get rid of  those T/Fs altogether.
Our customers get confused when they spot a gory cover in the comedy section.
Currently none of  our T/F values take precedence over any others when movies are shelved.
Here’s a rundown of  the problems Dataville Video has with the current table.
What we need here is a category column to speed up shelving, help customers figure out what type of movie it is they’re renting, and limit errors in our data.
Matching up existing data You know how to ALTER your table to add in the new category column, but adding in the actual categories is a bit trickier.
Luckily, the data that’s already in the table can help us figure out the category for each movie, without us actually having to watch each one.
If the rating is G, we can call it ‘family’; if.
Now we can translate those sentences into SQL UPDATE statements:
Does the order in which we evaluate each of the T/F columns matter?
We don’t know if  it should be considered comedy, action, drama, cartoon, or scifi.
Since it’s unclear where it belongs, it might best be placed in the misc category.
The question marks mean a column was changed by more than one UPDATE.
This value will change depending on the order the UPDATEs were executed.
Does the order in which we evaluate each of the T/F columns matter?
The value in the column you specify here will be changed to the appropriate value below.
This ends the CASE expression and the entire UPDATE statement (because it’s followed by a semicolon)
Anything that doesn’t match either of the conditions gets this value instead.
The indenting doesn’t do anything to the expression; it just makes it easier to track what’s going on when you look at the code.
Well, you could write one big UPDATE statement, but there’s a better way.
The CASE expression combines all the UPDATE statements by checking an existing column’s value against a condition.
If  it meets the condition, the new column is filled with a specified value.
It even allows you to tell your RDBMS what to do if  any records don’t meet the conditions.
That seems fine for a small table, but what if you had hundreds of columns? Is there some way we could combine all those UPDATE statements into one big one?
Let’s see the CASE expression in action on our movie_table.
The values that were unknown when we used UPDATE on its own to populate the new column now have category values.
As each movie title’s T/F values are run through the CASE statement, the RDBMS is looking for the first 'T' to set the category for each film.
Here’s what happens when 'Big Adventure' runs through the code:
Again, we’re looking for the first 'T' value here to set the category.
TRUE: category set to drama; we skip to the END and exit the code.
TRUE: category set to ‘family’, and we skip to the END and exit the code.
Change the CASE expression so that cartoons get put in the 'misc' category, not 'family'
If a cartoon has a G rating, put it in the family category.
How might we use the R rating to keep this sort of thing from happening in the future?
You can simply leave that line out if you don’t need it, but it’s nice to have to update the value of your column when nothing else fits.
It’s better to have some sort of value than NULL, for example.
Q: What happens if I leave off the ELSE but none of the WHEN conditions match?
A: No values will be changed in the column you are updating.
Q:What if I want to only use the CASE expression on some columns but not others?  For example, if I wanted to do a CASE where my category = 'misc'
A: Yes, you can add a WHERE clause after the END keyword.
The CASE will only apply to those columns that match the WHERE.
Q: Can I use a CASE expression with anything other than UPDATE statements?
You can use a CASE expression with SELECT, INSERT, DELETE, and, as you’ve seen, UPDATE.
Change the CASE expression to test for the conditions that set a cartoon to 'misc' instead of 'family'
If a cartoon has a G rating, put it in the family category.
Your condition can have multiple parts: add an AND to your WHEN to test for whether the film is a cartoon AND it’s rated ‘G’
If it is, then it gets a category of ‘family’
Your boss, always a bit wishy-washy, has decided to change things up a bit.
Read his email and write a single SQL statement that will accomplish what he wants.
It turns out that the new categories are causing customers to have a tough time finding movies.
Write a statement that gets rid of the new R-rated categories you just created.
Finally, delete all those T/F columns we don’t need anymore.
And if there are any G -rated movies in the m.
Your boss, always a bit wishy-washy, has decided to change things up a bit.
Read his email and write a single SQL statement that will accomplish what he wants.
It turns out that the new categories are causing customers to have a tough time finding movies.
Write a statement that gets rid of the new R-rated categories you just created.
Finally, delete all those T/F columns we don’t need anymore.
And if there are any G -rated movies in the m.
Tables can get messy When a movie arrives at the store, it gets added to our table and becomes the newest row in our table.
There’s no order to the movies in our movie table.
And now that it’s time to reshelve our movies, we have a bit of  a problem.
We need to select the movies in each category, in alphabetical order within its category.
We know how to query the database to find all of  the movies in each category, but we need them listed alphabetically within their categories somehow.
These are just a few of the more than 3,000 movies Dataville Video has in stock.
How would you organize this data alphabetically using a SQL statement?
We need a way to organize the data we SELECT Each one of  the more than 3,000 movies has to have a sticker on it indicating its category.
We need a master list of  the movies in alphabetical order by title for each category.
We can easily select movies by category, and we can even select movies by first letter of  the title and by category.
But to organize our big list of  movies means that we would need to write at least 182 SELECT statements: Here are a just a few of  them:
This is the letter of the alphabet that the movie titles should begin with.
Where do you think titles that begin with a number or a non-letter character—like an exclamation point—will appear in the list?
We still have to manually alphabetize the titles within their category list using the letters that follow the initial 'A' to decide the order.
Take a closer look at some of the output from just one of our 182 (or more) queries.
How long did these 20 movies take you to order?
Can you imagine how long it would take to order 3,000 or more movies in this way?
We still have to manually alphabetize the titles within their category list using the letters that follow the initial 'A' to decide the order.
Take a closer look at some of the output from just one of our 182 (or more) queries.
It’s exactly the same as the SELECT query we just tried.
Just like it sounds, it tells the program to return the data in alphabetical order by title.
You say you need to order your query? Well, it just so happens that you can tell SQL to SELECT something and ORDER the data it returns BY another column from the table.
Are you telling me this is the only way we can alphabetize our results? There’s NO WAY I’m doing that for every letter of the alphabet.
What can we take out of the query above to make it much more powerful?
What can we take out of the query above to make it much more powerful?
This time we’ll get the entire list of movies in the family category.
If  our query uses ORDER BY title, we don’t need to search for titles that start with a particular letter anymore because the query returns the data listed in alphabetical order by title.
All we need to do is take out the title LIKE part, and ORDER BY title will do the rest.
Notice that the first few titles begin with a number.
This isn’t the end of the results; we don’t have room to show them all here.
Even better, this list will include movies that begin with numbers in the title.
Insert the numbers, letters (both upper‑ and lowercase), and non‑alphabet characters shown below in this column, each in a separate row.
Try your new ORDER BY query on the column and fill in the blanks in the SQL’s Rules of Order book shown below.
When you’ve run your ORDER BY query, fill in the blanks using the order the charactersappear in your results to help you.
Insert the numbers, letters (both upper‑ and lowercase), and non‑alphabet characters shown below in this column, each in a separate row.
Try your new ORDER BY query on the column and fill in the blanks in the ‘SQL’s Rules of Order’ book shown below.
When you’ve run your ORDER BY query, fill in the blanks using the order the charactersappear in your results to help you.
The order that the characters may have shown up in your results.
Your order may be a bit different depending on your RDBMS.
The point here is to know that there IS an order, and what the order is for your RDBMS.
We can alphabetize our movies, and we can create alphabetical lists for each category.
Unfortunately, your boss has something else for you to do…
We want to make sure the purchased date shows up in the results.
We’ll get a list of every movie in the store, ordered by category.
Fortunately, you can order multiple columns in the same statement.
I think we need to ge t rid of some of the m.
Will the oldest movies show up first or last in each category? And what do you think will happen if two movies are in the same category with the same purchase date? Which will show up first?
You can sort by as many columns as you need to get at the data you want.
Take a look at this ORDER BY with three columns.
Here’s what’s going on, and how the table gets sorted.
Next, the results (each category in the table starting with A since that’s how the categories are ordered now) is sorted by date, with the oldest date first.
Dates are always sorted by year, then by month, then by day.
You can sort by as many columns as you need.
First your results are ordered by category, since that was the first column listed after your ORDER BY.
Let’s see what this SELECT statement actually returns when we run it on our original movie table.
There’s no real order here; movies just show up in the order in which the records were inserted into the table.
If  you would prefer the order to be reversed, you want the data in descending order.
You can use the keyword DESC right after the column name.
What if I want to see the movies, newest first? Do I just have to read the list from the bottom?
Q: I thought that DESC was used to get the DESCRIPTION of a table.
When you use it in an ORDER clause, it stands for DESCENDING and that’s how it will order the results.
Q: Can I use the whole words DESCRIBE and DESCENDING in my query to avoid confusion?
Use the keyword DESC after your column name in ORDER BY clauses to reverse the order of your results.
This query gives us a list of  movies ordered by the purchase date, with the newest ones first.
For each date, the movies purchased on that date are listed in alphabetical order.
If we want to order our data from Z to A or from DESC keyword.
When you climb up the stairs, you’re ascending, and you reach A before B.
When you come back down again, you descend and reach Z before A.
The store is looking g reat! You’ve got all th.
To reward you for all of your hard work, I’m.
The Girl Sprout with the largest total amount sold will win free horseback riding lessons.
All of the Girl Sprouts want to win, so it’s crucial that Edwina figure out the correct winner before things get ugly.
Use your new ORDER BY skills to write a query that will help Edwina find the name of the winner.
The Girl Sprout with the largest total amount sold will win free horseback riding lessons.
All of the Girl Sprouts want to win, so it’s crucial that Edwina figure out the correct winner before things get ugly.
Use your new ORDER BY skills to write a query that will help Edwina find the name of the winner.
The sales for each girl still had to be added together manually to find the winner..
We can’t make a mistake and risk making our Girl Sprouts angry.
Instead of  adding these up ourselves, we can make SQL do the heavy lifting for us.
Functions are bits of code that perform an operation on a value or values.
The first one we’ll show you performs a mathematical operation on a column.
We’ll use the SUM function which works by totaling the values in a column designated by parentheses.
The SUM function totals the values in the sales column.
This restricts the query to only add up Nicole’s sales.
Otherwise it would be totaling the whole of the sales column.
This means that it performs an action on the column next to it that’s in parentheses.
Create a table like the cookie_sales table and insert some decimal values in it.
Then work through the queries you’ll find over the next few pages.
Now we need the other three totals and we’re done.
But it would be easier if we could do it in one single query...
There is a way to SUM each of  the girl’s sales at the same time.
We’ll just add a GROUP BY to our SUM statement.
This groups all of  the first name values for each girl and totals the sales for this group.
We have to order by the same SUM that we selected with.
We want the values displayed high-to-low so we can see the winner more easily.
This statement totals all the sales values in each first name group.
We need to come up with some other way to find a second place winner.
We can use the function MAX to find the largest value in a column.
And while it looks like the other girls slacked off at least one day each, even on Britney’s worst day she made money.
Maybe I can give the prize to the girl who sold cookies on more days than any of the others.
To figure out which girl sold cookies on more days than any other, Edwina tries to work out how many days the cookies were sold with the COUNT function.
What do you think will be returned by the query?
Does this number represent the actual number of days cookies were sold?
Write a query that will give us the number of days that each girl sold cookies.
What do you think will be returned by the query?
Does this number represent the actual number of days cookies were sold?
This number simply represents the number of values in the table for sale_date.
Write a query that will give us the number of days that each girl sold cookies.
You couldn’t be sure that there weren’t days missing between the first and last dates.
There’s a much easier way to find out the actual days that cookies were sold, and that’s using the keyword DISTINCT.
Not only can you use it to give you that COUNT you’ve been needing, but you can also get a list of the dates with no duplicates.
You could just do an ORDER BY on the sale_date and look at the first and last dates to figure out how many.
First let’s look at that keyword DISTINCT without the COUNT function.
Since DISTINCT is a keyword and not a function, you don’t need parentheses around sale_date.
Now let’s try it with the COUNT function: Notice that the DISTINCT goes inside the parentheses with sale_date.
We don’t need an ORDER BY because  COUNT will be returning a single number.
Here’s our ORDER BY so we can see the first and last sales dates.
Try out this query, and then use it to figure out which girl sold cookies on the most days?
Who am I?A bunch of SQL functions and keywords, in full costume, are playing a party game, “Who am I?” They’ll give you a clue—you try to guess who they are based on what they say.
Fill in the blanks to the right to identify the attendees.
Also, for each attendee, write down whether it’s a function or keyword.
You need to use me if you want to get a sum.
What I spit out is larger than anything I take in.
The result you get from using me might not be worth much.
Q:Since you were looking for the highest values with AVG, MAX, and MIN, couldn’t you have added an ORDER BY clause?
A: We could have, and it would have been a very good idea.
We chose to leave it out so as to not clutter up the queries and make it easier for you to learn the new functions.
Take a look back over those functions and visualize the ORDER BY there.
It’s especially useful when you have multiple records with the same value in a single column, and you simply want to see the variety of the values, and not a long list of duplicate values.
Q: Doing the query for MIN() didn’t really have anything to do with Edwina finding a winner, did it?
A: No, but it would have helped her find the girls who did the worst.
Next year, she can keep an eye on them to motivate them more.
Q: Speaking of MIN, what happens if there’s a NULL in the column?
No, NULL is never returned by any of these functions, because NULL is the absence of a value, not the same thing as zero.
AVG, MAX, and COUNT really didn’t work out as a way to determine the second place winner.
I wonder if I can use SUM to work out which girl came in second place and give her a prize.
How could we use SUM to work out the second position?
Let’s look back at the original query and results to help us figure out how to get that winner.
This is saying that you want to LIMIT your results to the first two.
It’s a long query and gets you these two little results.
It’s crucial that we use ORDER BY here; otherwise our results would be arbitrary.
Since we only have four results, it’s easy to see who came in second place.
But if  we wanted to be even more precise, we could LIMIT the number of  results just to the top two girls.
That way we could see precisely the results we want.
While there are only four Girl Sprouts in the table and limiting it to two doesn’t help a huge amount here, imagine that you were working with a much larger table.
Paris is our secondplace winner! Nicole has stopped speaking to her.
If you tried to guess what this would result in, you’d probably be wrong.
When you have two parameters it means something completely different than with one.
Write the query that will get us the second result and only the second result using the LIMIT clause with two parameters.
Adding an extra parameter to our LIMIT would really help us.
Write the query that will get us the second result and only the second result using the LIMIT clause with two parameters.
My SQL statements are getting so long and complicated now, with all those new keywords.
I like them, they’re great, but isn’t there a way I can simplify things?
Your queries are getting longer because your data is getting more complicated.
Let’s take a closer look at your table, you may have outgrown it.
SELECTcross It’s time to give your right brain a break and put that left brain to work: all the words are SQL-related and from this chapter.
You can find the smallest value in a column with this function.
This function returns each unique value only once, with no duplicates.
You can find the largest value in a column with this function.
Use these two words to consolidate rows based on a common column.
Lets you specify exactly how many rows to return, and which row to start with.
Use these two words to alphabetically order your results based on a column you specify.
Use this in a SELECT to return the number of results rather than the results themselves.
You can find the smallest value in a column with this function.
This function returns each unique value only once, with no duplicates.
You can find the largest value in a column with this function.
Use these two words to consolidate rows based on a common column.
Lets you specify exactly how many rows to return, and which row to start with.
Use these two words to alphabetically order your results based on a column you specify.
Use this in a SELECT to return the number of results rather than the results themselves.
Your SQL Toolbox You’ve got Chapter 6 under your belt, and you’re really cruising now with.
For a complete list of tooltips in the book, see Appendix iii.
Who am I?A bunch of SQL functions and keywords, in full costume, are playing a party game, “Who am I?” They’ll give you a clue—you try to guess who they are based on what they say.
Fill in the blanks to the right to identify the attendees.
Also, for each attendee, write down whether it’s a function or keyword.
The result you get from using me might not be worth much.
What I spit out is larger than anything I take in.
You need to use me if you want to get a sum.
You can find the smallest value in a column with this function.
This function returns each unique value only once, with no duplicates.
You can find the largest value in a column with this function.
Use these two words to consolidate rows based on a common column.
Lets you specify exactly how many rows to return, and which row to start with.
Use these two words to alphabetically order your results based on a column you specify.
Use this in a SELECT to return the number of results rather than the results themselves.
Your data has become more complex, and that one table you’ve been using just isn’t cutting it.
Your single table is full of redundant data, wasting space and.
You’ve gone as far as you can go with a single table.
It’s a big world out there, and sometimes you need more than one table to.
Finding Nigel a date Greg’s lonely friend Nigel has asked Greg to help him find a woman to date with similar interests.
The interests column isn’t atomic; it has more than one type of  the same information in it.
Looks painful, I’ll have to use LIKE, but it’s just this once…
Why change anything? Greg’s decided not to change the interests column at all.
He’s willing to write the difficult queries because he doesn’t think he’ll have to write them that often.
He uses the birthday DATE field to find matches that are no more than five years younger or five years older than Nigel.
Finish Greg’s custom query to help Nigel find a compatible date who shares all of Nigel’s interests.
We could have used OR here, but we really want to match all of his interests.
Nigel wants to date a woman, so we’re looking for a female…
Select everything from the my_contacts table that matches the following conditions.
Finish Greg’s custom query to help Nigel find a compatible date who shares all of Nigel’s interests.
Looks painful, I’ll have to use LIKE, but it’s just this once… In future, Ignore the interests column for quicker and easier queries.
It worked too well Nigel and Carla really hit it off.
Now Greg’s become a victim of  his own success: all of  his single friends want him to query the database.
Your table design should do the heavy lifting for you.
Don’t write convoluted queries to “get around” a badly designed table.
Write a query for Regis without using the interests column.
Ignoring the problem isn’t the answer Another friend, Regis, asks Greg to find him a date.
He’s looking for a girl who is no more than five years older and no less than five years younger than he is.
He lives in Cambridge, MA and he has different interests than Nigel.
Greg decides not to bother with the interests column to keep his queries short and simple.
Too many bad matches Greg gives Regis a long list of  matches.
After a few weeks, Regis calls Greg and tells him that his list is useless, and that not one of  the women had anything in common with him.
Use only the first interest Greg now knows that he can’t ignore all the interests.
He’s assuming that people gave him interests in order of  importance and decides he’ll query only the first one.
His queries are still a little painful to write, but not as bad as when he included LIKE for all of  the interests in the interest column.
Use the SUBSTRING_INDEX function to get only the first interest from the interests column.
Looks painful, I’ll have to use LIKE, but it’s just this once… In future, Ignore the interests column for quicker and easier queries.
Then Greg writes a query to help Regis find a date using his SUBSTRING_INDEX and specifying that the first interest should match with 'animals'
Only women who had ‘animals’ listed first in their interests will show up in the results.
A possible match At last! Greg found a match for Regis:
This grabs everything in front of the comma in the interests column, or substring.
This is “1” because it’s looking for the first comma.
If it were “2”, it would keep going until it found a second comma and grab everything in front of that, which would be the first two interests.
Use the SUBSTRING_INDEX function to get only the first interest from the interests column.
Looks painful, I’ll have to use LIKE, but it’s just this once… In future, Ignore the interests column for quicker and easier queries.
The next day, Regis shows up at Greg’s door, clearly upset.
But you didn’t tell me that one of her interests was taxidermy.
Regis’s perfect match was in the table, but was never discovered because her interests were in a different order.
What will Greg’s next query look like after he adds in multiple interest columns?
Regis asked Alexis out on a date, and Greg waited anxiously to hear how it went.
He began to imagine his my_contacts table as the start of  a great social networking site.
Add more interest columns Greg realizes that the single interest column makes query writing inexact.
He has to use LIKE to try to match interests, sometimes ending up with bad matches.
Since he learned how to ALTER tables recently, as well as how to break apart text strings, he decides to create multiple interest columns and put one interest in each column.
Use your ALTER and the SUBSTRING_INDEX function to end up with these columns.
Then Greg writes a custom query to help Regis find a compatible date.
He throws in everything he can think of to make a great match.
He starts with the simpler columns—gender, status, state, seeking, and birthday—before querying all those interest columns.
Greg’s been feeling bad about Regis’s experience with Alexis, so he’s going to try once more.
Then Greg writes a custom query to help Regis find a compatible date.
He throws in everything he can think of to make a great match.
He starts with the simpler columns, gender, status, state, seeking, and birthday before querying all those interest columns.
Greg has to look through each interest column to see if the values match Regis’s interests since there could be a match in any of the four new columns.
Regis had a NULL value for interest4 so we only have to check for three interests, not four.
Looks painful, I’ll have to use LIKE, but it’s just this once… In future, Ignore the interests column for quicker and easier queries.
Could we create a table that just contained interests? Would that help?
Would adding a new table help? How might we connect the data in a new table to our current table?
Adding the new columns did nothing to solve the basic problem; the table design does not make querying easy.
Each version of  the table violates the rules of  atomic data.
We know that there’s no good solution if  we work within the current table.
We tried many ways to fix the data, even altering the structure of  the single table.
What we really need are more tables that can work with the current one to allow us to associate each person with more than one interest.
And this will allow us to keep the existing data intact.
We need to move the non-atomic columns in our table into new tables.
The multi-table clown tracking database Remember our clown tracking table from chapter 3? The Dataville clown problem is still increasing, so we’ve altered the single table into a much more useful set of  tables.
In the next few pages you’ll see why the table was broken up in this way, and what the arrows and keys mean.
When we’ve got through all that, we can apply the same rules to gregs_list.
What do you think the lines with arrows mean? How about those key symbols?
What used to be the main table has been whittled down to this.
Pickles Jack Green's party M, orange hair, blue suit, huge feet mime Snuggles Ball-Mart F, yellow shirt, baggy blue pants horn, umbrella Mr.
A description of the data (the columns and tables) in your database, along with any other related objects and the way they all connect is known as a SCHEMA.
A representation of  all the structures, such as tables and columns, in your database, along with how they connect, is known as a schema.
Creating a visual depiction of  your database can help you see how things connect when you’re writing your queries, but your schema can also be written in a text format.
The rest of the old clown_tracking table’s columns have been broken out into separate tables.
Elsie Cherry Hill Senior Center F, red hair, green dress, huge feet balloons, little car Pickles Jack Green's party M, orange hair, blue suit, huge feet mime.
Snuggles Ball-Mart F, yellow shirt, baggy blue pants horn, umbrella Mr.
An easier way to diagram your tables You’ve seen how the clown tracking table has been converted.
Let’s see how we can fix the my_contacts table in the same way.
Up to this point, every time we looked at a table, we either depicted it with the column names across the top and the data below, or we used a DESCRIBE statement in a terminal window.
Those are both fine for single tables, but they’re not very practical to use when we want to create a diagram of  multiple tables.
Here’s a shorthand technique for diagramming the current my_contacts table:
Creating a diagram of your table lets you keep the design of the table separate from the data that’s inside of it.
The key symbol means that this column is a primary key.
How to go from one table to two We know that the interests column is really difficult to query as it stands right now.
And even when we tried to create multiple columns for it, our queries were quite difficult to write.
Our interest column isn’t atomic, and there’s really only one good way to make it atomic: we need a new table that will hold all the interests.
We’ll start by drawing some diagrams of  what our tables could look like.
We won’t actually create our new table or touch any of  the data until we figure out our new schema.
Remove the interests column and put it in its own table.
Here we’ve moved the interests colum into a new table.
Our new interests table will hold all the interests from the my_contacts table, one interest per row.
The interest column will be a VARCHAR that holds the actual interest.
We’ll add in an id field so we can be sure we won’t have duplicate rows.
Add columns that will let us identify which interests belong to which person in the my_contacts table.
We’ve moved our interests out of  my_contacts, but we have no way of  knowing which interests belong to which person.
We need to use information from the my_contacts table and put it into the interests table to link these tables together.
These two columns will allow us to know which interest belongs to which person.
These values will match when an interest belongs to the contact.
The interests table will have more than one match for each contact.
This way we can have multiple interests connected to each person.
Linking your tables in a diagram Let’s take a closer look at our idea for the my_contacts table.
And here is a series of  SELECT statements that will let us use the data in both tables.
You could draw them without the right angles, but those make the lines easier to follow.
Notice how the lines with right-angle bends between tables show the columns that match up in each table The schema allows us to tidy up our sketch in a way that any SQL developer will understand since it uses standard symbols.
Use this space to sketch out more ideas for adding new tables to the gregs_list database to help us keep track of multiple interests.
Don’t worry about making it as neat as our schema; we’re at the ideas stage here.
One idea is drawn for you already, but it has a flaw.
Use this space to sketch out more ideas for adding new tables to the gregs_list database to help us keep track of multiple interests.
Don’t worry about making it as neat as our schema; we’re at the ideas stage here.
One idea is drawn for you already, but it has a flaw.
Using the first name and last name to connect to the interests table isn’t such a good idea, however.
More than one person in my_contacts might share the same first and last name, so we could be connecting people to the wrong interests.
We’re better off using our primary key to make the connection.
By using the contact_id, we end up with a truly unique value.
Luckily, since we already started to normalize it, we have a truly unique column in my_contacts: the primary key.
We can use the value from the primary key in the my_contacts table as a column in the interests table.
Better yet, we’ll know which interests belong to which person in the my_contacts table through this column.
The FOREIGN KEY tells us which interests belong to which person in the my_contacts table.
The FOREIGN KEY is a column in a table that references the PRIMARY KEY of another table.
We’re making sure this new table is in first normal form by giving each record its own primary key.
A foreign key can have a different name than the.
The primary key used by a foreign key is also known as a parent key.
The table where the primary key is from is known as a parent table.
The foreign key can be used to make sure that the rows in one table have corresponding rows in another table.
Foreign key values can be null, even though primary key values can’t.
Foreign keys don’t have to be unique—in fact, they often aren’t.
A NULL foreign key means that there’s no matching primary key in the parent table.
But we can make sure that a foreign key contains a meaningful value, one that exists in the parent table, by using a constraint.
I get that a foreign key lets me connect two tables.
Constraining your foreign key Although you could simply create a table and put in a column to act as a foreign key, it’s not really a foreign key unless you designate it as one when you CREATE or ALTER a table.
The key is created inside of  a structure called a constraint.
Think of a CONSTRAINT as a rule our table has to follow.
You can use a foreign key to reference a unique value in the parent table.
It doesn’t have to be the primary key of the parent table, but it must be unique.
You will only be able to insert values into your foreign key that exist in the table the key came from, the parent table.
Referential integrity means you can only put values in the child table’s foreign key that already exist in the parent table.
Creating a FOREIGN KEY as a constraint in your table gives you definite advantages.
You’ll get errors if you violate the rules, which will stop you accidentally doing anything to break the table.
Q: Once we get my interests pulled out from my_contacts, how will I query them? A: We’ll be getting to that in the next chapter.
And you’ll see that it really is easy to write queries that can pull our data from multiple tables.
But for now we need to redesign my_contacts to make our queries simple and efficient.
You can add your foreign key when you create your new table.
You need to know the name of  the primary key in the parent table as well as the name of  the parent table.
Okay, so I know that pulling the interests from my_contacts is the only way I’m going to be able to query them more easily.
And Regis really needs to meet someone nice… Now what I really need is to know HOW to create a table with a foreign key.
Open up your console window and type in the code above to create your own interests table.
When you’ve created it, take a look at the structure of your new table.
What new information do you see that tells you your constraint is in there?
We create the foreign key just like we would any index column: we set it to INT and NOT NULL.
If we change our minds later, this name will be what we use to undo it.
This line is optional, but it’s good form to use it.
The column name in parentheses is what will become a foreign key.
Now that you know why you should create a foreign key with a constraint, here’s how you can actually do it.
Note how we’re naming the CONSTRAINT so that we can tell which table the key comes from.
Adding the PRIMARY KEY command to the line where you set it up is another (quicker) way to designate your primary key.
Q: You go to all that trouble to create a foreign key constraint, but why? Couldn’t you simply use the key from another table and call it a foreign key without adding the constraint?
A: You could, but by creating it as a constraint, you will only be able to insert values in it that exist in the parent table.
A: The foreign key constraint ensures referential integrity (in other words, it makes sure that if you have a row in one table with a foreign key, it must correspond to a row in another through the foreign key)
If you try to delete the row in a primary key table.
Q: So that means I can never delete a row from my_contacts that has a primary key if it shows up in the interest table as a foreign key?
A: You can, you just have to remove the foreign key row first.
After all, if you’re removing the row from my_contacts, you don’t need to know that person’s interests anymore.
Q: But who cares if I have those rows left hanging around in the interests table?
Those rows are called orphans, and they can really add up on you.
All they do is slow down your queries by causing useless information to be searched.
And using the keyword UNIQUE (when you create a column) is considered a constraint.
There’s also a type of constraint, not available in MySQL, called a CHECK constraint.
It allows you to specify a condition that must be met on a column before you can insert a value into that column.
You’ll want to consult the documentation for your specific SQL RDBMS for more info on CHECK.
Open up your console window and type in the code above to create your own interests table.
When you’ve created it, take a look at the structure of your new table.
What new information do you see that tells you your constraint is in there?
Relationships between tables We know how to connect the tables through foreign keys now, but we still need to consider how the tables relate to each other.
In the my_contacts table, our problem is that we need to associate lots of  people with lots of  interests.
This is one of  three possible patterns you’ll see again and again with your data: one-to-one, one-to-many, and many-to-many, and once you identify the pattern your data matches, coming up with the design of  multiple tables—your schema—becomes simple.
Patterns of data: one-to-one Let’s look at the first pattern, one-to-one, and see how it applies.
In this pattern a record in Table A can have at most ONE matching record in Table B.
So, say Table A contains your name, and Table B contains your salary details and Social Security Numbers, in order to isolate them from the rest of the table to keep them more secure.
Both tables will contain your ID number so you get the right paycheck.
In the schema, the connecting line is plain to show that we’re linking one thing to one thing.
These tables also have a one-to-one relationship, since the primary key of the employee table, employee_id, is being used as the foreign key of the salary table.
Each person in employees can only have one Social Security number, and each SSN maps to only one person.
There are only a few reasons why you might connect your tables in a one-to-one relationship.
It generally makes more sense to leave one-to-one data in your main table, but there are a few advantages you can get from pulling those columns out at times:
Pulling the data out may allow you to write faster queries.
You may wish to make some of  your data less accessible.
Isolating it can allow you to restrict access to it.
For example, if  you have a table of  employees, you might want to keep their salary information out of  the main table.
So we should be putting all our one-to-one data in new tables?
One-to-One: exactly one row of a parent table is related to one row of a child table.
One-to-many means that a record in Table A can have many matching records in Table B, but a record in Table B can only match one record in Table A.
In this example, we’ve moved the profession column to a new child table, and changed the profession column in the parent table to a foreign key, the prof_id column.
Since it’s a one-to-many relationship, we can use the prof_id in both tables to allow us to connect them.
The connecting line has a black arrow at the end to show that we’re linking one thing to many things.
Because the prof_id can repeat—have many matching records—this can’t be a primary key.
This is a foreign key because it references a key from another table.
One-to-Many: a record in Table A can have MANY matching records in Table B, but a record in Table B can only match ONE record in Table A.
Patterns of data: getting to many-to-many Many woman own many pairs of  shoes.
If  we created a table containing women and another table containing shoes to keep track of  them all, we’d need to link many records to many records since more than one woman can own a particular make of  shoe.
Here’s how the links between the women and shoes tables would look.
Imagine they loved the shoes so much, the women all bought a pair of  the shoes they didn’t already own.
Here’s how the links from women to each shoe name would look then.
The connecting lines have black arrows at both ends; we’re linking many things to many things.
How can we fix the tables without putting more than one value in a column (and winding up like Greg did with his interests column problems in his queries for Regis)?
We tried to fix the problem by adding shoe_id to the table with women records as a foreign key.
Sketch out the tables yourself, only this time put the woman_id in the shoe table as a foreign key.
We tried to fix the problem by adding shoe_id to the table with women records as a foreign key.
Sketch out the tables yourself, only this time put the woman_id in the shoe table as a foreign key.
Patterns of data: we need a junction table As you just found, adding either primary key to the other table as a foreign key gives us duplicate data in our table.
We need a table to step in between these two many-to-many tables and simplify the relationships to one-to-many.
We need what is called a junction table, which will contain the primary key columns of  the two tables we want to relate.
Linking these two tables directly to each other just won’t cut it because we end up with duplicate data thanks to its many-to-many relationships.
The junction table contains the primary keys of the two tables you want to relate.
Then you need to link the primary key columns of each of the two original tables, with the matching columns in the junction table.
Many-to-Many: a junction table holds a key from each table.
Now you know the secret of  the many-to-many relationship—it’s usually made up of  two one-to-many relationships, with a junction table in between.
We need to associate ONE person in the my_contacts table with MANY interests in our new interests table.
But each of  the interests values could also map to more than one person, so this relationship fits into the many-to-many pattern.
The interests column can be converted into a many-to-many relationship using this schema.
Every person can have more than one interest, and for every interest, there can be more than one person who shares it:
Q: Do I have to create the middle table when I have many-to-many relationship?
If you have a many‑to‑many relationship between two tables, you’ll end up with repeating groups, violating first normal form.
A refresher on normalization is coming up in a few pages.
There’s no good reason to violate first normal form, and many good reasons not to.
The biggest is that you’ll have a very difficult time querying your tables with all the repeated data.
A: You’ll definitely see an advantage when you start querying these multiple tables with joins in the next chapter.
It can also help you, depending on how you’ll use your data.
You may have a table where you’re more interested in that many‑to‑many connection than the data in either of the two other tables.
Q: What if I still don’t mind repeats? A: Joining tables helps preserve your data integrity.
Without the separate table, you could accidentally remove the wrong records.
And when it comes to updating info, it’s also nice.
Remember that if it’s one‑to‑many or many‑to‑many, the column would be pulled from the table and linked with an ID field.
Remember that if it’s one‑to‑many or many‑to‑many, the column would be pulled from the table and linked with an ID field.
This one’s tricky, but since a book can have more than one author, it’s many-to-many.
Now that you know about the patterns of data, we’re nearly ready to redesign gregs_list.
We know that the interests column can be changed to a one-to-many relationship with another table.
We also need to fix the seeking column in the same way.
These changes will also put us into first normal form*
The more we normalize now, the easier it will be for you to get to your data with queries and, in the next chapter, joins.
Before we create a new schema for gregs_list, let’s take a detour to learn more levels of  normalization.
You may feel compelled to flip back a few chapters to refresh your memory of first normal form.
No need, we talk about it on the next page.
This table still isn’t in 1NF because the columns themselves are holding the same category of data, all VARCHARs with the toy color.
Let’s take a look at it again, and then take our normalization even further, into Second and even Third Normal Forms.
But before we can go there, let’s recap just what it is that puts a table  into the 1NF.
Notice how the second table has had extra colors columns added, but the colors themselves still repeat one to a row in the new table:
A key made of two or more columns is known as a composite key.
Let’s take a look at how those work in some more tables.
Finally in 1NF Take a look at what we’ve done here.
It’s one color per row, and all of our rows are unique.
We can use both the toy_id and color value together to form a unique primary key.
If  we add the toy_id to a separate table as the foreign key, that’s fine because the values it holds don’t have to be unique.
If  we add the color values to that table also, all the rows are unique because each color PLUS each toy_id together make up a unique combination.
A multi-column primary key? But doesn’t a primary key have to be just one column?
Composite keys use multiple columns So far we’ve talked about how the data in a table relates to other tables (one-to-one, one-to-many)
What we haven’t considered is how the columns in a table relate to each other.
Understanding that is the key to understanding second and third normal forms.
And once we understand those, we can create database schemas that will make querying multiple tables much easier.
You’ll want well-designed tables when we get to joins in the next chapter!
A COMPOSITE KEY is a PRIMARY KEY composed of multiple columns, creating a unique key.
We could create this table and designate these two fields to be a composite primary key.
We’re assuming that we’ll never have exactly the same name and power so that this will be unique.
It has no unique key, but we can create a composite primary key from the name and power columns.
While there are some duplicate names and powers, put them together, and the pair of  them create a unique value.
Our superheroes have been busy! Here’s the updated super_heroes table.
See how the initials column contains the initial letters of  the name value in the name column? What would happen if  a superhero changed their name?
The initials column is said to be functionally dependent on the name column.
Here are our two identical names, with the power co lumn.
Now you know that the initials column is dependent on the name column in the superhero table.
Do you see any similar dependencies? Write them down here.
When a column’s data must change when another column’s data is modified, the first column is functionally dependent on the second.
Now you know that the initials column is dependent on the name column in the super_heroes table.
Do you see any similar dependencies? Write them down here.
A quick way to describe a functional dependency is to write this:
T.x —> T.y Which can be read like this “in the relational table called T, column y is functionally dependent on column x.” Basically, you read them from right to left to see what’s functionally dependent on what.
These don’t mention which table the columns are from, which will matter when you add more tables.
There’s a shorthand way to indicate these dependencies and the tables they’re from.
So, if  our superhero were to change his name, the initials column would change as well, making it dependent on the name column.
If  our arch-enemy decides to move his lair to a new city, his location changes, but nothing else does.
This makes the arch_enemy_city column in the table below completely independent.
A dependent column is one containing data that could change if  another column changes.
Partial functional dependency A partial functional dependency means that a non-key column is dependent on some, but not all, of  the columns in a composite primary key.
In our superheroes table, the initials column is partially dependent on name, because if  the superhero’s name changes, the initials value will too, but if  the power changes, and not the name, our superhero’s initials will stay the same.
Intials depend on name, but not on power, so this table contains a partial functional dependency.Name and power together make up the composite primary key.
Meanwhile Eraserman has moved his pencil tin to a new desk in Borrowdale, but none of the other columns will be affected.
You also need to consider how each non-key column relates to the others.
If  an arch-enemy moves to a different city, it doesn’t change his arch_enemy_id.
If  changing any of  the non-key columns might cause any of  the other columns to change, you have a transitive dependency.
Transitive functional dependency: when any non-key column is related to any of the other non-key columns.
Verminator’s arch_enemy_id hasn’t changed, even though he’s moved to Kansas City.
If changing any of the non-key columns might cause any of the other columns to change, you have a transitive dependency.
What would happen to the pub_id value of 'I Hate Lucy' if its publisher moved to Sebastopol?
What will happen to the value in the copyright column if the author of the book in the third row changes to 'Rin Tin Tin', but the title stays the same?
Write down what will happen to the value in the copyright column if the title of the book in the third row changes to: 'Help Timmy! I’m Stuck Down A Well'
What will happen to the value in the copyright column if the author of the book in the third row changes to 'Rin Tin Tin', but the title stays the same?
Author and title together make up the composite primary key.
If the author changes, and not the title, the copyright changes.
Neither column is a key column, so this is a transitive functional dependency.
What would happen to the pub_id value of 'I Hate Lucy' if its publisher moved to Sebastopol?
Write down what will happen to the value in the copyright column if the title of the book in the third row changes to: 'Help Timmy! I’m Stuck Down A Well'
Q: Is there a simple way to avoid having a partial functional dependency?
A: Using an id field like we have in my_contacts allows you to completely avoid the issue.
Since it’s a new key that exists only to index that table, nothing is dependent on it.
Q: So, other than when I create junction tables, why would I ever want to create a composite key out of columns in my table? Why not just always create an id field?
But you’ll find compelling arguments for both sides if you search the Web for “synthetic or natural key.” You’ll also find heated debates.
We’ll let you make up your own mind on the topic.
In this book, we’ll primarily stick with single, synthetic primary key fields to keep our syntax simpler so you learn the concepts and don’t get bogged down with the implementation.
Adding primary key columns to our tables is helping us achieve 2NF.
For the sake of  ease, and to guarantee uniqueness, we’ve generally been adding columns to all our tables to act as primary keys.
This actually helps us achieve 2NF, because the second normal form focuses on how the primary key in a table relates to the data in it.
Look, these dependencies are nice and all, but what do they have to do with moving from first normal form into second normal form?
Second normal form Let’s consider two tables that exist to keep an inventory of toys to help us better understand how the second normal form focuses on the relationship between the table’s primary key and the data in the table.
And it really doesn’t have anything to do with the inventory; it has to do with the store.
It really belongs more in a toy table than in an inventory table.
Our toy_id ought to identify both toy type AND toy color.
If  we need to change the store_address, we have to change every row where it’s referenced in this table.
The more rows that are updated over time, the more possibility there is for errors to creep into our data.
If  we pulled the store_address column into another table, we’d only have to make one change.
Inventory is dependent on both of the columns that make up the composite primary key, so it does not have a partial functional dependency.
Then we’d have a table with all the toy information and a table with all the store information, with our new table connecting them.
This is a great reason to assign an AUTO_INCREMENT id column.
Your job is to play a table, and remove all the partial functional dependencies from yourself.
Redesign these tables into three tables that are all 2NF.
One will contain info about the toy, one will have store info, and the third will contain the inventory and connect to the other two.
Finally, add these new columns to the appropriate tables: phone, manager, cost, and weight.
Your job is to play a table, and remove all the partial functional dependencies from yourself.
While these ought to be an ID pulled from an agency table (because two agencies might have the same name), it’s not a partial functional dependency.
While these ought to be pulled from this table, they aren’t pfd.
Once we’ve moved those columns out, the remaining columns can form a composite primary key.
Redesign these tables into three tables that are all 2NF.
One will contain info about the toy, one will have store info, and the third will contain the inventory and connect to the other two.
Finally, add these new columns to the appropriate tables: phone, manager, cost, and weight.
Third normal form (at last) Because in this book we generally add artificial primary keys, getting our tables into second normal form is not normally a concern for us.
Any table with an artificial primary key and no composite primary key is always 2NF.
We do have to make sure we’re in 3NF, though.
If changing any of the non-key columns might cause any of the other columns to change, you have a transitive dependency.
If your table has an artificial primary key and no composite primary key, it’s in 2NF.
Show the relationships between foreign keys with lines, and the one‑to‑many relationships with arrows.
Show the relationships between foreign keys with lines, and the one‑to‑many relationships with arrows.
This is a many-to-many relationship, which is made up of two one-tomany relationships and a joining table.
And so, Regis (and gregs list) lived happily ever after Greg’s able to find Regis’s perfect match using his newly normalized database.
Better yet, he’s also able to easily find matches for more of  his friends keeping the Greg’s List dream alive.
Not so fast! Now I have to query all these new tables and.
Schema A description of the data in your database, along with any other related objects and the way they all connect.
First normal form (1NF) Columns contain only atomic values, and no repeating groups of data are permitted in a column.
Give yourself a hand, you’re more than halfway through the.
For a complete list of tooltips in the book, see Appendix iii.
One-to-Many relationship A row in one table can have many matching rows in a second table, but the second table may only have one matching row in the first.
Many-to-Many relationshipTwo tables are connected by a junction table, allowing many rows in the first to match many rows in the second, and vice versa.
Transitive functional dependency This means any non-key column is related to any of the other non-key columns.
Your table must be in 2NF and have no transitive dependencies.
Foreign key A column in a table that references the primary key of another table.
Use your ALTER and the SUBSTRING_INDEX function to end up with these columns.
First of all you need to create the new columns:
Next we need to remove the first interest from the interests field since it’s stored in interest1
We remove everything until right after the first comma with a string function:
We also could have just renamed it interest4 and not needed the ADD COLUMN (assuming we just have four interests)
This scary-looking part computes how much of the interests column we need.
It takes the total length of the interests column and subtracts the length of the part we moved to interest1
Then we subtract one more so we start after the comma.
This is essentially the same query as Greg used for Nigel,.except he’s left off the interests.
Write a query for Regis without using the interests column.
It’s great to have more than one table in your database, but you’ll need to learn some new tools and techniques to work with.
With multiple tables comes confusion, so you’ll need aliases to keep your tables.
And joins help you connect your tables, so that you can get at all the data you’ve.
Get ready, it’s time to take control of your database again.
Greg noticed the same values for status, profession, interests, and seeking popping up again and again.
Wouldn’t it make sense to have a set list of values in some of the tables?
Prepopulate your tables Having many duplicate values will make it easy to prepopulate the status, profession, interests, and seeking tables.
Greg wants to load up those four tables with the values already in his old my_contacts table.
First he needs to query his table to find out what’s already in there.
But he doesn’t want an enormous list of  duplicate values.
Write queries that can retrieve the status, profession, interests, and seeking values from the old my_contacts table, without producing any duplicates.
If you don’t do them in this order, you get an error.
We can’t do a simple SELECT to get the interests column out.
Using that SELECT statement for the interests column isn’t going to work when we have values in there like this:
Write queries that can retrieve the status, profession, interests, and seeking values from the old my_contacts table, without producing any duplicates.
We got the “table ain’t easy to normalize” blues Like a dog that ain’t got no bone, our un-normalized design has really hurt us.
There’s just no easy way to get those values out of the interests column in a way that we can see them one at a time.
How can we get those multiple values into a single column in the interests table?
And doing it by hand would make it very difficult to spot duplicates.
When you have hundreds of  interests, you’d have to look each time you enter a new one to see if  it’s already in there.
Instead of  doing all that hard work, and risking lots of  typos, let SQL do the tedious work for you.
Can’t we just do this manually? I mean, I can just look through.
One fairly straightforward way is to add four new columns to my_ contacts where we can temporarily store the values as we separate them out.
Then we can get rid of  those columns when we finish.
You know how to ALTER tables at this point, so you need to ALTER my_contacts to have four new columns.
Here’s what the interests and new interest columns in my_contacts look like now that you’ve run ALTER.
Now for the tricky part: we’re going to use another substring function to remove from the interests column the data we just moved into the interest1 column.
Then we can fill in the rest of  the interest columns the same way.
In our example the length of the string ‘first’ is five characters.
Length returns a number that is the length of whatever string is in the parentheses that follow it.
Translation: Change the value in the interests column to be whatever is in there now, without the part we put in interest1 and the comma and the space.
We’re going to remove the first interest, the comma that follows it, and the space that follows the comma from the interests column.
We’ll use a SUBSTR function that will grab the string in the interests column and return part of  it.
Remember how some functions are different depending on which flavor of SQL you’re using? Well, this one of those.
Refer to a really useful reference—like SQL in a Nutshell from O’Reilly—for your particular brand of SQL.
After we’ve run that UPDATE statement, our table looks like this.
We’ve given you a couple of notes to help you along.
Fill in what’s in each column after this big command.
Hint: The interests column will change each time because the string value in the interests column is being shortened by the SUBSTR function.
After you’ve removed the first three interests from the interests column, all that is left is the fourth interest.
On the next page we’re going to show you THREE WAYS to take advantage of these SELECT statements to get your new interests table pre‑populated.
Play around with SELECT, INSERT, and CREATE to see what you come up with.
And then look at the next page to see the three ways.
The point here is not to get this right, but to think about your possibilities.
Getting all the interests We’ve got all our interests separated at last.
We can get to them with simple SELECT statements, but we can’t get to them all at the same time.
And we can’t easily pull them all out in a single result set, since they’re in four columns.
But at least we can write four separate SELECT statements to get all the values out:
All we’re really missing now is a way to take those SELECT statements and stuff the contents directly into our new tables.
There’s not just one way to do this; there are at least three!
Many paths to one place While being able to do the same thing three (or more) different ways might seem fun to the crazy clowns, it can be confusing to the rest of  us.
When you know three ways to do something, you can choose the way that best suits your needs.
And as your data grows, you’ll notice that some queries are performed more quickly by your RDBMS.
When your tables become very large, you will want to optimize your queries, so knowing that you can perform the same task in different ways can help you do that.
Create the profession table with a primary key column and a VARCHAR column to hold the professions.
Now fill up the profession column of the profession table with the values from your SELECT.
Create the profession table with both a primary key and a profession column, and fill the profession column with the values from the SELECT.
The AS keyword does exactly what it sounds like it does.
It’s all part of  aliasing, which we’re just coming to!
Second way: CREATE the profession table using the data from a SELECT that grabs the values from the my_contacts table’s profession column, then ALTER the table and ADD the primary key field.
This is the one-step way: CREATE the profession table with a primary key column and a VARCHAR column to hold the profession values, and at the same time fill it with the values from the SELECT.
It seems like it’s being used to reference the results from one query to insert.
It’s funneling all the output of the SELECT into the new table.
Since we created the profession table with an auto_incrementing primary key, we only needed to add the values to the second column in that table, which we named profession.
These all refer to the profession column in my_contacts because they’re all part of the SELECT.
We’re creating a VARCHAR column in our new table and calling it profession.
That’s one of  the reasons that SQL allows you to temporarily give your columns and tables new names, known as aliases.
If we hadn’t given the new table two columns, AS would have created just one column and filled with the same name and data type as the column that is the result of the SELECT.
The SQL software might know which profession is which, but how can I tell?
So when we used AS in the second and third examples, we were telling the software to take all the values that came out of  the my_contacts table as a result of  that SELECT and put it into a new profession table we just created.
If  we hadn’t specified that the new table have two columns with new names, AS would have created just one column, filled with the same name and data type as the column that’s the result of  the SELECT.
We’ll put it right after the initial use of  the column name in our query with another AS to tell our software to refer to the profession column in my_contacts as some new name that makes it clearer to us what’s going on.
This query does exactly the same thing as the first one, but thanks to the alias, it’s easier to understand.
All queries return the results in the form of  tables.
The alias changes the name of  the column in the results but it doesn’t change the original column name in any way.
But since we overrode the results by specifying that our new table have two columns—the primary key and our profession column—our new table will still have a column called profession, not mc_prof.
Put your alias right after the first use of the original column name in the query to tell your software to refer to it as the alias from now on.
Table aliases, who needs ’em? You do! We’re about to dive head-first into the world of  joins, where we are selecting data from more than one table.
And without aliases, you’re going to get tired of  typing those table names again and again.
You create table aliases in the same way as you create column aliases.
Put the table alias after the initial use of  the table name in the query with another AS to tell your software to refer to the original my_contacts table as mc from now on.
No, there’s a shorthand way to set up your aliases.
The query below does exactly the same thing as the one at the top of  the page.
This works as long as the alias follows directly after the table or column name it is aliasing.
Do I have to use “AS” each time I set up an alias?
Everything you wanted to know about inner joins If  you’ve ever heard anyone talking about SQL, you’ve probably heard the word “join” tossed about.
They’re not as complicated as you might think they are.
We’re going to take you through them, show you how they work, and give you plenty of  chances to figure out when you should use joins.
But before we get to that, let’s begin with the simplest type of  join (that isn’t a true join at all)
Suppose you have a table of  children’s names, and another table with the toys that those children have.
It’s up to you to figure out which toys you can buy each child.
The query below gets us the Cartesian results when we query both tables at once for the toy column from toys and the boy column from boys.
Remember our shorthand notations from last chapter? The name before the dot is the table, and the name after it is the name of a column in that table.
Only this time around, we’re using table aliases instead of the full table names.
And the rest of the query joins those two columns in a new results table.
Only because toys.toy had more results do these show up in groups.
But remember, the order of results has no meaning with this query.
The Cartesian join takes each value in from the first table and pairs it up with each value from the second table.
The CROSS JOIN returns every row from one table crossed with every row from the second.
Q: Why would I ever need this? A:It’s important to know about it, because when you’re mucking around with joins, you might accidentally get Cartesian results.
This will help you figure out how to fix your join.
Q: What if I cross join two very large tables? A: You’d get an enormous number of results.
It’s best not to cross join large tables, you run the risk of hanging your machine because it has so much data to return!
Q: Is there another syntax for this query? A: You bet there is.
You can leave out the words CROSS JOIN and just use a comma there instead, like this: SELECT toys.toy, boys.boy FROM toys, boys;
Q: I’ve heard the terms “inner join” and “outer join” used before.
A: A Cartesian join is a type of inner join.
An inner join is basically just a Cartesian join where some results rows are removed by a condition in the query.
We’re going to look at inner joins over the next few pages, so hold that thought!
What do you think would be the result of this query?
An INNER JOIN is a CROSS JOIN with some result rows removed by a condition in the query.
Look at the query and write in the blanks what you think each line of the query is doing.
Assume the data from the three stickies below is in the tables.
Draw what the resulting table might look like with results.
Look at the query and write in the blanks what you think each line of the query is doing.
Assume the data from the three stickies is in the tables.
Draw what the resulting table might look like with results.
You’ve just seen one small variation of  one kind of  join.
And you’ve got a lot more to learn about it and the other joins before you can use them appropriately and effectively.
An INNER JOIN combines the records from two tables using comparison operators in a condition.
Columns are returned only where the joined rows match the condition.
An INNER JOIN combines the records from two tables using comparison operators in a condition.
I get it! That’s how I connect all my new tables to the new my_contacts.
I don’t have to write a bunch of SELECTs, I just join my tables with that INNER JOIN thingamabob and I’m done!
The inner join in action: the equijoin Consider these tables.
We have a one-to-one relationship, and toy_id is a foreign key.
All we want to do is find out what toy each boy has.
We can use our inner join with the = operator to match up the foreign key in boys to the primary key in toys and see what toy it maps to.
We could have added an ORDER BY boys.boy if we’d wanted to.
Query that returns the email addresses and professions of each person in my_contacts.
Query that returns the first name, last name, and status of each person in my_contacts.
Query that returns the first name, last name, and state of each person in my_contacts.
Query that returns the email addresses and professions of each person in my_contacts.
Query that returns the first name, last name, and status each person in my_contacts.
Query that returns the first name, last name, and state of each person in my_contacts.
The inner join in action: the non-equijoin The non-equijoin returns any rows that are not equal.
By using the non-equijoin, we can see exactly which toys each boy doesn’t have (which could be useful around their birthdays)
This is the “non-equi” part of the joinOrdering our results.
The last inner join: the natural join There’s only one kind of  inner join left, and it’s called a natural join.
Natural joins only work if  the column you’re joining by has the same name in both tables.
Just as before, we want to know what toy each boy has.
Our natural join will recognize the same column name in each table and return matching rows.
We get the very same result set as we did with our first inner join, the equijoin.
Write the queries for the gregs_list database below as natural joins or non-equijoins:
Query that returns the email addresses and professions of each person in my_contacts.
Query that returns the first name, last name, and any status that each person in my_contacts is not.
Query that returns the first name, last name, and state of each person in my_contacts.
Query that returns the first name, last name, and any status that each person in my_contacts is not.
Write the queries for the gregs_list database below as natural joins or non-equijoins:
Query that returns the email addresses and professions of each person in my_contacts.
Query that returns the first name, last name, and state of each person in my_contacts.
You’ll get back multiple rows for each person, with the statuses that they aren’t linked to with the status_id.
I return all rows where one column of  a table does not match the other table’s column.
Match each join to the description of  what it does.
I can return rows equal to the product of  two tables’ rows.
I return all rows where one column of  a table matches the other table’s column, and I use the keyword ON.
I return all rows where one column of  a table does not match the other table’s column.
Match each join to the description of  what it does.
I can return rows equal to the product of  two tables’ rows.
I return all rows where one column of  a table matches the other table’s column, and I use the keyword ON.
Use the diagram of the gregs_list database below to write SQL queries to get the information requested.
Write a query to return all possible combinations of rows from contact_seeking and seeking.
List the professions of people in the my_contacts table, but without any duplicates and in alphabetical order.
Use the diagram of the gregs_list database below to write SQL queries to get the information requested.
Write a query to return all possible combinations of rows from contact_seeking and seeking.
List the professions of people in the my_contacts table, but without any duplicates and in alphabetical order.
Q: Can you join more than two tables? A: You can, and we’ll talk about that a little later.
Right now we’ll focus on getting the join concepts down.
Q: Aren’t joins supposed to be more difficult than this? A: Once you start getting into joins and aliases, SQL queries sound less English‑like and more like a foreign language.
Also using shortcuts (like replacing the keywords INNER JOIN with commas in queries, for example) could make things even more confusing.
For that reason, this book favors more verbose SQL queries rather than less clear shortcuts.
Q: Does that mean there are other ways to write inner join queries?
But if you understand these, with the syntax we present, picking up syntax of the others will be easy.
The concepts are much more important than you using WHERE or ON in a join.
Q: I noticed you used an ORDER BY in a join.
Feel free to use GROUP BY, WHERE clauses, and functions such as SUM and AVG anytime.
He’s beginning to see that having multiple tables makes sense, and they aren’t difficult to work with if  they’re well designed.
But I still find myself typing one query, then using those results in a second query when it seems like I should be able to do it all in one...
Wouldn’t it be great if I could put a query inside.
We’re hoping you can clear up some confusion for us.
And you can call us TA and CA for short during this interview[laughs]
Why all the secrecy? Are you trying to hide something?
Column Alias: Absolutely not! If  anything, I’m trying to make things more clear.
I think I speak for both of  us here, right TA?
In CA’s case, it should already be clear what he’s trying to do.
He takes long or redundant column names and makes them easier to follow.
He also gives you result tables with useful column names.
HeadFirst: I have to admit, I’m not as familiar with you, TA.
I’ve seen how you operate, but I’m still not sure what it is you’re doing.
You don’t show up at all in the results when we use you in a query.
But I think you don’t yet grasp my higher calling.
CA: And you help me too in those same joins, TA.
I think it will be pretty clear what it is I’m doing:
HeadFirst: I see you! Everywhere I’d have to type my_contacts, I can just type mc instead.
And really useful when I have to include two table names in a single query.
Making your queries easier to understand not only helps you write them, but it helps you remember what they are doing when you come back to them later.
For a complete list of tooltips in the book, see Appendix iii.
It only works if you are joining two tables that have the same column name.
The EQUIJOIN returns rows that are equal, and the NON-EQUIJOIN returns any rows that are not equal.
You know how to ALTER tables at this point, so you need to ALTER my_contacts to have four new columns.
We’ve given you a couple of notes to help you along.
After you’ve removed the first three interests from the interests column, all that is left is the fourth interest.
This line is simply moving it to the new column.
We could have simply renamed the interests column to interest4 at this point, instead.
The interests column contains only the last interest at this point.
Will everyone else notice that I’m full of… (What’s the right word? Exquisiteness? Resplendence? Pulchritude?)
Joins are great, but sometimes you need to ask your database more than one question.
Well, not really, but two out of three ain’t bad.
Greg knows he’s going to need to add new tables for his contacts that are interested in the service.
He decides to make them separate one-to-one tables rather than putting that information into my_contacts for two reasons.
First, not everyone in his my_contacts list is interested in the service.
Second, he might hire people to help him with his business someday and the salary information might be considered sensitive.
He may only want to give access to those tables to certain people.
Greg gets into the job recruiting business So far, the gregs_list database has literally been a labor of  love.
It’s helped Greg find dates for his friends, but he’s made no money from it.
It occurs to him that he could start a recruiting business where he matches his contacts up with possible jobs.
With the new recruiting functionality, I’m really going to make it big!
Since the two new tables each have a one-to-one relationship with my_contacts, he’s been able to use natural joins so far with great success and ease.
Greg’s added new tables to his database to keep track of  information on the desired position and expected salary range, as well as current position and salary.
He also creates a simple table to hold the job listing information.
Greg uses an inner join Greg’s got a hot job listing, and he’s trying to match people in his database.
He wants to find the best match for the job since he’ll get a finder’s fee if  his candidate is hired.
Wanted: Web Developer Looking for Web Developer with first rate HTML & CSS chops to work with our interaction and visual design teams.
This is a tremendous opportunity for someone who’s meticulous about web standards to shine with a highly-visible company.
Once he finds the best few matches, he can call them up and screen them further.
But first, he wants to pull out all the Web Developers with at least five years of  experience and who don’t require a salary higher than 105,000
Write the query to get the qualified candidates from the database.
This is the lowest salary they’ll accept for a new job.
This is the salary they’re hoping for in a new job.
But he wants to try some other queries Greg has more job openings than he can fill.
He’s going to look for people in his professions table to see if  he can find any matches for his open job listings.
Then he can do a natural join with my_contacts to get their contact info and see if  they are interested.
First he selects all the titles from his job_current table.
Write the query to get the qualified candidates from the database.
We use the GROUP BY so we only get one row for each job title.
We only need to get the contact information since we know they’re seeking Web Developer jobs.
We’re only interested in people who will consider the salary.
We look at the salary_low figure to see if the salary offered is more than the least they’ll accept.
And now Greg uses the IN keyword to see if he has any matches for these job titles among his contacts.
But he’s still having to type in two separate queries…
Remember the IN keyword? It returns a row if jc.title is in the group of titles in parentheses.
To accomplish what those two queries do with just one query, we need to add a subquery into the query.
We’ll call the second query we used to get the matches from the professions table the OUTER query because it will wrap up inside of  itself  the INNER query.
This part of the first query will become the inner query, or subquery.
This part can be removed and replaced with part of our first query, which will become the inner query.
All those professions in parentheses above came from the first query we did, the one to select all the titles from the job_current table.
So—and this is the clever bit, so watch carefully—we can replace that part of  the outer query with part of  our first query.
This will still produce all the results in parentheses above, but this query now gets encapsulated as the subquery:
A subquery is a query that is wrapped within another query.
We don’t need to retype all the professions from our first query anymore because the inner query takes care of that for us!
All we’ve done is combine the two queries into one.
We combine the two into a query with a subquery.
And these are the results we get when we run our query, precisely the same results as when we spelled out all the job titles in the WHERE clause, but with a lot less typing.
The two queries combined into one are a query containing a subquery.
A subquery is nothing more than a query inside another query.
The outside query is known as the containing query, or the outer query.
The query on the inside is the inner query, or the subquery.
Because it uses the = operator, this subquery will return a single value, one row from one column (sometimes called a cell, but in SQL known as a scalar value), which is compared to the columns in the WHERE clause.
Our subquery returns a scalar value (one column, one row), which is then compared against the columns in the WHERE clause.
Let’s see a comparable query in action from the my_contacts table.
First your RDBMS takes the scalar value from the zip_code table, then it compares that value to the columns in the WHERE clause.
This query selects the names of people in my_contacts in Memphis, Tennessee.
Q: Why can’t I just do this as a join? A: You can.
Why, I bet if  you weren’t there, they’d be even more pleased.
What good is a single-row, single-column answer? It’s not enough information.
Do you think it’s fun, giving you a specific, targeted result, only to have you take it and turn it into a bunch of  matching rows? Quantity is not quality, you know.
Without me, you’d be spouting all the data in the table.
And a very specific one I am, if  I do say so myself.
Subqueries can show up in four places in a query:
As always, one goes at the of the entire query.
Subquery rules There are some rules that all subqueries follow.
Fill in the blanks using the words below (you might need some of them more than once)
Q: So what is the inner query allowed to return? How about the outer query?
A: In most cases, the inner query can only return a single valuethat is, one column with one row.
The outer query can then take that value and use it to compare against all the values in a column.
Q: Why do you say “a single value” when the example on page 387 returns the entire column full of values?
A:Because the IN operator is looking at a set of values.
If you use a comparison operator, like the = in the Anatomy, you can only have one value to compare to each value in your column.
Q: I’m still not clear on whether a subquery can return a single value or more than one value.
A: In general, a subquery must return a single value.
Most of the time subqueries need to return a single value to work.
Q: So what happens if your subquery does return more than one value but isn’t using a WHERE clause that contains a set of values?
A: Chaos! Mass destruction! Actually, you’ll just get an error.
Subqueries can show up in four places in a query:
As always, one SEMICOLON goes at the END of the entire query.
Subquery rules Keep these rules in mind as you look at the subqueries in the rest of the chapter.
Actually, there are two things you can do that will help cut down on the clutter.
You can create alias names for your columns in your SELECT column list.
The table you get back with your results is suddenly much clearer.
Here’s the subquery we just created, but with short column aliases.
Yeah, these rules are cool or whatever, but what I want to know is how I can get rid of those long names in my result columns, like mc.last_name.
Notice how using the column aliases makes the results much easier to understand.
And since aliases are temporary, we’re not affecting any of the table or column names in either table.
A subquery construction walkthrough The tricky part about subqueries isn’t the structure; it’s figuring out what part of the query needs to be the subquery.
Analyzing queries is very much like figuring out word problems.
You identify words in the question that match things you know (like table and column names) and break things apart.
Let’s go through an analysis of  a question we want to ask our database and how to make a query out of  it.
Who makes the most money out of all my contacts?
Rephrase the question in terms of  the tables and columns in your database.
Who makes the most money out of all of my contacts?
Since we’re creating a noncorrelated subquery, we can pick apart our question and build a query that answers part of  it.
That MAX(salary) looks like a good candidate for our first query.
Remember MAX? It returns the largest value from the column in parentheses.
The first part of  the query is also easy; we just need to select first and last names:
We not only need names of  people in my_contacts, we need to know their salaries so we can compare them to our MAX(salary)
We need a natural inner join to pull out the salary belonging to each person:
And now add the WHERE clause to link the two We create one big query that answers the question, “Who earns the most money?”
Use a NATURAL JOIN to pull out each person’s salary.
Here’s the part we just did—it pulls out each person’s salary.
And here’s the first part which is now our subquery to find the MAX salary value.
It’s true, the subquery wasn’t the only way to do it.
You could have done the same thing using a natural inner join and a LIMIT command.
Like so many other things in SQL, there’s more than one way to do it.
It really seems like we could have done that without the subquery.
I don’t care if there are multiple ways of doing the same thing.
Or at least some reason to choose one way over another.
Why don’t you check out the SQL Exposed interview on page 400?
Write another query to figure out who makes the most money out of all Greg’s contacts.
A subquery as a SELECT column A subquery can be used as one of  the columns in a SELECT statement.
We can dissect this query by first looking at the subquery.
The subquery simply matches up the zip codes to the corresponding states in the zip_code table.
For each one, pull out the first name, last name, and state (where we find the state by taking the zip code and matching it up with the correct state in the zip code table)
Remember that the subquery may only return one single value, so each time it runs, a row is returned.
Here’s what some of  the results of  this query might look like:
If a subquery is used as a column expression in a SELECT statement, it can only return one value from one column.
Greg’s friend Andy has been bragging about what a great salary he gets.
He didn’t tell Greg how much, but Greg thinks he has that information in his table.
He does a quick NATURAL JOIN to find it, using Andy’s email address.
Greg notices that this query will only return a single result.
Instead of  running it and getting that value and plopping it into another query, he decides to turn it into a subquery.
All of  the subqueries you’ve seen so far are known as noncorrelated subqueries.
The inner query gets processed first, then the result is used in the WHERE condition of  the outer query.
But the inner query in no way depends on values from the outer query; it can be run as a standalone query.
If the subquery stands alone and doesn’t reference anything from the outer query, it is a noncorrelated subquery.
Its results depend on the value from the inner query.
We didn’t use an ORDER BY, so they aren’t in any order.
When we put the pieces together, here’s the entire query.
First the software processes the inner query once, then it uses that value to figure out the outer query result.
Only show the people who have greater salaries than Andy’s.
SQL: Difficult? That’s what you call it? I’d say things have been troubling, disturbing, and really hard to quantify while at the same time being very convoluted.
You give us too many choices when we ask you questions.
That you can ask me the same question in a number of  ways and I’ll give you the same answers.
Head First SQL: Some people would say that you’re wishy-washy.
Head First SQL: No, we know you aren’t, it’s just that you’re so…imprecise.
SQL: HA! Me imprecise! I’ve had about enough of this.
Sometimes you let us ask you the same thing in so many different ways.
Head First SQL: Nothing really, we just want to know WHAT we should be asking you.
Does it matter, if  you give us the same answer?
SQL: Of  course it matters! Sometimes you ask me something, and it takes me a very long time to answer you.
The whole point is that you ask me the right way.
Head First SQL: So it’s about how long you take to respond? That’s how we pick how to ask you?
I’m just here to try to answer your questions, when they’re accurate.
You want your questions to be as easy to answer as possible.
Because if  you ask me “Whodunnit” I need you to make me think about it as little as possible.
Give me easy questions, and I’ll give you quick answers.
But how do we know what the easy questions are?
SQL: Well, for starters, cross joins are a huge waste of  time.
Sometimes your best bet is to create test tables and try different queries.
Follow the instructions to write the two queries as requested, then combine them into a subquery.
Greg wants to see what the average salary is for a Web Developer in his job_current table.
Then he wants to look at what people are actually making as compared to the average salary for that job.
If he finds people earning less, he can use that to target them because they may be more interested in getting a new job.
Write a query to get the average salary of a Web Developer from the job_current table.
Greg needs to get the first name, last name, and salary of all web developers in his job_current table.
Write a query to get the first name, last name, and salary of all Web Developers in the job_current table.
Greg uses the average salary (and a little math) as a subquery to show each Web Developer and how much under or over the average salary they make.
Use the subquery as part of the SELECT column list.
Follow the instructions to write the two queries as requested, then combine them into a subquery.
Greg wants to see what the average salary is for a Web Developer in his job_current table.
Then he wants to look at what people are actually making as compared to the average salary for that job.
If he finds people earning less, he can use that to target them because they may be more interested in getting a new job.
Write a query to get the average salary of a Web Developer from the job_current table.
Greg needs to get the first name, last name, and salary of all web developers in his job_current table.
Write a query to get the first name, last name, and salary of all Web Developers in the job_current table.
Greg uses the average salary (and a little math) as a subquery to show each Web Developer and how much under or over the average salary they make.
Use the subquery as part of the SELECT column list.
It helps him spot the people with job titles that match his listings.
It takes the complete set of  titles returned by the SELECT in the subquery and evaluates that against each row of  the job_current table to find any possible matches.
A noncorrelated subquery uses IN or NOT IN to test if the values returned in the subquery are members of a set (or not)
Using NOT IN would help Greg see job titles that don’t match his listings.
Now Greg can focus on trying to find more job listings for those types of  jobs.
Why not just type in the list of values instead of using a subquery?
These types of  queries are called noncorrelated subqueries, where IN or NOT IN tests the results of  the subquery against the outer query to see if  they match or not.
List titles for jobs that earn salaries equal to the highest salary in the job_listings table.
Write queries with joins and noncorrelated subqueries when necessary to answer the questions below.
Several of these need the aggregate functions you learned with the Girl Sprout cookie sales problem.
List the first and last name of people with a salary greater than the average salary.
Find all web designers who have the same zip code as any job_listings for web designers.
List everyone who lives in the same zip code as the person with the highest current salary.
Write queries with joins and noncorrelated subqueries when necessary to answer the questions below.
List titles for jobs that earn salaries equal to the highest salary in the job_listings table.
List the first and last name of people with a salary greater than the average salary.
The natural join gives us the names of the people with salaries greater than the one returned by the inner query.
The outer query takes the result of the subquery and returns matches that are greater.
Find all web designers who have the same zip code as any job_listings for web designers.
List everyone who lives in the same zip code as the person with the highest current salary.
This is a trick question, because there could be more than one person with the highest salary.
Because there could be more than one zip code returned, we treat the results as a set and use “IN” to find the match.
We need to use a natural join to get useful info, like names and phone numbers, for the people we find.
The innermost subquery gets the MAX salary from the job_current table.
That will be a single value, so we can use =
The middle subquery finds zip codes of people who earn the maximum salary.
The outer query takes the zip codes and finds matches in the my_contacts table.
Because the middle subquery could return more than one zip code, we use an IN.
In a noncorrelated subquery, the inner query, or subquery, gets interpreted by the RDBMS, followed by the outer query.
A correlated subquery means that the inner query relies on the outer query before it can be resolved.
The query below counts the number of  interests in the interest table for each person in my_contacts, then returns the first and last name of  those people who have three interests.
It needs the value for contact_id from the outer query before the inner query can be processed.
It uses the same alias or correlation name for my_contacts, mc, that was created in the outer query.
The outer query has to be executed before we know what the value of mc.contact_id is.
If a noncorrelated subquery means the subquery stands alone, then I bet a correlated subquery is somehow dependent on the outer query.
A (useful) correlated subquery with NOT EXISTS A very common use for correlated subqueries is to find all the rows in the outer query for which no rows exist in a related table.
He can use a NOT EXISTS to target those people.
Match each part of  the query above to what it does.
If  two contact_ids match, a condition is met WHERE NOT EXISTS.
Just like with IN and NOT IN, you can both use EXISTS and NOT EXISTS with your subqueries.
Match each part of  the query above to what it does.
If  two contact_ids are true, a condition is met WHERE NOT EXISTS.
Write a query that returns the email of people who have at least one interest but don’t exist in the job_current table.
Greg’s Recruiting Service is open for business Greg is now comfortable getting to his data with subqueries.
He even discovers he can use them in INSERT, UPDATE, and DELETE statements.
He rents a small office space for his new business, and decides to have a big kickoff  party.
I wonder if I can find my own first employee in the job_desired table...
Q:So can you put a subquery inside a subquery? A: Definitely.
There’s a limit on how many nested subqueries you can use, but most RDBMS systems support far more than you’d ever easily be able to use.
Q: What’s the best approach when trying to construct a subquery inside a subquery?
A: Your best bet is to write little queries for the various parts of the question.
Then look at them and see how you need to combine them.
If you’re trying to find people who earn the same amount of money as the highest paid web designer, break it apart into:
Find the highest paid web designer Find people who earn x amount of money.
Q: If I don’t like using subqueries, is there a way I can use joins instead?
You need to learn a few more joins first, though.
On the way to the party Greg spots this disturbing tabloid cover:
Joins and subqueries can be used to make exactly the same queries.
Much to the confusion of  local residents, anything you can do with a subquery, you can do with some type of  join.
How can I tell the children that what they thought they knew about subqueries, all those hours spent learning how to use them, well, they could have just used joins.
Local resident Heidi Musgrove was shocked to learn the truth about subqueries.
Your SQL Toolbox You’ve completed Chapter 9 and mastered the art of the.
For a complete list of tooltips in the book, see Appendix iii.
A subquery that stands alone and doesn’t reference anything from the outer query.
Correlated SubqueryA subquery that relies on values returned from the outer query.
Subquerycross You can tell your inner query from your outer query, but can you solve this crossword? All of the solution words are from this chapter.
If the subquery stands alone and doesn’t reference anything from the outer query, it is a _____ subquery.
In a _____ subquery, the inner query, or subquery, gets interpreted by the RDBMS, followed by the outer query.
A query inside of another query is known as a _____
A _____ subquery means that the inner query relies on the outer query before it can be resolved.
If the subquery stands alone and doesn’t reference anything from the outer query, it is a _____ subquery.
In a _____ subquery, the inner query, or subquery, gets interpreted by the RDBMS, followed by the outer query.
A query inside of another query is known as a _____
A _____ subquery means that the inner query relies on the outer query before it can be resolved.
Write a query that returns the email of people who have at least one interest but don’t exist in the job_current table.
Just like any other two things that both need to be true, you can use an AND in your WHERE clause.
If the subquery stands alone and doesn’t reference anything from the outer query, it is a _____ subquery.
In a _____ subquery, the inner query, or subquery, gets interpreted by the RDBMS, followed by the outer query.
A query inside of another query is known as a _____
A _____ subquery means that the inner query relies on the outer query before it can be resolved.
You’ve seen cross joins that return every possible row, and inner joins that return rows from both tables where.
But what you haven’t seen are outer joins that give you back rows that.
And after the inner join, a left outer join for a figure eight.
I think I might have some values in there that I’m not using anymore.
How can I easily find professions that aren’t connected to any of the records in the my_contacts table? I can’t get an inner join to do that.
Let’s take a look at what outer joins do, and then we’ll show you how to find those professions you aren’t using anymore.
An outer joins returns all rows from one of  the tables, along with matching information from another table.
With an inner join, you’re comparing rows from two tables, but the order of  those two tables doesn’t matter.
We get all the columns that match toy_id from both tables.
It matches up the toy_id that exists in both tables:
The equijoin compares rows from these two tables to get the result.
It’s about left and right By comparison, outer joins have more to do with the relationship between two tables than the joins you’ve seen so far.
A LEFT OUTER JOIN takes all the rows in the left table and matches them to rows in the RIGHT table.
It’s useful when the left table and the right table have a one-to-many relationship.
The big secret to understanding an outer join is to know which table is on the left and which is on the right.
In a LEFT OUTER JOIN, the table that comes after FROM and BEFORE the join is the LEFT table, and the table that comes AFTER the join is the RIGHT table.
The left outer join matches EVERY ROW in the LEFT table with a row from the right table.
The table that comes before whatever flavor of join you’re using takes on the same flavor.
Our results are the same as the inner join results.
We can use a left outer join to find out which girl has which toy.
Here’s the syntax of  a left outer join using the same tables as before.
The girls table is first after FROM, so it’s the LEFT table; then we have the LEFT OUTER JOIN; and finally, the toys table is the RIGHT table:
It comes before the left outer join, so girls is the left table…
So, the LEFT OUTER JOIN takes all the rows in the left table (the girls table) and matches them to rows in the RIGHT table (the toys table)
The difference is that an outer join gives you a row whether there’s a match with the other table or not.
In the case of  our girls and toys, a NULL value in the results means that a particular toy doesn’t belong to any of  the girls.
A NULL value in the results of a left outer join means that the right table has no values that correspond to the left table.
Sketch out what you think the result table of this query will be.
Hint: There will be 8 rows in the results table.
And that’s it? What’s the big deal then? An outer join seems like the same thing as an inner join.
With the order of our tables changed, here’s what we get:
This time around, every row in the toys table (the left table) is compared to the girls table (the right table)
If a match is found, it shows up as a result in our table.
If no match is found, we still get a row in our table, but with NULL for the unmatched value.
The order the columns show up in the table is the order in which we SELECT them.
This order has nothing to do with the LEFT join.
Here’s a query where we’ve swapped the order of our tables.
Sketch what you think the results of this query will be.
For each result set, write a left outer join that could have created it, along with a girls table and toys table with data that matches the results.
For each result set, write a left outer join that could have created it, along with a girls table and toys table with data that matches the results.
This can be any toy_id that doesn’t actually exist in the toys table since the toy column ended up NULL in the results.
The repeated values mean that more than one girl has the same toy.
And the NULL means that no girl has a crazy straw.
These are the toys that showed up in our results.
Outer joins and multiple matches As you just noticed in the exercise, you’ll get rows even when there are no matches in the other table, as well as multiple rows when there are multiple matches.
The right outer join The right outer join is exactly the same thing as the left outer join, except it compares the right table to the left one.
The two queries below give you precisely the same results:
The right outer join evaluates the right table against the left table.
These two queries both make the girls table the left table.
The left table (in both queries) The right table (in both queries)
Q: Is there any reason to use a left outer join instead of a right one?
A: Changing the word LEFT to RIGHT is easier than changing the order of the tables in the query.
You only have to change one word, rather than swap the two table names and their aliases.
In general, though, it might actually be easier to always stick with one, say the left outer join, and change which table is left and which is right.
Q: So if there’s a LEFT outer join, and a RIGHT outer join, is there a join that returns both the left and right results?
A: There is on some, but not all, RDBMS systems, and it’s called the FULL OUTER JOIN.
Couldn’t you actually use an outer join to join a single table to itself? That has to be useful somehow.
You can use the same table as both the right and left table in an outer join.
And while it seems strange, it can come in handy.
Let’s take a look at a situation when you might need to outer-join a table to itself.
First, though, there’s a big problem in Dataville with the clowns.
Back in Dataville, the clowns are organizing, and clown bosses are being put in charge.
It’s a frightening development, and we need to keep track of  just who those bosses are, and which clowns report to which clown bosses.
Every clown has one boss, except for the head clown, Mister Sniffles.
How can you restructure your schema to store the information about boss clowns?
Let’s take a look at our current schema and see how best to fit in this new information:
But I’m funny how? I mean, funny like I’m a clown, I amuse you?
We could create a new table We can create a table that lists each clown and the ID of  his boss.
Here’s our hierarchy with the clown IDs of  each clown.
And here’s a new table which lists each clown and the id of  his boss from the clown_info table.
Mister Sniffles has no boss, but he needs an id.
We can give him his own id for boss_id and avoid a NULL in that column.
How the new table fits in Let’s take a look at our current schema and see how best to fit in this new table:
We have a one-to-one relationship with id—our primary key—and a one-to-many relationship with boss_id.
We have a primary key and a foreign key both from the clown_info table.
Is there a way we can keep track of our clown bosses without creating a whole new table?
It seems like you could use a one-to-one table, but since there’s no private info there, can’t we fit it into the main table somehow?
A self-referencing foreign key What we need is a new column in our clown_info table that tells us who the boss of  each clown is.
The new column will contain the ID number of  the clown’s boss.
The self-referencing part means that it is a key that is referencing another field in the same table.
We assume Mister Sniffles is his own boss, so his boss_id is the same as his id.
This means we can use a self-referencing foreign key as our boss_id.
A self-referencing foreign key is the primary key of  a table used in that same table for another purpose.
A SELF-REFERENCING foreign key is the primary key of a table used in that same table for another purpose.
Join the same table to itself Suppose we want to list each clown and who that clown’s boss is.
But what we really want is the clown’s name and their boss’s name: name boss Elsie Snuggles.
Write a single join to get a table of results containing the name of each clown and the name of that clown’s boss.
Write a single join to get a table of results containing the name of each clown and the name of that clown’s boss.
We need a self-join In the “Sharpen your pencil” you just did, you were given the same table twice.
But in a normalized database, you would never have two copies of  the same table.
Instead, we can use a self-join to simulate having two tables.
Consider this query, which is almost identical to the solution of  the “Sharpen,” but has one obvious difference.
The self-join allows you to query a single table as though there were two tables with exactly the same information in them.
I’m trying to get a big list of all the job titles I use in gregs_list, but I can’t figure.
And they work, but he wants to combine the results in one single query and get a list of  every title listed in those three tables.
There’s another way of  getting combined results from two or more tables, called a UNION.
A UNION combines the results of  two or more queries into one table, based on what you specify in the column list of  the SELECT.
Think of  the results of  the UNION like they’re the values from each SELECT that “overlap.”
These are a few of the hundreds of listings he gets in the combined results from all three tables.
Greg notices that there aren’t any duplicates in the results, but the titles aren’t in order, so he tries the query again with an added ORDER BY in each SELECT statement.
What do you think happened when Greg ran this new query?
Greg’s added an ORDER BY to each statement so that the titles in the results table are listed alphabetically.
This is because UNION concatenates and groups the results from the multiple SELECT statements.
There are a few more things about unions you should know.
The number of columns in each SELECT statement must match.
You can’t select two columns from the first statement and one from the next.
You must also have the same expressions and aggregate functions in each SELECT statement.
You can put the SELECT statements in any order; it won’t change the results.
By default, SQL suppresses duplicate values from the results of a union.
The data types in the columns need to either be the same, or be convertible to each other.
If for some reason you DO want to see duplicates, you can use the operator UNION ALL.
If you want to order your results, use an ORDER BY after the last SELECT that you’re combining.
You must use the same number of columns in each SELECT.
You can’t SELECT two columns from the first table and only one column from the next table.
Here’s an example of the results we can expect to get back.
In this example, all three of  the columns have the same data type, VARCHAR.
As a result, the column returned by the query is also VARCHAR.
What do you think would happen if the columns we unioned had different data types?
This time we get the same job listed more than once.
So far our UNIONs have used columns of  the same data type.
But you may want to create a UNION of  columns with different data types.
When we say that the data types must be convertible to each other, we mean that the data types returned will be converted into compatible types if  possible, and if  they can’t be, the query will fail.
Suppose you used a UNION on an INTEGER data type, and a VARCHAR type.
Since the VARCHAR can’t become an integer, the resulting rows would convert the INTEGER into a VARCHAR.
This time we want to see all the values stored in the title columns from all three tables.
Create a table from your union We can’t easily see what the data type returned by our UNION is, unless we capture it somehow.
We can use a CREATE TABLE AS to grab our UNION results and look at them more closely.
The CREATE TABLE AS statement takes the results of  a SELECT query and makes a table out of  them.
In the example below, we are putting our title UNION into a new table named my_union.
Make a guess as to what the data type of the results will be, then write a CREATE TABLE AS statement with your UNION.
Do a DESC of your table and see if you were correct about the data type.
Only titles that are NOT in the table specified by the EXCEPT show up.
Any titles that are in both tables will be excluded from the results.
Subqueries and joins compared Practically anything you can do with subquery, you can do with a join.
Here’s the WHERE clause with the subquery rewritten as an INNER JOIN:
Back in Chapter 9, this was the first subquery we created:
And these are the results we got when we ran our query:
You can replace the WHERE containing the subquery with an INNER JOIN.
Explain why this INNER JOIN part of the query will get you the same results as the subquery.
Which one of these queries do you find easier to understand?
No, if you’ve got those subqueries doing what you need to do, you don’t need to rewrite them.
But there are definitely reasons to choose one over the other at times...
I’m easier to understand, and I generally execute much more quickly than ol’ Subquery over there.
Excuse me? Who are you calling “old”? I wasn’t even around until later in some RDBMSs.
I was ADDED because so many programmers wanted to use me.
Who are you trying to kid, with your INNER and OUTER claptrap? That stuff  is confusing…
But with me, you can usually just figure out the inner part and then the outer part separately.
If I’ve already got everything written using subqueries, should I go back and.
I’m the best choice when you need columns from multiple tables in your results.
In fact, I’m the only choice when you need that.
That might be true, but it’s not that hard to figure out what I’m doing.
Why, you can even use aliases to avoid typing the table names again and again.
Too good for aliases, are we? And you think you’re so much simpler than me, but what about those correlated subqueries? Those are as convoluted as anything I can do.
Which is why you aren’t so good with aggregate values.
You can’t use aggregates in a WHERE clause without a subquery.
That makes up a bit for not returning multiple columns.
Yeah, about those aliases, I think they make things even harder to follow.
And for the record, I can use them too, you know.
But I know one thing that makes me much different than you.
Take these queries with subqueries from Chapter 9 and see if you can write them without subqueries, or if you’re just better off leaving subqueries in your query.
List titles for jobs that earn salaries equal to the highest salary in the job_listings table.
List the first and last name of people with a salary greater than the average salary.
Take these queries with subqueries from Chapter 9 and see if you can write them without subqueries, or if you’re just better off leaving subqueries in your query.
List titles for jobs that earn salaries equal to the highest salary in the job_listings table.
List the first and last name of people with a salary greater than the average salary.
This causes the query to only return a single result, the row with the largest salary.
Uh oh, we can’t use LIMIT and ORDER BY to get things that are average like we did up there.
Yes.Better off just using subqueries? In the previous solution, we were able to use LIMIT to get the biggest salary out of an ordered salary list.
A self-join as a subquery While you’ve seen how you can turn a subquery into a join, let’s look at turning a self-join into a subquery.
When we turn the self-join into a subquery, the subquery is CORRELATED since it depends on the result of  the outer query to get the correct boss_id, and it shows up in the SELECT column list.
The subquery depends on the result from the outer query to get the correct boss_id, so it’s correlated.
I can’t wait to get my hands on Greg’s data.
He’s hired some friends to help him with less complicated queries.
Greg’s about to find out what happens when multiple people with shaky SQL skills work on the same database at the same time.
Joins&Unionscross This has been a turbo-charged chapter, with lots to learn.
This combines the results of two or more queries into one table, based on what you specify in the column list of the SELECT.
By default, SQL supresses _____ values from the results of a union.
An _____ join gives you a row whether there’s a match with the other table or not.
A self-_____ foreign key is the primary key of a table used in that same table for another purpose.
With an inner join, you’re comparing rows from two tables, but the _____ of those two tables doesn’t matter.
This in the results of a left outer join means that the right table has no values that correspond to the left table.
A _____ OUTER JOIN takes all the rows in the left table and matches them to rows in the RIGHT table.
The _____ outer join evaluates the right table against the left table.
We can use a _____-join to simulate having two tables.
This combines the results of two or more queries into one table, based on what you specify in the column list of the SELECT.
By default, SQL supresses _____ values from the results of a union.
An _____ join gives you a row whether there’s a match with the other table or not.
A self-_____ foreign key is the primary key of a table used in that same table for another purpose.
With an inner join, you’re comparing rows from two tables, but the _____ of those two tables doesn’t matter.
This in the results of a left outer join means that the right table has no values that correspond to the left table.
A _____ OUTER JOIN takes all the rows in the left table and matches them to rows in the RIGHT table.
The _____ outer join evaluates the right table against the left table.
We can use a _____-join to simulate having two tables.
For a complete list of tooltips in the book, see Appendix iii.
SELF-REFERENCING FOREIGN KEY This is a foreign key in the same table it is a primary key of, used for another purpose.
Here’s the WHERE clause with the subquery rewritten as an INNER JOIN:
Explain why this INNER JOIN part of the query will get you the same results as the subquery.
Which one of these queries do you find easier to understand?
There’s no right answer here! But your answer shows that you’re starting to think about what you might use in the future with your own data.
Make a guess as to what the data type of the results will be, then write a CREATE TABLE AS statement with your UNION.
Do a DESC of your table and see if you were correct about the data type.
You can replace the WHERE containing the subquery with an INNER JOIN.
This combines the results of two or more queries into one table, based on what you specify in the column list of the SELECT.
By default, SQL supresses _____ values from the results of a union.
An _____ join gives you a row whether there’s a match with the other table or not.
A self-_____ foreign key is the primary key of a table used in that same table for another purpose.
With an inner join, you’re comparing rows from two tables, but the _____ of those two tables doesn’t matter.
This in the results of a left outer join means that the right table has no values that correspond to the left table.
A _____ OUTER JOIN takes all the rows in the left table and matches them to rows in the RIGHT table.
The _____ outer join evaluates the right table against the left table.
We can use a _____-join to simulate having two tables.
Your database has grown, and other people need to use it.
The problem is that some of them won’t be as skilled at SQL as you are.
In this chapter we begin protecting our data from the.
Greg has hired two people to help him manage his growing business.
Jim’s going to handle entering new clients into the database, while Frank’s in charge of  matching people up to prospective jobs.
Greg has spent some time explaining his database to them and describing what each table does.
Jim’s first day: Inserting a new client Jim’s sitting in his new cubicle and gets an IM from Greg:
Can you write the queries to insert this new person into the database?
This is only part of the info, I’ll get the rest to you later:
For profession, use teacher, and status is married (you’ll have to do some SELECTs to get the right values here, look in my notes for the syntax)
Hey Jim, can you add someone to the database for me?
Jim avoids a NULL As he’s entering the data, Jim realizes that he doesn’t know if  Pat is male or female.
I’ve heard it’s best to avoid NULLs, but I don’t have a gender for this entry.
When we have an AUTO_INCREMENT column, we don’t need to put a value in.
The two quotes tell the table to insert a value for us for the primary key column.
This is what Jim decides to enter for gender, rather than making a guess or entering NULL.
These are the IDs he found with the two queries up there.
Flash forward three months Greg’s trying to figure out some demographic data.
He wants to know how many of  the people in my_contacts are male, how many are female, and how many total entries he has.
He does three queries: first he gets a count of  all the females and males, then he gets a total count.
He’s got 13 rows that apparently don’t show up under either the male or female query.
He checks the total number of rows in his table with this query.
When he looks for the missing records, he spots the ‘X’ gender values.
CHECK, please: Adding a CHECK CONSTRAINT We’ve already seen a number of  constraints on columns in earlier chapters.
A constraint is a restriction on what you can insert into a column.
Suppose we have a piggy bank, and we want to keep track of  the coins dropped in it.
We can use the letters P, N, D, and Q to stand for each type of  coin.
The table below uses a CHECK constraint to restrict the values that can be inserted into the coin column:
A CHECK constraint restricts what values you can insert into a column.
This checks to see if the value for the coin column is one of these.
You can create your tables with CHECK constraints in MySQL, but it won’t do.
If the value you’re trying to insert fails the CHECK condition, you get an error.
If  Greg could go back in time, he could have created my_contacts with a CHECK constraint on the gender column.
Write down what values you think are allowed in each of these columns.
The next day, Jim finds himself  unable to enter 'X' for gender.
When he asks Greg about it, Greg explains the new constraint and tells Jim Since he can’t go back in time, he makes Jim contact all the 'X' genders and figure out what they should be.
Q: So I can use anything in my CHECK that I would in a WHERE clause?
You can even combine them, as you see in the example above.
Q: So if I can’t use these in MySQL, what can I use? A: There’s no easy answer for that.
Some people use triggers, which are queries that will execute if a certain condition is met.
But they just aren’t as easy as CHECK, and are outside the scope of this book.
Q: What happens if you try to INSERT a value that doesn’t satisfy the CHECK?
A: You’ll get an error and nothing will be inserted.
Q: What good does that do? A: It ensures that the data that gets entered into your table makes sense.
Any characters other than x, y, or z can be inserted.
Write down what values you think are allowed in each of these columns.
I have to create the same queries over and over again every day.
He’s got lots of  job openings for web designers and not many applicants.
He’s got many technical writers seeking work, but not many positions open for them.
He performs the same queries every day to try to find matches for people and jobs.
These aren’t difficult queries, but in having to type them again and again, Frank is bound to make mistakes.
He needs a way to save the queries and just see the output once a day without having to retype them.
There’s a much better way to save these queries inside the database itself.
So he can just save his queries in a text file and copy and paste them.
Ah hah, easy! But how do I actually use the views I create?
What do you think a SQL statement that uses a VIEW looks like?
Viewing your views Consider the web_designers view we just created:
To see what’s in it, we simply treat it as though it were a table.
And so on, until all the rows matching “Web Designer” are listed.
When you actually use your view in a query, it’s behaving as though it were a subquery.
Here’s what the SELECT we just used with our view is actually telling SQL to do:
This means, “Select everything from the subquery that returns the first name, last name, phone, and email of  all the people from my_contacts who are looking for a job as a web designer.”
What’s up with that AS web_designers part? Why do we need it?
We’re giving our subquery an alias so that the query.
And while our SELECT statement results in a virtual table, there’s no way that SQL can grab onto it without that alias.
A VIEW is basically a table that only exists when you use the view in a query.
It’s considered a virtual table because it acts like a table, and the same operations that can be performed on a table can be performed on a view.
It gets created when we use the view and then deleted.
This is good, because each time new rows are inserted into the database, when you use a view it will see the new information.
You can keep changes to your database structure from breaking applications that depend on your tables.
We haven’t talked about it in this book, but eventually you’ll take your.
By creating views into your data, you will be able to change your underlying table structure but create views that mimic what your table structure used to be so you won’t have to change the application using your data.
These tables only exist because we use a VIEW in our queries.
Views make your life easier by simplifying your complex query into a simple command.
You won’t have to create complicated joins and subqueries repeatedly when you can create a view instead.
And when you do tie your SQL into PHP or some other programming language, your view will be much easier to add to your code.
You’ll be using the simplified code of  the view, not the big, complex query full of  joins.
Simplicity means there’s less chance of  typos, and your code will be that much easier to read.
You can create views that hide information that isn’t needed by the user.
Consider the eventual addition of  tables into gregs_list that contain credit card information.
You can create a view to indicate someone has a card on file without revealing the details of  that card.
You can allow employees to see just the information they need, while keeping sensitive information hidden.
That’s a tall order, but any query you can create as a SELECT you can turn into a view.
Start by answering the questions below and then write Frank’s query as a view called job_raises.
What are the tables that will need to be in this query?
What columns in which tables can be used to figure out the raise?
How can we use SQL to actually create a column named 'raise' in our results?
Hint: Try writing it with two joins on three tables!
Could I create a view that would show me everyone.
After we’ve created the view, the rest of the query uses two INNER JOINs to pull data from three tables.
We also use a little math to create our new ‘raise’ column.
This subtracts the salary they want from the salary they get now and uses an alias to call the result ‘raise’
Subtract current salary from salary_low and give it an alias.
It’s an enormous query, but now all Frank has to do is type.
That’s a tall order, but any query you can create as a SELECT you can turn into a view.
Start by answering the questions below and then write Frank’s query as a view called job_raises.
What are the tables that will need to be in this query?
What columns in which tables can be used to figure out the raise?
How can we use SQL to actually create a column named “raise” in our results?
Inserting, updating, and deleting with views You can do more than just SELECT information from your tables with a view.
In some instances, you can UPDATE, INSERT, and DELETE your data as well.
If  your view uses aggregate values (like SUM, COUNT, and AVG), you won’t be able to use it to change data.
Also, if  your view contains GROUP BY, DISTINCT, or HAVING, it won’t change data either.
Most of  the time it might be easier to INSERT, UPDATE, and DELETE the old-fashioned way, but we’ll show you an example of  how to change your data with a view on the next page.
So I can create a view that will allow me to actually change what’s in my tables?
The secret is to pretend a view is a real table.
Let’s make a view from a new table called piggy_bank.
There’s an ID for each coin; a denomination column that indicates if  it’s a penny, nickel, dime, or quarter; and a year the coin was minted.
Let’s write a view that only shows us rows containing quarters:
What will the table of results look like when we run this query?
Write what happens when you run each of these INSERT, DELETE, AND UPDATE queries.
At the end of the exercise, sketch the final piggy_bank table.
This one does nothing at all to the table because it only looks at results with coin = ‘Q’
This inserts a new value into the table, even though you wouldn’t think it could because of the WHERE clause.
This one gives you an error because of the CHECK OPTION clauses.
That makes the data entered into a view be verified against the WHERE clause before being allowed to be added.
Write what happens when you run each of these INSERT, DELETE, AND UPDATE queries.
At the end of the exercise, sketch the final piggy_bank table.
View with CHECK OPTION CHECK OPTION added to your view tells the RDBMS to check each statement you try to INSERT and DELETE to see if  it’s allowed according to the WHERE clause in your view.
So, just how does CHECK OPTION affect your INSERT and UPDATE statements? When you used CHECK OPTION in the previous exercise, your data was rejected in your INSERT if  it didn’t match the WHERE condition in the pb_dimes view.
If  you use an UPDATE you’ll also get an error:
Yes, your views can precisely mirror what is in the table, but force INSERT statements to comply with WHERE clauses.
It could simply cause an error every time he tries to put X in the gender table.
How could we create a view for my_contacts that would force Jim to enter either 'M' or 'F' for the gender field?
Couldn’t you use views with CHECK OPTION to create something kind of like a CHECK CONSTRAINT if you’re using MySQL?
In the piggy_bank table, both views we created were updatable views.
An updatable view is a view that allows you to change the underlying tables.
The important point here is that an updatable view includes all the NOT NULL columns from the tables it references.
That way, when you INSERT using a view, you can be certain that you will have a value for every column you are required to have a value in.
Basically, this means that INSERT, UPDATE, and DELETE can all be used with the views we created.
As long as the view returns any columns of  the table that are not null, the view can enter the appropriate values into the table.
A non-updatable view is a view that doesn’t include all the NOT NULL columns.
Other than creating and dropping it, the only thing you can do with a non-updatable view is SELECT from it.
It’s true, you won’t use views very often to INSERT, UPDATE, or DELETE.
While there are valid uses, such as forcing data integrity with MySQL, generally it’s easier to simply use the table itself  to INSERT, UPDATE, and DELETE.
An INSERT into a view might come in handy if  the view reveals only one column and the rest of  the columns are assigned NULL or default values.
You can also add a WHERE clause to your view that will restrict what you can INSERT, helping you imitate a CHECK constraint in MySQL.
To make things even more confusing, you can only update views that don’t contain aggregate operators like SUM, COUNT, and AVG, and operators like BETWEEN, HAVING, IN, and NOT IN.
Other than using a CHECK OPTION, I don’t really see what the point of using a view and INSERT is.
An updatable view includes all the NOT NULL columns from the tables it references.
When you’re finished with your view When you no longer need one of  your views, clean it up by using a DROP VIEW statement.
Q: Is there a way to see what views you have created? A: Views show up just like tables in your database.
You can use the command SHOW TABLES to see all views and tables.
And just like a table, you can DESC a view to see its structure.
Q: What happens if I drop a table that has a view? A: It depends.
Some RDBMSs will still allow you to use the view and will return no data.
MySQL will not let you drop a view unless the table it was based on exists, even though you can drop a table that participates in a view.
It’s a good idea to experiment with yours to see what happens.
In general, it’s best to drop the view before you drop a table it’s based on.
Q: I see how useful CHECK constraints and views are for helping when more than one person is trying to do things to the database.
But what happens if two people are trying to change the same column at the same time?
Humphries wants to transfer 1,000 samoleons from her checking to her savings.
She checks the balance of  her checking and savings account.
How could we have prevented the ATM from forgetting about the INSERT part of Mrs.
More trouble at the ATM John and Mary share an account.
On Friday, they ended up at two different ATM machines at the same time.
Here’s the database keeping tally of how much is in Mary and John’s shared account.
Mary fiddles around in her purse looking for her cell phone.
Wouldn’t it be dreamy if a series of SQL statements could be executed as a group, all at once, and if something goes wrong be rolled back as if they’d never been executed? But it’s only a dream…
It’s not a dream, it’s a transaction A transaction is a set of  SQL statements that accomplish a single unit of  work.
Humphries’ case, a transaction would consist of  all the SQL statements needed to move the money from her checking account to her savings account:
Add 1000 to savings balanceThese three actions make up a single unit of work.
In the case of  John and Mary, the 1st National Savings ATM shouldn’t have been allowed to touch the account, even to query the balance, until the Left Bank ATM was finished with the transaction, thus unlocking it.
John and Mary were each trying to perform the same transaction at the same time:
During a transaction, if all the steps can’t be completed without interference, none of them should be completed.
John and Mary were both trying to take out 300 samoleons at the same time.
The classic ACID test To help you decide what steps in your SQL can be considered a transaction, remember the acronym ACID.
There are four characteristics that have to be true before we can call a set of  SQL statements a transaction:
ACID: ATOMICITY All of  the pieces of  the transaction must be completed, or none of them will be completed.
Humphries’ samoleons were blinked into non-existence by the power outage because only part of  the transaction took place.
ACID: CONSISTENCY A complete transaction leaves the database in a consistent state at the end of  the transaction.
At the end of  both of  the samoleon transactions, the money is in balance again.
In the first case it’s been transferred to savings; in the second it’s been translated into cash.
ACID: ISOLATION Isolation means that every transaction has a consistent view of  the database regardless of  other transactions taking place at the same time.
This is what went wrong with John and Mary: Mary’s ATM could see the balance while John’s ATM was completing the transaction.
She shouldn’t have been able to see the balance, or should have seen some sort of.
ACID: DURABILITY After the transaction, the database needs to save the data correctly and protect it from power outages or other threats.
This is generally handled through records of  transactions saved to a different location than the main database.
Humphries’ transaction had been kept somewhere, then she might have gotten her 1,000 samoleons back.
Our database consists of  a table of  account holders, a checking account table, and a savings account table:
There are probably many more columns here, but you get the idea.
We’ve got three SQL transaction tools to help keep us safe:
If  you’ve got all your statements in place and everything looks good, type COMMIT to make it permanent.
If  something isn’t quite right, ROLLBACK reverses everything to the way it was before you typed START TRANSACTION.
This commits all your code once you’re happy with it.
This takes you right back to before you started the transaction.
No changes will occur to the database until you COMMIT.
When you’re happy with your code, you can COMMIT it to the database…
Thanks to ROLLBACK, the COMMIT statement was never entered, so nothing ever changed.
You need to make sure your storage engine is either BDB or InnoDB, the two choices that support transactions.
They aren’t identical, but if  you paste the code below into a CREATE TABLE command, the end result will be the same.
You don’t need to remove the backticks or data settings, but it’s neater if  you do.
The marks around the column names and the table name are called backticks.
They show up when we run the SHOW CREATE TABLE command.
Unless we tell the SQL software differently, it assumes all values are NULL by default.
You don’t need to worry about the last line of text after the closing parenthesis.
It specifies how the data will be stored and what character set to use.
It’s a good idea to specify if a column can contain NULL or not when we create our table.
Although you could make the code neater (by removing the last line and backticks), you can just copy and paste it to create a table.
Unless you’ve deleted the original table, you’ll have to give this one a new name.
You don’t need to worry about the last line of text after the closing parenthesis.
It specifies how the data will be stored and what character set to use.
InnoDB and BDB are two possible ways that your RDBMS can store your data behind the scenes.
They’re called storage engines, and using either of  these types ensures that you can use transactions.
For our purposes right now, it doesn’t matter which you choose.
Before you can use a transaction with MySQL, you need to use the correct storage engine.
The storage engine is the behind-the-scenes structure that stores all your database data and structures.
Suppose we’ve upgraded all the pennies in our piggy bank to quarters.
Try the code below yourself  on the piggy_bank table we created earlier in this chapter.
First time around, we’re going to use ROLLBACK because we decided not to go ahead with our changes:
The second time we’ll use COMMIT because we’re okay with the changes:
Is there a way Greg can have complete control over who does what to the tables in his database?
Q: Do you have to start with START TRANSACTION, or will COMMIT and ROLLBACK work without it?
A: You have to tell your RDBMS that you are starting a transaction with START TRANSACTION.
It’s keeping track of when the transaction started so it knows how far back to undo everything.
Q: Can I just use START TRANSACTION so that I can try out some queries?
It’s a great way to practice queries that change the data in your tables without permanently changing the tables if you’ve done something wrong.
Just be sure you COMMIT or ROLLBACK when you’re finished.
Q: Why should I bother with the COMMIT or ROLLBACK? A: Your RDBMS keeps a record of everything that has been done when you are inside a transaction.
It’s called a transaction log, and it keeps getting bigger and bigger the more you do.
It’s best to save using transactions for when you really need to be able to undo what you’re doing to avoid wasting space and making your RDBMS have to work harder than necessary to keep track of what you’ve done.
I still need a way to keep people completely out of certain tables.
My new accountant should only be able to get to payroll tables, for example.
And I need a way to allow some people to SELECT data, but NEVER INSERT, UPDATE, or DELETE data.
Your SQL Toolbox You’ve got Chapter 11 under your belt, and almost filled.
You’ve seen how to VIEW your data and execute TRANSACTIONS.
For a complete list of tooltips in the book, see Appendix iii.
These views must contain all NOT NULL columns of the base table or tables.
NON-UPDATABLE VIEWS Views that can’t be used to INSERT or UPDATE data in the base table.
If they can’t all execute without interruption, then none of them can.
The transaction will continue until it is committed or a ROLLBACK command is issued, which returns the database to the state it was prior to the START TRANSACTION.
Add an ORDER BY last_name to either the view when it’s created or the SELECT when it uses the view.
You’ve put an enormous amount of  time and energy into creating your database.
You’ve also had to give other people access to your data, and you’re worried that.
Snuggles, Snugles, and Snuggels all have rows in the clown_info table.
We’re pretty sure they are all the same clown because the gender and description columns are the same (except for misspellings)
With those multiple entries in the clown_info table, we’ve got a mess with our actual sightings.
Clown tracking took off  in such a big way that the Dataville City Council had to employ a whole team of  people to track clowns and add the data to the clown_tracking database.
Unfortunately the team was infiltrated by a clown disguised in ordinary clothes who went by the codename of  “George.” He caused a number of  problems in the database, including lost data, modified data, and nearly duplicate records that only exist because of  his deliberate misspellings.
Here are a few of the problems with the clown tracking database:
Avoiding errors in the clown tracking database George quit before anyone noticed that he was sabotaging the data, and now we’re left picking up the pieces.
From now on, when we hire new people, we need to give them the ability to SELECT from the database so that they can identify clowns.
Or anything else until we’ve had time to do extensive background checks.
We’ll also need to be careful; when we ask new employees to DELETE data to try to fix George’s mistakes, they could end up deleting good data along with the bad.
It’s time to protect the clown-tracking database before other clowns like George destroy it completely.
On each side, write some queries that new employees should or should not be allowed to do.
There’s good news, we can stop clowns like George from destroying our data! SQL gives us the ability to control what our employees can and can’t do to the clown-tracking database.
Before we can, though, we need to give him, and everyone else who uses our database a user account.
On each side, write some queries that new employees should or should not be allowed to do.
New employees should be allowed to: New employees should not be allowed to:
Protect the root user account Up to this point, we’ve only had one user in our database, and no password.
Anyone with access to our terminal or graphical interface to our database has complete control over the database.
By default, the first user—the root user—has complete control over everything in the database.
This is important, because the root user needs to be able to create user accounts for all other users.
We don’t want to limit what the root user can do, but we do want to give our root account a password.
This is the password we chose for our root user.
If  you’re using a graphical interface to your database, you’ll probably find a much easier dialog-driven way to change passwords.
The important point is not so much how you do it, but that you definitely should do it.
Consult RDBMS-specific documentation for information on protecting the root account.
Q: I’m still not clear on what that “localhost” means.
A: localhost means that the computer you’re using to run your queries is the same computer that your SQL RDBMS is installed on.
Q: But what I’m using an SQL client on a machine somewhere else.
You’ll have to tell the query where the computer is.
You can do that with an IP address or a hostname instead of localhost.
But that’s not a real SQL server, so of course it won’t work.
Add a new user Here’s a question with an obvious answer for you:
In a table, of  course! SQL keeps a database of  data about itself.
It includes user ids, usernames, passwords, and what each user is allowed to do to each database.
To create a new user, we can start with a username and a password.
There’s no actual SQL command to create a user, but most RDBMSs will use something like this:
We could have, but sometimes we don’t know exactly what access we need to grant from the very beginning.
But we still have to decide exactly what our user will get access to.
We’ll create a user and then grant him the specific access he needs.
And then we’ll put it all together before we’re finished.
The advantage to knowing how to grant access independently of  creating a user is that it gives us the ability to make changes to user access later as our database changes.
You need to check your documentation to find the correct way to create a user in your RDBMS.
Couldn’t you have restricted Elsie from certain tables at the same time you created her account?
Only the person in charge should be able to add new chores to the chores table.
However, happy is in charge of  the talking_animals table and may ALTER the structure of  it, as well as perform any other operations on it.
The data in a specific table may only be accessible to certain users.
Even within tables there might need to be permissions: some users can see certain columns, but not others.
Everyone except dopey can see the instructions column in the chores table (it just confuses him)
Decide exactly what the user needs We’ve created Elsie’s account.
As it stands right now, she has no permission to do anything.
We have to use a GRANT statement to give her permission to even SELECT from clown_info.
Unlike our root account, which has permission to run any SQL command on anything in the database, the new users we create have no permission.
The GRANT statement can be used to give specific rights to users of  our databases.
You can control exactly what users can do to tables and columns with the GRANT statement.
We know that Elsie has no permission to do anything at this point.
She can sign in to the SQL software using her username and password, but that’s it.
She needs to be able to SELECT from the clown_info table, so we can give her that permission.
Elsie also needs SELECT permission on the other clown-tracking tables so that she can use joins and subqueries in her SELECT statements.
And the username we’re granting the permission to is elsie.
Now try to write some of your own GRANT statements.
This allows you to set the SELECT privilege for Doc all at once for every table in the woodland_cottage database.
Now try to write some of your own GRANT statements.
Allows happy and sleepy to DELETE from the chores table.
Allows happy and sleepy to DELETE from the chores table and give others the same permission.
Allows dopey to SELECT from just the chore_name column in the chores table.
Allows sneezy to SELECT and INSERT into the talking_animals table.
This allows you to set the SELECT privilege for Doc all at once for every table in the woodland_cottage database.
It sounds confusing, but it simply means that if  the user was given a SELECT on chores, he can give any other user that same permission to do SELECTs on chores.
You can name multiple users in the same GRANT statement.
Each of  the users named will get the same permission granted to them.
A specific column, or columns, in a table can be used instead of the entire table.
The permission can be given to only SELECT from a single column.
The only output the user will see will be from that column.
You can specify more than one permission on a table.
Just list each permission you want to grant on a table using a comma after each.
It’s simply a shorthand way of  saying “give users permission to SELECT, UPDATE, INSERT, and DELETE from the specified table.”
You do that, Jim, and I’ll revoke all of your privileges for an entire month.
Suppose we decide to remove the SELECT privilege we gave to Elsie.
Remember our simple GRANT statement? The REVOKE syntax is almost identical.
Instead of  the word “grant,” it’s “revoke,” and instead of  “to” we use “from.”
You can also just revoke the WITH GRANT OPTION but leave the privilege intact.
In this example, happy and sleepy can still DELETE things from the chores table, but they can’t give anyone else that privilege any longer:
Users happy and sleepy can still DELETE, just not grant anyone else that privilege.
The root user gave sleepy DELETE privileges with GRANT OPTION on the chores table.
Suppose the root user changes her mind and takes the privilege away from sleepy.
It will also be revoked from sneezy, even though she only revoked it from sleepy.
A side effect of  the REVOKE statement was that sneezy also lost the privilege.
There are two keywords you can use that will let you control what you want to happen when you’re revoking.
You can use the keywords CASCADE and RESTRICT to target who keeps and who loses their privileges more precisely.
If someone else will be affected, using RESTRICT in your REVOKE statement will return an error.
The first, CASCADE, removes the privilege from the user you target (in this case, sleepy) as well as anyone else that that user gave permissions to.
Using RESTRICT when you want to remove a privilege from a user will return an error if  that user has granted privileges to anyone else.
She’s stopped from making the change and gets an error because it will also have an effect on sneezy.
Write the appropriate REVOKE statements to return her to her safe SELECT-only status.
Write the appropriate REVOKE statements to return her to her safe SELECT-only status.
Looks like we could also use a GRANT here to make sure she can still SELECT locations.
We want to leave her with SELECT privileges, so we’re not REVOKING everything.
And we’d better make sure she hasn’t given anyone else the same privileges she had.
Another way you could have done these is to REVOKE everything and then GRANT what you need to.
Q: I’m still thinking about GRANT statements that specify column names.
What happens if you grant with INSERT on a single column of a table?
If you can only put a value into a single column, you can’t insert an actual row into the table.
The only way it can work is if the table only has the one column specified in the GRANT.
Q: Are there other GRANT statements that are just as useless?
A: Almost all privileges by column are pretty useless unless they are in conjunction with a SELECT in the GRANT.
Q: Suppose I want to add a user and let him SELECT from all of the tables in all of my databases.
A: Like much in this chapter, it depends on your flavor of RDBMS.
The first asterisk refers to all database, the second to all tables.
Q: So is CASCADE the default if you don’t specify how you want to REVOKE?
A: Generally CASCADE is the default, but once again, check your RDBMS for specifics.
Q: What happens if I REVOKE something that the user didn’t have to begin with?
A: You’ll simply get an error telling you the GRANT didn’t exist in the first place.
Q: What happens if two different people give the user sneezy the same privilege that root is revoking in the previous example?
Some systems will not pay attention to where the GRANT came from when CASCADE is used, and some will ignore it.
It’s yet another case of checking the documentation on your particular software.
Q: Is there anything in addition to tables and columns that I can use GRANT and REVOKE with?
A: You can use them with views in exactly the same way you would a table, unless the view is non‑updatable.In that case, you wouldn’t be able to INSERT if you had permission to.
And just like a table, you can grant access to specific columns in a view.
And when you have a few users, that’s definitely the way to go.
But as your organization grows, you’ll start to have classes of  users.
You might have 10 people who are devoted to data entry, and only need to insert and select from certain tables.
You might also have three power users who need to be able to do anything, and lots of users who just need to SELECT.
You may even have software and web applications that connect to your database and need to query specific views in specific ways.
So if I want five different users to have the same permissions, I just add them all with commas at the end of the GRANT statements, right?
The problem with shared accounts While some companies get along quite well with a single user account that can get to the database, it’s not the safest way to go.
Paula doesn’t have a good grasp on how to write updates, and keeps messing up data.
Nobody knows who is messing up the data, so no one can help her learn how to do it right.
Simon changes the password and forgets to tell everyone else.
No one can get into the database until he remembers to tell them.
Randy has to have complete privileges to everything in the database to do his job.
This makes the database vulnerable to other users who are not as knowledgeable about SQL and more prone to mistakes.
So if you can create classes, why not just create a single user for each class of people above and let them share a username and password?
You need a way to give the groups the privileges they need, while at the same time giving each user an individual account.
A role is a way you can group together specific privileges, and apply those to everyone in a group.
Your role becomes an object in your database that you can change as needed when your database changes, without having to explicitly change every single user’s privileges to reflect the database changes.
To add privileges to the role, you simply treat it as you would a username:
Instead of a user, we use the role name when we assign privileges.
Roles are a feature that a future version of MySQL.
So if individual user accounts aren’t the best solution for when you have groups of users, and if sharing a single user account with your group doesn’t work, what’s the answer?
Before creating our role, we could have given our data-entry users privileges directly using the GRANT statements, like so:
Now all we need to do is substitute the GRANT operation for our new role and apply it to doc.
We don’t need to mention the privileges or table because that’s all stored in the data_entry role:
The role name takes the place of the table name and privileges.
Role dropping When you no longer need your role, there’s no reason to keep it around.
See if you can write the statement to revoke data_entry from Doc without looking back in the chapter.
Q: What if I want to grant privileges for all the tables in a database? Do I have to type each one?
Just name the database and use the * to assign the privileges to all the tables in that database.
Q: If a role is assigned to a user, can you still drop it? A: You can drop roles that are in use.
Be very careful when dropping a role that you don’t cut users off from the permissions that they need.
Q: That means that if a user has a role that is then dropped, he loses those permissions?
It’s as though you had explicitly granted him those permissions and then revoked them.
Only instead of affecting a single user when you revoke FROM someone, you will have an effect on the permissions of all users assigned a role.
Q: Can a user have more than one role at a time? A: Yes.
Just make sure they don’t have conflicting permissions, or you might cause yourself some problems.
This option allows anyone with that role to grant that role to anyone else.
When used with a role, the REVOKE command has the same keywords CASCADE and RESTRICT.
Used with CASCADE, the revoke will affect anyone down the chain, as well as the original target.
Used with CASCADE, the REVOKE affects everyone down the chain as well as the original target:
See if you can write the statement to revoke data_entry from Doc without looking back in the chapter.
Yes, it’s time to get Greg’s employees set up to use gregs_list more securely.
Greg will need to go through the steps in this chapter and protect the root account, figure out what his employees need, and give them the correct privileges.
If someone else will be affected, using RESTRICT in your REVOKE statement will return an error.
Using RESTRICT when you want to remove a privilege from a user will return an error if  that user has granted privileges to anyone else.
She’s stopped from making the change because it will also have an effect on user happy.
Roles seem great, but can we get back to reality for a minute? I only have two employees, soon to be three.
I don’t want roles, but I do want them to quit using the root account.
Can you help me grant them the correct access without roles?
I never enter anything in the database, although I do delete job listings when I find matches or the opening is filled.
I sometimes need to look up contact info in my_contacts as well.” Jim: “I enter all the new data into the entire database.
I’ve gotten really good at inserting, now that I can’t accidentally enter an X for gender.
I’m learning to delete, but so far Greg tells me not to.
He wants to integrate his contact info into a web site.
I’m more a web developer than an SQL guy, but I can do simple selects.
Take a look at the gregs_list database and give these guys some GRANTs before they damage some data.
Write the command to give the user currently known as “root” a password.
Write three commands to create user accounts for each of the three employees.
Write GRANT statements for each new employee to give him the correct permissions.
Write the command to give the user currently known as “root” a password.
Write three commands to create user accounts for each of the three employees.
Write GRANT statements for each new employee to give him the correct permissions.
Frank needs to be able to remove job listings and look up (select) from my_contacts.
As long as you got the correct pieces of the commands in the right order, you’re good to go!
Jim needs access to the SELECT and INSERT from the whole of gregs_list.
Meanwhile Joe needs to be able to select from all the original tables, but not the tables that deal with jobs.
All we need is to combine the two parts you’ve already seen.
We can combine them and leave out the CREATE USER part.
Because the user elsie has to be created before she can have privileges granted to her, your RDBMS checks to see if  she exists, and if  not, it automatically creates her account.
Before you go, can we try a CREATE USER and GRANT rolled into one statement?
Greg’s List has gone global ! Thanks to all your help, Greg is now so comfortable with using SQL—and teaching Jim, Frank, and Joe how to use it—that he’s expanded Greg’s List to include local classified advertisements and forums as well.
And the best news of  all? It’s been such a success in Dataville that over 500 cities worldwide now have their own Greg’s Lists, and Greg is front-page news!
Thanks guys, I couldn’t have done it without you! Hey, I’ve got a franchise available in your city… Let’s talk Greg’s Lists!
Take a deep breath, we’ve crammed this one full of keywords and commands to make it last longer.
A _____ functional dependency means that a non-key column is related to any of the other non-key columns.
A _____ KEY is a PRIMARY KEY composed of multiple columns, creating a unique key.
You can find the largest value in a column with this function.
Assigning this is a way you can group together specific privileges, and apply those to everyone in a group.
Use these two words to alphabetically order your results based on a column you specify.
Use this clause in your update statement to change a value.
A self-_____ foreign key is the primary key of a table used in that same table for another purpose.
During a _____, if all the steps can’t be completed without interference, none of them should be completed.
These joins only work if the column you’re joining by has the same name in both tables.
A _____ constraint restricts what values you can insert into a column.
Our table can be given new columns with the ALTER statement and _____ COLUMN clause.
With an inner join, you’re comparing rows from two tables, but the _____ of those two tables doesn’t matter.
We can use a _____‑join to simulate having two tables.
If changing any of the non‑key columns might cause any of the other columns to change, you have a transitive _____
If the subquery stands alone and doesn’t reference anything from the outer query, it is a _____ subquery.
This means that your data has been broken down into the smallest pieces of data that can’t or shouldn’t be divided.
To help you decide what steps in your SQL can be considered a transaction, remember the acronym.
A _____ OUTER JOIN takes all the rows in the left table and matches them to rows in the RIGHT table.
A _____ subquery means that the inner query relies on the outer query before it can be resolved.
A _____ functional dependency means that a non‑key column is related to any of the other non‑key columns.
You can find the largest value in a column with this function.
Assigning this is a way you can group together specific privileges, and apply those to everyone in a group.
Use these two words to alphabetically order your results based on a column you specify.
Use this clause in your update statement to change a value.
A self‑_____ foreign key is the primary key of a table used in that same table for another purpose.
During a _____, if all the steps can’t be completed without interference, none of them should be completed.
These joins only work if the column you’re joining by has the same name in both tables.
A _____ constraint restricts what values you can insert into a column.
Our table can be given new columns with the ALTER statement and _____ COLUMN clause.
Take a minute and review the SQL security principles we just covered.
For a complete list of tooltips in the book, see Appendix iii.
Roles let you group together specific privileges and assign them to more than one user.
A _____ functional dependency means that a non-key column is related to any of the other non-key columns.
A _____ KEY is a PRIMARY KEY composed of multiple columns, creating a unique key.
You can find the largest value in a column with this function.
Assigning this is a way you can group together specific privileges, and apply those to everyone in a group.
Use these two words to alphabetically order your results based on a column you specify.
Use this clause in your update statement to change a value.
A self-_____ foreign key is the primary key of a table used in that same table for another purpose.
During a _____, if all the steps can’t be completed without interference, none of them should be completed.
These joins only work if the column you’re joining by has the same name in both tables.
A _____ constraint restricts what values you can insert into a column.
Our table can be given new columns with the ALTER statement and _____ COLUMN clause.
And we’re sad to see you go, but there’s nothing like taking what you’ve learned and putting it to.
There are still a few more gems for you in the back.
It’s been a long journey, but look at me now!
Use SQL on your own projects, and you too could be like Greg!
There are just a few more things we think you need to know.
Besides, once you’re done here, all that’s left is another two appendixes...
Get a GUI for your RDBMS While it’s important to be able to code your SQL directly into a console, you know what you’re doing now.
You deserve an easier way to create your tables and see the contents of  them.
Every RDBMS has some sort of  graphical user interface associated with it.
Here’s a brief  rundown of  the GUI tools available for MySQL.
When you download MySQL, you can also download the MySQL GUI tools, and most importantly, MySQL Administrator.
The MySQL Administrator allows you to easily view, create, and modify your databses and tables.
There, you can type your queries and see the results inside the software interface, rather than in a console window.
We’ll leave it to you to pick the one you like best from these.
There are many more not mentioned here, which you can easily find by doing a web search.
Easily see the structure, run a query, and change your table with these buttons.
This works well if  you are using a web hosting account with MySQL on a remote web server.
It’s not so good if  you are using your local machine.
Some are for PC only; your best bet is to visit the sites and read their latest release information to find out if  they’ll work for you:
Reserved Words and Special Characters The SQL language consists of  quite a few reserved keywords.
It’s best to leave those words out of  your database, table, and column names altogether.
Even though you might like to name your new table “select”, try to come up with something more descriptive, which doesn’t use the word “select” at all.
If  you must use a reserved keyword, try to use it with other words and underscores so as not to confuse your RDBMS.
For your convenience, on the righthand page is a list of  those reserved words you’ll want to avoid in your names:
To further complicate matters, SQL has a list of  non-reserved words that may become reserved in future releases of  SQL.
We won’t list those here, but you can find them in that RDBMS-specific reference book you should buy when you finish with this book.
Here’s a list of  most of  the characters SQL uses and what they’re used for.
As with the reserved words, it’s best to avoid using these in your names, with the exception of  the underscore (_), which we encourage you to use in your names.
In general, it’s best to avoid anything except letters and underscores in your table names.
And numbers aren’t a great idea either, unless they are descriptive in some way.
Returns all the columns in a table from a SELECT statement.
Used to group expressions, specify the order in which to perform math operations, and to make function calls.
Used to reference names of tables and used in decimal numbers.
This is a wildcard that represents a single character in a LIKE clause.
Another LIKE clause wildcard, this one stands in for multiple characters.
A pair of single quotes tells SQL that a string value is between them.
You can also use a pair of double quotes the same way, although it’s better form to stick with single quotes.
This is used to allow you to put a single quote into a text column of your table.
In addition to using it for addition, you can also use the plus sign to join or concatenate two strings.
Addition - Subtraction * Between two values, the asterisk acts as a multiplication symbol.
It’s a good idea to glance through these whenever you’re giving something a single-word name to make sure you aren’t using one of them.
ALL, ANY, and SOME There are three keywords that come in very handy with subqueries.
Before we get to those, let’s take a quick peek back at the IN operator we talked about in Chapter 9:
This query returns the name of  any restaurant with the same rating as the result of  our subquery in the set in parentheses.
Greater than ALL finds any values larger than the biggest value in the set.
Less than ALL finds any values smaller than the smallest value in the set.
Any values greater than our set, or equal to the highest result from our set will be matched.
This time we’re going to get any restaurants with a higher rating than all of  the ratings in our set.
The query below will give us both The Shack and Arthur’s.
We get the ratings greater than any in our set, as well as any that equal the largest one in our set, which is 7:
And Arthur’s with a rating of  9 is also returned.
Check your flavor of  RDBMS to confirm that it works that way for you.
Greater than ANY finds any values larger than the smallest value in the set.
Less than ANY finds any values smaller than the largest value in the set.
More on Data Types You know the most common data types, but there are a few details that can help you fine-tune your columns even more.
Let’s take a closer look at some new types, and a closer look at some that you’ve already been using.
That’s if  you only want to use positive values, and it’s what is known as an unsigned integer.
If  you want to use negative and positive values in your integer, you need to make it a signed integer.
To tell your RDBMS that you want your INT signed, use this syntax when you create it:
Other INT types You already know INT, but the two types SMALLINT and BIGINT fine-tune it a bit.
The ranges of  values they can store vary according to your DBMS.
MySQL takes it a step farther and adds these types at well:
When you SELECT a date or time type, you can modify what your RDBMS returns.
The %M and %Y tell the function how you want to format the dates.
We don’t have room here to go into all the formatting options; there are a huge number of  them.
But with them, you can get exactly what you need from your date and time fields, without having to see what you don’t need.
Here’s a rundown of  the format in which MySQL stores your date and time data types:
The word TEMPORARY is the only thing we need to add.
Make sure to check your RDBMS’s documentation for this feature.
Each time we create a table, our RDBMS stores the structure of  that table.
When we insert data into it, that data is stored.
If  you sign out of  your SQL session in your terminal window or GUI software, that table and the data in it will still exist.
The data stays around until you delete it; the table persists until you drop it.
A temporary table exists from the time you create it until you drop it, or until the user session ends.
By session we mean the time you are signed in to your account until you sign out or end your GUI program.
You can also drop it explicitly with the DROP statement.
Create a temporary table The syntax to create a temporary table in MySQL is simple; you add the keyword TEMPORARY:
A temporary table shortcut You can create your temporary table from a query like this:
Cast your data Sometimes you have one type of  data in a column, but you want it to be a different data type when it comes out.
Some situations where you might want to use CAST() Convert a string with a date into a DATE type:
Some other places you can use CAST() include the value list of  an INSERT statement and inside the column list of  a SELECT.
You can’t use CAST() in these situations * Decimal to integer.
Who are you? What time is it? Sometimes you might have more than one user account on your RDBMS, each one with different permissions and roles.
If  you need to know which account you are currently using, this command will tell you:
This will also tell you what your host machine is.
If  your RDBMS is on the same computer as you are on, and you’re using the root account, you’ll see this:
You can get the current date and time with these commands:
Useful numeric functions Here’s a rundown of  functions that work with numeric data types.
MOD(x,y) Returns the remainder of x divided by y query result.
Indexing to speed things up You know all about primary key and foreign key indexes.
Those types of  indexes are great for tying multiple tables together and enforcing data integrity.
But you can also create indexes on columns to make your queries faster.
When a WHERE is done on an unindexed column, the RDBMS starts from the beginning of  that column and works its way through, one row at a time.
If  your table is huge, and we mean 4 million rows huge, that can begin to take perceptible time.
When you create an index on a column, your RDBMS keeps additional information about the column that speeds that searching up tremendously.
The additional information is kept in a behind-the-scenes table that is in a specific order the RDBMS can search through more quickly.
So you have to consider creating some columns as indexes, the ones you’ll search on frequently, and not indexing others.
First, figure out which columns in your table it makes the most sense to index.
For example, imagine we have a huge table, all_contacts, which we’ll frequently be searching for names.
We’ve noticed that our queries are taking a a bit of  time to execute, and we need to speed them up.
Indexes on table columns can speed up searches, but take up extra disk space.
Indexing to speed things up (continued) When you set up your index, you can use the DESC keyword if  you would prefer a column in reverse order.
It doesn’t make much sense to use it in this example, but if  you were indexing numeric values and wanted the largest first, you might find it useful.
You can also use the keyword UNIQUE when you create an index.
It will reduce your result set to just the unique values in the columns in the indexes:
Should you find that you no longer need an index, you should get rid of  it, or drop it.
Unfortunately, nearly every DBMS has a different syntax for dropping your indices.
This is only a tiny taste of  what you can do, and you should certainly read more about this.
And we know you’re comfortable writing queries at this point.
The PHP code takes all that data from the database and stores it in an array.
The last part of  the code prints all the first and last names on a web page:
We’ll save this file as gregsnames.php on a web server.
If  it didn’t succeed, PHP will send us a message telling us why it couldn’t connect to the RDBMS, and the PHP will stop being processed.
Now we use PHP to get all those rows out of  $result and on to the web page.
This is done by a while loop, which goes through, one row at a time, until it reaches the end of  the data.
These two PHP echo statements write the first and last name of  each row to the web page.
All your new SQL skills won’t do you much good without a place to apply them.
This appendix contains instructions for installing your very own MySQL RDBMS for you to work with.
Who knew there was an entire RDBMS down here? I may never come back up.
Get started, fast ! Because it’s no fun to have a book on SQL without being able to try it out for yourself, here’s a brief  introduction to installing MySQL on Windows and Mac OS X.
We’ll take you through the downloading and installing of  MySQL.
The official name for the free version of  the MySQL RDBMS server these days is MySQL Community Server.
The following is a list of  steps for installing MySQL on Windows and Mac OS X.
This is not meant to replace the excellent instructions found on the MySQL web site, and we strongly encourage you to go there and read them! For much more detailed directions, as well as a troubleshooting guide, go here:
You’ll also like the MySQL Query Browser we talked about on pages 526–527
There, you can type your queries and see the results inside the software interface, rather than in a console window.
Under Windows downloads, we recommend that you choose the Windows ZIP/Setup.EXE option because it includes an installer that greatly simplifies the installation.
You’ll see a list of  locations that have a copy you can download; choose the one closest to you.
When the file has finished downloading, double-click to launch it.
At this point, you will be walked through the installation with the Setup Wizard.
When you’ve double-clicked the file and the Setup Wizard dialog appears, click the Next button.
You can change the location on your computer where MySQL will be installed, but we recommend that you stay with the default location:
You’ll see the “Ready to Install” dialog with the Destination Folder listed.
If  you are running Mac OS X Server, a version of  MySQL should already be installed.
Before you begin, check to see if  you already have a version installed.
Choose the appropriate package for your Mac OS X version.
You’ll see a list of  locations that have a copy you can download; choose the one closest to you.
When the file has finished downloading, double-click to launch it.
When you’ve installed MySQL, go look at the online documentation for how to access your install using the query browser we talked about on pages 526–527
But if  you’re in a hurry, here’s a quick way in using the Terminal.
You can now open a Terminal window on your Mac and type:
A ALTER with CHANGE Lets you change both the name and data type of an existing column.
AUTO_INCREMENT When used in your column declaration, that column will automatically be given a unique integer value each time an INSERT command is performed.
Composite key This is a primary key made up of multiple columns which create a unique key value.
You should have worked these out by analyzing the kind of data you’ll be putting in your table.
Use it with a WHERE clause to precisely pinpoint the rows you want to remove.
The equijoin returns rows that are equal, and the non-equijoin returns any rows that are not equal.
Escape with ' and \ Escape out apostrophes in your text data with an extra apostrophe or backslash in front of it.
Foreign Key A column in a table that references the primary key of another table.
I INNER JOIN Any join that combines the records from two tables using some condition.
It only works if you are joining two tables that have the same column name.
Noncorrelated Subquery A subquery which stands alone and doesn’t reference anything from the outer query.
NON-UPDATABLE VIEWS Views that can’t be used to INSERT or UPDATE data in the base table.
You’ll need to set the columns to NOT NULL when you create your table.
One-to-One Exactly one row of a parent table is related to one row of a child table.
Outer Query A query which contains an inner query or subquery.
SELF-JOIN The self-join allows you to query a single table as though there were two tables with exactly the same information in them.
SELF-REFERENCING FOREIGN KEY This is a foreign key in the same table it is a primary key of, used for another purpose.
String functions Lets you modify copies of the contents of string columns when they are returned from a query.
Transitive functional dependency When any non-key column is related to any of the other non-key columns.
These views must contain all NOT NULL columns of the base table or tables.
