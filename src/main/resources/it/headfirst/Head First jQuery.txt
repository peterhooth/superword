As a bonus, you’ll learn key aspects of  JavaScript, how to set up a web development environment, and some PHP/MySQL.
JavaScript has reemerged as a programming language of  some merit due in no small part to a collection of  best-of-breed add-on libraries, of  which jQuery is a key player.
Paul Barry, author and lecturer on computing at the Institute of  Technology, Carlow.
What sets this book apart is its focus on learning.
Hidden behind the funny pictures and crazy fonts is a serious, intelligent, extremely well-crafted presentation of  OO Analysis and Design.
If  you’re a new software developer, Head First Software Development will get you started off  on the right foot.
Visual learners, kinesthetic learners, everyone can learn from this book.
Visual aids make things easier to remember, and the book is written in a very accessible style—very different from most Java manuals.… Head First Java is a valuable book.
I can see the Head First books used in the classroom, whether in high schools or adult ed classes.
Rather than textbook-style learning, Head First iPhone and iPad Development brings a humorous, engaging, and even enjoyable approach to learning iOS development.
With coverage of  key technologies, including core data, and even crucial aspects such as interface design, the content is aptly chosen and top-notch.
Another nice thing about Head First Java, Second Edition, is that it whets the appetite for more.
With later coverage of  more advanced topics such as Swing and RMI, you just can’t wait to dive into those APIs and code that flawless, 100,000-line program on Java.net that will bring you fame and venture-capital fortune.
There’s also a great deal of  material, and even some best practices, on networking and threadsmy own weak spot.
Even if  you already know Java, you may pick up a thing or two.
Of  course it’s not the range of  material that makes Head First Java stand out, it’s the style and approach.
This book is about as far removed from a computer science textbook or technical manual as you can get [with its] use of  cartoons, quizzes, fridge magnets (yep, fridge magnets…)
And, in place of  the usual kind of  reader exercises, you are asked to pretend to be the compiler and compile the code, or perhaps to piece some code together by filling in the blanks or…you get the picture.… The first edition of  this book was one of  our recommended titles for those new to Java and objects.
This new edition doesn’t disappoint and rightfully steps into the shoes of  its predecessor.
Head First Web Design is your ticket to mastering all of  these complex topics, and understanding what’s really going on in the world of  web design.… If  you have not been baptized by fire in using something as involved as Dreamweaver, then this book will be a great way to learn good web design.
Is it possible to learn real web design from a book format? Head First Web Design is the key to designing user-friendly sites, from customer requirements to hand-drawn storyboards to online sites that work well.
What sets this apart from other ‘how to build a website’ books is that it uses the latest research in cognitive science and learning to provide a visual learning experience rich in images and designed for how the brain works and learns best.
I definitely recommend Head First Web Design to all of  my fellow programmers who want to get a grip on the more artistic side of  the business.
Wouldn’t it be dreamy if there were a book to help me learn how to use jQuery that was more fun than going to the dentist? It’s probably nothing but a fantasy…
O’Reilly Media books may be purchased for educational, business, or sales promotional use.
Many of  the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks.
Where those designations appear in this book, and O’Reilly Media, Inc., was aware of  a trademark claim, the designations have been printed in caps or initial caps.
While every precaution has been taken in the preparation of  this book, the publisher and the authors assume no responsibility for errors or omissions, or for damages resulting from the use of  the information contained herein.
No cryptids were harmed in the making of  this book.
Prior to that, he worked as editor and information systems specialist for a river, stream, and wetland research program in the School of  Forestry at the University of  Montana.
He spends his free hours painting, cartooning, playing blues harmonica, and practicing zazen.
He spends his best moments with his daughter, his son, and his sweetheart, Shonna, in Portland, Oregon.
He also digs hanging out with his animal compadres: Rocky, Munch, Fester, and Taz.
In his college career, and in both his previous position in ESB International in Dublin and his current one for the University of  Portland, Ronan has worked on an array of  different projects in PHP, VB.NET, C#, and Java.
When he’s not designing and building front-end web applications, he also serves as the SQL Server DBA for the university.
In his spare time, Ronan spends many hours on the soccer field, on the golf  course, hanging out with his wife, Caitlin, and their English bulldog, Bono, and sampling as much of  the Pacific Northwest as he can.
Here you are trying to learn something, while here your brain is doing you a favor by making sure the learning doesn’t stick.
Web page action You want more for your web pages.
You’ve got HTML and CSS under your belt and want to add scripting to your.
Grab and gojQuery helps you grab web page elements and do all kindsof things with them.
In this chapter, we’ll dig into jQuery selectors and methods.
With jQuery selectors, we can grab elements on our page, and with methods we can do.
Like a massive book of magic spells, the jQuery library lets us.
We can select a certain piece of text and animate the change to its font size.
So, on with the show—let’s grab some web page elements and go!
In this chapter, we’ll look at making your page react when people interact with it.
Making your code run in response to user actions takes your.
The Event Listener hears the event and passes it on to...
Just because the page is finished loading doesn’t mean it has to keep the same structure.
Back in Chapter 1, we saw how the DOM gets built as the page loads to set up.
In this chapter, we’ll look at how to move up and down.
A little glide in your stride jQuery effects and animation.
You’ll also see how to schedule these animations so they.
Although it is a JavaScript library, unfortunately it can’t do everything its parent.
When you combine jQuery’s custom effects with JavaScript functions you can make your code—and your web appmore efficient, more effective, and more powerful.
In this chapter, you’ll dig deeper into improving your jQuery effects by handling.
In this chapter, we’ll learn how jQuery deals with making Ajax calls to.
You need a place to practice your newfound PHP skills without making your data vulnerable on the Web.
It’s always a good idea to have a safe place to develop your PHP application.
Note from Marketing: This book is for anyone with a credit card.
Do you want to learn, understand, remember, and apply important jQuery and JavaScript concepts so that you can make your web pages more interactive and exciting?
Do you prefer stimulating dinner-party conversation to dry, dull, academic lectures?
Are you already developing web apps and looking for a reference book on jQuery?
Are you afraid to try something different? Would you rather have a root canal than mix stripes with plaid? Do you believe that a technical book can’t be serious if Bigfoot is in it?
It definitely helps if you’ve already got some scripting chops, too.
Check out Head First HTML with CSS & XHTML for an excellent introduction to web development, and then come back and join us in jQueryville.
It was built that way, and it helps you stay alive.
So what does your brain do with all the routine, ordinary, normal things you encounter? Everything it can to stop them from interfering with the brain’s real job—recording things that matter.
It doesn’t bother saving the boring things; they never make it past the “this is obviously not important” filter.
How does your brain know what’s important? Suppose you’re out for a day hike and a tiger jumps in front of  you.
Or trying to learn some tough technical topic your boss thinks will take a week, 10 days at the most.
It’s trying to make sure that this obviously unimportant content doesn’t clutter up scarce resources.
Resources that are better spent storing the really big things.
And there’s no simple way to tell your brain, “Hey, brain, thank you very much, but no matter how dull this book is, and how little I’m registering on the emotional Richter scale right now, I really do want you to keep this stuff  around.”
We think of a “Head First” r eader as a learner.
If  you really want to learn, and you want to learn more quickly and more deeply, pay attention to how you pay attention.
Most of  us did not take courses on metacognition or learning theory when we were growing up.
We were expected to learn, but rarely taught to learn.
But we assume that if  you’re holding this book, you really want to learn about jQuery.
And you probably don’t want to spend a lot of  time.
And since you’re going to work with it more in the future, you need to remember what you read.
To get the most from this book, or any book or learning experience, take responsibility for your brain.
The trick is to get your brain to see the new material you’re learning as Really Important.
Otherwise, you’re in for a constant battle, with your brain doing its best to keep the new content from sticking.
I wonder how I can trick my brain into remembering.
So just how DO you get your brain to think that jQuery development is a hungry tiger?
There’s the slow, tedious way, or the faster, more effective way.
You obviously know that you are able to learn and remember even the dullest of  topics if  you keep pounding the same thing into your brain.
With enough repetition, your brain says, “This doesn’t feel important to him, but he keeps looking at the same thing over and over and over, so I suppose it must be.”
The faster way is to do anything that increases brain activity, especially different types of  brain activity.
The things on the previous page are a big part of  the solution, and they’re all things that have been proven to help your brain work in your favor.
For example, studies show that putting words within the pictures they describe (as opposed to somewhere else in the page, like a caption or in the body text) causes your brain to try to makes sense of  how the words and picture relate, and this causes more neurons to fire.
More neurons firing = more chances for your brain to get that this is something worth paying attention to, and possibly recording.
A conversational style helps because people tend to pay more attention when they perceive that they’re in a conversation, since they’re expected to follow along and hold up their end.
The amazing thing is, your brain doesn’t necessarily care that the “conversation” is between you and a book! On the other hand, if  the writing style is formal and dry, your brain perceives it the same way you experience being lectured to while sitting in a roomful of  passive attendees.
Here’s what WE did: We used pictures, because your brain is tuned for visuals, not text.
As far as your brain’s concerned, a picture really is worth a thousand words.
And when text and pictures work together, we embedded the text in the pictures because your brain works more effectively when the text is within the thing the text refers to, as opposed to in a caption or buried in the text somewhere.
We used redundancy, saying the same thing in different ways and with different media types, and multiple senses, to increase the chance that the content gets coded into more than one area of  your brain.
We used concepts and pictures in unexpected ways because your brain is tuned for novelty, and we used pictures and ideas with at least some emotional content, because your brain is tuned to pay attention to the biochemistry of  emotions.
That which causes you to feel something is more likely to be remembered, even if  that feeling is nothing more than a little humor, surprise, or interest.
We used a personalized, conversational style, because your brain is tuned to pay more attention when it believes you’re in a conversation than if  it thinks you’re passively listening to a presentation.
We included loads of  activities, because your brain is tuned to learn and remember more when you do things than when you read about things.
We used multiple learning styles, because you might prefer step-by-step procedures, while someone else wants to understand the big picture first, and someone else just wants to see an example.
But regardless of  your own learning preference, everyone benefits from seeing the same content represented in multiple ways.
We include content for both sides of  your brain, because the more of  your brain you engage, the more likely you are to learn and remember, and the longer you can stay focused.
Since working one side of  the brain often means giving the other side a chance to rest, you can be more productive at learning for a longer period of  time.
And we included stories and exercises that present more than one point of  view, because your brain is tuned to learn more deeply when it’s forced to make evaluations and judgments.
We included challenges, with exercises, and by asking questions that don’t always have a straight answer, because your brain is tuned to learn and remember when it has to work at something.
Think about it—you can’t get your body in shape just by watching people at the gym.
But we did our best to make sure that when you’re working hard, it’s on the right things.
That you’re not spending one extra dendrite processing a hard-to-understand example, or parsing difficult, jargon-laden, or overly terse text.
In stories, examples, pictures, etc., because, well, because you’re a person.
And your brain pays more attention to people than it does to things.
These tips are a starting point; listen to your brain and figure out what works for you and what doesn’t.
Your brain works best in a nice bath of  fluid.
Dehydration (which can happen before you ever feel thirsty) decreases cognitive function.
Create something! Apply this to your daily work; use what you are learning to make decisions on your projects.
Just do something to get some experience beyond the exercises and activities in this book.
All you need is a pencil and a problem to solve…a problem that might benefit from using the tools and techniques you’re studying for the exam.
Feel something! Your brain needs to know that this matters.
Groaning over a bad joke is still better than feeling nothing at all.
If  you find yourself  starting to skim the surface or forget what you just read, it’s time for a break.
Once you go past a certain point, you won’t learn faster by trying to shove more in, and you might even hurt the process.
If  you’re trying to understand something, or increase your chance of  remembering it later, say it out loud.
Better still, try to explain it out loud to someone else.
You’ll learn more quickly, and you might uncover ideas you hadn’t known were there when you were reading about it.
Part of  the learning (especially the transfer to long-term memory) happens after you put the book down.
Your brain needs time on its own, to do more processing.
If  you put in something new during that processing time, some of  what you just learned will be lost.
They’re not optional sidebars—they’re part of  the core content! Don’t skip them.
We put them in, but if  we did them for you, that would be like having someone else do your workouts for you.
There’s plenty of evidence that physical activity while learning can increase the learning.
The more you understand, the less you have to memorize.
When the book asks you a question, don’t just skip to the answer.
The more deeply you force your brain to think, the better chance you have of learning and remembering.
Here’s what YOU can do to bend your brain into submission.
Read me This is a learning experience, not a reference book.
We deliberately stripped out everything that might get in the way of  learning whatever it is we’re working on at that point in the book.
And the first time through, you need to begin at the beginning, because the book makes assumptions about what you’ve already seen and learned.
If  you don’t know HTML and CSS, pick up a copy of  Head First HTML with CSS & XHTML before starting this book.
We will do some refreshers on CSS selectors, but don’t expect to learn all of  what you need to know about CSS here.
We know, we know…this is a controversial opinion, but we feel that you can learn jQuery without knowing JavaScript first.
You need to know some JavaScript to write jQuery, and we teach you all those important JavaScript concepts side-by-side with the jQuery code.
We truly and deeply believe in the jQuery motto: Write Less.
We encourage you to use more than one browser with this book.
We encourage you to test your pages using at least three up-to-date browsers.
This will give you experience in seeing the differences among browsers and in creating pages that work well in a variety of  browsers.
We highly recommend Google Chrome, which you can download here: http://www.google.com/chrome.
You can visit the following sites for more information on the following browsers and their dev tools:
The best thing you can do when you’re learning something new is to join a learning community.
We feel that the jQuery community is one of  the best and most active communities in the world of  technology.
The exercises and activities are not add-ons; they’re part of  the core content of  the book.
Some of  them are to help with memory, some are for understanding, and some will help you apply what you’ve learned.
Even crossword puzzles are important—they’ll help get concepts into your brain.
But more importantly, they’re good for giving your brain a chance to think about the words and terms you’ve been learning in a different context.
One distinct difference in a Head First book is that we want you to really get it.
And we want you to finish the book remembering what you’ve learned.
Most reference books don’t have retention and recall as a goal, but this book is about learning, so you’ll see some of  the same concepts come up more than once.
For some of  them, there is no right answer, and for others, part of  the learning experience of  the Brain Power activities is for you to decide if  and when your answers are right.
In some of  the Brain Power exercises, you will find hints to point you in the right direction.
Software requirements To write jQuery code, you need a text editor, a browser, a web server (it can be locally hosted on your personal desktop), and the jQuery library.
The text editors we recommend for Windows are PSPad, TextPad, or EditPlus (but you can use Notepad if  you have to)
If  you’re on a Linux system, you’ve got plenty of  text editors built in, and we trust you don’t need us to tell you about them.
If  you are going to do web development, you need a web server.
No, seriously, head there now, follow the instructions, and come back to this page when you’re done.
You’ll also need a browser, and you’ll need to use the Browser Developer tools.
Learning how to use the JavaScript console in Google’s Chrome Dev Tools is well worth the time.
This is homework you need to do on your own.
Last of  all, you need the jQuery library; turn the page and we’ll show you where to get it.
Head over to the jQuery website and download a copy to use throughout this book.
Open your favorite browser and point it to this address: http://www.jquery.com.
Find the section labeled “Grab the Latest Version!” Then, select the checkbox next to “Production.”
The next page you’ll see will look something like this.
Save the page into a folder called scripts on your drive.
The Production version of  jQuery is a minified version, intended for speed of  execution on a web server.
The Development version is intended for developers interested in exploring and extending the inner workings of  the jQuery library.
Get a copy of  both if  you’re the type who likes to have a look inside the engine.
There’s a begin folder for each chapter that contains the starting code for it.
After downloading and unzipping the code for the book from Head First labs (http://www.headfirstlabs.com/books/hfjquery), you’ll find that it’s structured in folders organized by each chapter.
The end folder of  every chapter contains the final code for that chapter.
We encourage you to use the end folder only when you need it for reference.
The styles folder contains a my_style.css file that contains all the styles for the beginning of the chapter.
The scripts folder contains the jQuery library you just downloaded.
You can use the jQuery library in any of  your own projects.
For your convenience, we include the jQuery library in the code folder for the book, but you need to know where to get it for use in future projects and for when the jQuery library is updated.
The my_scripts.js file contains the code you’ll write in the book.
Try to stretch your brain by not looking at this unless you absolutely have to.
The index.html file contains the markup for each web app.
He teaches JavaScript at the Community College of  Baltimore County and speaks about jQuery at web conferences.
When not doing these things, Jim blogs his art at http://jimdoran.net and skates in a coed roller derby league.
Bill Mietelski has been a technical reviewer of  several Head First titles.
He’s currently a software engineer at a leading national academic medical center in the Chicagoland area, working on biostatistical research.
When he’s not collecting or shepherding data, you’ll find him at a local golf  course chasing a little white ball.
Lindsey Skouras is an attorney in the Washington, DC, area.
She has been teaching herself  how to code in her spare time by working her way through the Head First series.
Her other interests include reading, crafting, visiting museums, and spending time with her husband and dogs.
Paul is a contributing editor to Linux Journal magazine as well as a published technical author.
When he gets time, Paul consults with SMEs and startups on software development projects.
Thanks to Lou Barr for the speedy, excellent, and magical work she did to shape this book up and make it look beautiful.
Thanks to Laurie Petrycki for giving us the green light.
Ryan has fond memories of  HF training in Boston and will never forget the cool, family-like atmosphere Laurie created there.
Ryan will never forget the day he discovered the Head First series at the bookstore.
Thanks to Kathy Sierra and Bert Bates for lighting up the neurons of  geeks everywhere.
Thanks to Bert for listening to us ramble, pulling us out of  the closure quagmire, and keeping our object-ives clear.
Thanks to Tim O’Reilly for his vision in creating the best geek press ever!
A special thanks to my wife, Caitlin, who helped make this book a reality through her fantastic design abilities and knowledge of  all things Adobe.
And for her patience—I couldn’t have done this without you! A big thank you to everyone who supported both of  us in this effort—my great neighbors, our fellow basement-dwelling colleagues at the University of  Portland, my understanding soccer teams and golfing buddies.
Thanks to my family back in Ireland for their support and encouragement.
Most of  all, thanks to Ryan Benedetti, my awesome coauthor, colleague, and friend.
Thank you for taking me on this journey and giving me this opportunity.
She has endured a huge portion of emails, questions, ramblings, and occasional crankiness.
She stuck with us throughout this book and trusted us to trust our guts.
Thanks also to my Mom and Pops; my brother, Jeff; and my nieces, Claire and Quinn.
Thanks to my fellow basement dwellers and the WAS team at University of  Portland—namely, Jenny Walsh, Jacob Caniparoli, and the Tuesday morning tech team (you know who you are)
Thanks to my pal, the Irish Ninja (aka Ronan Cranley), for bringing his excellent jQuery, JavaScript, and PHP coding skills; his sense of  humor; and incredible work ethic to this book.
With a subscription, you can read any page and watch any video from our library online.
Access new titles before they are available for print, and get exclusive access to manuscripts in development and post feedback for the authors.
Copy and paste code samples, organize your favorites, download chapters, bookmark key sections, create notes, print out pages, and benefit from tons of  other time-saving features.
To have full digital access to this book and others on similar topics from O’Reilly and other publishers, sign up for free at http://my.safaribooksonline.com.
Maybe there’s something in here that will make my web.
You’ve got HTML and CSS under your belt and want to add scripting to your skill set, but you don’t want to spend your.
You need a scripting library that allows you to change web.
And since we’re wishing, can it play well with AJAX and PHP, too?
You want web page power You already know how to build great-looking web pages with clean, valid HTML and CSS.
But static web pages just don’t cut it anymore—people want a responsive web page.
They want action, animation, interaction, and lots of  cool effects.
My clients love my web page designs, but they want more interactivity.
We refuse to use it until someone makes it more responsive.
Do you want to take control of your web pages and make them more useful for your visitors? Check all the options that apply from the list below:
Dynamically add elements to the web page without reloading every time.
Load data from a server just when a user needs it.
The browser requests a web page from a server when someone types a web address into the browser’s URL bar.
The server finds the requested file(s) and sends them to the browser.
The browser displays a rendered HTML page based on the file sent from the server.
Plain old HTML and CSS are good for giving your page structure and style.
Once you have a rendered HTML page, it’s there, but it’s static.
What if  you want to change how the page looks, or add or remove something from it? You either have to do some really crazy CSS gymnastics, or you simply have to load a new page.
Why? Because all you’re really doing with HTML and CSS is controlling how a page is displayed.
How do you pull that off ? With an HTML tag known as <script>
The <script> tag tells the browser that you’ll be giving it some directions to follow.
But how do I give the browser directions? That seems kinda unusual...
Remember that HTML is a markup language that handles document structure.
And cascading style sheets (CSS) control the look and feel and position of  those elements.
Enter jQuery (and JavaScript)! The language we use to give the browser directions is JavaScript.
Every browser comes with a built-in JavaScript interpreter that takes the directions you write in between the <script> tags and translates those directions into different kinds of  action on the web page.
To give the interpreter directions, you ultimately need to speak JavaScript.
The JavaScript interpreter “listens” for events that happen on the page, like a mouse-click.
Hey, browser, update that img element for me, will ya?
Read each line and think about what it might do based on what you already know about HTML and CSS.
If you’re not sure what a line does, it’s perfectly OK to guess.
Read each line and think about what it might do based on what you already know about HTML and CSS.
If you’re not sure what a line does, it’s perfectly OK to guess.
But if I don’t refresh the browser, how does the browser know to hide an element or slide it up?
Look into the browser It’s time to pull back the curtain to see what’s really going on behind a web page as a browser displays it.
Your browser uses the HTML Document Object Model (DOM) to build a page from simple HTML markup and CSS code into a clickable page complete with text, images, videos, and all the other great content we love to browse.
The browser’s layout engine goes through the HTML and CSS to build a “document” using the HTML Document Object Model (DOM)
The browser loads the HTML file it gets from the server.
The browser displays a rendered page in the browser’s viewport.
The JS interpreter references the DOM to make changes to the web page without needing to reload it.
Over the years, the DOM has helped HTML, CSS, and JavaScript work together more effectively.
It provides a standardized skeleton that all modern browsers use to make browsing the Web more effective.
Many people think of  the DOM as being built like a tree: it has a root and branches with nodes at the end.
Alternatively, you can think of  it as an x-ray for how the page is built.
An x-ray tells a doctor what’s going on with the body’s hidden structure.
Like an x-ray, the DOM shows us the hidden structure behind the page.
But unlike an x-ray, JavaScript and jQuery use the DOM to change the structure on the page.
Anything that corresponds to an <html> tag is an “element node.”
The DOM can seem complex and intimidating, but luckily for us, jQuery keeps it simple.
Don’t forget: jQuery is JavaScript, but a much more approachable version.
When you want to control the DOM, jQuery makes it much easier.
For instance, let’s say we want to change the HTML inside of  the only paragraph element on our page.
One of  jQuery’s main strengths is that it allows you to work with the DOM without having to know every little thing about it.
Throughout this book, you’ll learn to use JavaScript and jQuery together.
In Chapter 6, we’ll learn more about jQuery’s relationship to JavaScript, and we’ll beef  up our JavaScript skills along the way.
For now, when you need to work with the DOM, you’ll use jQuery.
I’m talking to the document (aka the big D in DOM)
Change the HTML of that element to what’s in these parentheses.
Get me all of the elements that have the tag name of “p.”
Let’s take jQuery for a spin around DOM-ville, shall we?
Or let’s say we want to change the HTML inside of five paragraph elements on our page:
Loop through the number of elements I want to change.
Because jQuery uses CSS selectors, we can say it the same way as above.
Then save it, open it in your browser, and try out each of  the buttons.
It won’t hurt to take a look at the code and try to figure out what it’s doing while you’re at it...
Pretty nifty how jQuery can manipulate the page, isn’t it? The important part to keep in mind is that none of  the original HTML and CSS changed when you pressed each button.
The JavaScript interpreter doesn’t change the original HTML and CSS files.
It makes changes to the DOM’s representation of the page in the browser's memory.
The JavaScript interpreter “hears” the click event and runs the function attached to it.
The JavaScript interpreter changes the DOM representation of the page.
If you put a CSS selector here, jQuery will return you the set of elements that match that selector.
What’s with all of those dollar signs in the code?
Introducing the jQuery function (and shortcut) The dollar sign with the parentheses is the shorter name of the jQuery function.
This shortcut saves us from writing “jQuery()” every time we want to call the jQuery function.
The jQuery function is also often referred to as the jQuery wrapper.
The dollar sign represents all of  the cash you’ll rake in with your newly acquired jQuery skills.
Kidding, but it does bring home the bacon in the jQuery world.
The short name and the long name point to the same thing: the big code block known as jQuery.
Here are three different things you can put into the jQuery function.
This is the jQuery function, whose whole job is grabbing the elements you put into the parentheses.
Instead of typing the six characters that make up “jQuery,” you just type one.
If you put a string of HTML in here, you can add DOM elements to the browser page on the fly.
The main way you get at stuff  with jQuery is to use selectors—the same selectors you’ve used with CSS.
If  you’re a little fuzzy on CSS selectors, it’s OK.
It selects all of the h1 elements in the HTML document.
A CSS ID should be used when you want to select one and only one element.
A CSS ID always starts with a hash mark, or number sign.
The great thing about jQuery is that it uses those same CSS selectors we use to style our page to manipulate elements on the page.
This hides all of the h1 elements on the page.
Slides up all of the elements that are members of the CSS class my_class.
And this jQuery statement fades out an element that has a CSS ID of my_id until it’s invisible.
You’ll do more with combining selectors and methods in Chapter 2 and the rest of this book.
In this example, we have an img element, but we could just as easily put other elements in there.
Selectors come in the form of strings, so we have to use quotes.
The “Query” part of jQuery is all about asking for elements via JavaScript…
Hey, jQuery, can you give me (i.e., return) all the img elements on the page?
You ask for something with a selector, and the JavaScript interpreter asks the DOM to get it for you.
If  you ask for an element with nested elements, jQuery will give you the nested elements too.
Let’s take apart a jQuery selector a bit more to make sure we know how it works.
The jQuery library was designed to select elements the same way CSS does.
Hey, DOM, give me back all of the img elements on the page.
To show you just how easy it is to learn jQuery, here’s a little breakdown of  a few jQuery phrases to use when travelling in DOM country.
The text that appears between any paragraph elements will disappear.
When a user clicks me, I’ll run all the jQuery statements within the curly braces.
Q: So why create jQuery if all it does is use JavaScript? Isn’t JavaScript enough on its own?
A: JavaScript is great for a lot of things—especially manipulating the DOM—but it’s pretty complex stuff.
It abstracts away a lot of the complexity involved in dealing with the DOM, and makes creating effects super easy.
It was created by John Resig; you can find out more about him here: http://ejohn.
Q: What’s this business with the dollar sign all about?
A: It’s just a shortcut so you don’t have to write “jQuery” over and over! But when you're working with other client-side languages, using jQuery() helps avoid naming conflicts.
A: Web developers often refer to the web browser as a client because it consumes data from a (web) server.
A client-side scripting language is one that can give directions to the browser behind the scenes, while a server-side language gives directions to the server.
Web developers and designers were tired of inconsistencies across browsers and decided they needed a standard they could use to add behavior to and interact with web pages on any browser.
The World Wide Web Consortium (aka W3C) worked to define the standard collaboratively with these various groups.
Q: When I go to download jQuery, there’s a production version and a developer version.
A: The production version is minified, which means that a bunch of unnecessary characters and whitespace have been removed.
It is optimized to run faster in a production environment, but it’s kind of harder to see what’s going on.
The developer version is nicely spaced and much more readable.
Your first jQuery gig You just landed a job as the new web developer for the Webville Pet Rescue Foundation.
The marketing team wants to kick off  their annual fundraising campaign with a revamp of  last year’s “Help Our Furry Friends” web page.
They gave you a screen shot from last year with details on what they want the page to do.
Well, no one wants to let Marketing down on the first day—you don’t want to be on their bad side! So let’s see what we’re working with here…
Right now, the visitor clicks on a button and a picture pops up, but it doesn’t stay on the page.
We want the picture to appear when the user clicks and go away when they click again.
NOTE: This should be done within the page (i.e., we don’t want to link to another HTML page)
Before you figure out how to add jQuery functionality to the page, let’s look at how the HTML and CSS are set up.
We’ve given you the files for last year’s campaign below.
Next to the elements that you think you’ll need, write what you’ll have to do to provide the functionality that Marketing is looking for.
This anchor tag has “hover” and “active” states set in the CSS.
The user hovers over the link, and the image appears.
Before you figure out how to add jQuery functionality to the page, let’s look at how the HTML and CSS are set up.
We’ve given you the files for last year’s campaign below.
Next to the elements that you think you’ll need, write what you’ll have to do to provide the functionality that Marketing is looking for.
Here are our answers, but don’t worry if yours aren’t exactly the same as what we came up with.
This anchor tag has “hover” and “active” states set in the CSS.
The user hovers over the link, and the image appears.
The furry friend image of the dog is nested inside the anchor tag.
This image shouldn’t show up until the user clicks the link in the anchor tag.
This CSS selector changes the display property of the nested image to “none” so it’s not visible when the page first loads.
When the user hovers her mouse over or clicks on the anchor tag, the img element’s display property will change to “block.” The image will then suddenly appear.
And make this a div that starts out as hidden.
Before we can use jQuery to make the cool effects that Marketing wants, we need to make sure that jQuery has everything in place to work its magic.
As you already know now, one of  jQuery’s main jobs is to manipulate HTML elements, so we need to have good structure.
To get at elements, jQuery uses the same selectors that CSS uses, so we also need to have well-defined styles.
Revisit your requirements When you’re thinking about your structure, it’s always good to go back to what you’re trying to build.
Marketing wants an image to slide down and fade in when people click on the “Show Me the Furry Friend of  the Day” section of  the page.
What changes to the HTML and CSS might you need to make?
OK, so now we can just dive in and start writing jQuery for all the functionality we want, right?
Set up your HTML and CSS files Let’s think about what we’ll have to set up in our HTML and CSS files before you write any jQuery statements.
Open up the jQuery files for Chapter 1 (if  you haven’t done that yet, be sure to go back to the opening section “How to use this book” for details)
Then, add the code in bold below to the files, as shown here.
This makes a clickable div, and we’ll style it in the CSS file below so it has the same look and feel as the picframe div.
Here's the picframe div that will slide open to show the furry friend picture.
Set the picframe selector to “display: none”so that it won’t show when the page loads.
This styles the clickMe div so that so it has the same look and feel as the picframe div.
Now that you have your HTML and CSS files set up, let’s break down the code that’s sitting between the <script> tags.
The dot separates the selector part from the method part.
Connecting the button with an ID of clickMe to the click event, this code makes the button clickable.
The code for what will happen when the button is pressed will go between these curly braces (aka the “code block”)
As soon as I possibly can, I’ll start executing code within the curly braces!
We’ll get into events, methods, and functions in a lot more detail soon.
Our HTML and CSS are ready; now we need some jQuery.
We want the picframe div to slide and to fade.
Fortunately, the jQuery folks have built effects that let us control both of  these rich visual actions: slides and fades.
We’ve devoted a whole chapter later in the book to jQuery effects (Chapter 5), so don’t worry about getting every little thing down now.
The slideUp method changes the height property of the element until it’s 0, and then hides the element.
The slideToggle action says, “If it’s up, slide it down; if it’s down, slide it up.”
Slide on in… The first effect we’ll implement is having the image slide into view, which is one of  the things the marketing team manager wants to have happen.
The slideDown method changes the height property of the element from 0 to whatever it’s set to in the CSS style.
Here’s what we want to fade in; in this case, it is an image.
When an element fades in, it goes from being invisible (transparent) to being visible (opaque)
May the fade be with you We also want the image to gradually appear, going from invisible to fully visible.
Again, jQuery has a method for that, and that method is called a fade.
The fade methods are pretty similar to what you just saw for sliding: you have FadeIn, FadeOut, FadeTo, and FadeToggle.
For now, let’s just use FadeIn, which gives us control over the opacity and transparency properties of  HTML elements.
How many jQuery statements do you think it will take us to accomplish the effect we want?
Take a shot at writing those statements on a piece of scratch paper.
If you’re not sure, try to write it out first in plain English; then you’ll start getting your brain to think in jQuery.
You can specify how fast it fades in by putting a value inside the parentheses, typically represented in milliseconds (ms)
That’s it? Amazingly, you only need to write two lines of  jQuery code to get these effects to work.
Now you’re probably beginning to get a sense of  why so many people like jQuery.
Add the bolded lines below to your index.html file, and you’re good to go.
In jQuery, it’s important to sequence our effects in such a way that they don’t run over one another.
We added some extra stuff in the parentheses to juice up the effects.
Just because jQuery will work the same across all browsers doesn’t mean the styles you define in your CSS file, or any dynamic styles you apply to elements in your page, will react the same in all browsers!
Open the page up in your favorite browser to make sure everything’s working.
Wow, that looks great—and you got it done so quickly!
You got the job done with some HTML and CSS fine-tuning, and just two lines of  jQuery.
We’re getting a great response to the new campaign, too.
It’s your standard crossword; all of the solution words are from this chapter.
After your browser receives a web page from a web server, it loads that web page into its _________
Translates directions you give it into different actions on the page, the JavaScript _______________
Name of the character used to separate a jQuery selector from a jQuery method.
The name of the symbol we use for the jQuery shortcut.
A ____________ is used by jQuery to locate and return an element from the web page.
This kind of file builds the structure of the web page.
The name of the symbol that ends a jQuery statement.
JavaScript library specialized for complex interactivity and rich visual effects.
Use a ________ to test that your jQuery scripts are working.
You know you're dealing with a ________ when you see a set of parentheses after a keyword.
After your browser receives a web page from a web server, it loads that web page into its _________
The JavaScript __________ translates directions you give it into different actions on the page..
A CSS setting that makes sure an element won’t show when the page loads, display: _____
Name of the character used to separate a jQuery selector from a jQuery method.
The name of the symbol we use for the jQuery shortcut.
A ____________ is used by jQuery to locate and return an element from the web page.
This kind of file builds the structure of the web page.
The name of the symbol that ends a jQuery statement.
JavaScript library specialized for complex interactivity and rich visual effects.
Use a ________ to test that your jQuery scripts are working.
You know you’re dealing with a ________ when you see a set of parentheses after a keyword.
After your browser receives a web page from a web server, it loads that web page into its _________
Translates directions you give it into different actions on the page, the JavaScript _______________
Name of the character used to separate a jQuery selector from a jQuery method.
The name of the symbol we use for the jQuery shortcut.
A ____________ is used by jQuery to locate and return an element from the web page.
This kind of file builds the structure of the web page.
The name of the symbol that ends a jQuery statement.
JavaScript library specialized for complex interactivity and rich visual effects.
Use a ________ to test that your jQuery scripts are working.
You know you're dealing with a ________ when you see a set of parentheses after a keyword.
Selectors jQuery selects elements the same way CSS does: with selectors.
Just about any kind of HTML element is fair game for a jQuery selector.
In this chapter, we’ll dig into jQuery selectors and methods.
With jQuery selectors, we can grab elements on our page, and with methods we can do.
Like a massive book of magic spells, the jQuery library lets us.
We can select a certain piece of text and animate the change to its font size.
So, on with the show—let’s grab some web page elements and go!
Oh baby, could my selectors and methods make magic with your web page elements...
I saw your tweet that you’re doing more interactive w eb work these days, so I.
I’d like to give my v isitors a chance to receive.
The page should have four sections with one of four im ages per section.
When a user clicks on one of the sections, the.
I’ve attached a mockup of how I want it to look.
Jump for Joy needs your help You receive an email from your friend, who is a professional portrait photographer.
She wants to roll out a “Jump for Joy” promotion that allows users to win deals on a package of  prints.
What are the project requirements? Emily is a great photographer, but her request is kind of  all over the place.
Let’s take a closer look at that email and figure out what she is really asking for.
Before you can even start writing any jQuery, you want to be super clear on what the project (or user) requirements are.
Take the requests in the email and break them down into a list of things our web app needs to do.
This list will be our guide for ensuring that our web app meets the client’s needs.
Converting user requests into actual project requirements is an important skill that gets better with practice and time.
Take the requests in the email and break them down into a list of things our web app needs to do.
This list will be our guide for ensuring that our web app meets the client’s needs.
When a user clicks on one of the sections, the message should appear below the image in that section.
If a user clicks again, get rid of the last message and make a new one.
Great, now that we’ve worked out the project requirements, let’s jump in and get started with the jQuery already!
Whoa! Hold your horses there, hoss! Working out project requirements first is a good habit to get into for every jQuery project you’ll work on.
But before we jump right into writing jQuery code, we need to do a little work setting up the structure and styles first.
We did a bit of this in Chapter 1, and now we’ve got even more to set up before we get any jQuery goodness going.
Dig in with divs We need four clickable areas on the page, so let’s make those first.
The most useful and flexible HTML element for our purposes is the <div> tag.
The <div> tag serves very well in the structure role, since it’s a block-level element.
We can also easily style div elements to act exactly as we want them to.
Open your favorite text editor to create the HTML and CSS files you’ll need.
Below is the starter code with some key elements missing.
Add the following items to the page and check them off as you’re done:
Open your favorite text editor and create the HTML and CSS files to solve this exercise.
Below is the starter code with some key elements missing.
Once you’ve added the following items, your page should look like our solution.
Inside each of the four div elements inside of the main div, put a different image.
Test Drive Open the page up in your favorite browser to make sure everything’s working.
This will give us an opportunity to note how we want the page to function.
We now have four areas on our page with images.
As we’ve seen, making an element clickable with jQuery is easy.
Clicking on a page element causes an event to trigger on the page, and can also run functions.
We’ll get more in depth into events and functions later on, but for now, let’s just review how the click event works on a paragraph (or <div>) tag.
This is the element we want to attach the click event to.
A function is a way to collect together a bunch of things we want to do.
Here, we tell the JS interpreter that we want to make paragraph elements do something when we click on them.
A block is a lot like a paragraph: it contains related statements.
Because it's inside the parentheses that belong to the click action, the function will run when the click is triggered by the user.
We use the alert statement when we want to test that our function was called properly.
Whatever we put into the quotes will pop up in a new window.
When a div is clicked, use a JavaScript alert function to display the text “You clicked me.” We’ve put a few in place for you already.
When a div is clicked, use a JavaScript alert function to display the text “You clicked me.”
Using the code you put together in the magnets solution on the previous page, update your HTML file to include this script.
Don’t forget to put it inside a <script> tag! Do this!
The alert function calls up a window in your browser with a message inside it.
We’ll use it whenever we want to see the results of things we’ve added to code like variables and functions.
Add these lines between your <script> tags to make the divs clickable.
Some programmers add comments to help identify parentheses and curly braces.
It’s a matter of coding style that’s entirely up to you.
Test Drive Open the page up in your favorite browser to make sure everything’s working.
You should see the alert message now as you click around the images on the page.
The JS interpreter did exactly what we asked it to do.
Yes, but no matter where I click, I get the alert message.
In fact, you don’t even have to click on the images to get that message.
Our page structure has div elements nested in another div, so when you click on those, the browser thinks you’ve clicked on both, and you might get two alerts in that case.
Clearly, we need to narrow down what we’re asking jQuery to do here…
The issue is that we haven’t been specific enough in our selection.
So how can we get at the four sub-divs and leave out the larger container div? Remember from Chapter 1 that jQuery selectors use CSS classes and IDs.
We can get even more specific about which elements we want jQuery to grab by adding classes and IDs to those elements.
Would you use just CSS classes or IDs separately, or a combination of both, to specify the div elements above? Which would work best, and why?
In CSS, classes are used to group elements together and give them common style attributes.
You can have one or more elements on the page that have the same class.
For jQuery, we can use the same class selector, and affect the same group of  elements with jQuery methods.
Both CSS and jQuery use the “.” to signify a class, which makes it super easy to start classing up your code.
Class selectors match any elements that are members of the class.
ID-entifying elements An ID selector is used to identify a single, unique element on a page.
In jQuery, as in CSS, the # symbol is used to identify an ID selector.
IDs are great when you want to get specific with an element, or when there is only going to be one of  that kind of  element on the page, like a page header or footer.
Check the boxes in the appropriate columns to indicate what you can use classes for and what you can use IDs for.
Remember, sometimes a class and an ID can do the same job!
Can be used by a single JavaScript method, crossbrowser, to identify an element.
Can be used by CSS to apply style to elements.
More than one of these can be applied to an element at the same time.
Q: What is a block-level element? A: Block-level elements appear within their parent elements as rectangular objects that do not break across lines.
They also appear with block margins, width and height properties that can be set independently of the surrounding elements.
A: Yes, that used to be (and for some people, still is) the suggested best practice.
However, the problem caused by scripts is that they block parallel downloads in the browser.
Images from different servers can be downloaded more than two at a time, but once your browser encounters a <script> tag, it can no longer download multiple items in parallel.
Having them at the bottom means it will help speed up your page load time.
A: The ones we used didn’t look that pretty, but alerts are useful for a variety of reasons.
Really, a JavaScript alert is a simple window containing a message.
The text inside the parentheses is what is shown in the alert message.
If you want to show a string of text, enclose the text in quotes.
To display variable values, enter the variable name without quotes.
You can also combine variable values and text strings by using the + sign.
You probably see these all the time and don’t think about it, like when you don’t fill in a required field in a form.
In our case, we’re using them more for testing and debugging purposes.
There are certainly more robust ways to do that, and we’ll get into those in later chapters in the book.
Check the boxes in the appropriate columns to indicate what you can use classes for and what you can use IDs for.
Remember, sometimes a class and an ID can do the same job!
Can be used by a single JavaScript method, crossbrowser, to identify an element.
Can be used by CSS to apply style to elements.
More than one of these can be applied to an element at the same time.
I’m relieved that you’re here to let everyone know that you owe your entire existence to me.
Well, I’ve definitely got style, but I’ve got quite a bit of power.
I can change the look and feel of  things in the blink of  an eye.
And what is it you can do that I can’t do?
Hello, fancy jargon! What do you mean, you “return” elements?
But I can affect all the elements I select, too.
I can change all of  their background colors to fuchsia if  I want.
And don’t forget that my engine gives you all the power you have.
I certainly get a lot of  my power from your approach to picking out elements.
You just sit around and make things look nice, while I actually get some serious action going.
You’ve got your job, which is changing how elements look, and I’ve got mine, which is very different.
My job is to find elements and return them so that a method can do something to the returned set.
Say someone uses me to select all the paragraph elements on the page.
I grab that set of  paragraphs and hold them so that a jQuery method can do whatever it wants to them.
Your selector engine gives me a good chunk of power, but another chunk of  my power comes from JavaScript.
I can actually ask the browser for an element, hold on to that element, and pass it off  to a jQuery method to make it fly across the page or even disappear.
Yeah, and you’re right that I couldn’t do it without you.
Classes and IDs are common ground for the three layers of  a web page that we looked at in Chapter 1: structure, style, and script.
Selectors are where those layers get wired together so they can all work in concert.
JavaScript and jQuery provide the script that controls the behavior or function of  those elements.
Imagine that we have a class called slideshow for an image we want to run the slideUp method on:
The slideshow class is wired to the img element here.
The style sheet presents and positions the slideshow class with a selector.
The scripting library, jQuery, selects the element and gives it behavior.
Update the structure, style, and script in your page to make only the four image div sections clickable.
In the CSS file, create a CSS class (called guess_box) and apply it to the html and the script.
It looks like one of our div elements lost its ID attribute too.
Can you figure out which one and put it back?
Here’s where you add a class for the guess boxes.
The height matches the height of the images in the boxes, so everything lines up nicely.
Add the guess_box class to all the div elements that will be used to hide the discount code.
Also, update our selector to use this class, and add it into our CSS file.
And it was the main div element that needed to get its ID attribute back.
Attach the click method to the guess_box class only and not all div elements.
Let’s have a look at our requirements to-do list to see where we are on building everything that Emily asked for:
The page should have four sections with one of  four “jump for joy” images per section.
When a user clicks on one of  the sections, the message should appear below the image in that section.
If  a user clicks again, get rid of  the last message and make a new one.
You’re going to have to create a message and store it somewhere to display it to your visitors.
There are several things involved in displaying a message to the user.
Don’t forget, it could be a different message for each user who visits the site.
Creating some storage space The next requirement on our list is to show some text that will stay the same as our script runs: “Your Discount is”
But beside that, we need to hold a number that will change or vary depending on the random amount.
We need a way to carry that information throughout the script—our page needs a way to store that information.
Storing information (or data) that varies is a perfect job for variables.
When we want variables in jQuery, we use JavaScript variables.
When we declare a variable, the JavaScript interpreter gives us some browser memory in which we can store your data.
We name a variable so that we can reference it later in our script.
We place a value into our variable using an equals sign.
Now, whenever we want to get the data we stored, we just ask for it by its variable name.
If you want to know more about JavaScript variables and the math functions, pick up a copy of Head First JavaScript!
Write the code for a discount_msg variable that shows the message and the random variable.
Make sure the discount message appears inside a paragraph element.
Mix things up with concatenation For many of  our jQuery scripts, we’ll be storing different kinds of  data: numbers, text, or true or false values.
In many cases, especially when we need to display different messages to our visitors, we’ll be mixing HTML with these other kinds of  data, which gives our web pages even more power.
So, how do we go about combining our variables with other values? We use concatenation.
Imagine you have a video game where you have a variable called pts that stores the highest score, and you need to display it to the winner:
We need to push together (or concatenate) three pieces of  information.
When setting a text or HTML value, we use quotes.
When referencing a variable, we use its name without quotes.
Now that you’ve got a variable set up to store your concatenated discount message, you just need to update what’s in between your <script> tags, so let’s focus there.
We put the discount variable in our alert to make sure it's doing what we want it to.
Write the code for a discount_msg variable that shows the message and the random variable.
Make sure the discount message appears inside a paragraph element.
Insert your message with append You’ve got your message ready to go, but how do you display it on the page below the image that’s been clicked? If  you think of  adding a new message as inserting it into the page, jQuery provides several ways to insert content into an existing element.
We’ll cover some more useful ones in more depth in Chapter 4, but for now, let’s just look quickly at the append action.
If you run this in your script, the text in bold appears on your page.
This jQuery statement is telling the JS interpreter to append the content in quotes to all paragraph elements.
With what you know about selectors already and your new append powers, write the code to append the discount variable to your guess_box element.
Q: Are there any restrictions on what I can use for class names?
A: A class name must begin with an underscore (_), a dash (-), or a letter (a–z), followed by any number of dashes, underscores, letters, or numbers.
There is a catch: if the first character is a dash, the second character must be a letter or underscore, and the name must be at least two characters long.
Q: Are there any restrictions on what I can call variables?
They cannot be named after any JavaScript keywords (like window, open, array, string, location), and are case sensitive.
A: There is no defined maximum, according to the standards, but the number in real-world usage is around 2,000 classes per element.
Q: Is there a way to select every element on the page?
A: Yes! Simply pass in a “*” into the jQuery wrapper to get all the elements.
Q:If I give my elements a class or ID, without any style, will that have any effect on how they look in a browser?
A: No, there are no browser defaults for classes or IDs.
Some browsers do treat elements differently, but a class or ID without any CSS applied to it will not have any effect.
Adding a new message to a web page is really just this simple!
Everything works great, but… The discount variable is generating a random number and appends the message to our page the way we expected, but it has an unexpected side effect: the discount shows up over and over again in every div.
Our selector is specific enough to grab a class, but we end up affecting all the divs in the class.
This applied the click method so that each member of the guess_box class is clickable.
We need to append the discount variable only to the individual div that’s clicked.
So, how do we select only the one that was clicked and append the discount variable to that one?
Test Drive Open the page up in your favorite browser to make sure everything’s working.
Pay special attention to the alert to make sure that the discount variable is set up properly.
When someone clicks, the discount message is added to every div that's in the guess_box class.
Wouldn’t it be dreamy if there were a simple way to select the div we clicked? But I know it's just a fantasy...
Throughout this chapter, we’ve been looking at jQuery selectors and how they return elements that jQuery methods use.
And very often, we want to be really specific about which element we’re selecting.
When it comes to specificity, the simplest selector to write is $(this)
All you have to remember is the pronoun “this,” after all.
The $(this) selector gives us an easy way to point to the current element.
In other words, $(this) means different things depending on where or when you use it.
One of  the best places to use it is within a function that runs when a jQuery method is called:
Run this function when the method is called.Call a jQuery method.
Access the current element (#myImg, in this case) inside our function.
Allows us to use jQuery methods to affect the current element.
Let’s see if  $(this) can help us solve our problem.
Update your code to use $(this), as shown in bold below.
Now we're telling our guess boxes to append the discount code only to the one clicked.
Test Drive Open the page up in your favorite browser to make sure everything’s working.
Pay special attention to the alert to make sure that we got the discount variable right.
Make sure to click several times to check that the random number concatenated into the discount variable works too.
Great question! That leads us right to the last step on our to-do list:
The page should have four sections with one of  four “jump for joy” images per section.
When a user clicks on one of  the sections, the message should appear below the image in that section.
If  a user clicks again, get rid of  the last message and make a new one.
How do you think you can remove the last message?
Good riddance with remove So how do we get rid of  the last message and make a new one? Use the remove method.
The remove method allows us to take an element, or a group of  elements, off  of  the page.
Let’s have a look at a really simple page with a list and a button.
Which selector do you need to use to remove just the discount message from the page?
Here’s what it looks like in the browser, and the HTML that creates it.1
And here’s the code for the button, which will remove all the list items from your list:
Looking again at the page in the browser and the HTML—after jQuery is finished—we can see that all our list items are gone, even in the HTML!
Think of a jQuery method as a verb—it’s all about web page action.
Dig down with descendant selectors Descendant selectors are yet another selector we can use with jQuery, and they happen to fit our situation perfectly.
Write the statement that will remove the last paragraph in the Jump for Joy DOM using a descendant selector.
Leave a space between the parent element name and child element name.
When you combine class and ID selectors with descendant selectors, you can really get specific, which works great on a complex HTML page.
Grabs all p elements that are children of a div element.
Grabs all img elements that are children of the children of a div element.
This returns all div elements that are children of a div element.
Start by using the .guess_box class selector, followed by a descendant p selector to access the paragraph you added.
Then, use the remove method to take all the p elements in any element with the class of guess_box off the page.
So now I can append and remove pieces as I see fit.
Yes, the order in which you add or remove your elements is important.
You can’t remove an element before you add it, and there’s no point removing an element just after you add it, right?
If a user clicks a second time, you remove the last paragraph you attached, and then append a new paragraph.
If a user clicks this one, you append the paragraph to it.
Your job is to decide where the remove statement should go.
Think about when you need to remove the paragraph, and use the process of elimination to pick the correct place to do that.
The remove statement can't go on line 1 because it would be outside of the click function for the guess box.
The statement can't go on line 3 because that would remove what I just appended.
I want to remove the last discount message before generating a new one, so I’ll put it as the first line of the code block (inside the curly braces) for the guess_box click.
The order and timing of when you make your jQuery calls is important.
This is true especially when you are giving important information to your visitors and removing it again.
Your job is to decide where the remove statement should go.
Think about when you need to remove the paragraph, and use the process of elimination to pick the correct place to do that.
Q: Sometimes, after calling the remove method, I still see the elements I removed in the source of the page.
A: Oftentimes, browsers actually make a fresh call to the server to get the source of the page when you use the View Source option.
Using DOM inspectors, like Chrome Developer tools or Firebug for Firefox, should show you the DOM as it is displayed on the page.
A: The floor method rounds a number down to the nearest integer and returns the result.
When we multiply it by a number, we guarantee getting a number between 0 and whatever number we multiply by.
Q:Where did this come from? A: In many object-oriented programming languages, this (or self) is a keyword that can be used in instance methods to refer to the object on which the currently executing method has been invoked.
Q:So I can display a random discount only when someone clicks one of the images, and remove it when he clicks another one.
But really, that’s not all we need to do to make this work for real, right?
This is only the first piece of the puzzle, really.
People are going to need to have that code carry over when they check out to buy their photos.
To pass the discount code to a shopping cart, you’ll need to send the code back to the server for processing.
We’ll work on that kind of functionality in more detail in Chapters 8–10
Test Drive Add the line of  code you just wrote to your index.html file.
Then, open the page up in your favorite browser to make sure everything’s working.
Click several times to check that the random number concatenated into the discount variable works too, and that the old discount values are removed properly, before appending the new code.
Your turn to jump for joy Congratulations! You nailed the requirements and made the campaign work.
The page should have four sections with one of  four “jump for joy” images per section.
When a user clicks on one of  the sections, the message should appear below the image in that section.
If  a user clicks again, get rid of  the last message and make a new one.
I hope people enjoy my photos as much as I enjoy my new page!
I’ve attached a self-portrait of me with my phot o gear when I saw the.
Your jQuery Toolbox You've got Chapter 2 under your belt and now you've added the basics of.
You use methods to do stuff in jQuery and in JavaScript.
Think of a method as a verb—it’s all about web page action.
It gets added to the end of whatever element calls it.
How many times do I have to dig this out?!
In this chapter, we’ll look at making your page react when people interact with it.
Making your code run in response to user actions takes your.
Emily was pleased with the work you did for her Jump for Joy promotion, but she’s met with her accountant and now has a few changes she’d like you to make.
You did a great job of making the web promotion work ! I met with my accountant.
My accountant suggested some changes to the app tha t should bring in more sales.
Visitors should still get four options to pick from for the chance to receive a.
However, now let’s make it the same discoun t amount each time.
Visitors should only get one chance to find the discoun t code, which should be in a.
Think you can do this as well as you did the first part?
Emily’s taken some photos of her accountant for his profile, but she couldn’t get him to jump for joy.
Making the promotion limited to only one square keeps Emily from having to hand out so many discount codes, and it keeps people clicking around the site.
You know what to do: look at Emily’s email again and pick out all the new features she’s asking for.
Write out in plain English what you think each feature is.
You know how to add a click to your page.
But how do you make sure a user can only do it once?
You also learned in the previous chapters how to run code when a click gets called.
Can you think of a way we could use that to help us complete our solution?
What our solution currently does What we need our solution to do.
You know what to do: look at Emily’s email again and pick out all the new features she’s asking for.
Write out in plain English what you think each feature is.
Visitors should only get one chance to find the discount when they load the page.
So we’ll need to stop them from clicking more than once in order to find a better discount.
After the visitor has made his guess and clicked on a box, the answer should be revealed as to whether or not he got it right.
If he chose correctly, show him the discount so he can apply it to his order.
The discount should only be in one of the four image boxes, and the images should be in a different (random) box each time the page loads.
There will be a standard 20% discount, instead of a variable one.
So instead of a percentage, give visitors a discount code.
Making your page eventful The Jump for Joy application is all about the clicks.
In jQuery and JavaScript, a click is referred to as an event (there are plenty of  other events, but for our purposes, we’ll just focus on clicks for now)
An event is a mechanism that allows you to run a piece of  code when something happens on the page (like a user clicking a button)
The code that gets run is a function, and functions allow you to make your jQuery more efficient and reusable.
We’ll look more closely at functions in a minute, but for now, let’s look at how a click event really works.
The event listener hears the event and passes it on to...
What’s with that event listener? I haven’t seen that before.
Event listeners are a part of  the Document Object Model (DOM)
You can add them to any page, so you don’t have to rely on users clicking links and buttons to make things happen.
Event listeners are the browser’s way of  paying attention to what a person does on a page, and then telling the JavaScript interpreter if it needs to do something or not.
The event listener attached to the element “hears” the click event and tells the JavaScript interpreter what code is attached to it.
The JavaScript interpreter runs the function specified in the event listener.
Binding an event When we add an event to an element, we call this binding an event to that element.
When we do this, the event listener knows to tell the JavaScript interpreter what function to call.
They are known as convenience methods because they are included solely for ease of use—but they do have limits.
We use this method to add events to elements as the page is getting loaded.
We use this method just like Method 1, but we can also use it to add events to elements that get added to the page after it is loaded, like when we create new DOM elements.
Both methods add a click event listener for our element with the ID of myElement.
Triggering events Events can be triggered by a wide variety of  things on any given page.
In fact, your entire browser is eventful, and pretty much any part of  it can trigger events!
A handler function is a block of code that runs when the event is triggered.
Q: Where can I find all the different types of events?
A: jQuery groups events into five different categories: browser events, document loading events, form events, keyboard events, and mouse events.
A: There are nearly 30 different types, between all the different event categories.
Q: What can trigger an event (i.e., make an event happen) on the page?
A: It’s mostly input devices (keyboard and mouse) that trigger the different event types.
However, your browser, the page document, your jQuery code, and even an HTML form on your page can trigger events, too.
HeadFirst: Hi, Event, it’s nice to be able to talk to you.
Event: These days, I’ve really come into my own, but before jQuery came along, I was a little scattered.
I’m an object that helps people interact with a web page.
I’ll come back to that in a bit, but why were you scattered? Where did you come from?
The DOM, JavaScript, and I were the new kids on the block.
There was a W3C standard on how we were supposed to be implemented in browsers and everything!
Along the way, we got caught up on the browser wars between Microsoft Internet Explorer and Netscape.
Eventually, Microsoft won out, after both companies tried to one-up each other with cool tricks that were not in the standard, but only supported in each company’s browser.
Event: It was, but good things came out of  it.
There were many new events, and we could do so much more with the page.
But there was still a Netscape too, for a while.
Many things would only work on one browser, leaving people frustrated when they got to a website with the wrong browser.
Netscape eventually went away, but several other browsers came on the scene.
They are starting to get more in line with the standards.
But the really great news is that jQuery handles these issues for the web developer.
Event: jQuery knows which browser is being used, so it decides how to deal with events, depending on what browsers your website viewer is using.
In practical terms, an object is really just variables and functions combined into a single structure.
HeadFirst: Where can we go to read more about these variables and functions?
Event: You can find out more about me in jQuery’s official documentation here: http://api.jquery.com/category/events/event-object/
How do we go about using you on our pages?
Event: Well, first, I have to be bound to something, so the event listener knows to listen out for me.
Then, something has to trigger me, so I can run whatever code I’m supposed to when an event happens.
HeadFirst: OK, but how do you know what code to run?
Event: That happens when I get bound to an element.
Pretty much any code can get called when I get bound to an element.
If  that happens, the event listener will no longer listen out for events on that element, so whatever code was supposed to run when I was triggered won’t run.
HeadFirst: That sounds pretty slick, but we’re running out of  time.
Where can I find out more about you and the types of  events that happen on the page?
Event: The link I gave you already will explain what makes me an object.
There’s more information about me and all the types of  events on the jQuery website, in the Documentation section.
We’ll dive into functions and variables later in this chapter.
Removing an event Just like binding events to elements, you often need to remove events from elements—for example, when you don’t want people to click a submit button twice on a form, or you only want to allow them to do something once on a page.
That’s just what you need for these new Jump for Joy requirements.
After an element has an event bound to it, we can remove that event from the element so it doesn’t get triggered.
Add a click event listener to the element with an ID of myElement.
The unbind command tells the web browser to no longer listen for this particular event for this element.
Add a focus event listener to the element with an ID of myElement.
Add a click event listener to the element with an ID of myElement.
Tell the browser to no longer listen for events from myElement.
So, an event listener sits inside the browser, attached to elements, waiting for events to happen, and tells the JavaScript interpreter to do.
Let’s see how events can help us tackle the first requirement.
Don't let users have another try at finding the discount.
Using what you know about $(this) and what you learned about events, update the code from the last chapter and add in the code to remove the click event from the div sections.
Visitors should only get one chance to find the discount when they load the page.
Update your index.html file with this new code, save it, and click around to make sure everything is working as it should.
Using what you know about $(this) and what you learned about events, update the code from the last chapter and add in the code to remove the click event from the div sections.
You’re right, it’s not removing the click from all the events yet.
This only removes the click from whatever box you click on.
If only you could stop the click happening on each of the other elements…
How would you remove the click event from every box after the visitor clicks one box? Do you have to go through the elements one by one?
I’m guessing your page is acting a lot like mine.
Did you try clicking around the page when you test drove it? What happened?
Going through the Oftentimes, we need to interact with a group of  elements one by one.
Thankfully jQuery gives us the ability to loop through groups of elements, based on whatever selector we choose.
Looping, also known as iteration, is simply going through a group of  elements one at a time, and doing something to each element along the way.
Loop through each of the elements that match our selector.
Run this code on each element that matches our selector.
The .each iterator takes a group of elements and does something to every element in the group in turn.
You’ll see more of me from here on out, especially in the next chapter...
We’ll look at iteration in more depth later in the book.
Write the code to use iteration to remove the click event from every clickable box on your Jump for Joy page.
Also, read your code carefully to see if there are any pieces you don’t need anymore.
Good examples of this are submitting forms for validation or hiding modal pop-up boxes, to name a couple.
Q: Can I use events in a web page without jQuery? A: Yes, you can.
Q: How does .each work? A:.each uses the selector that calls it and creates an array of elements identified by that selector.
It then loops through each element in the array sequentially.
Don’t worry, though, we’ll explain arrays and loops a little later on!
Q: So, I’ve seen that I can create elements with jQuery, after the page is loaded.
After an element gets created, you can still use the .bind method to give it an event listener.
Also, if you know ahead of time that your element will behave like some other elements already created, you can use the .live method.
This will attach a handler to the event for all elements that match the current selector, now and in the future.
This will work even for elements that have not yet been added to the DOM.
Calling the .each method on the .guess_box class loops through all of the elements with that class.
You can then unbind the click method from each one of them in turn.
You also no longer need our .remove code; since visitors can only click once, there won’t be anything to remove anymore.Since you’re only allowing p.
Hold on! Is your HTML file getting a little heavy on the script side there? Before you go on, we really should try to find a way to slim things down a little...
In fact, there are several reasons to create a separate file for your jQuery code:
You already know how to include CSS files, and you’ve seen how to include the jQuery library.
You should already have a folder called scripts in your root web directory (where you put the jQuery library)
Can we just set up a separate script file from our HTML? We already do it with.
You can include it in more than one page (code reuse).1
The HTML code you write will be cleaner and easier to read.3
Using your favorite text editor, create a file called my_scripts.js and save it in the scripts folder.
Create the link to this file in your HTML page by putting the following code just before the closing </body> tag:
Take all the JavaScript and jQuery code from our index.html file and move it into this new file.
Now, if you include th is file in every HTML.
You already know how to include CSS files, and you’ve seen how to include the jQuery library.
Using your favorite text editor, create a file called my_scripts.js and save it in the scripts folder.
Take all the JavaScript and jQuery code from our index.html file and move it into this new file.
Create the link to this file in your HTML page by putting the following code just before the closing </body> tag.
Your project structure You just made some important changes to how your files are structured.
We’ve added several things since the last time we looked at it.
A: Because jQuery is a JavaScript library, any code we write needs to be included as if it were JavaScript.
Q: How does this help speed things up on our page?
A: If your .js file is included in several HTML files, your browser only asks for it once.
It stores it in the browser cache so it doesn’t have to ask the server for the file every time we go to another HTML page that references your script file.
Since this is already being included in our page as a JavaScript file, the browser already knows what to expect in the file.
Let’s make sure you can get this right every time.
Let’s make sure you can get this right every time.
Wouldn’t it be dreamy if we could write our jQuery code once, but use it again whenever we need? But I know it’s just a fantasy...
Making things function-al Now that we’ve seen how to add and remove events on our page, let’s look at another important feature that will help us master our websites with jQuery: functions.
A function is a block of  code, separate from the rest of  your code, that you can execute wherever you want in your script.
Believe it or not, we’ve been using functions all throughout the book.
By creating a custom function, you can use your own code again and again without repeating it in your script.
Instead, you just call the function by name when you want to run its code.
These are all things we have already called in our code throughout the book so far.
Custom functions allow you to organize a chunk of jQuery code by name so that it can be easily reused.
The nuts and bolts of a function To create a function, you need to use a consistent syntax that ties the name of  the function with the code that it runs.
This is the syntax for the most basic JavaScript function:
Function names? But all the functions we’ve used so far didn’t have names.
Naming your functions allows you to call them from more than one place in your code.
Unnamed functions—also known as anonymous functions—are pretty limited in how you can use them.
Let’s look at anonymous functions in more detail so you can see how limiting it is not to have a name.
Parentheses are a surefire way of telling it’s a function.
The body of the function is where you put your code.
A named function expression defines a function as part of  a larger expression syntax (typically, a variable assignment):
The first method is a function declaration, which defines a named function variable without requiring variable assignment.
Q: What is the difference between the function declaration and the named function expression?
While they do the same thing, a function declared as a named function expression cannot be used in code until after it is encountered and defined.
On the other hand, the function defined using the function declaration method can be called whenever you want to on the page, even as an onload handler.
Q: Are there any restrictions on what names we give to our functions?
Function names should never start with a number and must not use any mathematical operators or punctuation marks of any kind other than an underscore (_)
Also, spaces are not allowed in any part of the name, and both function names and variable names are case sensitive.
The anonymous function Anonymous, or self-executing, functions don’t have a name, and they get called immediately when they’re encountered in the code.
Also, any variables declared inside these functions are available only when the function is running.
Since we didn't give this function a name, we can’t call it from anywhere else in our code.
We can’t call this function from anywhere else in our code.
Earlier, we saw how anonymous functions can be used as handler functions for events.
We can also use our own custom, named functions as these handlers, and call them directly from our code.
Let’s look closer at the two functions we named two pages ago.
This one means the divs will be shown, after myElement is clicked.
The divs will be hidden, according to the rest of the function declaration.
No parentheses needed when our function is called as a handler function.
Nice work! Once you update your code file with this code, you’ll have created your first function and used it as a handler function in your click event.
Remove the click event from each box, like we learned earlier in this chapter.
How would you create a function to hide the discount code in a random box, and another to generate a random number for the discount code itself? Hint: Now that it’s part of a function.
Sometimes we want functions to do a task repeatedly, but have the result change depending on information we give it.
Our functions can accept variables passed into them—as you recall from Chapter 2, a variable is used to store information that can change over time.
When we declare a variable, the JavaScript interpreter gives us some browser memory in which we can store stuff.
We name a variable so that we can reference it later in our script.
We place a value into our variable using an equals sign.
Passing a variable to a function When variables are added (or passed) into functions, they are known as arguments.
Sometimes you may see them referred to as parameters too.
Let’s take a closer look at how to pass an argument to a function.
The function doesn’t need to know what’s contained in the variable; it just displays whatever is currently stored.
But really, you can think of  your function as a recipe—in this case, let’s say it’s for making.
You have the basic, repeatable steps for assembling a drink—a shot of  this, a splash of  that, swirl together, etc.—that compose your function, and the ingredients are your variables that you pass in.
Functions can return a value, too Returning information from a function involves using the return keyword, followed by what should be returned.
The result is then returned to the code that called the function, so we can use it in the rest of  our code.
The return type can be a number, a string of text, or even a DOM element (object)
Now that you can create your own functions, add a new function to your my_scripts.js file that accepts a single argument (called num), and then returns a random number based on the argument you give it.
Jim: Well, along with our new getRandom function, we still need another one…
Frank: …Right, one to put the discount code in a random box that can use the getRandom function.
Then, after a click happens, we can check to see if  the user clicked the right box.
Jim: Wait, what? How can we tell if  someone clicked on the right box?
Frank: Conditionals allow us to check for a particular situation and run the code accordingly.
Joe: So we could say, check if  a variable has a certain value, or if  two values are equal?
Frank: Exactly! We can even check if  there is an element inside another element, which I think will help us here.
Now that you can create your own functions, add a new function to your my_scripts.js file that accepts a single argument (called num) and then returns a random number based on the argument you give it.
OK, all that function and argument stuff is great, but how much nearer are we to finishing off the code for the Jump for Joy page?Looking.
Use conditional logic to make decisions jQuery uses JavaScript’s conditional logic features.
Using conditional logic, you can run different code based on decisions you want your code to make, using information it already has.
The code below is just one example of  conditional logic with JavaScript.
The code we want to run, if what we check turns out to be true.
The code we want to run, if what we check turns out to be false.
Note: You don’t need an else statement to balance your if statement, but it’s a good idea to include one.
The index of an element in a list refers to where it appears on the list.
Conditional logic to compare where we are in our list to our random number.
Add the discount element to the elements with the .guess_box class.
Awesome! The discount will hide itself in a different box each time.
But now that you’ve hidden the code, can you find it again?
Joe: I’m guessing we’ll need some of  this conditional magic again?
Joe: “Contain?” Hey, Frank, you might be on to something there.
Let’s take a look at what jQuery has along these lines.
A jQuery method that checks if whatever is in the first parameter contains whatever is in the second parameter.
Look for a DOM element with the ID of has_discount.
Set the message so that it will be different depending on whether users find the discount code or not.
Time to add some custom functions: one for generating a random number, one for hiding the code, and one for checking for the discount code.
Call the function when an element with the .guess_box class is clicked.
Jump for Joy needs even more help Just when you thought you were done with the Jump for Joy campaign, it looks like Emily has a few more requirements…
I was wondering, is there a way you could highlight the box before people click.
Also, instead of popping up the code, can you put it int o its own easy-to-read area.
Let me know if you think we can make these little chan ges!
Highlight whatever box visitors are on before they click it, so they know for sure what option they are choosing.
Put the discount code into its own area on the screen.
Can you think of a way to tell the user what square she’s about to choose before she clicks?
Q: Do we need to specify a return value for all our functions?
All functions return a value whether you specify one or not.
If you don’t tell a function what value to return, it will return a value of undefined.
If your code is not able to handle an undefined value, it will cause an error.
So, it is a good idea to specify a return value, even if it is something like return false;
Q: Are there any restrictions on arguments or parameters that I can pass into a function?
A: No, you can pass any object, element, variable, or value into a function.
You can also pass in more parameters than your function is expecting.
If you pass in too few, the remaining parameters will automatically be set to undefined.
A: This is a static method of the jQuery library that takes two parameters.
It checks all the child elements of the first parameter, seeing whether it contains the second parameter, and returns a true or false.
Q: What is a static method in jQuery? A: That means it is a function that is associated with the jQuery library, as opposed to any specific object.
We do not need a selector to call this method, only the jQuery name or its shortcut ($)
Q: What was that index and value about in our .each handler function?
A: The index refers to where in the loop we are, starting at 0 for the first item in the array returned by the selector.
It is the same as $(this) inside the .each loop.
Q: Why does our .each loop in the hideCode function return false?
A: Returning false in an .each loop tells it to stop executing and move on.
If any non-false return value is returned, it will move on to the next item in the list.
For our purposes, we know we have already hidden the code, so we can stop going through the rest of the elements.
Methods can change the CSS To complete our solution, we’ll need to highlight whatever box the user is hovering over before she clicks.
The easiest way we can change how an element looks is with CSS and CSS classes.
Thankfully, jQuery provides an easy way to give elements CSS classes and remove them again, with a few easy-to-use methods.
Let’s have a look at how we can put them to use in our solution.
Create these new files, separate from your Jump for Joy files, so you can observe these methods in action.
That should help you figure out how you can highlight the box before a user clicks on it.
Does this CSS change work on anything other than a click event?
You can switch up the CSS for any event type.
But for this solution, you’ll need another event to help you out.
Take a look at the list back on page 82 and see if  you can figure out which event you’ll need to use.
Test Drive Open your newly created class_test.html file in your browser.
After clicking on the Add button, your class gets applied to the div, with the ID of  header.
Add a hover event The hover event can take two handler functions as parameters: one for the mouseenter event and another for the mouseleave event.
Take a closer look at the test script you just used to see how we can use the hover event to apply behavior to an element during the time the mouse is over the element.
The addClass jQuery method allows us to add a CSS class to an element.
It does not affect any CSS classes the element already has.
The removeClass jQuery method allows us to remove a CSS class from an element.
You’ll need a new CSS class to apply the hover to, and two handler functions in your script file (after your checkForCode function) that use the addClass and removeClass methods to set the CSS class.
We’ve started those for you; you just need to write in the functions below.
Test Drive Open your index.html file in your browser, which should include your new my_scripts.js file.
Move your mouse over the images and see if  the border changes.
The image border color changes now, but there’s still more to do...
Set the CSS class of the box when the user hovers over it using this anonymous handler function for the mouseenter event.
The addClass jQuery method lets you add a CSS class to an element.
It does not affect any CSS classes the element already has.
The removeClass jQuery method lets you remove a CSS class from an element.
Now you’ve got a CSS class you can manipulate with a hover event.
That’s definitely good progress, but the message still appears in the wrong place, and it doesn’t look the way you were asked to make it look.
Plus, there’s still one requirement from the first email we didn’t cover yet.
Highlight whatever box visitors are on before they click it, so they know for sure what option they are choosing.
Put the discount code into its own area on the screen.
After the visitor has made his guess and clicked on a box, the answer should be revealed as to whether or not he got it right.
If he chose correctly, show him the discount so he can apply it to his order.
Update your checkForCode function to complete these last three things:
Put the discount code in its own area on the screen.
Show the visitor where the code was hiding, if she guessed wrong.
To help you out, we’ve created these CSS classes that you can add to your my_styles.css file to indicate if the code was found or not.
While you’re at it, add a span element with the ID of result below the four boxes to display the discount code.
Now you’ve updated your checkForCode function with all the pieces you were asked for: a separate place on the screen for a discount code, a discount code consisting of text and a number up to 100, and indications of where the discount code was, after the visitor clicks.
Check to see if this box has the discount code, using the jQuery contains function.
If it does, visually change the box to tell people where the code was...
Write the output message onto the page into its own area.
Set the output message, indicating whether the code is found or not.
Now that you’ve updated your checkForCode function, test out all the new features on the Jump for Joy website.
For comparison, your code should look like what is in  this file: http://thinkjquery.com/chapter03/end/scripts/my_scripts.js.
ConditionalsTest for logical conditions (if XYZ = true) before doing something.
Often come with an else statement if the conditional result is false, but it’s not required.
Events Objects that help users interact with a web page.
There are around 30 of them, and just about anything that can happen on a browser can trigger an event.
Just because the page is finished loading doesn’t mean it has to keep the same structure.
Back in Chapter 1, we saw how the DOM gets built as the page loads to set up.
In this chapter, we’ll look at how to move up and down.
Just because we’ve got the same parents doesn’t make us the.
Alexandra, the head chef  of  the Webville Eatery, has a job for you.
She’s been maintaining separate web pages for different versions of  her menu: the regular menu and the menu with vegetarian substitutions.
She wants you to make one page that will adjust the menu for the restaurant’s vegetarian customers.
We put our menu on the Web a few years ago, and our customers love it! We’d like you to add some buttons that let our customers change and highlight the web menu on the fly.
Before we write any jQuery, let’s look at the HTML and CSS files the web designer sent us, and see if  their style and structure are up to snuff.
If you can pull it o ff, we’d also like a leaf.
I had the web designer email you the files for.
There’s no exercise for it this time around—because you’re probably already thinking it—but be sure to write down what the requirements are in your own words so you know what you’re building here.
Below, you’ll find all the element magnets you need to complete the tree.
Using the HTML fragment for the menu on the right, complete the tree.
Each magnet will fit where you see a hollow circle.
This is just a fragment of the actual HTML page.
Fortunately for us, the current web menu has a consistent structure to it.
We need to write selectors that will find the ingredients we need to change.
This is just a fragment of the actual HTML page.
Regular web page structure (HTML) makes writing jQuery code much easier, but the ingredient elements we want to find aren’t labeled in a way that will make our jQuery code easier to write.
Class up your elements As we’ve seen in each chapter so far, we can help jQuery find elements on web pages more effectively by setting up our HTML and CSS properly.
To really make our structure sing, we should add classes and IDs to our style sheet and set our HTML elements’ attributes with the appropriate classes and IDs.
This makes selecting elements easier and saves you coding time later on.
For jQuery, selectors aren’t just about controlling the look and feel of  your page.
Selectors allow jQuery to match (or query) elements on the page, too.
You can write a selector for each ingredient you need to match...
When you set each list element’s class attribute, you put it into the meat group.
OK, so meat’s not a proper grocery-store classification for each of these items, but it’s a nice, short class name.
Find the menu substitutions the head chef wants and label each one with the appropriate class (fish, meat, or hamburger)
If an ingredient doesn’t need a class, leave the line blank.
The HTML is laid out just like your menu will appear on the page.
Find the menu substitutions the head chef wants and label each one with the appropriate class (fish, meat, or hamburger)
If an ingredient doesn’t need a class, leave the line blank.
Button things up Now that you’ve got things mostly set up, let’s go back to the napkin with the head chef ’s requirements.
Update the structure and script to make the two buttons from the napkin.
Give the “Go Vegetarian” button an ID of vegOn and the “Restore Menu” button an ID of restoreMe.
We'll need a second button that restores the menu to its original state.
Update the structure and script to make the two buttons from the napkin.
Give the “Go Vegetarian” button an ID of vegOn and the “Restore Menu” button an ID of restoreMe.
A more specific selector, using the element type and ID.
What’s next? That was quick! You’ve got the two buttons set up.
Let’s check those items off  of  the napkin and move on to the stuff  that the “Go Vegetarian” button needs to do.
We'll need a second button that restores the menu to its original state.
We want a "Go Vegetarian" button that automatically substitutes the right vegetarian option on our web page menu.
We offer tofu as a vegetarian substitute for a ll of our.
Our next task is to tackle item 1 above: match li elements of  the fish class and remove them from the menu.
So what’s the difference between the two methods, and which one should we use?
Translating requirements into stuff that your web app needs to do takes practice.
The remove method drops the element out of the DOM.
The detach method takes the selected element(s) out, but holds on to it so that it can be reattached later.
You need something torn out of the DOM for good?
I’ll take stuff out of the DOM and hold it for you.
In your own words, write the three things that the “Go Vegetarian” button needs to do.
In the space provided, write the selector and remove or detach code that will create the result shown on the right.
In the space provided, write the selector and remove or detach code that will create the result shown on the right.
When you run remove or detach on an element, all of the element’s children will be removed as well.
Remember that all of the elements matched by the selector will be detached.
When you group the elements by class or ID, you can be more specific in selecting those elements.
Test Drive Add the line of  code for the third Sharpen Your Pencil solution inside the vegOn button click function in your my_scripts.js file.
Then, open the page up in your favorite browser to make sure everything’s working.
In Chapter 1, we learned that the DOM is built like a tree.
The JavaScript interpreter in a browser can traverse (and then manipulate) the DOM, and jQuery is especially good at it.
The detach method we just looked at is an example of  DOM manipulation (i.e., we dynamically take elements out of  the DOM)
But what is traversal really all about? Let’s take one section of  the menu and visualize it as a DOM tree to see how traversal works.
Strap on your climbing gear! DOM traversal is all about moving up, down, and sideways across the DOM.
To climb up the DOM, we can use the jQuery parent method.
To climb down the DOM, we can use the jQuery children method.
To climb across the DOM, we can use the jQuery prev and next methods.
Traversal methods let you select an element and grab other elements above, below, or beside it.
Let’s take a closer look at how you can grab those elements.
Chain methods to climb farther What if  we want to climb higher, lower, or deeper? Strap on the chains, man! jQuery offers us method chaining.
Method chaining lets us manipulate and traverse our pages in a more effective way.
To go one parent higher, just add another method to the method chain.
The parent method climbs up to the element that encloses the selected element(s)
The next method climbs to the sibling to the right.
The remove method takes the element we traversed to out of the DOM.
The first parent method in the chain gets us here.
The second parent method in the chain gets us here.
The “Read Me” section at the front of the book covers browser developer tools.
Run each of the four traversal methods along with the chained detach method as shown below.
Then, write why or why not this will help us with the problem at hand.
Important: Make sure to refresh the browser after running each statement.
Go to http://www.thinkjquery.com/chapter04/traversal/ and open the JavaScript console in your favorite browser’s developer tools.
Don’t remember how to use browser dev tools? Head back to the “Read Me” section of the book to refresh yourself.
Run each of the four traversal methods along with the chained detach method as shown below.
Then, write why or why not this will help us with the problem at hand.
Important: Make sure to refresh the browser after running each statement.
This traversal method detaches the parent of the parent element of .fish.
We can pull our elements out of the DOM with detach, but what about getting them back when we need them?
We’ve seen quite a few jQuery and JavaScript constructs so far.
Which ones do we need so that we don’t forget the .fish class elements? Write a “Yes” or “No” in the “Should we use it?” column for each, and explain why you chose or didn’t choose it.
We did one for you, so now you’re down to three.
It won’t solve the problem of remembering the detached elements.
We’ve seen quite a few jQuery and JavaScript constructs so far.
Which one do we need so that we don’t forget the .fish class elements? Write a “Yes” or “No” in the “Should we use it?” column for each, and explain why you chose or didn’t choose it.
It won’t solve the problem of remembering the detached elements.
If we store the detached elements, we can bring them back later by simply referencing the variable.
Function No A function lets us perform manipulations on data.
The problem with the detached elements is a problem of storing data, not manipulating it.
Selector No A selector selects elements based on what’s in the DOM.
What we need is a way to store those elements.
Q: I get remove and detach, but what if I just want to get rid of something inside an element and not the element itself?
Q: Is there a way to traverse all of an element’s parent elements?
In addition to the parent method, jQuery also offers the parents method, which lets you traverse all of the selected element’s parent elements.
You’ll see this method in action later in this chapter.
Q: What if I want to get the parent element nearest to the selected element?
Like the parents method, the closest method will climb through an element’s parent elements, but it stops when it finds a match.
Q: I know about next and previous, but what if I want to traverse all of the elements on the same level of the DOM tree?
A: Fortunately, the jQuery team has thought of that one, too.
The siblings method will traverse all of the elements at the same level as the selected element.
The reason we can run jQuery in Chrome’s browser dev tools is that we’ve included jQuery in the HTML page.
If you visit a web page that doesn’t use jQuery, don’t expect the Chrome JavaScript console to run jQuery statements.
Variables can store elements, too Variables must be pretty useful because we find ourselves needing them again.
We’ve seen variables throughout the first three chapters, but we’ve only used them to store numbers and text strings.
Wouldn’t it be convenient if  JavaScript variables could store our elements too? As it turns out, they can.
If  we want to keep them to use in our program later, it’s a good idea to put them into a variable.
Using the jQuery library, the JavaScript interpreter asks the DOM for the selected elements.
The DOM grabs the selected elements and returns them to the interpreter.
Hey, DOM, give me back all of the elements on the page that have a class.
Putting a dollar sign in front of the variable indicates that it’s storing elements returned from jQuery.
There’s that dollar sign again… Storing our elements is simple.
We create a variable, just as we have for numbers and text strings, and set the variable (using the equals sign) to the statement that returns elements.
But wouldn’t it be good to know when the variable is storing special stuff  like elements (versus just numbers or text strings)? It’s common practice among jQuery coders to place a dollar sign in front of  a variable that will be used to store elements returned from jQuery.
That way, anyone else who looks at our code knows that we are using the variable to store stuff  that we got from jQuery.
It is messy to store different elements in a variable.
Cramming all those different elements into a single container seems pretty messy.
Any time we select elements from the DOM and store them in a variable, jQuery returns the data as an array.
An array is simply a variable with greater storage options.
The array itself is really just a data structure that can hold multiple variables (like this test-tube holder holds multiple test tubes)
We can put stuff  in and take things out of  each storage slot.
To put the value “15” into the third slot, we would write this:
Arrays don’t have to start with a dollar sign ($)
The practice of indicating a jQuery array with a dollar sign is a coding convention of jQuery developers.
When we select and detach the li elements and set a variable ($f) to the result, jQuery takes the elements the DOM returns and stores them neatly for us in a JavaScript array.
When we want to put those elements back with the restore button, our job will be way less messy.
Each of the detached elements goes neatly into its array slot in $f.
Remember: the contents are still in each of the elements, too.
Then, open the page up in your favorite browser to make sure everything’s working.
We’ve seen how to take elements out of the DOM, but how do we dynamically replace DOM content with different content?
Change out elements with replaceWith The replaceWith method allows you to replace selected element(s) with new ones.
Whenever you want modify the DOM by exchanging one thing for another, you can use this handy jQuery method.
Write the code that will find the li elements in the hamburger class and replace them with li elements in the portobello class.
How can replaceWith help? You need to match li elements in the hamburger class and replace them with an li element of  the portobello class.
Let’s think about that problem before we write our code.
This is what the page should look like after the code runs.
Test Drive Add the replaceWith code inside the vegOn button click function in your my_scripts.js file.
Then, open the page up in your favorite browser and press the “Go Vegetarian” button to make sure everything’s working.
Write the code that will find the li elements in the hamburger class and replace them with li elements in the portobello class.
The replaceWith method dynamically trades the selected content for the element in the parentheses.
The main thing to remember is that you can put HTML in the parentheses.
But the scenario of  trading out elements for the next item on our checklist isn’t one for one.
We have to replace many different kinds of  ingredients (i.e., turkey, eggs, steak, lamb chops) with one ingredient (tofu)
But when we want to select tofu and replace it later, we have a problem.
When we want to put the different kinds of  meat back in, the DOM has forgotten about them.
We could replace tofu with just one of the types of  meat, but that’s not what we wanted at all.
So we’ll need to accomplish this menu substitution in two steps:
Later on, the DOM’s forgotten all the different types of meat.
Insert li elements of the tofu class into the DOM after the meat elements.
Detach the elements of the meat class and hold them in a variable.
Insert li elements of the tofu class into the DOM after the meat elements.
Detach the elements of the meat class and hold them in a variable.
Up to this point, we’ve either removed or replaced elements in the DOM.
Fortunately for us, the creators of  the jQuery library gave us many ways to insert stuff  into the DOM.
Write the jQuery code that will accomplish each step to our solution.
You’ve accomplished each of  the steps for the “Go Vegetarian” button:
Up next, we need to build the “Restore Menu” button.
Let’s dig right in and look at what we need to do for the first one.
We know how to use before, but how do we specify the first child?
Insert li elements of the tofu class into the DOM after the meat elements.
Detach the elements of the meat class and hold them in a variable.
Write the jQuery code that will accomplish each step to our solution.
Use filter methods to narrow your selections (Part 1) Fortunately, jQuery provides filtering methods that let us narrow our selection for problems like finding the first child.
Let’s look at six of them (three on this page, three on the next)
The first method will filter out everything but the first element in a selected set of  elements.
The eq method will filter out everything but the element whose index number is equal to what you put in the parentheses in a selected set of  elements.
The last method will filter out everything but the last element in a selected set of  elements.
Let’s look at one item from our menu to see how these methods work:
The first method narrows down the selected elements to just the first one.
The last method narrows down the selected elements to just the last one.
The eq method narrows down the selected elements to just the element whose index number.is in the parentheses.
Remember that jQuery returns our selected elements in an array.
The index number we put in the eq method refers to its slot in the array.
Now let’s check out the slice, filter, and not methods, and how they work.
The filter method will filter out everything but elements that match the selector you put in its parentheses.
The not method will filter out everything that does not match the selector you place in the parentheses.
The slice method narrows down the selected elements to those between the two index numbers you put in parentheses.
The filter method narrows down the selected elements to the selector you put in parentheses.
The not method narrows down the selected elements to those that do not match the selector you put in parentheses.
Which of these methods will help you specify the first child on the menu?
The filter and not methods let us use selectors to create a subset from the matched set using selectors as arguments of  their methods.
Draw a line from the jQuery statement to the element(s) in the DOM the selector will return.
Draw a line from the jQuery statement to the element(s) in the DOM the selector will return.
So far for the “Restore Menu” requirement, we’ve got one item down, two to go:
Write the code that will find the li elements in the portobello class and replace them with li elements in the hamburger class.
We wrote part of the answer for you—you’ve got the rest.
What did we do with those li.meat elements again? Let’s review:
We’re down to our last item for the “Restore Menu” button:
Then, we detached the li.meat elements but held on to them by saving them into $m.
We put li.tofu elements into the DOM after the meat elements.
So where are those elements, and how do we bring them back?
The replaceWith method dynamically trades the selected content for the element in the parentheses.
Remember that whenever we store jQuery elements, we give the variable a dollar sign to signify that the variable we’re using has a special kind of  storage.
In this case, it’s a jQuery array, and here’s how the elements in $m are stored:
You need to put each li.meat element back in for each li.tofu element.
You’ve seen many methods that put elements into the DOM.
In Chapter 3, you saw how to use the each method to loop through elements.
We can use it again here to loop through all the meat elements in the $m array and put them back where they were.
But to do that, we’ll need to check out a bit more about how the each method works.
The variable i starts at 0 and counts each element as that element is processed.
The each method processes the elements in the array one by one and does something to each one.
We’re using the after method here, but you can use any jQuery method to do stuff to an array of elements.
When we select our paragraph element, jQuery stores what we selected in an array.
We want to put meat elements in for each li.tofu element.
It lets you work on one element in an array at a time.
The function lets us do something to each element as it's processed.
The each method is like an assemblyline machine for your elements.
The this keyword refers to the element that the function’s working on.
The index (or iterator) keeps track of the element that the function is working on.
We put back the meat elements by referencing the $m array and the index that matches the tofu elements the function is working on.
That’s it…right? You did everything required for the “Restore Menu” button.
If you can pull it off, we’d also like a leaf icon to s how.
Q: I get the other filter methods, but slice still confuses the heck out of me.
Can you give me a more in-depth explanation of it?
The most confusing thing about slice are its parameters: slice(start, end)
The first parameter is the start parameter, and you have to include it, or slice won’t work.
The start parameter tells where to start the selection within an array of elements.
If you put in a negative number, slice will start counting backward from the end of the array rather than forward from the beginning.
Q: OK, so what does the end parameter of the slice method do?
A: The slice method’s second parameter, the end parameter, is not required.
If you don’t include it, slice will select all elements from whatever the start parameter is set to and will select all of the elements in the array that are greater than the start parameter.
A: The real power comes from combining each with the this keyword.
The each method keeps track of its index automatically and “knows” which element it’s working on.
You should only use each when you’ve selected multiple elements.
To reference the current element, you use this but wrap it with the jQuery shortcut: $(this)
Q: Why do I have to put the “i” or “index” inside the each function?
A: The index variable, often called “i” or “index,” is used by the each function to keep a count of the element each is working on.
That way, the each function knows when it’s done processing.
If each didn’t have an index variable, it wouldn’t know which function to work on and it wouldn’t be able to stop.
Q: How can I find elements within a jQuery array?
Q: Does jQuery give us a way to wrap an element inside of another element?
Just a little DOM transversing, plus some addClass magic, and you’re done!
This is great! Our customers love the new web menu, and the best thing is that we no longer have to maintain two different menus.
Add the code for the “Restore Menu” button and the code for adding and removing the veg_leaf class where you make vegetarian substitutions.
You can always download the files for this chapter from http://www.thinkjquery.com/chapter04/ and compare them to your code.
Now Alexandra can focus on cooking up some tasty new menu items instead of worrying about the website.
Your jQuery Toolbox You’ve got Chapter 4 under your belt and now you’ve added DOM.
You use element relationships with associated methods like parent and child to get where you want.
Chaining methods is an efficient way to traverse the DOM quickly.
Filters Filter methods help you narrow down a set of selected elements: first.
You’ll also see how to schedule these animations so they.
Look at how well I can move around; I’m so graceful.
A few years ago, DoodleStuff  started up a popular website that provides interactive art apps for kids.
The company’s fan base has grown so fast that it has trouble keeping up with requests.
To cater to DoodleStuff ’s new, wider audience, the web projects director wants to build an app that doesn’t use Flash or any other browser plug-ins.
Our kids’ projects are all about making things fun and being hands on.
Do the Monster Mashup Here’s the project blueprint from the web projects director, along with the graphic designer’s files for the app.
You have a lot of  detail on the project requirements and the graphic files you need, but the graphic designer didn’t write any HTML or CSS—that’s where you’ll need to get started.
What do you need to do to set that up?
Monster Mashup Project The Monster Mashup application is intended to entertain children in the target age group by allowing them to “mash up” their own monster head by mixing 10 different heads, eyes, noses, and mouths.
The transitions between the monster face parts should be animated.
A mockup of how a monster face part should change.
After nine clicks, each strip should “rewind” to the beginning.
The lightning images should fade in and then out quickly, as if they are flashing.
We’ve certainly had a lot to say about getting your structure and style right out of  the gate before you write any jQuery.
And it’s even more important now—if  you don’t get your layout and position right up front, your effects and animations can go wrong, fast.
There’s nothing worse than staring at your jQuery code and wondering why it’s not doing what you want it to do in the browser.
It’s a good idea to sketch up your ideas and think about what’s going to happen on screen.
Place the image strips using img elements nested in the appropriate div for the monster face part.
For example, the img tag for headsstrip.jpg will reside inside div#head.
The monster’s face will be made up of four more divs to hold each of the image strips.
For each blank line in the HTML and CSS files, write in the CSS ID, property, or setting that will help lay out and position the Monster Mashup app.
When in doubt, look at the previous two pages for guidance.
For each blank line in the HTML and CSS files, write in the CSS ID, property, or setting that will help lay out and position the Monster Mashup app.
When in doubt, look at the previous two pages for guidance.
When we animate the position of elements, we need to use absolute or relative positioning.
You could also use the CSS “clip” property for this.
Next up are the structural changes to the HTML and CSS files.
Add the code below to your index.html and my_style.css files.
When we want to animate elements, we need their position property set to absolute, fixed, or relative.
We want the lightning images to start out as invisible.
Add a container and nest the lightning images inside of it.
After nine clicks, each strip should “rewind” to the beginning.
Now that we have the Monster Mashup laid out visually, let’s set up the rest of  the user interface section called for in the blueprint.
This part is all about clicking to make stuff  happen, and you’ve done that for four chapters now.
You’ll have to keep track of each click so that you can rewind the image strip.
Each area has to be clicked to advance the image.
Why do we need it for jQuery effects and animation?
A: position is a CSS property that controls how and where elements are placed by the browser’s layout engine.
If you’re rusty and need a refresher, check out this excellent explanation at Mozilla’s developer’s center:
Q: Why do we have to set the CSS position property to absolute, fixed, or relative when we want to animate elements ?
A: If we leave the CSS position property set to its default setting (i.e., static), then we can’t apply top,right, left, or bottom positioning.
When we get to the animate function, we’ll need to be able to set those positions, and static simply doesn’t allow for that.
A: The browser layout engine is the core part of a browser that interprets the HTML and CSS code and displays it in the browser’s viewport (the window that displays content to the viewer)
Firefox uses the Gecko layout engine, and Microsoft Internet Explorer use a layout engine called Trident.
Make sure to sequence the variables and conditional statements in the right order so that you can detect the ninth click.
Absolutely! Each of  the elements follows a similar pattern to the div#head element (with a few variations in things like the variable name)
Make sure to sequence the variables and conditional statements in the right order so that you can detect the ninth click.
You start the variable at 0 because nothing’s been clicked yet.
Set the headclix variable to whatever it was before plus one.
Here’s where you’ll eventually put the code to rewind the image strip.
Reset the headclix variable to 0 after the ninth click.
If headclix is greater than or equal to 9, do this next stuff.
Could we reuse this code somehow to make the other elements clickable?
Fill in the jQuery script below to make the eyes, nose, and mouth elements clickable.
We’ll add some functionality to each click in a bit.
Make sure to sequence the variables and conditional statements in the right order so that you can detect the ninth click.
Notice how each function inside the click is structured in a similar way with minor variations? This might be a good case for reuse.
Each part of the monster face is now clickable and is set up to allow only nine clicks before rewinding the image strip.
You’ve made the eyes, nose, and mouth elements clickable by sequencing the variables and conditional statements in the right order so that you can detect the ninth click.
The lightning images should fade in and then out quickly, as if they are flashing.
Make the lightning effect Next up is the lightning effect.
Let’s review what the blueprint calls for before trying to make the effect work.
We looked at jQuery’s out-of-the-box effects in Chapter 1, but let’s dig in a little more.
We did something kinda similar in Chapter 1 with slides and fades.
How does jQuery animate elements? When the browser loads a CSS file, it sets the visual properties of  the elements on the page.
Using jQuery’s built-in effects, the JS interpreter changes those CSS properties and animates the change right before your eyes.
The JS interpreter changes the CSS display property of  the selected element so that it becomes visible.
The JS interpreter changes the CSS display property of  the selected element to none and removes it from the layout.
If  an element is hidden, the JS interpreter will show it, and vice versa.
But we need to slide the face parts around and fade the lightning in and out this time around.
What CSS properties do you think jQuery changes with fades and slides?
The CSS opacity property doesn’t work the same across browsers.
And, really, that’s all you have to know about that!
The JavaScript interpreter tells the DOM to change the CSS height property for the selected element(s) to 0 and then sets the display property to none.
The JavaScript interpreter makes the selected element(s) appear by animating its height from 0 to whatever the height is set to in the CSS style.
The JavaScript interpreter checks if  the image is at full height or 0 height and switches the slide effect depending on what it finds.
If  the element has a height of  0, the JavaScript interpreter slides it down.
If  the element is at its full height, the JavaScript interpreter slides the elements up.
Hey, DOM, reduce the height of the selected element to 0, and then change the display property.
Which of jQuery’s out-of-the-box effects will work for the Monster Mashup app? For each effect group, answer whether it will help us and explain why you chose or didn’t choose each one.
You won’t find a slideRight or slideLeft method in jQuery (at least at the time of  this writing)
You won’t find a slideRight or slideLeft method in jQuery.
So I can only slide stuff up and down? What if I want to slide something to the left or the right?
Which of jQuery’s out-of-the-box effects will work for the Monster Mashup app?
Show/Hide No Show/hide effects won’t help us with Monster Mashup because we don’t need to animate the display property of anything.
SlideUp, slideDown, and slides only let us change the height property.
Fades Yes We can use the fade to meet the spec on the blueprint that says the lightning images should fade in and then out quickly, as if they are flashing.
The blueprint calls for the lightning images to fade in and out, but we need to do this quickly so it looks like they’re flashing.
Let’s dig into fade effects a bit deeper to see how we can make the lightning work.
It controls how long it takes for the effect to complete.
You can use one of the string parameters: slow, normal, or fast…
For example, you could put in 1000, and the effect would take one second to animate.
Chain another effect that fades out the #lightning1 element in one-quarter of a second.
Combine effects with method chains The lightning will need to fade in and out, and over and over again.
Instead of  writing those effects separately, you can use chaining, which you used briefly in Chapter 4 when you needed to climb up the DOM.
Method chains are a feature of  jQuery that links together methods to run on a returned set of  elements.
They’ll make the lightning effects easier and cleaner to write, so let’s take a closer look.
Each method you add is like a link in a chain.
The element’s display will change from hidden to visible with full opacity…
If you don’t put a duration in the parentheses, the effect.
Here’s the name we’ll use when we want to call the function.
The setTimeout method tells the JS interpreter to run a function and then wait for a while before running it again.
You tell the JS interpreter that you want the function to call itself over and over again.
It’s in milliseconds, just like the effects duration we looked at a few pages ago.
In just three lines of code, you have a timed lightning function for the first lightning image.
Now, try writing the functions for the other two lightning images.
So now you’ve got lightning that can fade in and out, but the project requirements are for the lightning to keep striking.
Real lightning zaps through the sky and then there’s usually an interval of  time before another zap crosses the sky.
So we need a way to do the fade repeatedly.
Think back to earlier chapters where you needed to do a repeated task; what did you use? That’s right: functions! They showed up first in Chapter 3 to make a reusable click function and a randomizer, and now you can use functions to run the fades, wait a bit, and then do them again at a given interval.
That will provide the slick effect of  lots of  flashing lighting for the Monster Mashup.
Let’s take a look at a function that will do this.
Write the line of jQuery code that will accomplish each of the steps shown below.
Chain another effect that fades out the #lightning1 element in one-quarter of a second.
The toggle method is a single method that just switches the selected element from its hidden state to its visible state or vice versa, depending on what the selected element’s current state is.
Placing fadeIn and fadeOut in a chain creates a sequential effect that will first make the selected element(s) fade into view and then, when that effect has finished, fade it out of view.
A: The setTimeout method is actually a JavaScript method that you can use to control some aspects of jQuery animations.
Q: When I use the hide effect, the element just disappears.
The numbers in parentheses are parameters in milliseconds that will be passed to the setTimeout method.
We took out some of the line breaks to save space on this page.
Using the code you put together in the exercise on the previous page, update your script file for Monster Mashup.
These lines call the functions that are defined in bold at the very bottom.
Monster Mashup Project The Monster Mashup application is intended to entertain children in the target age group by allowing them to “mash up” their own monster head by mixing 10 different heads, eyes, noses, and mouths.
The transitions between the monster face parts should be animated.
A mockup of how a mo nster face part should.
Test Drive Open the page up in your favorite browser to see if  your lightning effect was successful.
You accomplished the lightning fade effect by combining it with JavaScript’s setTimeout method.
So far, you’ve got the click functions working, and you made the three lightning images fade in and out at different intervals.
Let’s take a look at the blueprint to see what’s left to do.
Out-of-the-box effects are great, but they don’t let you do everything you want.
It’s time to make a custom effect that will slide the monster face parts left.This chunk of the blueprint is our last challenge for the project.
The lightning fades in and out quickly at different intervals, simulating real lightning.
So, now we’re at the point where we need to slide these left, and none of the out-of-the-box.
Does this mean that your Monster Mashup project is dead?
Never fear—jQuery offers the animate method for building your own effects.
With animate, you can create custom animations that do many more things than the out-of-the-box effects do.
The animate method allows you to animate CSS properties of  the selected element(s), and it also allows you to animate multiple properties at the same time.
Let’s have a look at some of  the things you can do with the animate method.
You can animate CSS position properties to create the illusion of an image element (like the mummy here) moving across the screen.
What CSS property will you need to animate to make the monster face parts slide left on each click?
You can animate CSS height and width properties to create the illusion of growing or shrinking an element.
What can and can’t be animated With the animate method, you can also dynamically alter font properties to create text effects.
You can also animate multiple CSS properties in one animation call, which adds to the palette of  cool stuff  your web app can do.
As cool as the animate method is, it has some limits.
Under the hood, animation uses lots of  math (which, thankfully, you don’t have to worry about), so you are limited to working only with CSS properties that have numerical settings.
Know your limits, but let your imagination run wild—animate offers all kinds of  flexibility and fun.
I’m shrinking, shrinking! Oh, what a world, what a world!
I’m shrinking, shrinking! Oh, what a world, what a world!
I’m shrinking, shrinking! Oh, what a world, what a world!
I’m shrinking, shrinking! Oh, what a world, what a world!
I’m shrinking, shrinking! Oh, what a world, what a world!
You can animate CSS font properties to create the illusion of text flying, growing, or shrinking.
We’d need many, many, many more pages to show all of the possibilities.
The animate method will only work on CSS properties that use numbers for their settings.
The first parameter of animate allows you to select the CSS property you want to animate.
This lets you control how long it takes for the animation to complete.
The first argument is required—you have to put it in there for animate to work.
But one of  the most powerful features of  animate is its ability to change multiple properties of  the selected element(s) at the same time.
In this example, we’re animating the element’s opacity and size simultaneously.
On the surface, animate works a lot like other methods you’ve already worked with.
The parameters for CSS properties have to be set using the DOM standard, not the CSS standard.
What do you think is happening behind the scenes in the browser that allows the animate method to change things in front of the user’s eyes?
The visual effects and animation you see on a movie or television screen use the illusion of  motion.
Effects technicians and animators take a sequence of  images and play them one at a time at a specific rate to accomplish that illusion—you’ve likely seen the low-tech flip books that accomplish this effect as you fan through the pages.
The same thing happens with a browser screen, except that we don’t have a series of images to work with.
Instead, the JavaScript interpreter repeatedly runs a function that changes the style of  the animated element.
The browser draws (or repaints) these changes to the screen.
The user sees an illusion of  motion or change to an element as that element’s style changes.
When animate runs, the JavaScript interpreter sets a timer for the duration of the animation.
The JavaScript interpreter tells the browser’s layout engine to change the CSS property specified in the parameters of the animate method.
The browser’s layout engine renders those CSS properties visually onto the screen.
The visitor sees the illusion of movement as the browser renders the changes to the element.
The JavaScript interpreter repeatedly calls the function that changes the CSS property of the element until the timer set in step 1 runs out.
Each time that function runs, the change shows on screen.
Looks like I can fit that in over a few milliseconds.
I’d like to schedule a repaint of the screen, please.
Animates the change to all paragraphs’ left and right margins simultaneously.
Animates the space between letters for all paragraphs with default duration of  400 seconds.
Animates the change to #my_div’s top position with a slow duration.
Animates the height of  all images with a fast duration.
Animates the change to #my_div’s width in a quarter of  a second.
Match each chunk of  custom animation code to what it does when it runs.
Match each chunk of  custom animation code to what it does when it runs.
Animates the change to all paragraphs’ left and right margins simultaneously.
Animates the space between letters for all paragraphs with default duration of  400 seconds.
Animates the change to #my_div’s top position with a slow duration.
Animates the height of  all images with a fast duration.
Animates the change to #my_div’s width in a quarter of  a second.
An important thing to remember about animate is that it changes the current CSS property to the CSS property that you set in the first parameter.
To make your custom animation effective, you need to think hard about what you have currently set in the CSS.
What will happen on screen depends entirely on the current CSS left property setting of  #my_div.
If  the current property is a different value, we’ll get a different result.
To make the Monster Mashup monster face parts slide the way we want them to, we have to think about what their current positions are and how we want them to change relative to what their positions were the last time animate changed them.
This is fascinating, but how will we use it to make Monster Mashup work?
Relative animation = move it this much each time With an absolute animation, you move an element to an absolute postion on the visual grid.
With a relative animation, you move the element relative to where it was the last time any animation moved it.
Remember that we nested the image strips we want to show inside a div with an ID of  #pic_box.
To achieve the left slide effect that we want, let’s think about how we want to move the image strips.
Each time the user clicks, we want to move the image strip 367 pixels to the left.
So we need to tell the animate method to move the image -367 pixels each time the function is called.
Think about the example of  absolute animation on the previous page.
But how do we tell it to move an element -367 pixels every time the animate method is called?
But how do we make an element move relatively with the animate method?
There are some special JavaScript operators that move element(s) the same amount every time the animate method is called.
These are known as assignment operators because they are normally used to assign a value to a variable in such a way that the variable adds the new value to its current value.
It sounds a lot more complex than it really is.
When you combine arithmetic operators with equals, you end up with some useful shorthand.
The = operator assigns the value 20 to the variable a.
This moves the element with an ID of box 20 pixels every time the animate method is called.
These operator combinations help you create a relative animation by allowing you to set a value to what it’s currently at plus or minus a number of  pixels.
Here’s what will happen to #box every time the animate method above is called.
By advancing the element’s left position each time, we’re actually moving it to the right in the browser window.
Q:Some people don’t want animation to interfere with their web page experience.
What do I do if I want to let a user turn off the animation?
If you want users to turn off your web page animation, you can wire up a click button (you already know how to do that) to this line of code:
Another useful method for stopping animation is a jQuery method called stop.
You can find out more about both of these topics at the jQuery site:
Q: You say, “The parameters for CSS properties have to be set using the DOM standard, not the CSS standard.” What the heck does that mean?
A: Great question! The animate method takes parameters written in the DOM standard (aka DOM notation) instead of CSS notation.
To set the width of a border for a div in CSS notation, you would do this:
Now, let’s say you want to animate that border’s width.
In jQuery you set the border width property using DOM notation, like this:
Note that in the CSS notation, you write border-width for the property, whereas in DOM notation, you write borderWidth property.
If you want to read more about the difference between these two notation styles, read this article:
Q: What if I want to animate a color change?
A: To animate color transitions, you need to use jQuery UI, which adds more effects than are included in jQuery.
We cover jQuery UI in Chapter 10, but not effects.
Once you know how to download, theme, and include jQuery UI in your web app, animating color is pretty easy.
Write the line of jQuery code that will accomplish each of the steps shown below.
Using the code you put together in the exercise on the previous page, update your script file for Monster Mashup.
We can use the “this” keyword here, because we’re inside the function for the element we clicked.
Test Drive Open the page up in your favorite browser to make sure everything’s working.
With a few clicks, the visitor can  mash up his own monster face.
It’s your standard crossword; all of the solution words are from this chapter.
Parameter that controls how long it takes for the effect to complete.
Creates the illusion of an element moving on the screen.
Effect method that lets you animate the selected element to a specific opacity.
The animate method will only work on CSS properties that have _______ values.
You can animate CSS ______ and width properties to create the illusion of growing or shrinking an element.
The effect to use when you want to animate an element’s height property.
When you want to animate elements, you need their position property set to ________, fixed, or relative.
Effects method works like this: if the selected element has a height of 0, the JS interpreter slides it down.
If the element is at its full height, the JS interpreter slides the elements up.
The jQuery library offers this method when you want to build custom effects.
The web projects director is pleased with the results of  Monster Mashup.
You used jQuery’s out-of-the-box effects combined with your own custom effects tailored to the customer’s needs.
This is awesome! I’m going to scare my little sister with the monster I made!
This is cool! I’ve made so many monsters, I’ve lost count!
Parameter that controls how long it takes for the effect to complete.
Creates the illusion of an element moving on the screen.
Effect method that lets you animate the selected element to a specific opacity.
The animate() method will only work on CSS properties that have _______ values.
You can animate CSS ______ and width properties to create the illusion of growing or shrinking an element.
The effect to use when you want to animate an element's height property.
When you want to animate elements, you need their position property set to ________, fixed, or relative.
Effects method works like this: if the selected element has a height of zero, the JS interpreter slides it down.
If the elements is at its full height, the JS interpreter slides the elements up.
The jQuery library offers this method when you want to build custom effects.
Your jQuery Toolbox You’ve got Chapter 5 under your belt and now you’ve added.
Slide effects Change the height property of CSS elements: slideUp slideDown slideToggle.
Although it is a JavaScript library, unfortunately it can’t do everything its parent.
We would REALLY like a blackjack application for our site.
Ideally, the player would click and get dealt two cards , with the option to ask for.
Here’s the house rules we would want included in the g ame:
If a player’s cards add up to more than 21, then she is bust and must start again.
If a player’s cards add up to exactly 21, then she ha s gotten a blackjack and the.
If a player’s cards add up to 21 or less, but she has already been dealt five.
If none of those conditions is met, players can ask for another card.
If one of the rules/conditions is met, then end the ga me.
Give the players the option to reset and play again.
But we don’t want them to have to reload the page.
Can you do that for us? We’d be ever so grateful!
Spicing up the Head First Lounge Lucky you, news of  your jQuery prowess is spreading far and wide.
Check out this email from the Head First Lounge asking for some help to increase the entertainment level for its visitors.
Jim: Hey, have you guys read the email from the Head First Lounge folks?
Frank: Yeah, it looks like they want an easy-to-play blackjack game on their site.
Jim: Straightforward? But it’s blackjack! We need a deck of  cards, a dealer, a counter for the hand, and more.
Joe: It’s not going to be easy, but I think we can get it done.
Like you said, we’ll need something to deal the cards.
We’ve already written a random function before, so we can probably use that again.
Frank: We can just have a big list of  them and pick a random one from the list each time.
Jim: But how do we avoid picking the same card twice?
Jim: Wow, that’s impressive! And what about remembering which cards we have already? And counting them up as we go?
There are quite a few JavaScript and jQuery features we can use to help us out here.
Jim: Wait, wait, JavaScript? Can’t we use variables or jQuery arrays to remember our cards? I thought we really didn’t have to get into a bunch of  JavaScript if  we’re using jQuery…
They can only really store one value at a time, like a number or a string of  text, or a particular element on the page.
And a jQuery array can hold multiple values, but only of  DOM elements returned by a selector…
Joe: Correct again! And we’re going to need JavaScript to create our own structures…
Objects offer even smarter storage The data structures you’ve used so far are variables and arrays.
Variables offer simple storage: they assign one value to one name.
Arrays let you store more data more efficiently by letting you create multiple values with one variable name.
The data is now collected under one grouping for a plane.
A variable remembers one value when you assign the value to the variable name.
An array remembers multiple values when you assign those values to the variable name.
You use objects when you need to store multiple variables about a particular thing.
Inside of  an object, a variable is called a property.
An object can also contain functions that let you interact with the object’s properties.
When you build such a function inside of  an object, it’s called a method.
Use objects when you need to store multiple pieces of data about a particular thing.
You can get at any of an object's properties using dot syntax.
Build your own objects Objects are essentially a way to create your own custom variables exactly how you want them.
You can create one-time-use objects, or create your own object blueprint that you can use again and again.
We’ll look at reusable objects in a little bit, but for now let’s discuss how to create a one-time-use object and some of  the terms and diagrams associated with an object.
Objects can be described in a standard way, using a UML (Unified Modeling Language) diagram.
When an object has a variable associated with it, we call that a property of  the object.
When an object has a function associated with it, we call that a method of  the object.
You create one-time-use objects using the var keyword, just like for all the other variables you’ve seen so far.
As it turns out, nearly everything in jQuery and JavaScript is an object.
This includes elements, arrays, functions, numbers, even strings—and they all have properties and methods.
This structure helps you see how your object is structured before you write any code.
Create reusable objects with object constructors One really nice aspect of  objects is that they can have the same structure but hold different values for their properties (or variables)
Just like creating reusable functions—like we did in Chapter 3—we can create an object blueprint, or object constructor, so we can use it multiple times.
An object constructor can also be used to create instances of  the object.
The constructor is just a function, so in order to create a constructor for an object, you use the keyword function instead of  the keyword var.
Then, use the new keyword to create a new instance of  the object.
Can you think of a place where you can use these objects?
Hmm, like a blueprint for a house, if I design it once, I.
Interacting with objects Objects come in all shapes and sizes.
To get a feel for how this works, let’s take a closer look at the myCountry and myPerson objects that we just defined.
Pass in these values as arguments to the new function to set these as the property values.
Access the name property of the myPerson object instance, called actor1
Use the “new” command to create a new instance of an object.
Let’s set up the HTML page and then have a look at how we can go about creating a card object.
Could I create an object to represent cards in a deck for the Head First Lounge?
Am I going to get to deal these cards sometime soon??
Create your HMTL and CSS files using the information below.
Don’t forget to create a my_scripts.js file, too, in your scripts folder.
We’ll be adding plenty of  code to that in the coming pages.
You can download all the image resources for the entire chapter from http://thinkjquery.com/chapter06/images.zip.
Using the UML diagram for a card object given below, create a reusable object called card that takes three parameters called name, suit, and value.
Set these parameters as the values of the object’s properties.
We’ve filled in some of the code for you already.
Test Drive Open up the index.html page you just created in your favorite browser to see the basic structure of  the page.
A: One-time use objects are simply a fancy variable defined to hold multiple pieces of information.
After you define the template for a reusable object with its properties/ methods, you can create as many copies of this object as you want—each with different information describing the object.
Q: It looks like you’re using different ways of setting properties.
You can assign the value of properties using the assignment operator (=) or the colon (:) symbol, just as we did for our objects.
Using JSON, we’ll access properties with a slightly different method, which can also be applied to your JavaScript objects here.
Q: Where did UML come from? A: UML was born in the mid-90s when companies were trying to get a clear method of describing objects.
There have been several iterations of it since, with several private companies competing to have their version as the accepted standard.
Thankfully, though, there is a standard, and anyone using UML will be able to read and understand diagrams and information from other UML sources.
The return of arrays As you’ve already seen, we can group several items into a single structure called an array.
The items in an array are not necessarily related to one another, but accessing their values becomes a lot easier this way.
Back in Chapter 4, we saw how a jQuery selector returns items and stores them in an array.
Now we’re going to use JavaScript to get even more utility out of  arrays.
Variables in an array can be any type, including strings, numbers, objects, even HTML elements! There are several different ways of  creating your own arrays:
And, as we mentioned earlier, arrays are objects too, which means they have methods and properties.
This denotes how many items there are in the array.
Create an array, without the “new” keyword, but set the values by enclosing them in square [ ] brackets.
Create an array, using the “new” keyword, and also say what the values of the array are.
There is no difference between the various ways of creating arrays.
It’s common to mix and match the different ways, depending on.
Look up “JavaScript array methods” in your favorite search engine to find all the methods the array object has.
So that card object is going to be super useful, but we still need some way of keeping track of individual cards as they’re played, right?
We need a way to store and access cards as they’re dealt.
Good thing is, we’ve already seen how to do this…
Accessing arrays Unlike with creating arrays, there is only one way to access the information inside an array.
We used the index back in Chapter 3, so you can always go back there for a refresher if  this isn’t clicking.
There’s no need for quotes when accessing an array by index.
Always use square brackets [ ] to access items in the array.
Trying to access an index that doesn’t exist will result in an “Undefined index” error.
The index of an item in a list refers to where it appears in the list.
OK, so now we’ve got an array with some stuff in it, but are we stuck with what we initially put in there?
Definitely not! It’s easy to add, change, and delete items in an array.
Add and update items in arrays We can add as many items to an array as we want.
We can add or update items in an array, and to do that, it’s again all about the index.
Here are a few different approaches to updating an array:
Set the value of the first item in the my_arr1 array.
Update the value of the first item in the my_arr1 array.
Update the value of the third item in the my_arr3 array.
Remember to enclose the values in your array in square brackets.
But we have a lot of cards in an array now.
It seems like we’d be writing a whole lot of code to get them back out again.
You should use the card object you’ve already created and call the constructor each time with the correct parameters to create each card.
We will still access each item by its index, but we can use a technique similar to each, which we saw back in Chapter 3, to access each item in turn without writing a ton of  code for every card.
Pass in the three parameters for each of the card objects.Set the name of the ar.
Perform an action over (and over, and over…) You’re going to be putting cards into and getting info back out of  arrays quite a bit for this blackjack game.
Thankfully, JavaScript comes prepared for just this scenario with loops.
And the even better news is you’ve already done this before: back in Chapter 3, you used the each jQuery method to loop through elements based on a jQuery selector.
But in this case, we’ve got more options, as JavaScript has several different types of loops, each with a slightly different syntax, and each with its own purpose.
Good thing I like doing things over and over again!
Initialization This takes place one time, at the start of  the loop.
Test condition This checks to see if  the loop should stop or keep going for another round of  running code, usually by checking the value of  a variable.
Action This is the code that is repeated each time we go through the loop.
Update This portion updates the variables being used by the test condition to see if  we should keep looping or not.
One loop cycle Another loop cycle One loop cycle Another loop cycle.
The for loop is great for repeating code a defined number of  times.
You should know this number before you start your loop, or it could go on forever.
It can run zero or many times, depending on variable values.
The do...while loop will run your code once, and then will keep running the same code until a particular condition is met, like a value turns from true to false (or vice versa), or counting to a particular number is reached in the code.
Increase the index value as you go through the loop.
Access the array using the variable defined in the loop.
The section between the ( ) defines how long the loop is going to last.
Declare a variable in the loop that you will use to access the index of the array.
Taking an up close look at the different loop types we mentioned, we can see that they each contain the four main elements, but in a slightly different order.
This order reflects some of  the main differences between the loop types.
Increase the conditional variable as you go through the loop.
Declare a variable in the loop that you will use to access the index of the array.
Frank: Well, we have our array of  card objects, but we need to be able to pull out a card at random when we deal, right?
That’ll give us a random number each time to pull a card out of  the array.
We have to be able to add up the total value of  the cards to find out if  the players went over 21 or not.
We can’t give them the same card twice, so we also have to make sure it hasn’t been dealt already.
Jim: Can we use a variable to remember the cards?
Joe: Good thinking! We don’t even have to store the cards; we can just store their index values.
That way we can test if  it’s in our used_cards array.
Jim: Wow, that’s impressive! How can we tell if  a value is in an array?
But I think we’re going to need several functions to do this for us.
If  not, we need to get the correct card out of  the deck and remember the index of  that card.
And then we need to show that card to the player.
Jim: Sounds like a lot! How are we going to show the card to the player?
Frank: Well, we already have the images, and they’re arranged by suit and named type, so we can use those attributes of  the card object to put the image on the screen.
We can create a DOM element and append it to the my_hand div element already on our page.
Frank: This card object is already paying dividends… Let’s get to it!
Wow, these loops should get us moving pretty quickly through all the cards.
Looking for the needle in a haystack Often you’ll need to see if  a variable already exists in an array or not, so you don’t end up duplicating data, or to prevent your code from adding the same thing several times to an array.
This can be particularly useful if  you use arrays to store things like a shopping cart or a wish list.
Create a variable to hold the return value of the function.
The value you’re looking for The array in which you want to look.
Which feature of the blackjack application needs to check if we've already used a value?
These include functions for checking what type of  browser the site visitor is using, for returning the current time, for merging arrays, or for removing duplicates from arrays.
The utility method that’s useful for this particluar situation is the inArray method.
It will return where in the array the value you’re looking for is located (its index), if  at all.
If  it cannot find the value in the array, it will return –1
Like other utility methods, inArray does not require a selector—it’s called directly by the jQuery function or jQuery shortcut.
The completed code should create two functions—deal and hit—as well as a click event listener for an element with the ID of btnDeal, and a new array variable called used_cards to remember what cards have been dealt already.
Use a for loop to call the hit function twice.
Check if you’re already using the card you've picked, by using the inArray function.
Use properties of the card object to build the path to the image.
Add the array index of the card to the used_cards array.
Test Drive Add all the code from the previous magnets exercise to your my_scripts.js file, after your deck array, and give it a try in your browser.
Click on the deck of  cards to deal your next hand of  blackjack.
Can you think of what we could use to remember all this different information?
Sure, we can create an option to get more cards from the deck using the hit function we’ve already created.
We just need something to run that function, like a button click or similar.
This adds a new wrinkle, too: now we have to remember and count which cards have been dealt out so we can tell if  the player goes bust or not.
As the dealer, I’ll nearly always win! But maybe we should make it fair.
Can you build a way to give out more cards?
Since you’re already a style and structure pro, we’ll just give you the updated code for your index.html and my_style.css files so you can compare.
You should see some changes to your page after you add in the new HTML and CSS code.
Using the UML diagram given below, create a one-time object called hand.
The sumCardTotal method should loop through all the cards in the cards property and add their values together, and set this number as the value of the current_total property.
Then, use the current_total value to set the value of the element with the ID of hdrTotal.
Q: Are there any other types of loops I should know about?
There’s the while loop, which is very similar to the do…while loop, except it does its conditional check at the start.
There’s also a for…in loop, which will loop through an object’s properties and pull out the value of each one.
A: Yes, you can, with a very simple command: break.
Calling this anywhere in your loop will cause the loop to stop and proceed to the next piece of code after the loop.
A: With append, the selector calling the method is the container into which the content is inserted.
With appendTo, on the other hand, the content comes before the method, either as a selector expression or as HTML markup created on the fly, and it is inserted into the target container.
Now you’ve got a hand object with a card property (that’s an array) and a function that loops through the card array, gets the current card, and updates the current total.
Then there will be no way to see who’s won.
Based on the rules set out in the email from the Head First Lounge, we have to decide if  you won based on several different criteria.
If  a player’s cards add up to more than 21, then she is bust and must start again.
If  a player’s cards add up to exactly 21, then she has a blackjack, and the game is over.
If  a player’s cards add up to 21 or less, but she has already been dealt five cards, then the game is over, and she wins.
Otherwise, the player can choose to get another card or stop playing.
Output the total count to the screen, in the hdrTotal element.
But I don’t see anything there that’ll tell me if I won.
A JavaScript variable The code we want to run, if what we check turns out to be true.
As it turns out, there’s an additional option for making more than a single decision at a time.
By combining if and else statements into a composite statement called else if, you can check several conditions all inside one statement.
Can you think of where in your code you could use a if / else if / else statement?
Comparison and logical operators For conditional logic statements (like if/else or do…while) to work properly, they have to be able to make the right decision based on what they are checking for.
To do this, they use a series of  comparison and logical operators to help them make the decision.
In JavaScript, there are seven different comparison operators and three logical operators, as well as a shorthand operator for the if/else statement, called the ternary operator.
We’ve seen some of  these already, but here’s the full list.
True if a equals b True if a does not equal b.
True if a has a lesser value than OR is equal to bTrue if a has a greater value than b.
True if a has a greater value than OR is equal to b.
True if a is equal to b for both value and type.
True if a is false or doesn't exist (for DOM elements)
True if a is true or b is true, or if both are true, but not if both are false.
True if a is true and b is true, but not if one or the other is false.
Update your hand object to check if the value of the current_total property meets the criteria for the game (go back and check the original email if you don’t remember all the rules)
Here's the existing object, as well as pieces of the new code you need to write.
You've now updated the sumCardTotal method to include logic that checks the value of the dealt hand.
There are lots of conditional and logical operators in there, even for this simple application.
But we still can’t get at these new functions because we’ve.
You already have all the pieces in your HTML code for dealing the initial cards, asking for another card, and ending the game.
And don’t forget, you need to call the method to add up the card totals each time you deal a new card.
The listeners should be on the elements with the IDs of btnHit and btnStick.
Also, call the sumCardTotal method after any card is dealt out.
We’ve included some code from the end of the hit function for you to update too.
Q: Are there any other ways to compare values in JavaScript?
A: Not compare values, per se, but there is another method used to make decisions based on the values of variables.
That method is called the switch method, and can have many different conditions.
Often, if you find yourself writing large if / else if / else statements, a switch statement might be easier.
Q: You said there was a shortcut for the if/else statement.
A: It’s called the ternary operator, and it uses a question mark to separate the logic operation from the resulting actions, like this:
Get total of our current hand, at the end of the hit function.
Hide the deal button, but show the hit or stick buttons.
Test Drive Add all the code you’ve just created to your my_scripts.js file, after your hit function—including an update to the end of  the hit function itself—and give it a runthrough in your favorite browser.
We still have to add in the reset feature they asked for.
So, once a game is over, the players can start again without reloading the page.
Joe: We also need to make sure that people aren’t getting cards from previous games.
Jim: But how do we do that? We have HTML elements that we added dynamically and new items in arrays.
We’ll have to use slightly different techniques for each, but yes, we have to clear it all.
Joe: I know just the tricks! For jQuery, have a look at the empty method.
For the arrays, there are a few ways, but not all are crossbrowser.
However, if  you want to keep the main element around and you just want to empty out its contents, you can use the jQuery empty method, which—like remove—requires a selector, but will leave the calling element in place.
Often we find ourselves writing jQuery to avoid having to write multiple lines of  JavaScript.
Thankfully, there are a few occasions where doing something in JavaScript is as easy as it is in jQuery, and this is one of  those times.
While the syntax is a little different, the end result is the same and you don’t have to keep track of  where you are in the DOM.
To truly empty an array in JavaScript, you simply set its length to 0 (zero):
So, all we have to do now is figure out what needs clearing, and we’re done, right?
Yes, but the order in which you clear stuff is important.
Since we also have to deal the next hand from a restart, we should clear everything first, then deal the new hand.
We also have to make another element clickable to call our code.
Update your index.html file with an element, similar to all the other elements in the controls div element.
Also, update your my_scripts.js file with an click event listener for the btnRestart element.
It should also toggle a new div element with the IDs of result and itself.
It should also clear the html of the hdrResult elements.
Finally, it should toggle and trigger the click event on the btnDeal element.
Now you’ve got a reset button to start the game over, which resets all the elements back to what they were before the game started.
Add a little JavaScript magic with the length property, and you’re good to go.
Reset all the elements back to the way they were.
Test Drive Add a click event for the btnRestart element to your my_scripts.js file.
Also, don’t forget to include the additional HTML code in your index.html file.
Oh man, this is so close to what I wanted, but there’s just one more thing: can we make.
Do this! Update your my_scripts.js file with a new end function, which gets called by btnStick, and some other updates to the computational logic in sumCardTotal.
Call the end function to end the game, after you stick.
Set a different class for the header, depending on the result.
Test Drive Update the sumCardTotal method of  the hand function in your my_scripts.js file.
Also, don’t forget to grab the new my_style.css file and replace your current one with the new version.
Head First Lounge can enjoy a good game of blackjack while.
Your jQuery/JavaScript Toolbox You've got Chapter 6 under your belt and now you've.
When you combine jQuery’s custom effects with JavaScript functions you can make your code—and your web app—more efficient, more effective, and more powerful.
In this chapter, you’ll dig deeper into improving your jQuery effects by handling.
The Monster Mashup web app you built in Chapter 5 was a big hit with kids and their parents.
But it sounds like there might be a bug that’s making the lightning go haywire.
DoodleStuff ’s quality assurance manager contacts you with some issues and a feature request for making Monster Mashup better.
We’ve discovered that when a user opens a new tab in his browser and leaves Monster Mash open in another tab, when he comes back the lightning goes off in rapid succession with no pause in between.
Then think about what’s going wrong with the lightning functions.
Why do they all crash together when someone switches from one tab to another?
It runs and runs, even if  the user navigates away from the page.
When the user returns to the tab, the timer has to catch up, and it tries to redraw the lightning on screen in rapid succession.
It seems that the timer doesn’t work the way we wanted it to, so what happened?
In Chapter 5, we needed a way to call the method again and again, with a timeout in between those calls.
In solving that problem, we unknowingly created a new problem: the function continues to run when the window loses the visitor’s focus (i.e., when the visitor opens a new tab and moves away from the active window)
The setTimeout method tells the JS interpreter to run a function and then wait for a while before running it again.
In JavaScript, you typically define a function and call it somewhere else in the code.
In this case, you called the function from inside itself.
A function that runs infinitely and is out of our control? That’s.
This tells the JS interpreter that the function should call itself, and it does so over and over again.
You have to be very careful with functions that call themselves.
Creating infinite loops can eat up CPU resources and crash the visitor’s browser.
Get control of timed effects with the window object Fortunately, you have a way to get control of  your lightning animation using JavaScript’s window object.
The window object is created every time the visitor opens a new window in his browser, and it offers a lot of  jQuery and JavaScript power.
In the world of  JavaScript, the window object is the global object.
In other words, window is the topmost object of  the JavaScript world.
The browser creates one window object for each of  those tabs.
The window object is an object just like the ones you worked with in Chapter 6, so it has properties, event handlers, and methods.
And they’re super handy—we can use the window object’s onblur and onfocus event handlers to find out what the visitor is doing at the browser level.
The JavaScript interpreter uses the window object to represent an open window in the browser.
Every time a new tab, page, or frame is opened, a window object is created.
The window object also offers timer methods that you can leverage for running your custom timed functions.
If you click on this window, the browser gives it “focus.”
When you click on one of the other windows, the original window loses focus, or “blurs.”
Don’t confuse the JavaScript window object’s onblur and onfocus event handlers with jQuery’s blur and focus methods.
The jQuery blur and focus methods are intended to be attached to HTML form fields and other elements but not the window object.
Match each property, event handler, or method for the window object to what it does.
A property of  the window object that lets us access or set the name of  the window.
A property of  the window object that refers to the main content of  the loaded document.
Detects when the window receives a click, keyboard input, or some other kind of  input.
A method of  the window object used to cancel the period of  time to wait.
A method of  the window object used to set a period of  time to wait between repetitions of  a function call or other statement.
A method of  the window object used to set a period of  time to wait before calling a function or other statement.
A property of  the window object that lets you access the different URLs that the window has loaded over time.
A method of  the window object used to cancel the period of  time to wait between repetitions.
A property of  the window object that lets us access or set the name of  the window.
A property of  the window object that refers to the main content of  the loaded document.
Detects when the window receives a click, keyboard input, or some other kind of  input.
A method of  the window object used to cancel the period of  time to wait.
A method of  the window object used to set a period of  time to wait between repetitions of  a function call or other statement.
A method of  the window object used to set a period of  time to wait before calling a function or other statement.
A property of  the window object that lets you access the different URLs that the window has loaded over time.
A method of  the window object used to cancel the period of  time to wait between repetitions.
The window object’s onfocus and onblur event handlers can detect a change to the window’s focus, but what can you do in response to those events?
Respond to browser events with onblur and onfocus So we know that with window.onfocus, you can tell when the window gains focus (i.e., a visitor activates the page or directs mouse or keyboard input to the window), and with window.onblur, you can tell when the active browser window loses focus.
But what can you do in response to these events? You can assign a function reference to onfocus or onblur.
Test Drive Let’s test-drive the window object’s onfocus and onblur event handlers.
Open a second tab and play with clicking between the two browser windows.
And here’s where the power of  writing your own custom functions really starts to come into play.
Now you’ve got a window object that gives you a ton of  information about what your user is doing in the browser, and you can assign your own custom functions based on what that object tells you.
So, really, you can do just about anything you want, as long as you can write your own custom function for it…
Using the information you get from the window object, you can stop the lightning when the visitor wanders away from the Monster Mashup window and then restart it when she returns.
One function definition will stop the lightning when the browser loses focus (call this one stopLightning)
The other function definition will start the lightning back up when the browser regains focus (call this one goLightning)
You won’t write the code for the functions just yet, so for now, just put the magnets with comments (starting with //) inside each function.
The functions need to do something! Should we just copy and paste the timed lightning functions in there?
Instead of  copying and pasting our old code, let’s look at one of  the window object’s methods—a timer methodthat might give us a better way of  handling the timing effects for the lightning.
Assign the new functions to the window.onblur and window.onfocus events.
A new function to make the lightning start when called.
Timer methods tell your functions when to run Both JavaScript and jQuery offer us timer methods that call functions to run based on time passing.
JavaScript’s window object has four timer methods for timed control: setTimeout, clearTimeout, setInterval, and clearInterval.
Let’s take a closer look at these methods and what they offer us.
Which of these timer methods will work best for fixing the goLightning function? For each timer method, answer whether it will help and explain why you chose or didn’t choose it.
The function to call when the timeout duration has passed.
When this chain runs, it’s known in jQuery as an effects queue.
In this example, the delay method puts a five-second pause in between the slideUp and slideDown effects.
I add a pause between effects that are queued up in a chain of.
So setInterval will be the best solution for the goLightning function, but the stopLightning function needs to stop the timer.
Great question! You can use the clearInterval method to stop the repeating schedule of  function calls created by setInterval.
To do so, you need to pass a variable to clearInterval as a parameter.
Which of these timer methods will work best for fixing the lightning function? Here are our answers.
The clearInterval method tells the setInterval to wipe out its timer and stops the repeating action.
Detects when the current window gains focus and calls the goLightning method.
Detects when the current window loses focus and calls the stopLightning function.
Wipes out the timer and stops the repeating setInterval for int1
Creates a five-second pause between a fadeIn and fadeOut effect.
Sets a four-second wait before calling a function named wakeUp.
Match each timer method to what it does when it runs.
Q: Do all browsers process the setTimeout method the same way?
Mozilla Firefox and Google Chrome display the behavior we encountered earlier (stacking up the function calls)
This shows that not just web designers have issues with cross-browser compatibility.
Q: Can the timing functions like0 setInterval and setTimeout be used with things other than the window object?
They are specific methods of the window object, and can only be called in reference to the window object.
They can, however, be called without the prefix “window,” and the browser will know you intend for this to be attached to the current window object.
Detects when the current window gains focus and calls the goLightning method.
Detects when the current window loses focus and calls the stopLightning function.
Wipes out the timer and stops the repeating setInterval for int1
Creates a five-second pause between a fadeIn and fadeOut effect.
Sets a four-second wait before calling a function named wakeUp.
Match each timer method to what it does when it runs.
Write the stopLightning and goLightning functions Now that you know more about timer methods, let’s review where we need them.
For each blank line in the file, write in the variable, function, or method that will help fix the Monster Mashup app.
When in doubt, look at the previous two pages for guidance.
Now you’ve got two custom functions— each with references to the lightning functions you wrote back in Chapter 5—that respond to the window object’s onfocus and onblur events.
Declare three variables for remembering our timers so the browser can clear them again.
Test Drive Once you’ve added the code from the previous page to the script file, open the page up in your favorite browser to see if  your lightning effect fix was successful.
You’ll be updating a bunch of  code to fix and improve on what you built in Chapter 5, so let’s start with a blank script file.
In the folder, you’ll find a begin folder structured like this:
Next, open a new browser tab and stay on the tab for a few minutes.
Then return to the original tab the Monster Mashup app is running in.
When you return, the first effect should not be running.
We have a bunch of  click-related functions for that face that we could likely combine into one multipurpose function.
Since we’re fixing stuff, shouldn’t we go back and fix those repetitive functions.
Can you write one function that will work for each of these?
A different data structure would work better here, one that handles multiple variables.
Use the magnets below to create a generic function, called moveMe, that will be called whenever a user clicks on any of the moveable images.
For the moveMe function, the first parameter is the corresponding index in the clix array, and the second is a reference to whatever was clicked.
By creating a more multipurpose moveMe function, you’ve reduced the possibility of code errors and the number of functions to maintain.
The repetitive logic you had before is now in one place, which makes it easier to fix if something goes wrong.
You pass the moveMe function a reference to the slot for the clix array.
Then you can use that slot to keep track of how many times each element has been clicked.
You also pass the moveMe function the current object so that it can be animated.
The Mashup page shouldn’t look any different than before, but you’ll know that your code is more efficient, less repetitive, and easier to maintain.
Test Drive Add the code from the magnets exercise on the previous page to your my_scripts.js file and save it.
Then, open up the index.html page in your favorite browser to make sure your function rewrite didn’t introduce any problems when all the various face parts are clicked.
We’ve had several requests from kids who want a button that will create a random monster face.
Can you build that into the app, along with a way to start over from the beginning again?
Jill and the QA team are really happy with your fixes, and since they like your work, they want to pass along a feature request for Monster Mashup from the product team.
I like the monster faces I make, but it would be fun to see the computer mix them all.
You’ve been building random functions throughout the book, so you’re likely a pro at that by now.
In this case, you need to create a function that randomly animates the monster faces.
Let’s divide and conquer the problem by breaking it down into smaller steps.
Let’s start with figuring out the current position for each image strip.
For each monster face part, you need to move it to the.random position multiplied by the width of each face on each strip.
The current position is the number of clicks multiplied by the distance between face parts (367 pixels)
You need to keep track of the current position for each monster image strip.
Get a random number.1 Move each face part to a random position based on that random number.
From the current position, we need to figure out the target position, which is essentially a random position on the screen.
Um, you sure make that sound easy, but isn’t getting the current position kind of tricky? How do we know where the face position is on the strip, especially if someone has already moved them around?
In fact, just turn the page to find out how.
Fortunately, you don’t have to come up with all new variables or functions here.
The index value of  the clix array provides the current position because it tells us how many times the user has clicked on each monster face part.
You can pass a number as an argument to the getRandom function…
By multiplying Math.random and the number passed as input, you can create a number between 0 and whatever the value of the num variable is.
Next up: the target_position (i.e., the random face part) we want to slide to.
Some folks would refer to this as a utility function.
Some folks refer to functions that return values as “getters” because they get you a value.
Add the bolded code to your index.html and my_scripts.js files.
This will get your randomize function set up, along with some alerts that will show you the target position (which uses a random number) and the current position (which is determined by the number of  times the visitor clicked)
Set the target_position to the result of the getRandom function.
Update clix[index] so the user can still click to advance the monster face parts.
Set move_to to the random position multiplied by the width of the face strip sections.
Run your custom animation code to move the strip left.
You need some interface buttons for both the randomize and reset behaviors.
Test Drive After entering the code from the previous page to your files, open up the index.html page in your favorite browser to test the randomize function.
On the first few clicks, the randomizer function does what you asked it to do.
My teeth are my best feature, but I could still use the rest of my face, for crying out loud!
After a few clicks, the randomizer keeps doing what you asked it to do.
We didn’t code it to make the face’s parts go blank.
We set it to go to a random position! Did we go too far somehow?
Those custom functions had unintended effects, but they likely did exactly what we wrote in the code.
Let’s have a look at what we might not have thought about.
If the user keeps clicking the Randomize button, it eventually pushes the image strip so far to the left, it won’t appear on screen anymore.
What do you need to do to keep the image strip from going off the grid, and instead landing on a random monster face part?
Move relative to the current position To keep the image strip from going off  the grid—but still falling correctly on a random monster face part—you need to move it relative to the current position, which means including the current position and some conditional logic.
We need to write conditional logic to handle this situation.
Let’s look at two different scenarios that could happen as a result.
The current position is 2 because the visitor has clicked twice.
Based on the conditional logic from Scenario 1, can you figure out what logic you need here?
How many positions do we have to move the strip?
Pool Puzzle Your job is to take code snippets from the pool and place them into.
You may not use the same snippet more than once, and you won’t need to use all the snippets.
Your goal is to make the randomizer function work the way it is intended to, so parts of the face doesn’t go blank.
Note: each thing from the pool can only be used once!
Pool Puzzle Solution Your job is to take code snippets from the pool and place them into.
You may not use the same snippet more than once, and you won’t need to use all the snippets.
Your goal is to make the randomizer function work the way it is intended to, so parts of the face doesn’t go blank.
Run the following code for each element that’s a member of the face class.
Remember that reset button in the index.html file a few pages back? Now you just need to wire it up to a custom reset function.
I assume we’ll need another custom function to reset everything, right?
Wire up the reset custom function to the reset button.
Rewind each image strip by setting it to an absolute position of 0 px for the CSS left property.
A: Yes, all modern browsers have a window object you can interact with.
Each window object, per tab on your browser, will also have a separate document object, into which your web page will get loaded.
Q: So, why do I have to move relative to the current position? Can’t I just move to wherever the random number tells me to go?
A: That could work, except you’d have to reset your image back to the starting position, and then move it to wherever the random function says to move it to.
That’ll double the amount of code you’ll have to write and maintain, and will slow down your application considerably.
It sets each item in the clix array to be 0 as welljust as it was when we loaded the page.
Below, you’ll find all the code you’ve built in the last few pages.
If  you haven’t done so already, add the bolded code to your my_scripts.js file and get ready to test all the new functionality you’ve built.
Test Drive After entering the code from the previous page, open the index.html page up in your favorite browser to test the randomize and reset functions.
Click the reset button intermittently too to make sure that’s also working how you want it to.
The monster face sections should fly both right and left now, which adds even more visual interest for your users.
And the reset button puts everything back to the way it started.
Tells a function to run repeatedly with an interval of time between each repetition.
JavaScript event handler that detects when the window loses focus.
A JavaScript method used to cancel the period of time to wait between repetitions.
Event handler that detects when the window receives a click, keyboard input, or some other kind of input.
Functions that return values are sometimes referred to as ______ functions.
A property of the window object that lets you access the different URLs that the window has loaded over time.
The global object that’s created every time the visitor opens a new window in her browser.
Use this JavaScript timer method when you want to set a period of time to wait until telling a function to run.
What some folks call a function that does one thing and does it well: a _______ function.
It’s your standard crossword; all of the solution words are from this chapter.
JavaScript event handler that detects when the window loses focus.
Event handler that detects when the window receives a click, keyboard input or some other kind of input.
Functions that return values are sometimes referred to as ______ functions.
The global object that's created every time the visitor opens a new window in their browser.
Use this JavaScript timer method when you want to set a period of time to wait until telling a function to run.
What some folks call a function that does one thing and does it well: a _______ function  [UTILITY]
I just spun up a Piggy Bat Witch, who’s going to be a character in a story I’m writing.
Your hard work made Monster Mashup a hot app for the kids! You solved.
Your jQuery Toolbox You’ve got Chapter 7 under your belt and now you’ve added the window object, timed functions, and.
Optimized custom functions Writing your own custom functions allows you to really start making interactive web pages that people will want to use.
But you can also get carried away, and it’s important to look at how best to combine and optimize your functions so you’re writing less code that is easier to maintain and debug.
In this chapter, we’ll learn how jQuery deals with making Ajax calls to.
A dash of Ajax, a drop of jQuery, and seven.
As you’re all aware, every year we sponsor Webville’s Annual Bit to Byte 10K run by providing the race.
But our page is way behind the times, as we only update it after all the results are in.
People want instant gratification, and with Twitter and Faceboo k, folks attending the race are beating us.
So we’ve got a challenge for you with a sweet payoff.
The page should provide the option to show either male or f emale runners, or all participants at once.
It should provide automatic updates as runners cross the fin ish line.
People shouldn’t have to refresh the page as the results up date.
It doesn’t look super different from last year’s page, so that wo uld be a good place to start.
This year’s race is in Maui, so book your place early!
Dude, Maui! It’ll be sweet if we get to go to the VIP party!
Race data is hardcoded into the page after the race is over.
Configuring a plug-in Plug-ins are extensions to the base jQuery library that improve functionality, or make specific functions or tasks easier.
In the example above, in combination with our CSS, the idTabs plug-in converts our ul element into clickable tabs and tells the a links in our lis which div elements to show when they are clicked.
This particular plug-in gives us a very easy-to-use navigation structure for our page, so we can keep different types of  information visually separate but still use the same display area.
Looking at last year’s page Let’s have a look at last year’s page to see how it was set up and what it looked like, so we can understand better what is being asked by the marketing department.
Ready Bake Download Before we go on, let’s look at last year’s files to see how they set things up.
From here, the rest of the CSS is dedicated to building tabs on the page.
Methods of the Date object A JavaScript ternary operator (more on this in a bit)
A portion of last year’s runners, hardcoded into the page.
Create the links that will be converted into tabs by the plug-in.
Getting dynamic The marketing team wants the page to update in almost real time, so those hardcoded results in the HTML file have to go.
And they only used JavaScript to update the time on the page! This is the perfect opportunity to take your jQuery to the next level.
Welcome to the next generation of  web apps, where jQuery, JavaScript, and a little bit of  Ajax and XML can make your applications feel like dynamic (basically, the opposite of  static), responsive desktop apps.
Ajax, which stands for “Asynchronous JavaScript and XML,” is a way of  passing data in a structured format between a web server and a browser, without interfering with the website visitor.
With Ajax, your pages and applications only ask the server for what they really need—just the parts of  a page that need to change, and just the data for those parts that the server has to provide.
That means less traffic, smaller updates, and less time sitting around waiting for page refreshes.
And best of  all, an Ajax page is built using standard Internet technologies, things you have already seen in this book, or already know how to use, like:
When you use Ajax, your web pages only ask the server for what they really need, when (and where) they need it.
To use Ajax, we’ll look at a data format that’s been around for a while (XML) and jQuery’s method of  handling Ajax requests, ajax.
And then we’d be back to websites that seem sluggish, as the whole page has to be requested from the server each time.
What’s the point of  learning a bunch of  cool jQuery if  handling data is just going to slow us down again?
Enter Ajax Ajax allows you to exchange data with a server in a dynamic way.
Using Ajax and some DOM maipulation, you can load or reload only a portion of  the page with jQuery and JavaScript.
Understanding Ajax As we mentioned earlier, Ajax is a way of  passing data in a structured format between a web server and a browser, without interfering with the website visitor.
But, really, it isn’t one thing—it is a combination of  different technologies used to build exciting, interactive web applications.
The JavaScript portion allows it to interact with the DOM structure of  your page.
Asynchronous means it can happen in the background, without interfering with your page or a user interacting with your page.
But for the transfer of information, XML offers some unique benefits over its sister language, HTML.
Let’s have a look to see what those benefits are.
But can’t we just use HTML? Why do we need another markup language?
It is also a specification for describing the structure of that information.
And while XML is a markup language (just like HTML), XML has no tags of its own.
It allows the person writing the XML to create whatever tags he needs.
Asynchronous JavaScript makes a request to the server, but you can still interact with the page by typing in web forms, and even click buttons—all while the web server is still working in the background.
Then, when the server’s done, your code can update just the part of the page that’s changed.
JavaScript JavaScript, as you already know well by now, is a scripting language used in web content development, primarily to create functions that can be embedded in or included from HTML documents and interact with the DOM.
It offers a widely adopted, standard way of  representing text and data in a format that can be processed without much human interaction.
Information formatted in XML can be exchanged across platforms, applications, and even across both programming and written languages.
It can also be used with a wide range of  development tools and utilities.
In fact, XML is really a metalanguage for describing markup languages.
In other words, XML provides a facility to define tags and the structural relationships between them.
It is important to understand that XML is not a replacement for HTML.
In many web applications, XML is used to format data for transport, while HTML is used to format and display the data.
Let’s take a closer look at an XML file that contains data about some books.
Q: So the big deal about XML is that you can create your own tags?
A: Exactly! It’s pretty convenient to be able to define elements and structure that’s suited to your business.
Even better, XML is a standard, so tons of people know how to work with it.
That means your vocabulary is usable by lots of programmers, in client-side and server-side programs.
Q: Wouldn’t it be easier to just make up our own data format?
A: It might seem that way at first, but proprietary data formats—ones that you make up for your own use—can really cause a lot of problems.
If you don’t document them, people may forget how they work.
And if anything changes, you need to make sure everything is up-to-date: the client, the server, the database, the documentation… that can be a real headache.
Q: So are people really using XML as much as you make it seem?
A: Given its flexibility for creating whatever data structures you need, XML is used as a basis for many different types of markup languages around the Web.
There are more than 150 different types of languages that use XML, ranging from RSS (RDF Site Summary aka Real Simple Syndication) for news or audio/video feeds; to KML (Keyhole Markup Language) for geographical information used in Google Earth; to OOXML (Office Open XML), a standard submitted by Microsoft for word processing files; spreadsheets, presentations etc.; to SVG (scalable vector graphics), which describes two-dimensional images; to SOAP (Simple Object Access Protocol), which defines methods of exchanging information over Web Services.
Wow, that really is a lot of uses for XML!
Q: OK, I get why we should use XML, but doesn’t it become a “proprietary data format” when we start declaring element names?
The server and the client need to be looking for the same element names, but you can often work that out at runtime.
Q: But aren’t all web pages asynchronous, like when a browser loads an image while I’m already viewing the page?
A: Browsers are asynchronous, but the standard web page isn’t.
Usually, when a web page needs information from a server-side program, everything comes to a complete stop until the server responds...
Q: How do I know when to use Ajax and asynchronous requests, and when not to?
A: Think of it like this: if you want something to go on while your user’s still working, you likely want an asynchronous request.
But if your user needs information or a response from your app before continuing, then you want to make her wait.
At its core, XHTML is not as similar to HTML as people think.
But that doesn’t mean it can parse it or interact with it any better than HTML can.
I’m game to get going with Ajax, but we need to get our structure set up for that first, don’t we? It’s been that way.
Let’s get that out of  the way, so we can get on to adding some Ajax to our page…
You can remove the About tab, but keep the All Finishers tab.
In each section, put an empty ul element that will contain your runners.
Also, remove all the existing content from the finishers_all ul element.
Now let’s look at how we can go about getting data from the server so we can populate each of  those tabs with some real race information.
Update your index.html file with the code you completed in the magnets exercise and open it up in your favorite browser.
Awesome, that plug-in got things moving quick! I can already hear the waves crashing on the beach...
For now, just update your my_scripts.js file with this code, only including the new code in bold below.
The URL of what you want to GET via Ajax.
For a complete list of  all the parameters available on this method, visit the jQuery docs site at http://api.jquery.com/jQuery.ajax/
There are also a series of  jQuery convenience methods for dealing with Ajax calls.
The data type we’re expecting to get back from the server.
GETting data with the ajax method You want data? jQuery and Ajax are primed to provide it for you.
The jQuery Ajax method returns an object (you remember those from Chapter 6, right?) with data about the particular action you are trying to perform.
The ajax method can accept many different parameters, and can POST data to or GET data from a server.
Test Drive Update your my_scripts.js file with the code from the previous page.
Then, download the sample XML file for this chapter from http://thinkjquery.com/chapter08/step2/finishers.xml, and save it in the same directory as your index.html file.
When you’ve done this, open index.html in your browser, and open up the “Network” tab (in the developer tools in Google Chrome), or the “Net” tab (in Firebug for Firefox)
Your XML file should be listed there, along with the other files from your page.
Now that we know we can load the XML file into the browser, we need to pick out the necessary text and display it on screen.
We’ll need a way to find each runner in order to add him or her to the correct list on the page.
And yes, it’s good practice to put the ajax calls into functions, so you can call them whenever you need them.
The same-origin policy is a security concept for JavaScript and other client-side scripting languages.
It allows scripts running on the page to access resources, like element properties and methods, that originate from the same server.
It prevents scripts from accessing elements on pages that did not come from the same server.
Due to legacy compatibility, JavaScript includes are not subject to these checks, but the XML file in the example is.
That means the XML file must be on the same server as the page loading it.
But the XML is no good to me in the developer tools.
How can I get to see it on the screen where I need it? And.
Parsing XML data We need a method to pick out each runner from our XML file and be able to display it on the screen.
Luckily, jQuery supplies us with the find method, whose job it is to seek out elements that match whatever criteria we give it.
The find and children methods are similar (we looked at the children method back in Chapter 4, when we were building the menu for the Webville Eatery), except that the latter only travels a single level down the DOM tree.
By combining the find method with the each method, we can search for a group of elements and interact with each one individually, using a loop.
Can you think of which pieces of our XML document we would need to interact with in order to display the individual runners on the screen?
This can be any other jQuery method, like events, text manipulators, or style manipulators.
This can be any selector, or a group or collection of jQuery elements.
This will find all the ul elements that are contained in any li elements and set their background color to blue.
Once the load is successful, empty all the lists that will hold the information, and then find each runner in the XML file and determine whether the runner is male or female.
Append the runners to the appropriate list for their gender, and always add them to the finishers_all list.
Then, call the getTime function to update the time on the page.
In this example, the line starting with “var info = ...” was too long for the page, so we had to let it run onto the next line.
Empty all the ul elements so they can get updated data.
Check the gender of each runner, so you can add it to the correct list.
Call the getTime function to update the page with the last time the getXMLRacers function was called.
Also, replace the call to the getTime function (in the document.ready section) with a call to the getXMLRacers function instead.
The getTime function is now called inside this new function.
Make sure you run all your code through your web server, so the URL should say http://, not file://
Again, make sure your XML file is on the same server as your HTML file, or you will encounter those pesky same-origin permission issues.
Luckily, in the previous chapter, we’ve already seen how to schedule events to happen regularly on a page.
Let’s have a quick look at how to do that again, and what options we have this time…
Awesome, I have a function I can call to get my XML data.
But shouldn’t it run more than once if the page is to be.
Scheduling events on a page In the last chapter, we saw that both JavaScript and jQuery offer timer methods that call functions that run based on time passing.
JavaScript’s window object has four timer methods for timed control: setTimeout, clearTimeout, setInterval, and clearInterval.
If you’re waiting on information from another server, or waiting on user interaction, setInterval could call your.
Your functions may not always return in the order that you called them.
The function to call when the timeout duration has passed.
When this chain runs, it’s known in jQuery as an effects queue.
In this example, the delay method puts a five-second pause between the slideUp and slideDown effects.
I add a pause between effects that are queued up in a chain of.
It’s obvious, isn’t it? We use setInterval, just like last time.
Self-referencing functions A self-referencing function calls itself  during its normal operations.
Such functions can be particularly useful when you need to wait for the function’s currently running operation to complete before running it again.
Combine this with a setTimeout call, and you can schedule a function to run but only keep going if  the previous call to the function was successful.
Otherwise, it won’t reach the call to itself  in the code, and hence it won’t be called again.
Create a function called startAJAXcalls that gets called when the page is loaded and which will call the getXMLRacers function every 10 seconds.
Use setTimeout to call the startAJAXcalls function to make it self-referencing, after the getXMLRacers function is complete.
You’ll also need to call the startAJAXcalls function directly in your code to start the timer.
This solution uses setTimout inside the startAJAXcalls function to call the getXMLRacers function to get our XML, plus a call to itself.
This self-call will ensure that the next call will only happen when the last one has completed.
This will guarantee that there is not a buildup of requests to the server if the network is slow, or if a response from the server does not come back before the next call is scheduled to be made.
Q:  Everything I’ve read about Ajax says I need to use the XMLHttpRequest object; is that right?
As a web programmer, you don’t need to use that object.
Also, since Ajax calls can differ per browser, jQuery figures out the best way to do an Ajax request for each of your site visitors.
Q: What happens if the server returns an error or doesn’t respond? Will it sit and wait forever?
You can set a timeout as one of your parameters in your ajax call.
Also, just like the success event parameter, which can run a function, there are others to handle error, complete, and many more.
These events can be set as local events, when the ajax method is called, or as global events to trigger any handlers that may be listening for them.
Call the getXMLRacers function to make sure there is content on the page when it is loaded.
Set our FREQ variable to 10000, since the setTimeout function requires its parameter in milliseconds.
Since we wait until the last call to our function is finished, we use the setTimeout function.
Call our newly created function in order to start it.
Update your my_scripts.js file with the new code you just created.
Also, don’t forget to add a call to the new function just after your call to the getXMLRacers function at the bottom of  your script.
Then, view the page in your browser, and use the “Network” feature of  Google Chrome or the “Net” feature of  Firefox’s Firebug to see the file get loaded every 10 seconds.
Once you see this happening, update your XML file, using your favorite text editor, with the entry listed below and see your new runner appear on your page...
Don’t forget to save the XML file after you’ve updated it.
Add this runner to your XML file and save it.
Can we use something simpler to get the updated time for.
Getting more from your server As we’ve seen so far, HTML is great for displaying information on a page and XML is great for formatting data for transportation to a page, but what if  you need your page to actually do something, like tell the time or get data from a database? Sure, we could probably do some more fun things with jQuery and JavaScript, but why not use something designed for the job?
Hold on! If you haven’t completed the Appendix ii instructions for installing PHP and MySQL, then the next page won’t work for you.
Server-side languages to the rescue! There are several different types of  server-side languages—like JSP, ASP, or Cold Fusion—but we’re only going to focus on one for our purposes: PHP.
Files that contain PHP code are run on the server, and produce HTML that is then provided to a browser to render.
We’ll look at PHP in a little more detail in the next chapter, but for now we’ll see how it can help us with our “updated time” feature.
What time is it? OK, we’ll confess, there is already a JavaScript function we could use to get the time.
But it is a large, complicated function for doing something so simple.
Luckily, PHP gives us a very easy way of  getting the time, using the date function.
Just like the functions you have created up to this point, it takes multiple parameters and returns a different version of  the date, depending on what parameters you pass in.
The main parameter determines how you want the date to be displayed.
For a complete listing of  the parameters of  the date function, visit http://php.net/manual/en/function.date.php.
Create a new file in the same folder as your index.html file, and call it time.php.
Set your default time zone for the date function to give you the correct time for your location.
The echo command tells PHP to write the next piece of information to the page.
Call the date function, with specific parameters to return the same date format as your JavaScript function.
This tells the server where the PHP code it needs to parse is.
Anything inside the square brackets, [ and ], is an optional parameter.Call the PHP date function.
Pass in a parameter for the format of the date you want returned.
A sample date format string: F - Full text month j - Day, without leading zeros Y - Four-digit year g - Hour - 12-hour format i - Minutes, with leading zeros s - Seconds, with leading zeros a - Lowercase am or pm.
After you save your time.php file, bring it up in your browser to make sure the date is in the correct format.
Also, make sure the URL is pointing to the server where you are developing your code.
We want to indicate on the page how recently the page was updated.1
We want to give people the ability to stop and start the updates, should they so choose.
With our little piece of PHP code, we get the time displayed on the screen.
Let’s have a go at the first and second items on the list.
I am SO ready to get rid of this pastywhite skin.
Add a <span> tag, with the ID of freq, in the footer of your index.html page.
This will be used to indicate the result of a new function called showFrequency, which should display how often the page is updated.
Also, create another function, called getTimeAjax, which will load the time.php file using the load method—a jQuery convenience method for Ajax.
This method will take a URL as a parameter and write the result automatically into the div with the ID of updatedTime.
Last, replace the call to the getTime function in getXMLRacers with this new getTimeAjax function.
Now you’ll have added a <span> tag with the ID of freq in the footer of your index.html page to display how often the page is updated.
You’ve also created a new getTimeAjax function, which loads the time.php file using the load Ajax convenience method, which will then write the result into the updatedTime div.
You’ve also updated the getXMLRacers function to use the new getTimeAjax function instead of the JavaScript getTime function.
Create two new functions, one to show the frequency, and the other to get the time from the server via Ajax.
Load the time.php file using Ajax.Output the result to the screen.
We’ll need to change the function to only run when certain conditions are met.
But how are we going to stop a function that calls itself?
We want to indicate on the page how recently the page was updated.1
We want to give people the ability to stop and start the updates, should they so choose.
What feature have we seen so far that checks if conditions are met?
Update your my_scripts.js file with the new code you just created.
Also, don’t forget to add the new span element to your index.html file, and replace the call to the getTime function with the getTimeAjax function.
This led to some unexpected consequences—the page lost focus and the visual effects piled on top of  one another when someone returned to the app.
However, since we already determined that we need to wait until the previous call to the function is finished, we can’t switch to using setInterval for these calls.
And what better solution than one we’ve already seen? We can’t use the window.onblur and window.onfocus browser events, since we don’t want people to have to leave in order to stop the updating.
But we have already seen, across several chapters, how to run code based on conditional logic, so let’s use that for our solution here as well.
Q: What other stuff, besides XML, can Ajax load into the page?
A: Using jQuery, you can load all sorts of information into the page.
Like you’ve just seen, using the load method, you can load the results of a PHP file directly into your HTML element.
Also, you can load other HTML files, JavaScript files, plain text, and JSON (JavaScript Object Notation) objects.
Q: What other convenience methods are there for Ajax in jQuery?
A: jQuery has five convenience or shorthand methods for Ajax: get, getJSON, getScript, post, and load.
But load can be called from any element—which will be the destination of the returned data.
Q: When should I use the load method and when should I use ajax?
A: The load method is designed for loading a particular piece of data into a specific place, like we do with our getTimeAjax function.
The ajax method is much more complex and has many more purposes and parameters.
It can be used to load other information or send data to the server for processing.
Create a global variable called repeat, with a default value of true.
Create a function that will alter the repeat variable with the click of a new button, giving it the ID of btnStop.
Set the HTML of the span element with the ID of freq to say “Updates paused.” Also, create a button called btnStart that will set the repeat global variable to true, as well as call both the startAJAXcalls and the setTimeout functions if the repeat variable is true.
Add the new buttons to the footer area of the page.
When finished, you should have a variable called repeat that will control whether or not the function will call itself again to get the XML file for updating.
The value of this variable should be controlled by the btnStop and btnStart buttons, which are added to the footer area of the page.
These buttons also set the text of the freq span element to show different messages depending on whether or not the page is being updated.
Set the variable to false when the btnStop button is clicked.
Add the new buttons to the footer area of the page.
Update your my_scripts.js file and your index.html file with the new code you just created.
Then, load the page in your favorite browser to make sure it all still works.
Try out the new buttons to make sure they stop the Ajax requests.
You will be able to tell in the “Network” tab in Google Chrome, or the “Net” tab in Firebug for Firefox.
Now you’ve got a page that can be updated in real time (by updating the XML file), and you’ve enabled users to start or stop the updates.
Can be used for information storage or for formatting data for transfer.
Your jQuery/Ajax Toolbox You've got Chapter 8 under your belt and you’ve added.
We really like the updates you’ve made to the website.
We have a problem though: nobody in our office knows XML! S o we don’t know how to add new.
We’ve tried, but every time we get it wrong, it makes the webs ite do some strange things...
What we’d really like is some way to just type into a few boxes and click a button to add a finisher.
And if we make a mistake, can you make it so we don’t break the whole site?
I know it’s only three days until we all fly out to Hawaii, but we ’d really like this working before we go.
These errors mainly happen when there are issues with the tags, like forgetting to close a tag or having the wrong case in the tag name.
However, data in the tags can also cause XML some problems if  it’s not encoded for use in XML properly.
Opening the XML file in a web browser tells us where the errors are.
Another case issue with a <runner> tag It looks like XML won’t work for what we need.
What other options do you know of for Marketing to add new runners?
Collect data from a web page Odds are, you’ve already thought of  using an HTML form.
With a form, you can collect all sorts of  data and send it to the server for processing.
Forms have several different types of  elements used to collect various types of  data.
We’ll look at forms in much more detail in Chapter 10, but for now, let’s just use two of  the most basic form elements: a text box and a drop-down list.
You may be a pro at forms already, but let’s just take a quick look so we know what we’re dealing with here.
It would probably be easiest for now to just create a new tab with the form on it, right?
The <input> tag tells the form to expect information from this element.
The type tells the browser how to react when rendering it.
The name of the element is sent to the server for processing.
The <select> tag tells the browser to render a drop-down list.
The option element displays the list of options in a drop-down list.
The value of the chosen option is sent to the server.
That should work and be easy to do, since we’ve already figured out how to add tabs.
Then we can work on how we’re going to store/retrieve that data to display in the Finishers lists.
Ready Bake HTML & CSS Update your index.html file with an additional tab to add new finishers via a form.
Add a new HTML form for collecting and posting data to the server.
The action tells the form where to be sent for processing.
The method determines how the data will be sent to the server.
The new HTML form as it appears in the browser.
Open up index.html in your browser and select the Add New Finisher tab to see the new form and fields added to your page.
Now that you’ve got a form in place to collect the data, how do you think we should go about storing and retrieving it?
What to do with the data Now we need to send the data collected by the form to the server and store it somehow.
To do that, we’re going to use another language, PHP, to insert the data into a database.
Don’t worry! We’ll get you up to speed on PHP and databases in a bit, but first let’s focus on how we get our form data to the server.
There are two methods of  sending the data to the server using HTTP: GET and POST.
The main difference between GET and POST is how the data is sent to the server.
The data is visible after the ? in the URL.
The $_POST[] associative array contains all the information from the form elements.
This, like the $_GET[] array, is a series of  key/value pairs of  the form element names and values.
But, like we mentioned about the benefits of  jQuery and Ajax in the previous chapter, you don’t have to reload the entire page to get or send data, so the user won’t see the whole page reload each time.
However, before you send the data to the server using jQuery and Ajax, you need to get it ready for sending.
But if the form sends the information itself, why do we even need jQuery or anything else?
Format the data before you send it Before we can send information to the server (using Ajax), we need to do a little prepping to get it into a format that the Ajax call can send and the server will understand.
To do this, we serialize our data into a single object, so the Ajax call can send it as one single package.
The former will join all the inputs of  your form into a single string of  key/value pairs, separated by ampersands (&)
The latter will create an associative array of  key/value pairs, which is still a single object but is much more structured than the result of  the simple serialize method.
We’ll take a look at both, but we’re going to use serializeArray for our marathon data.
The form ID selector The serialize method Call the serializeArray method.
The form’s ID selector, followed by the HTML element input filter.
This tells the selector to only look at HTML elements of type “input.”
Send the data to the server jQuery provides a shortcut method, post, dedicated to sending data to the server.
The post method takes several parameters, including the URL you want to send your information to, the information you want to send, and a handler function that will run when the POST is complete.
Then send this information to the server using a jQuery post method.
Get the URL to post to from the action attribute of the form.
Also, create a clearInputs function that sets all values of the form fields to blank, if the post is successful.
You will also need to cancel the default submit action of the form (by returning false), using a .submit listener on the form with the ID of addRunner.
Don’t wory about this one right now; we’ll get to it a bit later in the chapter.
Then send this information to the server using a jQuery post method.
Get the URL to post to from the action attribute of the form.
Also, create a clearInputs function that sets all values of the form fields to blank if the post is successful.
You will also need to cancel the default submit action of the form, using a .submit listener on the form, with the ID of addRunner.
Get the action attribute of the form you want to post.
Prepare all the form fields for sending to the server.
Check the return value from the server, set in the PHP code, to see if the POST was successful or not.
Use an HTML element filter to access all the input fields in the form, and set them all to be empty.
Cancel the default submit action of the form to allow the jQuery code in the button click event to take care of sending the data.
MySQL databases are organized into tables, which store information as rows and columns of  related data.
Most web applications use one or more tables inside a single database, sort of  like different file folders within a file cabinet.
The database itself is often stored as files on a hard drive, but it doesn’t necessarily have to be.
The database server reads and writes data from/to the database.
The web server processes web page requests, runs PHP scripts, and returns HTML content.
Store your data in a MySQL database Relational Database Management Systems (RDBMS) are extremely organized applications designed to store, organize, and remember relationships between your various pieces of  data.
Often called database servers, they come in various shapes and sizes (and costs)
For our purposes, we’ll use a free database server called MySQL.
You communicate with a database server in a language it can understand, which in our case is SQL.
A database server typically runs alongside a web server, sometimes on the same server, and they work in concert to read and write data and deliver web pages.
Hey! Have you configured MySQL and PHP yet? Make sure you go through.
Appendix ii for installing and configuring PHP and MySQL before continuing.
To get your database, table, and users set up, we’ve written the SQL for you.
Open up MySQL Workbench, open a new connection, and run the following SQL.
Create a user, called runner_db_user, give it a password to log in with and allow that user to get, set, update, and remove data in the database.
Tell the script that the next piece relates to your new database.
Create a table called runners that holds all the information we want to remember about the people who finished the race.
The SQL you just ran creates a database, creates a user, grants access to the database for the new user and creates a table to store the runner info.
Let’s see how you can put some data in there.
Open up MySQL Workbench and open a connection to the server.
Paste the SQL from the previous page into the Query pane and press the lightning icon to run the SQL code.
You should get success messages in the Output pane at the bottom.
Anatomy of an insert statement There is one primary way of  putting data into our database, another way to change/update it, and a third to get it back out again.
We’ll look at getting data out in a bit, but for now, let’s focus on putting data into our database tables.
To put data into database tables, we use an insert statement.
A comma-separated list of the data you want to put into the table, corresponding to the list of columns listed.
The keyword “values” tells the statement that the list of columns is finished, and the actual data is coming next.
Tell the statement what table to put the data into.
A comma-separated list of the columns where we want to put the data.
They are mostly used to insert one record at a time, but some advanced SQL users can create insert statements that add multiple rows to the table.
For our purposes, however, we’ll stick to the one-at-a-time syntax.
It’s recommended that you specify the columns in the order you want to insert your data, although it’s not necessary.
Not specifying the columns can lead to data issues, since it will automatically put the first value in the first column, the second value in the second column, etc.
You’ll need very intimate knowledge of  your data tables to be confident of  using this method.
The values must be listed in the exact same order as the columns.
That’s how the database knows where to put the data.
Write the SQL insert statements to insert the data you already have in your XML file into your database.
You should insert one record at a time into the runners table you created earlier.
Now that you’ve written all the SQL necessary for inserting the runners into your database tables, open up MySQL Workbench and run your code.
Don’t worry! We’ll give you just enough PHP chops to do all the server-side communication you need—including talking to a database server—and that’s it.
But now that we have the runners in the database, how do we get them.
Use PHP to access the data PHP is a programming language, and it needs an environment to run in: a web server with PHP support.
Web browsers know nothing about PHP and, therefore, have no ability to run PHP scripts.
Web servers with PHP support are equipped to run PHP scripts and turn them into HTML web pages that browsers can understand.
Unlike HTML web pages, which can be opened locally in a web browser, PHP scripts must always be “opened” through a URL from a web server.
A quick way to tell if a web page is being delivered by a web server is to look for the URL starting with “http:”
Web pages opened as local files always start with “file:”
This PHP script is just a bunch of meaningless code to the web browser.
The web server understands this PHP code and runs the script!
If you do have a web server installed locally and it has PHP support, then you can test out PHP scripts directly on your local computer.
But first, let’s look at how we get our PHP file to handle POST data, too, so it can write it into the database.
We’ll also look at some of  the important things to remember when dealing with sending information to your server.
Handle POST data on the server We’ve already looked at the special object created to handle the transportation of  information from the form in the browser to the server: the $_POST object.
It’s an associative array of  all the information you sent, using the name (not the IDs) of  the HTML elements as the key for the associative array, and the information in the HTML element as the value of  the associative array.
The PHP code on the server reads the $_POST object and determines what information has been sent to the server.
You can get the information back out of  this array by using the key you sent with it (the name of  the HTML element)
The name of the array automatically created to handle data sent using the POST method to a PHP file.
The name of the HTML element that collected data on the form.
Hey, what’s left to do? I want to hit the beach!
We’re almost at the point where we can grab the data back out of  the database and figure out how to display it in our Finishers lists.
But first, we need a little more PHP to get us connected to the database…
Connect to a database with PHP Remember how when you went through the PHP installation process, you selected a particular library near the end of  the process?
This library will enable PHP to talk to the MySQL database.
We’ll use this library to connect to the database we’ve created so we can start reading out the runner data.
Write to the screen if the database connection is successful.
If it is not, the script will not reach this point.
The die command outputs a message and ends the PHP script.
Just like INSERT-ing, there’s a special syntax for reading the data back out again.
Open up your favorite text editor and add the code from the previous page.
Save the file as service.php in the same directory as your index.html file for this chapter.
Open service.php in your browser to see the results of  your database query.
Don’t forget, the PHP code must run through your web server, so the URL should say http://, not file://
Q: Is MySQL Workbench the only way to interact with or manage a MySQL database?
PHPMyAdmin is a common, web-based tool used to manage MySQL databases.
You can also use a terminal window to manage the database and the data from the command line.
A: There are many different PHP libraries, for a wide variety of purposes.
These range from SSL, Emailing (SMTP or IMAP), Compression, Authentication, other database connections, and many more.
Type “PHP libraries” into your favorite search engine to see a list of available libraries.
Use select to read data from a database To read data from databases, we use a select statement, and the data is returned in a resultset.
The resultset is a collection of  all the data you asked for in your select query.
Using a select statement, you can also join several tables, so you can get data from more than one table in the same resultset.
Create a select statement for the data we need to display the runners on the website.
Sort the data so it comes back ordered by finish_time, lowest to highest.
If you need to, look back to page 336, where you created the table, so you can get the column names right.
The “order by” keyword, followed by one or more column names, sorts the returned data in whatever order we tell it.
The “from” keyword tells the statement that the list of desired columns is finished, and where to get the data that comes next.
A comma-separated list of the columns that we want to pull the data from.
Tell the statement what table to pull the data from.
The “asc” keyword tells “order by” how to order the results (asc for ascending, desc for decending)
The SQL select statement retrieves columns of data from one or more tables and returns a resultset.
For plenty more info on PHP, SQL, databases, and tables, pick up a copy of Head First PHP & MySQL.
You’ve just created your very own SQL statement to retrieve the runners from your database.
Using MySQL Workbench, run your select statement to see all your data as it will be returned to you in the resultset.
It’s great that I can see the data in Workbench, but don’t we need it on the web page?
Let’s look at how we can get information from the database for display on our page.
The table where you want to get the data from.
Get data with PHP Up to now, we’ve looked at some very basic PHP and some not-so-basic PHP.
We’ve seen how to write some basic information to the screen and how to connect to a database and write a select statement to get information out of  a database.
Now let’s see how we can get information from a database and write that information to the screen.
Also create a $query variable and set its value to be the select statement you wrote earlier that selects all the runners from the database.
Last, using a while loop, go through each row of the resultset—which is an associative array—and print it to the screen.
Q: So, can a select only pull all my information from a table? I see I can limit the columns I get back, but what about the rows?
A: Yes, you can limit the rows you get back, by using a where clause.
We’ll look at this a little bit more in Chapter 11, but you can pass in a filter condition in the where clause, and only get the rows that match your condition returned to you in a select statement.
Q: Can I only get data from one table at a time?
A: No, you can join as many tables as you’d like in your query, often by a common identifier, and also in the where clause.
Joining many tables together can slow your database queries down a lot, so you need to be careful when doing it.
Q: What database is on 127.0.0.1? I see my website on “localhost.” What’s the difference?
What we see there is just a bunch of  arrays written to the screen.
They do contain the data we need, but not quite in the format we want.
Luckily, there’s an efficient method for arranging data in a format perfect for defining data structures.
Update your service.php file with the code you just created and then open it in your browser to see the results of  your database query.
Don’t forget, the PHP code must run through your web server, so the URL should say http://, not file://
The end result of writing all the data out to the screen.
Well, it’s data all right, but it looks complex and confusing.
Can we do anything to pretty it up a little?
That’s what makes it perfect for structuring and transferring data.
It’s based on a subset of  the standard used to define JavaScript, and is language independent.
That means it can be used with pretty much any programming language.
It is more efficient at transferring data than XML, and is based on name/value pairs, like associative arrays.
The values in JSON can be strings, numbers, arrays, objects, Boolean values (true or false) or null.
Arrays inside the JSON object are like other JavaScript arrays and have the same properties, like length.
Different JSON objects will have different structures, so you might not need as many dots to access the array object.
Multiple copies of the tgs increase the amount of data being transferred.
Other than the root element, there’s no logical connection between the elements.
If  this seems familiar, that’s because it’s almost the same as the post method we used earlier to get the data from the form.
This simple method is a shortcut for the ajax method, with several parameters already set for you.
To make this call without the shortcut, it would look like this:
As luck would have it, the PHP folks thought of  this already.
Let’s have a look at a few more PHP basics, and then see how to combine those with other PHP functions to get our data in JSON.
The returned data, in an object called json (more on this in a sec)
But the data we have isn’t in JSON format, just a series of arrays.
Let’s face it, nobody really likes a bunch of  coding rules, but there are just a few more things about PHP—much of  which are syntax—that we should take a look at to help you wrangle your data for jQuery.
Thankfully, we’ve already seen many of  these concepts in relation to JavaScript, so we’ll keep this as quick and painless as possible…
All lines of  PHP code must end with a semicolon (;)
After that, they must contain at least one letter or underscore, and then any combination of  letters, numbers, or underscores.
A few (more) PHP rules… There are a few more rules that will help us get the data we need, format it correctly, and get it onto our web pages.
You can access the array values using the index of  the item, in square brackets [ ], like JavaScript.
Arrays can also be associative, which means you can use a key to access the item in the array, instead of  the index.
To assign a value to a key in an associative array, you use the => operator.
Rules for conditionals JavaScript, as does the else clause, and the else if clause.
JavaScript, with the addition of  descriptive wordsand, or, and not—which can be used in place of the operators.
You can write out the contents of  an array using the print_r command.
Format the output using PHP OK, now that we’ve got that out of  the way, let’s see what PHP can do for us! The json_encode function in PHP allows you to take an associative array and convert it into a JSON-encoded string of  values.
Call this PHP function to encode the array in the JSON format.
Pass in any information you want to add to the array.
In this case, another associative array is getting added to the $my_array array.
Write the value out to whatever called the file—i.e., a browser or an ajax call, etc.
But before we can encode the data, it must be in a single associative array.
We’ve already seen a method to loop through the resultset and see each associative array in there.
What we need is a way to take each of  these arrays and combine them into a single one.
Using the PHP function array_push, we can add new items onto the end of  an array.
If you’re using a version earlier than that, either update your version of PHP or type “json_ encode PHP alternatives” into your favorite search engine, and you’ll find out just how the folks at PHP created that function.
That way, you can create your own so you can take advantage of its cool features.
Douglas Crockford, Yahoo!’s JavaScript architect, invented JSON to be what he calls a “fat-free alternative to XML.” He explains his reasons for that designation here: http://www.json.org/fatfree.html.
To see the list of languages that use JSON, visit http://www.json.org/
Q: So, if JavaScript and PHP have such a similar syntax, why can’t I just use JavaScript to do what I need??
A: Like we’ve mentioned, PHP is a server-side scripting language, and can interact with the web server and databases on your behalf.
The code is executed on the server, generating HTML, which is then sent to the client.
JavaScript, on the other hand, only lives in your browser, and interacts client side.
What is PHP again? A: PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely used, open source, general-purpose scripting language that is especially suited for web development and can be embedded into HTML.
You’ve just put a bunch of new learning about PHP, MySQL, and JSON into your brain.
We’re about to dive into a big exercise to pull everything together, so take a quick break and have a cup of coffee, take a walk, or do something else to give your brain a rest and get ready for what’s to come.
Update your my_scripts.js file with new function, called getDBRacers, which calls the service.php file.
This call should return a JSON object and then should alert out the number of runners that were returned.
Also update the startAJAXCalls timer to call this new function instead of the getXMLRunners function.
Then, update service.php to send back the runners’ retrieved data from the database, JSON-encoded.
Your my_scripts.js file now has a new function, called getDBRacers, which calls the service.php file.
There is no need for the old getXMLRunners function anymore, so you can get rid of that.
The new function accepts JSON returned from the service.php file and alerts out the number of runners that was returned.
The startAJAXCalls timer function has also been updated to call the new function.
The service.php file has been updated to send back the runners retrieved from the database, JSON-encoded and ordered by finish_time, starting with the lowest first.
Use the getJSON jQuery method to call the service.php file.
It got this name from the json_encode method in PHP.
Put the returned data into our own associative array.Encode our associative array in the JSON format and write it.
Return the resultset to whatever called this function.Handler functions to deal with.
Update your service.php and my_scripts.js file with the code you just created, and open index.html in your browser.
Open the “Network” tab in the Developer tools, and you’ll see the JSON information getting loaded in.
Do we use find and each, like we did with the XML, to display it?
We know that we have the data in JSON format, since it was our own PHP code that created it.
Now we’ll (finally) take a closer look at that JSON object we kept telling you we’d get to, so we can get the data back out.
The function alerts out the number of records returned in the JSON object.
In the “Network” section of the browser tools, the JSON information is visible in the JSON tab.
Access data in the JSON object The json_encode function in PHP allows us to convert an associative array into a JSON-encoded string of  values.
These values can then be accessed in JavaScript as associative arrays too, so we can loop through them and interact with them in the same way we interact with other arrays.
When we were using XML, we had to scan through the data to find the next runner.
Then, once we found a runner, we again had to find if  the runner was male or female.
It contains a single array, called runners, as a property.
And, once we have the array, we can use the key of  the associative array to know if  the runner is male or femalewhich is much more efficient than looking for it each time.
Update your getDBRunners function to read the JSON object from service.php.
Then, use conditional logic to decide which list the runner goes in.
But watch out! Only do that if there are actually runners returned in the JSON object.
Using conditional logic and the information returned in the JSON object, you can determine which list the runner should go in.
Like before, the runners should also always be added to the all_finishers list.
We can use each method to loop through all the elements in the array returned in the JSON object.
This method is slightly different from the (selector).each method, since it can iterate over non-jQuery arrays, like our runners array.
Check if the current object property of gender is m or f.
Then open up index.html and see your runners get loaded from a MySQL database, using Ajax, JSON, and PHP.
Look, it’s great that we can get data this way, but we really need this working with the form we created for the marketing department, right?
Once we get that part finished, aloha Waikiki! Let’s make sure the data Marketing is putting in doesn’t get us into any trouble first.
Use the same PHP file for multiple purposes We’ve looked at the two ways of  sending data to the server to be processed by PHP: POST and GET.
In combination with some conditional logic, we can detect if  there was a POST or a GET request to our PHP file and act accordingly.
Remember that hidden field we added to our form a few pages ago?
Data sanitization and validation in PHP With the increase of  spam bots and hackers trying to get ownership of  your dataset for nefarious purposes, you should never trust the data that is entered into a web form.
It’s always a good idea to validate and sanitize any data sent to your server before you insert it into your database.
This ensures that you got the type of  data you expected for a particular field (validation) and that the data you received doesn’t contain anything that could be potentially dangerous to your server or database (sanitization)
This can help protect you against issues like SQL injections, drive-by cross-site scripting issues, and lots of  other nasty things you can find out more about online.
For our application, we’ll use some nifty PHP methods to clean up our data and make sure the correct data is used.
Converts some special HTML entities in a format that is safe for the database.
The pattern matching using regular expressions can be very specific, so you can really control the type of data entered.
We can watch for this value in the POST, and know that we posted a form.
Then, we can run some data validation and sanitization functions to make sure we got all the data we want.
Similarly, if  we update the getJSON call to get the runners from the database with a URL parameter (for the $_GET PHP object), we can target just that code in the PHP file to run.
That way, we’ll only have one PHP file to maintain.
Use this to tell the PHP function to run the code associated with getting the runners from the database.
Ack! Everyone’s clearing their desks and heading to the airport! So, we know how.
It will handle both the GET and POST of  information.
You’ll also need to include the db_connection, success, and fail functions from before.
Check if there was a value of addRunner POSTed to the server.
Check if the getRunners value was sent in the URL string.
Awesome! Let’s get on that plane and have a few.
Update the getJSON call to include a URL parameter called action with a value of getRunners to tell the service.php file to return the runners.
After updating your service.php and my_scripts.js files, open up index.html in your browser.
You should also be able to add new runners to the list using the form on the new tab you created.
It’s your standard crossword; all of the solution words are from this chapter.
Management Systems (RDBMS) are extremely organized applications designed to store, organize, and remember relationships between your various pieces of data.
A jQuery shortcut method that’s dedicated to sending data to the server.
The method takes several parameters: URL, the information you want to send, and a handler function that will run after the data is sent.
Server-side scripting language often used to send data collected in a form to the server.
Popular, open source database server that you can download for free.
The jQuery shortcut for getting JSON information from a server.
Another jQuery form helper method that will create an associative array of key/value pairs (which happens to make for great structured stoarge)
A special type of array that holds its information in name/ value pairs.
This one will append the form field names and their values onto the end of the URL.
This one also sends data, but doesn’t make that data visible in the URL string.
The jQuery form helper method that will join all the inputs of your form into a single string of key/value pairs, separated by ampersands (&)
The SQL command used to put data into a table.
The SQL command to retrieve data from a database table.
Management Systems (RDBMS) are extremely organized applications designed to store, organize and remember relationships between your various pieces of data.
A jQuery shortcut method that's dedicated to sending data to the server.
The method takes several parameters: URL, the information you want to send, and a handler function that will run after the data is sent.
Server side scripting language often used to send data collected in a form to the server.
The jQuery shortcut for getting JSON information from a server.
Another jQuery form helper method that will create an associative array of key/value pairs (which happens to make for great structured stoarge)
One of two methods used to send data to the server from an html form.
This one will append the form field names and their values onto the end of the url.
One of two methods used to send data to the server from an html form.
This one also sends data, but doesn't make that data visible in the url string.
The jQuery foirm helper method that will join all the inputs of your form into a single string of key/value pairs, separated by ampersands (&)
The SQL command used to put data INTO a table.
The SQL command to retrieve data from a database table [SELECT]
A text file that contains PHP code to carry out tasks on a web server.
The PHP command for sending output to the browser window.
How about we go back to my place for some.
Gimli are dedicated to collecting as much cryptid sighting data as possible from users around the world.
The good doctors have another gig for you: update their very outdated Cryptid Sightings form.
Cryptids are creatures unknown or unrecognized by the scientific community.
We need a better form to capture when and where people see them.
I wish I could get the paparazzi off my back!
The cryptozoologists want to say good riddance to their old, clunky HTML form.
There’s nothing visual that assists the user in entering quality data, and HTML doesn’t offer a lot of options for that.
As a result, the doctors get a lot of junk data.
We’d like our users to click and drag to enter the numerical data fields.
Can you make the button look nice? The pill-shaped button on our current form makes it look like we’re way out of date.
We use radio buttons for this one on the current form; can we make them look more inviting?Mammal.
Below is a mockup of  what our cryptozoologists want the new form to look like, along with a few extra notes.
They want you to build a user interface like you would find in a desktop application.
What do you think jQuery offers that can accomplish this?
The current form is an HTML form, but HTML and CSS aren’t going to cut it for the new form the cryptozoologists want.
Have you ever tried to style form elements with CSS? I’d rather have a root canal.
Frank: Yeah, and jQuery…well, I haven’t seen anything in jQuery that will help us build interface components like that.
Folks are used to fancy components like this, so we’re going to have to find a way to build them.
Frank: We’ll probably need a combination of  JavaScript, jQuery, and CSS to pull this one off.
Just the calendar pop up they want will be lines and lines of  code and a bunch of  complex CSS.
There may be a jQuery plug-in for this kind of  stuff, actually.
Jim: A plug-in, right! We used one a couple chapters back to create tabs for the Bit to Byte race results page.
Joe: Yeah, if  jQuery doesn’t offer something a developer needs, that developer can build a plug-in and release it to the jQuery community for it to use.
Jim: So some developer or dev team out there may have already dealt with this?
Joe: Let’s go poke around out at jQuery.com and see what we can find.
Did you guys check out the sketchup of the “Submit Your Cryptid Sighting” form?
Wouldn’t it be dreamy if there were some sort of library of.
Save coding headaches (and time) with jQuery UI Fortunately for developers everywhere, jQuery has an official library of  user interface plug-ins for just this kind of  project.
That library is called jQuery UI, and it offers three main types of  plug-ins for the jQuery core: effects, interactions, and widgets.
You can enable users to interact with elements by making those elements draggable, droppable, or sortable, just to name a few of  the options.
A web widget is a self-contained component that adds functionality to your web app.
Widgets save you tons of  coding time and complexity while creating usable and responsive user interface elements.
Try out some jQuery UI effects, interactions, and widgets by visiting the following URLs and doing what the instructions say.
A lot better than a boring, old JavaScript alert box, no?
We’re going to focus mostly on widgets for our UI work in this chapter.
Interaction: Gives an element draggable handles that allow a user to scale it.
Widget: Displays the current percentage of  completion for some event.
Interaction: Makes a DOM element a target for draggable elements.
Effect: Makes an element appear to expand and dissipate into transparency, like smoke.
Widget: Creates stacked and collapsible areas to organize web content.
Widget: Provides a list of  possible values when a user types into an input field.
Resizable Effect: Makes an element appear to break into pieces and spread out in several directions.
Effect: Makes an element appear to slide up or down like a window treatment.
Match each jQuery UI plug-in to what type of  plug-in it is and what it does.
Hint: If  you’re not sure, spend some more time poking around the demo site from the Test Drive on the facing page.
Match each jQuery UI plug-in to what type of  plug-in it is and what it does.
Interaction: Gives an element draggable handles that allow a user to scale it.
Widget: Displays the current percentage of  completion for some event.
Interaction: Makes a DOM element a target for draggable elements.
Effect: Makes an element appear to expand and dissipate into transparency, like smoke.
Widget: Creates stacked and collapsible areas to organize web content.
Widget: Provides a list of  possible values when a user types into an input field.
Resizable Effect: Makes an element appear to break into pieces and spread out in several directions.
Effect: Makes an element appear to slide up or down like a window treatment.
We’ll only need the UI core and widgets for this project, so select only the ones shown here.
One of the best things about jQuery UI are its themes.
The dev team for jQuery UI included all of the CSS for making a nice-looking interface.
You can even create your own theme with jQuery UI’s “theme roller.” For a gallery of all the jQuery UI themes, visit the following URL:
You just need to unzip the folder and include the library in a project folder.
Turn the page, and we’ll have a look inside jQuery UI.
Before we can do anything with jQuery UI, we need to configure the components we want, choose a theme, and download a copy of  it.
Build a datepicker for users to enter the date of the sighting.
Build more engaging radio buttons for users to choose the creature type.
Build a color mixer interface component for the user to enter creature color.
After downloading and unzipping jQuery, you’ll find that it’s structured like this:
In the head section of the sightings.html form, we need to link to this file so that the jQuery UI widgets look right.
As of this writing, jQuery UI is at version 1.8.16
We need a script section in the sightings.html form that links to this.
The UI folks make sure that you have a copy of the jQuery library.
We’ve included the jQuery UI folder in the code folder you downloaded at the beginning of  the book.
You’ll find it in the end folder inside the ch10 folder.
Open the file in your favorite browser and click into the input field.6
That’s it! You just added an interactive widget to the form.
It’s amazing how easy it is to put a jQuery UI widget into an HTML form.
It’s cool that all that stuff happens and I only have to write a little bit of HTML and jQuery.
But does that mean I’m stuck with how the calendar looks and functions? What if.
Just like all the other jQuery code you’ve written, the datepicker uses a selector and a method.
Using the jQuery and jQuery UI library, the JavaScript interpreter asks the DOM for the element whose ID is datepicker.
The DOM grabs the selected element, runs the datepicker method on that element, and returns it to the interpreter.
Hey DOM, give me back the element on the page with an ID of datepicker.
The datepicker method instructs the JS interpreter to build the datepicker on the fly along with a load of HTML, CSS, and built-in interactivity.
The calendar widget that magically appears on the page is a table nested inside multiple divs.
Every time you click, a new table for that month is generated on the fly.
The current date will be highlighted in a different color.
If  you dig into the datepicker widget, you’ll find that it’s got a lot of rich features and options you can configure.
The stepMonths option lets you change how many months you want to hop.
Because jQuery UI is built on jQuery, you don’t have to write much code to customize the datepicker widget to fit your needs.
At the time of  this writing, the datepicker has 46 different options you can set.
If you set the changeMonth option to true, the user can choose the month from a drop-down list.
Write the code that will let the user change both the month and the year of the datepicker widget using a drop-down.
Hint: Put a comma between the options when you’re setting more than one.
Write the code that will let the user change both the month and the year of the datepicker widget using a drop-down.
Hint: Put a comma between the options when you’re setting more than one.
We need to include the jQuery UI library to make all the cool UI features available.
We need to link to the jQuery UI CSS file so the widgets look right.
Build a datepicker for users to enter the date of the sighting.
Build more engaging radio buttons for users to choose the creature type.
Build a color mixer interface component for the user to enter creature color.
Click the “next” and “previous” buttons and the month and year drop-down lists to make sure everything works.
The buttonset method groups the buttons for you and runs the button method on each element.
The button method turns a plain old HTML radio button into a nice-looking, more interactive button.
The button widget styles the label to appear as a button.
For building a grouped set of  buttons, jQuery UI offers the buttonset method, which turns individual button elements into a group by referencing the container element for that group.
Don’t forget that the markup code for input buttons needs to be inside an HTML form tag.
What does “more engaging” really mean? It’s mostly a question of  style: make a better-looking button, and people are going to want to click it.
One super-useful widget in the jQuery UI library is the button widget.
The button widget offers a button method to help you make more appealing form elements like submit buttons, radio buttons, and checkboxes.
In the code folder, you’ll find that we added buttons for Yeti and Other too.
Then, open the page up in your favorite browser to make sure everything’s working.
Build a datepicker for users to enter the date of the sighting.
Build more engaging radio buttons for users to choose the creature type.
Build a color mixer interface component for the user to enter creature color.
Control numerical entries with a slider The plug-in for the jQuery UI slider gives you the power to build a slider interface that users can control with their mouse or keyboard.
Sliders also help you control the numbers that users enter.
As you’ve already seen, building widgets is a snap once you have the jQuery UI library.
The user can move the slider handle with the mouse cursor or with the arrow keys on the keyboard.
Let’s say we need the user to enter a set of  numbers.
Here’s how we can do that with the slider widget’s options:
As the user slides the slider handle along the slider track, the slider’s value changes.
The value option tells the slider what value to start with.
The min option tells the slider the lowest value a user can enter.
The max option tells the slider the highest value a user can enter.The step option tells the slider what increments we want the values in.
The orientation option can be set to horizontal or vertical.
We have to connect the slider with one of the slider widget’s event handlers.
We’ve seen some widget options, but we haven’t yet explored another powerful feature of  jQuery UI.
Many jQuery components offer event handlers, and the slider is one of  them.
At the time of this writing, jQuery UI’s slider widget offers five event handlers: create, start, slide, change, and stop.
To connect the slider to a form input, let’s try out the slide event handler.
The slider widget’s got some great options, but how do we get the value from the slider into a form input?
The user triggers the slide event when she moves the slide handle.
When the function runs, this sets the input with the jQuery val method.
When the user slides the slide handle, the function is called and the input is updated to the slider’s value.
If you don’t want the user to be able to type to enter a number, set the input to “readonly.”
Fill in the blanks for the code for each input field the cryptozoologists want.
They’ve left some notes on the slider options for you to set.
Fill in the blanks for the code for each input field the cryptozoologists want.
They’ve left some notes on the slider options for you to set.
Add the code from the long exercise on the previous pages to your files.
Make sure to test the sliders using your mouse and keyboard (the left and right arrow keys should advance the slider by its increments)
Users can now enter the data by sliding the handles, and the cryptozoologists have much better data quality control.
You’ve got two more number sliders to build: latitude and longitude.
Then you can check off another item from your project checklist!
But latitude and longitude have negative values and decimal intervals like 0.00001
Fill in the jQuery code to make the sliders for latitude and longitude work.
The slider widget can deal with negative numbers and decimal numbers.
You can enter negative numbers as values, as minimums, and as maximums.
Give that a try below to see it in action.
Fill in the jQuery code to make the sliders for latitude and longitude work.
What’s up next? Now you need to build the cryptozoologists an interface that will allow users to enter the color of  the creature they saw by using sliders that represent red, green, and blue.
So far, you’ve checked off  quite a few items from the list:
Build a datepicker for users to enter the date of the sighting.
Build more engaging radio buttons for users to choose the creature type.
Build a color mixer interface component for the user to enter creature color.
When red, green, and blue’s values are all 0, you get black.
So you need to build three different sliders: one for red, one for green, and one for blue.
Then you’ll combine each of  the slider’s values to become one color.
Let’s look at what we need each slider widget to do.
When red, green, and blue are all at 255, you get white.
We need the values from each slider to be concatenated to create the div#swatch’s color.
We also need the swatch to be updated every time a user slides one of the slider handles.
This will get your files set up to build the color picker.
Each of these styles puts the color of the slider in the slider track.
This CSS ID style defines the swatch that will show the color as the user changes the slider.
The input field that will hold the hex value of the color.
The script below sets up the red, green, and blue color sliders.
Read each line and think about what it might do based on what you already know about jQuery and jQuery UI.
If you’re not sure what a line does, it’s perfectly OK to guess.
Sets the slider range so the user can only select a maximum.
Q: What’s all that CSS that comes with jQuery UI?
A: The great thing about jQuery UI is that the developers have thought out a lot of the complex CSS so that you don’t have to.
To read more about those CSS classes, visit jQuery UI’s documentation at the following URL: http://jqueryui.com/docs/Theming/API.
Q: You said we can make our own theme for jQuery UI.
A: You can easily create your own theme by using jQuery UI’s theme roller.
First, point your browser to the theme roller application here:
You’ll see settings for things like font, click states, drop shadows, and overlay screen.
Make your own custom changes, and the UI elements will change to reflect your design settings.
When you have your theme set how you want it, just click the Download Theme button, and you’ll be taken to the Build Your Download page to create your own jQuery UI package.
If you want to save your theme for later, just bookmark that Build Your Download page.
A: Interactions allow you to create the kind of interactive functionality you would find in a desktop application.
Using the Draggable widgets, you can turn your elements into draggable components.
The Droppable widget can be a target for a droppable widget.
The Resizable widget turns your element into a scalable object whose size you can change by dragging on its corner, its right border, or its bottom border.
Selectables are widgets that turn your elements into selectable components.
A site visitor can drag his mouse over those elements to select them just like he might select files on his desktop.
Sortables are widgets that can be interactively reordered by the user.
Build the refreshSwatch function To finish our color mixer, we need a JavaScript function that will set and refresh the swatch.
Here’s a skeleton version of  that function, along with some of  the key questions to consider before fleshing it out to get it to do what you want.
The script below sets up the red, green, and blue color sliders.
Read each line and think about what it might do based on what you already know about jQuery and jQuery UI.
If you’re not sure what a line does, it’s perfectly OK to guess.
How will you get the values of each slider into each of these variables?
We need to concatenate the RGB values in this variable so that we can set the color swatch.
What jQuery method will let us set the color swatch’s color?
We can simply use jQuery’s val method to set the input fields to show the value of the sliders as they change.
That way, the user will know what the values are.
Sets the slider range so the user can only select a maximum.
Turns each of the divs for R,G,B into slider widgets.
Sets the value so the slider handles are roughly in the middle.
Sets the max value to 255 to stick within the color limits.
But that’s just a hint for one of the questions.
To write the whole function, you’ll have to do a little brain workout.
We’ve already seen how to get the values from the sliders, but how do we create the color swatch? Don’t we need a bunch of code to convert hexadecimal web colors?
Remember that the CSS background-color property allows us to specify colors like this:
Fill in the blank lines of code to finish off the refreshSwatch function.
Update your my_scripts.js file to include the code for the color slider and refreshSwatch function on the previous pages.
They will trigger the slider values to run the refreshSwatch function when the web page loads, which will start the web page with a colored swatch rather than an empty one.
Make sure to test the sliders using your mouse and keyboard (the left and right arrow keys should advance the slider by its increments)
The users can now enter data by sliding the slide handles, and the cryptozoologists have much better data quality control.
This color slider rocks! Our research will be so much easier now.
Q: We used the rgb setting for background-color for the color slider we built.
What if I want to make a color slider that uses standard hex notation for colors?
A:We tried to create the most elegant and simple code possible for the color slider.
If you need a color slider that will collect data in hex color format, you’re in luck.
You can use the sample code for a simple color picker provided at the jQuery UI site.
Q: I need a form field that will suggest search terms as a user types.
A: Yes! One of jQuery’s newest features, at the time of this writing (August 2011), is the Autocomplete widget, which displays suggestions for search terms as a user types into a form field.
For more information on this widget, visit jQuery UI’s demo page here:
Q: Does jQuery UI provide any sort of form validation?
Unfortunately, jQuery UI does not provide form validation, but there is a jQuery plug-in that works well for validation.
You’ve used buttons already in this chapter and you’ve been using buttons since Chapter 1, so this one should be pretty easy for you!
Build a datepicker for users to enter the date of the sighting.
Build more engaging radio buttons for users to choose the creature type.
Build a color mixer interface component for the user to enter creature color.
Sure, we’ve used buttons since Chapter 1, but this is a jQuery UI button and an HTML form element.
Write the single line of code you need to add to my_scripts.js that will transform the pill button into a themed jQuery UI button.
We’ve used jQuery’s click method and jQuery UI’s button method, but we haven’t done much with selecting form elements like input submit buttons.
Your form looks great, but it doesn’t actually submit any data at this point.
However, you learned everything you need to do that back in Chapter 9, so take some time to think through how you could make this stylish form truly functional.
The end folder in the code you downloaded for this chapter contains all the code you need to get this up and working: sightings.html, service.php, and sightings.sql.
You will have to do some work on your own to get it set up, but that’s what being a web developer is all about, isn’t it? We included the Ajax and JSON methods you learned in Chapter 9 so that the form you just built can submit data.
You need to do all of the setup on your own (i.e., run the sightings.sql script or create the database with the fields in that script yourself, and add the Ajax and JSON methods to your my_scripts.js file)
Your jQuery Toolbox You’ve got Chapter 10 under your belt and now you’ve added jQuery.
Saves you tons of coding tim e and complexity while.
Sliders UI elements that users can manipulate with their mouse or keyboard, controlling the data that they enter.
Include five event handlers that you use to connect the slider to a form input: create, start, slide, change, and stop.
I wonder what I’ll get this year? I hope it’s.
Those companies, and many others, provide APIs (application programming interfaces)
Gimli want to add some more cool features to their website—think you’re up to the task?
Thank you so much for helping make our website more user-fr iendly and easier to.
We’ve had a substantial increase in traffic, so we’re really.
We’ve had several requests to make the information more acc essible to the masses.
Lots of people are interested in the sightings data, so we’d like to give them a way to.
We’d like to be able to select a single sighting and view the information associated.
Along with the information about the cryptid, we’d like t o see the latitude/
When a point is displayed on the Google map, we’d like to b e able to click it to see.
We’d like to be able to select the creature type from a list an d display all the creatures.
Can all these points be clickable, as well as the list of creatures, so.
Not too much to ask, right, since we already have all the inform ation stored?
Joe: Are you talking about the Google map we need to build?
Jim: Multiple points on the map—one for each of  their cryptids—each being clickable for more information…
Frank: Yeah, I think I know how to do that.
Jim: And custom click on the list to interact with the points and show the “more information” pop ups on the map.
Frank: Yeah, uh, I’m not too sure how to do that.
The Google Maps folk provide an API we can use to get the job done.
It’s how companies like Google, Netflix, and Yahoo! enable us to use some of  their cool tools on our own sites.
Jim: That does sound pretty cool, but will it give us all the pop ups and whatever else we need to put on the map?
Maybe we should look at the Google Maps API to see how it works.
It looks like the crypto doctors are only asking for a few things.
The Google Maps API For any API you want to use, you can look up documentation and get sample code online.
Let’s see what’s going on in the code in a little more detail.
Pass in some latitude and longitude values as parameters of our object.
Create an array to store some options for the map.
Set the map variable to be a new Google Maps object.
Back in Chapter 6, we created our own JavaScript objects with properties and methods to store and use information as we saw fit.
Many companies—like Google, Netflix, Microsoft, and Yahoo!—also create API objects to allow us to interact with their data.
If  you need a little reminder, feel free to hop back there to reacquaint yourself  with objects and how they work.
Like we saw back in Chapter 6, objects offer smarter storage.
You use objects when you need to store multiple variables about a particular thing.
An API is just a series of  object constructors that allow you to create your own instances of  other people’s objects.
Then, once you have an instance, you can use all the properties and methods associated with those objects in your code!
The complexities of  creating a mapping application for everyone to use are exactly why Google uses objects in its API.
That way, it can create objects with many different methods and properties for all the different elements you’d need to build a map.
From the code on the previous page, you can see that the map object has properties of  zoom, center, and mapTypeId—plus many more that we haven’t shown here.
Create a new page called display_one.html and save it in your project folder for this chapter.
So APIs do everything with objects? Why would we use objects created.
Include Google maps in your page First, make a copy of  all the files you have from the end of  the previous chapter.
We’ll use all the same files in this solution too, so we might as well pick up where we left off.
All that code plus your new display_one.html file will give us two important new things:
This function will then create a new instance of the Google Maps map object, using some parameters defined in the code.
The new map object will then be applied to the map_canvas element on the page.
Also, update your existing form.css file to include some style definition for the map container.
To include a Google map on that page, you’ll need to create a maps.js file and add a function to it that calls the API code to build a map on the page.
This function will then create a new instance of the Google Maps map object, using some parameters defined in the code.
The new map object will then be applied to the map_canvas element on the page.
Also, update your existing form.css file to include some style definition for the map container.
A: You can find more information about the API’s objects, methods, and more at http://code.google.
This website offers some example code and more details about all the different objects and methods you’ll need to interact with.
Q: Is Google Maps my only option for creating a map?
A: Definitely not! It is probably the most popular though, which is why we’re using it here.
Update your maps.js file with the initialize function you put together with the magnets.
Also, ensure that the maps.js file is included in display_one.html.
You should run all your code through your web server, so the URL should say http://, not file://
It’s great that it was that easy to get a map on the page, but I don’t see any of the cryptid data yet.
We need to get that out of the database, right?
Back in Chapter 9, you learned how we can get information from a MySQL database, using jQuery, Ajax, JSON, PHP, and MySQL.
Although that’s quite a list of  technologies, it did exactly what we needed it to.
Getting JSON data with SQL and PHP Chapter 9 showed how a SQL select statement could pull the information you wanted out of  the database so that a PHP file could turn it into JSON and return it to our page, using Ajax.
You also learned how to use Ajax to get JSON-encoded information from a PHP file.
For PHP to return JSON data, it was easy—the json_encode function, which accepted an array, gave back JSON-encoded data so that jQuery could interact with it.
For this chapter, we’ve written all of the PHP and SQL for you.
As long as you’ve got the MySQL database from Chapter 10, you’re good to go! The rest of the SQL and PHP code are in the downloads for this chapter.
You can download all the PHP and SQL in a single file from http://thinkjquery.com/chapter11/end/service.zip.
The database itself is often stored as files on a hard drive, but it doesn’t necessarily have to be.
The web server processes web page requests, runs PHP scripts, and returns HTML content.
Add a div and a ul element to hold the data, some CSS to style the list, and a function to get the data, via JSON, to add each cryptid to the list.
Add a div and a ul element to hold the data, some CSS to style the list, and a function to get the data, via JSON, and add each cryptid to the list.
Test Drive Update your maps.js file with the getAllSightings function you just completed.
Also, add a call to this new function at the end of  the initialize function.
This assumes you’ve added some creatures to your database, back in Chapter 10; if  not, be sure to do so now.
Remember, you should run all your code through your web server, so the URL should say http://, not file://
That’s nice looking and all, but all this code still doesn’t actually display anything on our map.
We need to be able to add our cryptid data to the map.
Google Maps provides a very easy method to do this.
Points on a map are markers When it comes to putting points on a map, Google’s got it down.
Markers are objects—just like everything else in the Google Maps API—and have their own methods and properties for interaction and manipulation.
Here, we’ve set the position of the marker, what map to add it to, and the title of the point.
Define an object called my_marker as an instance of the Google Marker object.
Update your getAllSightings function to add a click event listener to the list item, before it gets added to the list.
This click event should call a custom function, called getSingleSighting, which take a single parameter—the ID of the clicked sighting.
This new function should then load information about the clicked item and add it as a marker on the map, using its latitude and longitude properties.
After you’ve completed the code, your list items will be clickable, which will then load data about the clicked cryptid and put it on the map.
Update your maps.js file with the getAllSightings and getSingleSighting functions you just completed.
Then open up display_one.html in your browser, using http:// like before.
How’s the other piece of what we asked for coming along? You know, where we have multiple.
You’ve already nailed the first two requirements, so let’s have a look at the final thing the doctors asked for.
We’d like to be able to select the creature type from a list an d display all the.
Can all these points be clickable, as well as the list of.
This new file will display the list of  creature types that can be selected.
Then, once selected, all the creatures of  that type will be displayed on the map.
The structure and style of  this new page is very similar to our old page, except for the addition of  a select element with the ID of  ddlTypes.
Multicreature checklist Here’s what we need in order to nail this last request:
A drop-down list with the list of creature types (selected from the database)
When the drop-down list changes, get a list of creatures from the database that match the selected type.
Display all the creatures returned from the database in the list and on the map.
Both the list and the map pointers should be clickable so users can get more information on the map to pop up.
Add a drop-down list, to be populated with creature types.
This function will call the service.php file (which should be included in your downloads for this chapter) to get a list of the different creature types in the database.
These creature types should then be added to the drop-down list, with the ID of ddlTypes.
Also, create an event listener on the drop-down list to listen for a change event and alert the selected value.
Finally, since we’re using the same maps.js file for our two HTML files, add some logic to the initialize function to check if the drop-down list exists.
Use the .length property to check for the existence of an element.
Add a listener for the change event on the drop-down list.
Set the text of the item in the dropdown list.
Get the types from the database, using JSON and PHP.
Test Drive Update your maps.js file with the getAllTypes function and the event listener for the change event on the drop-down list.
A drop-down list with the list of creature types (selected from the database)
When the drop-down list changes, get a list of creatures from the database that match the selected type.
Display all the creatures returned from the database in the list and on the map.
You’ll have this map finished up in no time! Time to cross off  a couple of  those requirements.
Hey! Not so fast! When I select an item from the drop-down list, I don’t see creatures.
I don’t think we’re done with the second item yet!
We need to update our code so we can get information from the database when the drop-down list is changed, instead of  just showing the creature type in an alert box.
But while we’re at it, we should be able knock off  the third item on the list too.
Roll up your sleeves—we’re about to dive in and put this all together.
Fill in the missing lines of code to create a getSightingsByType function.
This function should accept one parameter: the creature type you are viewing.
This function should get its data in JSON format, loop through all the returned creatures (if there are any), and add points for each one on the map.
Also, create two more global variables: an array called markerArray and a new Google Maps LatLngBounds object called bounds.
Also, create a function that clears the previous points, before adding any new ones, if the drop-down list is changed.
With the addition of the two new global variables and some other Google Maps functions, you can now add and remove markers from the map when the drop-down list is changed.
As the markers are being added to the map, they are also added to the markerArray array and used to extend the map’s bounds.
This way, the map can autozoom to fit all the points, using the fitBounds function.
The getSightingsByType function, now called on any change of the drop-down list, adds the markers to the map and adds the creature to the list on the page.
Create a new Marker object for each point on the map.
Tell the map to use our bounds to zoom to the correct level so we see them all.
We’ve included a function called clearOverlays that will remove the previously added markers before adding the new ones.
Google refers to anything added to a base map as an overlay, which can be a Marker, a Line, a Polyline, a Polygon, or many other types of objects.
Before we get the data to add the markers to the map, remove all the old markers.
Pass the value of the drop-down list as a parameter to our function.
Test Drive Update your maps.js file with the new code you just created.
A drop-down list with the list of creature types (selected from the database)
When the drop-down list is changed, get a list of creatures from the database that match the selected type.
Display all the creatures returned from the database in the list and on the map.
Q: So, is the Google Maps API free for me to use on my website?
A: Yes! Google makes the API freely available to everyone who wants to use it—personal or commercial—as long as they comply with the Terms of Service.
There are only a few countries that are not covered.
Check out the Google Maps API site to find the list.
At the time of publishing, version 3 of the Google Maps API has been released.
It has been developed to cater to mobile devices with browsers capable of running JavaScript.
A: If you’re writing for the Android or iPhone platforms, then yes.
Google provides specific frameworks for both of these platforms for you to include in your app.
If you’re writing for another mobile platform, there is no specific framework yet, so you’ll have to use the same as on your website.
Q: The full version of Google Maps lets me get directions.
There is another API produced by Google, called the Google Directions API, that you can use to find the directions.
Q: What about finding places on a map by address?
Google has yet another API to do that: the Geocoding API.
These are all part of the Google Maps API family.
Also, luckily for you, whenever you request data from Google, it will return JSON data to you, which you already know how to handle!
There’s also the Static Maps API for browsers that don’t fully support JavaScript; Maps API for Flash; and even an Earth API, which lets you load a Google Earth viewer into your page to get 3D images of the globe, as well as take virtual tours and draw shapes over the terrain.
This one requires the Google Earth plug-in to be installed too, though.
A: Yes! There are countless numbers of APIs available—some free, some that require licensing.
Chances are, if you’re looking for a specific piece of functionality you don’t want to write, there’s probably an API for it somewhere.
You already know how to make things clickable with jQuery.
How will this help complete the final requirement on the list?
Define a variable with the content we would like to show.
Tell the map to listen out for a click event on our marker object.
Run this code when the marker is clicked (open a pop-up window on the map)
Set the value of the content property of the InfoWindow object.
Listening for map events We’re almost at the end here, and by now you’ve seen a whole variety of  events that jQuery and JavaScript provide for making fun, interactive web apps.
Since the Google Maps API is just JavaScript (albeit very well written and efficient JavaScript), it too can utilize the browser’s ability to listen for events and act accordingly.
And for the same reasons that jQuery added its own event listener creation functions, the folks on the Google Maps end of  things have provided the capability to add event listeners through the API.
This is because not all browsers deal with event listeners in the same way, so this ensures that the API can control how the listeners are added to the page.
Let’s have a look at adding an event listener for the click event to create a Google Maps pop up (also called an InfoWindow):
In the Google Maps API, almost all the different object types (Map, Marker, Line, InfoWindow, TrafficOverlay, Polygon, and more) have events associated with them.
However, even if the events for the different objects have the same event name, they may take different parameters! Be sure to check the documentation for the object you want to use.
Fill in the missing pieces of code to complete the getSightingsByType function, which will add the click functionality to both the markers on the map and the items on the list.
Also, create a global variable called info_window, which will be a new instance of the Google Maps InfoWindow object with the default content set to an empty string.
You’ve now updated the getSightingsByType function to display in list format and on the map, along with making the map markers and the list clickable.
Add an event listener to the Marker, on the map, for the click event.
Add an event listener item on the list to open the InfoWindow on the map.
Test Drive Update your maps.js file with the new code you created on the previous page.
Click on the markers or the list to view more information about the creature.
A drop-down list with the list of creature types (selected from the database, if possible)
When the drop-down list is changed, get a list of creatures from the database that match the selected type.
Display all the creatures returned from the database in the list and on the map.
You did it! In just a few short pages, you managed to put together a fully functional website, using code from several different languages—PHP, SQL, JavaScript, and jQuery—as well as pairing up the the Google Maps API with Ajax and JSON to display some pretty complex data.
APIcross It’s time to sit back and give your left brain something to do.
It’s your standard crossword; all of the solution words are from this chapter.
The Google Maps API we used in Chapter 11 is written in this language.
Once you have an instance of an API object, you can use all the properties and _______ associated with those objects in your code.
We used this jQuery method to get data from the sightings database using JSON and PHP.
Google Maps API object that has the following properties: zoom,center, and mapTypeId.
When the value of data in a field changes, this listener is triggered.
An API is a series of object ____________, allowing you to create your own instances of the API provider’s objects.
The Google Maps API object constructor that lets you pass the latitude and longitude as a parameter.
The Google Maps API we used in Chapter 11 is written in this language.
We used this jQuery method to get data from the sightings database using JSON and PHP.
Google Maps API object that has the following properties: zoom,center, and mapTypeId [MAP]
When the value of data in a field changes, this listener is triggered.
An API is a series of object ____________, allowing you to create your own instances of the API provider's objects.
The GoogleMaps API object constructor that lets you pass the latitude and longitude as a parameter.
Your jQuery API Toolbox You've got Chapter 11 under your belt and now you’ve.
Feel free to drop us a line or tell us about your cool new site at the Head First Labs:
Every single thing in the jQuery library You probably realize by now that jQuery is a massive library.
We tried to cover the main stuff  that a person new to jQuery would need.
You are now armed with all of  this knowledge so you can go and check the rest of  the library out.
Each server in the node contains a copy of  the data that is being served out.
When these nodes are strategically placed around a network—like the Internet—they can increase the speed of  information delivery to many more people consuming this data.
A number of  large enterprises provide hosted copies of  jQuery on CDN networks that are available for public use.
Below are links to the CDN-hosted copies of  jQuery that you may hotlink to.
You can include these in your jQuery applications instead of  downloading jQuery every time.
The jQuery namespace: noConflict method Many JavaScript libraries use $ as a function or variable name, just as jQuery does.
This technique is especially effective in conjunction with the .ready method’s ability to alias the jQuery object, as within a callback passed to .ready we can use $ if  we wish without fear of conflicts later:
You’ll only need to use this if  you plan to use other JavaScript libraries that use the $ as a reference.
You will not need this if  you are only using jQuery on your page.
Even if  you include several plug-ins, you will not need this.
Debugging your jQuery code It is always useful to debug your code—especially if  you’re working on a large-scale project, with many different types of  objects, includes, or APIs.
Oftentimes, you’ll need to know the content of  an object or variable sent back to you, but don’t want to alert it out, or figure out how to get at all the properties of  an object.
These can help you look inside your objects so you can see when their properties change values, or track the changes of  a variable over time.
You can also see how it evolves throughout your application, or if  it ever gets null values unintentionally.
This can be very useful when you’re troubleshooting JavaScript or jQuery code.
Two of  the debugging plug-ins we’ve found useful when coding in JavaScript and jQuery are Dump and VariableDebugger.
There are several others, and there will be more and more over time, as well as improvements to these.
We found these useful, but to look for some more that you might like better, go to the jQuery Plug-ins site (http://plugins.jquery.com/) and search for “debug.”
Of  course, for everything else, there’s always the browser tools we’ve been using throughout the book.
Advanced animation: queues Queues in jQuery are mostly used for animations.
They are an array of  functions stored on a per-element basis, using jQuery.data.
You can add a function to the queue by calling .queue, and you remove (by calling) the functions using .dequeue.
Every element can have one to many queues of  functions attached to it by jQuery.
In most applications, only one queue (called fx) is used.
Queues allow a sequence of  actions to be called on an element asynchronously, without halting program execution.
The typical example of  this is calling multiple animation methods on an element.
When this statement is executed, the element begins its sliding animation immediately, but the fading transition is placed on the fx queue to be called only once the sliding transition is complete.
The .queue method allows us to directly manipulate this queue of  functions.
Calling .queue with a callback is particularly useful; it allows us to place a new function at the end of  the queue.
This feature is similar to providing a callback function with an animation method, but does not require the callback to be given at the time the animation is performed.
Note that when adding a function with .queue, we should ensure that .dequeue is eventually called so that the next function in line executes.
In jQuery 1.4, the function that’s called is passed in another function, as the first argument, that when called automatically dequeues the next item and keeps the queue moving.
It is used by .animate and all functions that call it by default.
NOTE: If  you are using a custom queue, you must manually .dequeue the functions—they will not autostart like the default fx queue!
Form validation One very important feature we didn’t have room for is form validation, on the client/browser side, using jQuery.
A malformed insert or select statement to your database could end up revealing much more about your data than you intended.
One of  our favorites is the aptly named “validation” plug-in, found here: http://docs.jquery.com/Plugins/validation.
This plug-in will allow you to create a series of  rules for each element on your form, so you can customize the validation, and refine the data you want to accept in your form.
This includes everything from minimum or maximum field lengths, check for required fields, check if  a valid email address is entered, and more.
Specifies a name element as required and an email element as required (using the shortcut for a single rule) and a valid email address (using another object literal)
Adds required and a minlength of  2 to an element and specifies custom messages for both.
These can be broken down into three separate types of  functionality:
Color animations Color animations extend the animate function to be able to animate colors as well.
It’s heavily used by the class transition feature, and it’s able to color-animate the following properties:
Class transitions Class transitions extend the base class API to be able to animate between two different classes.
The following jQuery methods are modified by jQuery UI to accept three additional parameters: speed, easing (optional), and callback.
Advanced easing Advanced easing is included in the Effects core, and is a jQuery port of  the easing functions written by Robert Penners, which were originally written in ActionScript for Flash.
They are a series of  mathematical equations designed to make the animation of  objects smoother and more accurate.
Creating your own jQuery plug-ins Extending jQuery with plug-ins and methods is very powerful and can save you and your peers a lot of  development time by abstracting your most clever functions into plug-ins.
Rather than writing a whole bunch of  text about how to create a jQuery plug-in, we think it’s best left to the experts over at jQuery.
They have a very substantial and informative tutorial here: http://docs.jquery.com/ Plugins/Authoring.
Here’s a brief  summary of  what to keep in mind when developing your next jQuery plug-in:
Don’t redundantly wrap the this keyword in the immediate scope of  your plug-in’s function.
Unless you’re returning an intrinsic value from your plug-in, always have your plug-in’s function return the this keyword to maintain chainability.
Rather than requiring a lengthy amount of  arguments, pass your plug-in settings in an object literal that can be extended over the plug-in’s defaults.
Don’t clutter the jQuery.fn object with more than one namespace per plug-in.
Advanced JavaScript: closures Closures are a very complex topic within JavaScript, and were quite close to making it into the book proper.
Although they didn’t, we feel strongly about you needing to know about them, so we wanted to mention them here.
Closures are not hard to understand once you grasp the core concept.
However, if  you read some of  the more detailed, technical descriptions, you might get very confused.
Closures fully rely on the scope of  variables and objects.
The scope refers to where objects, variables, and functions are created and accessible, and in what context they are being called.
Basically, objects, variables, and functions can be defined in either a local or global scope.
Local scope: The local scope is when something is defined and accessible only in a certain part of  the code, like inside a function.
Global scope: As opposed to the local scope, when something is global is accessible from anywhere in your code.
A closure is the local variable for a function, kept alive after the function has returned.
Whenever you see the function keyword within another function, the inner function has access to variables in the outer function.
Templates jQuery templates are still in beta, but are a cool, upcoming feature that might help you build a more flexible site, without much HTML or jQuery.
They are designed to take data and bind it to some template markup, so you can consistently use the same markup to display similarly related data.
Advanced JavaScript: closures (continued) The tmp variable is declared in local scope, inside the func1 function.
The inner function will close over the variables of  func1 before leaving.
Again, tmp is in the local scope, but the func2 function is in the global scope.
However, since tmp is still hanging around inside func2’s closure, it is also being incremented.
It is possible to create more than one closure function, either by returning a list of  them or by setting them to global variables.
All of  these will refer to the same x and the same tmp; they don’t make their own copies.
Get ready for the big times If I learn this early, I'll be way ahead of everyone else...
You need a place to practice your newfound PHP skills without making your data vulnerable on the Web.
It’s always a good idea to have a safe place to develop your PHP application.
Before trying to install any of  the pieces of  the PHP development puzzle, your best bet is to first evaluate what you already have installed.
Let’s take a look at the three pieces and how you can tell what’s already on your system.
The platform of  your local computer makes a big difference when it comes to what’s already installed.
For example, Mac OS X has a web server installed by default, while most Windows computers do not.
Before you can put your finished application on the Web with your newfound jQuery and AJAX skills, you need to develop it.
And it’s never a good idea to develop your web application on the Web where everyone can see it.
You can install software locally that lets you build and test your application before you put it online.
There are three pieces of  software you’ll need on your local computer to build and test PHP and MySQL applications:
Both the web server and the MySQL server are executable programs that run on a computer.
Keep in mind that we’re talking about setting up your local computer as a web server for PHP development.
You’ll ultimately still need an online web server to upload your finished application to so that other people can access and use it.
The MySQL database server is often installed on the same computer as the web server software—in this case, your local computer!
In a PHP development environment, your local computer acts as a server computer for the purposes of running PHP scripts.
Web server software such as Apache or IIS is required to serve up PHP scripts as web pages.
You probably already have a web server if  you are using a newer PC or Mac.
To find out quickly on either system, open a brower window and type http://localhost in the address bar.
If  you get an introductory page, that means your web browser is alive and well on your local machine.
If  you have a web server, you can check to see if  you have PHP installed very easily, as well as which version you have.
Create a new script named info.php and type this in it:
Save this file to the directory your web server uses.
If  you try to open this file in your browser by typing http://localhost/info.php, you’ll see something like this if  you have PHP installed:
If you have a Windows machine with IIS, you might see something like this.
If you have a Mac or Windows machine with the Apache web server installed, you might see something like this.
To determine whether you have MySQL on the Mac, open your terminal and type:
On Windows, you can tell by right-clicking on the Windows taskbar, selecting Task Manager, and selecting the Services tab.
The MySQL terminal is also known as the MySQL “monitor.”
Start with the web server Depending on the version of  Windows you have, you can download Microsoft’s Internet Information Server (IIS), or the open source Apache web server.
If  you need a server on the Mac, you should probably go with Apache since it’s already installed.
This will automatically install Apache for you after you download and double-click it.
Grab this version and double-click it after you’ve downloaded it.
Most of the instructions are straightforward, and you can accept the default choices.
Your best bet is to choose the typical installation option.
You can usually choose the default directory for installation of  the software.
Click Install and wait a minute or so for the installation to complete.
Just as with Apache, if  you’re using Windows, we suggest you download the Windows installer version.
This will automatically install PHP for you after you download and double-click it.
If  these instuctions don’t work for you, try again, or type “Installing Apache on Windows” into your favorite search engine for more help.
Selecting the default installation folder is usually a good idea, but it depends on preference.
If  you’re using IIS, you will probably select the IISAPI module.
Check with your particular software to determine exactly what you need.
Here, we’ve chosen Apache 2.2, and need to give the path to our Apache install in the next screen.
You need to scroll down under Extensions and choose MySQL.
This will enable you to use the built-in PHP MySQL functions that we use throughout this book!
You still need MySQL, so let’s work through downloading and installing it.
The official name for the free version of  the MySQL RDBMS server these days is MySQL Community Server.
The following is a list of  steps for installing MySQL on Windows and Mac OS X.
This is not meant to replace the excellent instructions found on the MySQL website, and we strongly encourage you to go there and read them! For much more detailed directions, as well as a troubleshooting guide, go here:
You’ll also like the MySQL query browser, where you can type your queries and see the results inside the software interface, rather than in a console window.
Click on Install and then Done to close the installer.
If  you haven’t done so already, create a new script named info.php and type this in it:
Save this file to the directory your web server uses.
If  you try to open this file in your browser by typing http://localhost/info.php, you’ll see something like this if  you have PHP installed:
Note: It was “Beta” at the time of  this writing.
Click on No thanks, just take me to the downloads! unless you want to register for an account on the site, or already have one.
You’ll see a list of  locations that have a copy you can download; choose the one closest to you.
When the file has finished downloading, right-click on it and choose “Run as Administrator” to launch it, if  you have Windows UAC enabled.
At this point, you will be walked through the installation with the Setup Wizard.
Read and agree to the license terms and and click Next.6
The next step will run an automatic update to make sure there are no newer versions.
You can skip this by selecting the Skip Check box, but it is good practice to make sure your applications are up to date.
You’ll be asked to choose a setup type for your installation.
Also, leave the installation paths as the default ones set for you already and click Next.
Next, the installer will check your compatibility with the  Microsoft .NET Framework 4 Client Profile.
If  you are missing this, update your Windows instance at http://update.microsoft.com/
The next screen will list all the features to be installed.
After all the services show a successful installation, click Next to access the configuration options for the MySQL service.
Make sure both the Enable TCP/IP Networking and Create Windows Service options are selected, and leave the default values in place.
Enter a password for the root MySQL user into the boxes at the bottom and click Next.
If  you are running Mac OS X server, a version of  MySQL should already be installed.
Before you begin, check to see if  you already have a version installed.
You have to access the main Apache configuration file and comment out a line of  code in order to get PHP going.
This file is called http.conf, and is hidden inside the Apache install folder.
You’re looking for the following line of  code, which has a pound symbol (#) in front of  it to comment it out:
You need to remove the pound symbol and restart the server to enable PHP.
The http.conf document is owned by “root,” which means you’ll have to enter your password to change it.
You’ll probably also want to tweak the php.ini file so that Apache uses it.
For more detailed information about how to carry out these steps and enable PHP, visit http://foundationphp.com/tutorials/php_leopard.php.
Make sure you download the version relevant to your operating system.
Click on No thanks, just take me to the downloads! unless you want to register for an account on the site, or already have one.
Click on a mirror that is nearest you, for faster downloads.
Click on No thanks, just take me to the downloads! unless you want to register for an account on the site, or already have one, and choose a mirror again.
Click Next to continue to the Read Me page, and Continue to get to the License page.
The next step will display this licensing information for MySQL.
If  you agree to the terms, click Continue, and then Agree.
Select Continue again to install it in the default location.
The installation should start, and give a success message when complete.
Click Install, enter the username and password of  an admin user, and press OK to begin the installation.
Using the Server Administration panel, ensure that your server is running.
If  the panel is empty, click the New Server Instance option and select your running server.
Create a new connection in the SQL Development section by clicking New Connection and completing the screen that pops up.
For more help on MySQL or MySQL Workbench, visit http://dev.mysql.com/doc/
Chapter 3: jQuery Events and Functions: Making things happen on your page Your jQuery skillz are in demand again The money man has a point...
Making your page eventful Behind the scenes of an event listener Binding an event Triggering events Removing an event Going through the elements Your project structure Making things function-al The nuts and bolts of a function The anonymous function Named functions as event handlers Passing a variable to a function Functions can return a value, too Use conditional logic to make decisions Jump for Joy needs even more help Methods can change the CSS Add a hover event You’re almost there...
Chapter 5: jQuery Effects and Animation: A little glide in your stride DoodleStuff needs a web app Do the Monster Mashup Monster Mashup needs layout and positioning A little more structure and style Make the interface click Make the lightning effect How does jQuery animate elements? Fade effects animate the CSS opacity property Sliding is all about height Put fade effects to work Combine effects with method chains Striking back with a timed function Add the lightning functions to your script DIY effects with animate What can and can’t be animated animate changes style over time From where to where exactly? Absolute vs.
Chapter 7: Custom Functions for Custom Effects: What have you done for me lately? A storm is brewing We’ve created a monster…function Get control of timed effects with the window object Respond to browser events with onblur and onfocus Timer methods tell your functions when to run Write the stopLightning and goLightning functions Feature request for Monster Mashup Let’s get (more) random You already know the current position...
Chapter 8: jQuery and Ajax: Please pass the data Bring the Bit to Byte race into this century Looking at last year’s page Getting dynamic OLD web, meet the NEW web Understanding Ajax What is Ajax? The X factor GETting data with the ajax method Parsing XML data Scheduling events on a page Self-referencing functions Getting more from your server What time is it? Turning off scheduled events on your page Your jQuery/Ajax Toolbox.
Chapter 9: Handling JSON data: Client, meet server Webville MegaCorp’s Marketing Department doesn’t know XML XML errors break the page Collect data from a web page What to do with the data Format the data before you send it Send the data to the server Store your data in a MySQL database Create your database to store runner info Anatomy of an insert statement Use PHP to access the data Handle POST data on the server Connect to a database with PHP Use select to read data from a database Get data with PHP JSON to the rescue! jQuery + JSON = Awesome A few PHP rules...
