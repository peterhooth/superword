Head First HTML with CSS & XHTML is a thoroughly modern introduction to forward-looking practices in Web page markup and presentation.
It correctly anticipates readers’ puzzlements and handles them just in time.
As the Internet becomes more complex, inspired construction of  web pages becomes increasingly critical.
I’ve been writing HTML and CSS for ten years now, and what used to be a long trial and error learning process has now been reduced neatly into an engaging paperback.
Head First HTML with CSS & XHTML teaches you how to do things right from the beginning without making the whole process seem overwhelming.
You made an XHTML book simple enough a CEO can understand it.
What will you do next? Accounting simple enough my developer can understand it? Next thing you know we’ll be collaborating as a team or something.
This book has humor, and charm, but most importantly, it has heart.
I know that sounds ridiculous to say about a technical book, but I really sense that at its core, this book (or at least its authors) really care that the reader learn the material.
This comes across in the style, the language, and the techniques.
Learning – real understanding and comprehension – on the part of  the reader is clearly top most in the minds of  the Freemans.
And thank you, thank you, thank you, for the book’s strong, and sensible advocacy of  standards compliance.
It’s great to see an entry level book, that I think will be widely read and studied, campaign so eloquently and persuasively on behalf  of  the value of  standards compliance in web page code.
Freeman’s Head First HTML with CSS & XHTML is a most entertaining book for learning how to build a great web page.
It not only covers everything you need to know about HTML, CSS, and XHTML, it also excels in explaining everything in layman’s terms with a lot of  great examples.
She’s never done any web design, so she needed a book like Head First HTML with CSS & XHTML to take her from beginning to end.
She now has a list of  web sites she wants to build – for our son’s class, our family, ...
If  you’re someone who reads at night before falling asleep, you’ll have to restrict Head First HTML with CSS & XHTML to daytime reading.
From the awesome Head First Java folks, this book uses every conceivable trick to help you understand and remember.
Not just loads of  pictures: pictures of  humans, which tend to interest other humans.
This book is close to perfect, because of  the way it combines expertise and readability.
It’s one of  the very few software books I’ve ever read that strikes me as indispensable.
I’d put maybe 10 books in this category, at the outside.
A Nose Dive into the realm of  patterns, a land where complex things become simple, but where simple things can also become complex.
Just the right tone for the geeked-out, casual-cool guru coder in all of  us.
Wouldn’t it be dreamy if there was an HTML book.
O’Reilly Media books may be purchased for educational, business, or sales promotional use.
Many of  the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks.
Where those designations appear in this book, and O’Reilly Media, Inc., was aware of  a trademark claim, the designations have been printed in caps or initial caps.
While every precaution has been taken in the preparation of  this book, the publisher and the authors assume no responsibility for errors or omissions, or for damages resulting from the use of  the information contained herein.
In other words, if  you use anything in Head First HTML with CSS & XHTML to, say, run a nuclear power plant, you’re on your own.
We do, however, encourage you to visit the Head First Lounge.
No elements or properties were harmed in the making of  this book.
To the W3C, for saving us from the browser wars and for their brilliance in separating structure (HTML) from presentation (CSS)...
And for making HTML, CSS, and XHTML complex enough that people need a book to learn it.
Eric is a computer scientist with a passion for media and software architectures.
He just wrapped up four years at a dream job – directing Internet broadband and wireless efforts at Disney – and is now back to writing, creating cool software, and hacking Java and Macs.
Eric spent a lot of  the ‘90s working on alternatives to the desktop metaphor with David Gelernter (and they’re both still asking the question “why do I have to give a file a name?” )
He also co-founded Mirror Worlds Technologies (now acquired) to create a commercial version of  his thesis work, Lifestreams.
In a previous life, Eric built software for networks and supercomputers.
You might know him from such books as JavaSpaces Principles Patterns and Practice.
When he’s not writing text or code you’ll find him spending  more time tweaking than watching his home theater and trying to restoring a circa 1980s Dragon’s Lair video game.
Write to him at eric@oreilly.com or visit his blog at http://www.ericfreeman.com.
She’s been involved with the Internet since the early days, having co-founded The Ada Project (TAP), an award winning web site for women in computing now adopted by the ACM.
More recently Elisabeth led research and development efforts in digital media at the Walt Disney Company where she co-invented Motion, a content system that delivers terabytes of video every day to Disney, ESPN, and Movies.com users.
Elisabeth is a computer scientist at heart and holds graduate degrees in Computer Science from Yale University and Indiana University.
She’s worked in a variety of  areas including visual languages, RSS syndication, and Internet systems.
She’s also been an active advocate for women in computing, developing programs that encourage woman to enter the field.
These days you’ll find her sipping some Java or Cocoa on her Mac, although she dreams of  a day when the whole world is using Scheme.
Elisabeth has loved hiking and the outdoors since her days growing up in Scotland.
Here you are trying to learn something, while here your brain is doing you a favor by making sure the learning doesn’t stick.
The only thing that is standing between you and getting yourself  on the Web is learning to speak the lingo: HyperText Markup Language, or HTML for short.
After this chapter, not only are you going to understand some basic.
Did someone say “hypertext?” What’s that? Oh, only the entire basis of the Web.
In Chapter 1 we kicked the tires of HTML and found it to be a nice markup.
Along the way we’re going to meet a powerful new.
I was told I’d actually be creating Web pages in this book? You’ve certainly learned a lot already: tags, elements, links, paths...
Web pages are a dish best served on the Internet.
So far you’ve only created HTML pages that live on your own computer.
In this chapter we’ll encourage you to get those Web pages on the Internet.
Here’s one pixel.Here’s a lot of pixels that together make up the upper part of the right wing of the butterfly.
This image is made up of thousands of pixels when it’s displayed on a computer screen.
Smile and say “cheese.” Actually, smile and say “gif”, “jpg”, or “png” – these are going to be your choices when “developing pictures” for the Web.
In this chapter you’re going to learn all about adding your first media type to.
Got some digital photos you need to get online? No problem.
Got a logo you need to get on your page? Got it covered.
By the end of the chapter you’re going to know all.
To be transparent, or not to be transparent? That is the question...
What else is there to know about HTML?  You’re well on your way to mastering HTML.
In fact, isn’t it about time we move on to CSS and learn how to make.
We know you thought you bought an HTML book, but this is really an XHTML book in disguise.
So far you’ve been concentrating on learning XHTML to create the structure of your Web pages.
Could it really be so easy? Well, you are going to have to learn a new language; after.
You already have the basics of CSS down and you know how to create CSS.
You’re also going to see there is a lot more to color than meets the eye.
How do I specify Web colors? Let me count the ways...
To do advanced Web construction you really need to know your building materials.
In this chapter we’re going to take a close look at our building materials: the XHTML elements.
But we’re not going to stop there; you’re also going to see how you can.
Now, we couldn’t help but notice that your CSS toolbelt is really.
But, if you’re thinking that “pseudo-classes” would make a great name for.
We’re not going to let those XHTML elements just sit there anymore; it’s about time they get.
No, we’re not just talking about more background and font colors, we’re.
If  it walks like a table and talks like a table...
There comes a time in life when we have to deal with the dreaded tabular data.
But there’s more: with every order we’ll throw in our.
And, if you act now, as a special bonus, we’ll.
Before we start styling, let’s get the table back into Tony’s page...
So far all your Web communication has been one way: from your page to your visitors.
Golly, wouldn’t it be nice if your visitors could talk back? That’s where HTML forms come in: once you enable your pages.
You’ll also learn a bit about what goes on behind the scenes in the server to support.
We covered a lot of  ground, and you’re almost finished with this book.
We’ll miss you, but before we let you go, we wouldn’t feel right about sending you out into.
So, we threw most of it away, and kept the best.
So, why DID they p ut that in an HTML.
Do you have access to a computer with a Web browser and a text editor?
Do you want to learn, understand, and remember how to create Web pages using the best techniques and the most recent standards?
Are you afraid to try something different?  Would you rather have a root canal than mix stripes with plaid? Do you believe that a technical book can’t be serious if HTML tags are anthropomorphized?
If  you can answer “yes” to any one of  these:
Are you a kick-butt Web developer looking for a reference book?
Do you prefer stimulating dinner party conversation to dry, dull, academic lectures?
If you have access to any computer manufactured in the last decade, the answer is yes.
It was built that way, and it helps you stay alive.
So what does your brain do with all the routine, ordinary, normal things you encounter? Everything it can to stop them from interfering with the brain’s real job—recording things that matter.
It doesn’t bother saving the boring things; they never make it past the “this is obviously not important” filter.
How does your brain know what’s important? Suppose you’re out for a day hike and a tiger jumps in front of  you, what happens inside your head and body?
This must be important! Don’t forget it! But imagine you’re at home, or in a library.
Or trying to learn some tough technical topic your boss thinks will take a week, ten days at the most.
It’s trying to make sure that this obviously non-important content doesn’t clutter up scarce resources.
Resources that are better spent storing the really big things.
And there’s no simple way to tell your brain, “Hey brain, thank you very much, but no matter how dull this book is, and how little I’m registering on the emotional Richter scale right now, I really do want you to keep this stuff  around.”
We think of a “Head First” reade r as a learner.
Put the words within o r near the graphics they.
Browsers make requests for HTML pages or other resources, like images.
If  you really want to learn, and you want to learn more quickly and more deeply, pay attention to how you pay attention.
Most of  us did not take courses on metacognition or learning theory when we were growing up.
We were expected to learn, but rarely taught how to learn.
But we assume that if  you’re holding this book, you really want to learn how to create Web pages.
And you probably don’t want to spend a lot of time.
And you want to remember what you read, and be able to apply it.
To get the most from this book, or any book or learning experience, take responsibility for your brain.
The trick is to get your brain to see the new material you’re learning as Really Important.
Otherwise, you’re in for a constant battle, with your brain doing its best to keep the new content from sticking.
I wonder how I can trick my brain into remembering.
So how DO you get your brain to think HTML & CSS are as important as a tiger? There’s the slow, tedious way, or the faster, more effective way.
You obviously know that you are able to learn and remember even the dullest of  topics, if  you keep pounding on the same thing.
With enough repetition, your brain says, “This doesn’t feel important to him, but he keeps looking at the same thing over and over and over, so I suppose it must be.”
The faster way is to do anything that increases brain activity, especially different types of  brain activity.
The things on the previous page are a big part of  the solution, and they’re all things that have been proven to help your brain work in your favor.
For example, studies show that putting words within the pictures they describe (as opposed to somewhere else in the page, like a caption or in the body text) causes your brain to try to make sense of  how the words and picture relate, and this causes more neurons to fire.
More neurons firing = more chances for your brain to get that this is something worth paying attention to, and possibly recording.
A conversational style helps because people tend to pay more attention when they perceive that they’re in a conversation, since they’re expected to follow along and hold up their end.
The amazing thing is, your brain doesn’t necessarily care that the “conversation” is between you and a book! On the other hand, if  the writing style is formal and dry, your brain perceives it the same way you experience being lectured to while sitting in a roomful of  passive attendees.
We used pictures, because your brain is tuned for visuals, not text.
As far as your brain’s concerned, a picture really is worth 1024 words.
And when text and pictures work together, we embedded the text in the pictures because your brain works more effectively when the text is within the thing the text refers to, as opposed to in a caption or buried in the text somewhere.
We used redundancy, saying the same thing in different ways and with different media types, and multiple senses, to increase the chance that the content gets coded into more than one area of your brain.
We used concepts and pictures in unexpected ways because your brain is tuned for novelty, and we used pictures and ideas with at least some emotional content, because your brain is tuned to pay attention to the biochemistry of  emotions.
That which causes you to feel something is more likely to be remembered, even if  that feeling is nothing more than a little humor, surprise, or interest.
We used a personalized, conversational style, because your brain is tuned to pay more attention when it believes you’re in a conversation than if  it thinks you’re passively listening to a presentation.
We included more than 100 activities, because your brain is tuned to learn and remember more when you do things than when you read about things.
We used multiple learning styles, because you might prefer step-by-step procedures, while someone else wants to understand the big picture first, while someone else just wants to see a code example.
But regardless of  your own learning preference, everyone benefits from seeing the same content represented in multiple ways.
We include content for both sides of  your brain, because the more of  your brain you engage, the more likely you are to learn and remember, and the longer you can stay focused.
Since working one side of  the brain often means giving the other side a chance to rest, you can be more productive at learning for a longer period of  time.
And we included stories and exercises that present more than one point of  view, because your brain is tuned to learn more deeply when it’s forced to make evaluations and judgements.
We included challenges, with exercises, and by asking questions that don’t always have a straight answer, because your brain is tuned to learn and remember when it has to work at something.
Think about it—you can’t get your body in shape just by watching people at the gym.
But we did our best to make sure that when you’re working hard, it’s on the right things.
That you’re not spending one extra dendrite processing a hard-to-understand example, or parsing difficult, jargon-laden, or overly terse text.
In stories, examples, pictures, etc., because, well, because you’re a person.
And your brain pays more attention to people than it does to things.
We assume that if  you’re going to be a kick-butt Web developer, this won’t be your only book.
These tips are a starting point; listen to your brain and figure out what works for you and what doesn’t.
Here’s what YOU can do to bend your brain into submission.
The more you understand, the less you have to memorize.
When the book asks you a question, don’t just skip to the answer.
The more deeply you force your brain to think, the better chance you have of learning and remembering.
We put them in, but if  we did them for you, that would be like having someone else do your workouts for you.
There’s plenty of evidence that physical activity while learning can increase the learning.
They’re not optional sidebars—they’re part of  the core content! Don’t skip them.
Part of  the learning (especially the transfer to long-term memory) happens after you put the book down.
Your brain needs time on its own, to do more processing.
If  you put in something new during that processing-time, some of  what you just learned will be lost.
Your brain works best in a nice bath of  fluid.
Dehydration (which can happen before you ever feel thirsty) decreases cognitive function.
If  you’re trying to understand something, or increase your chance of  remembering it later, say it out loud.
Better still, try to explain it out loud to someone else.
You’ll learn more quickly, and you might uncover ideas you hadn’t known were there when you were reading about it.
If  you find yourself  starting to skim the surface or forget what you just read, it’s time for a break.
Once you go past a certain point, you won’t learn faster by trying to shove more in, and you might even hurt the process.
Create something! Apply this to something new you’re designing, or rework an older project.
Just do something to get some experience beyond the exercises and activities in this book.
All you need is a pencil and a problem to solve...
Feel something! Your brain needs to know that this matters.
Groaning over a bad joke is still better than feeling nothing at all.
We deliberately stripped out everything that might get in the way of  learning whatever it is we’re working on at that point in the book.
And the first time through, you need to begin at the beginning, because the book makes assumptions about what you’ve already seen and learned.
We begin by teaching basic HTML, then standards-based HTML 4.01, and then on to XHTML.
To write standards-based HTML or XHTML, there are a lot of  technical details you need to understand that aren’t helpful when you’re trying to learn the basics of  HTML.
Our approach is to have you learn the basic concepts of  HTML first (without worrying about these details), and then, when you have a solid understanding of  HTML, teach you to write standards compliant HTML and XHTML.
This has the added benefit that the technical details are more meaningful after you’ve already learned the basics.
It’s also important that you be writing compliant HTML or XHTML when you start using CSS,  so, we make a point of  getting you to standards-based HTML and XHTML before you begin any serious work with CSS.
We don’t cover every single HTML element or attribute or CSS property ever created.
There are a lot of  HTML elements, a lot of  attributes, and a lot of  CSS properties.
Sure, they’re all interesting, but our goal was to write a book that weighs less than the person reading it, so we don’t cover them all here.
Our focus is on the core HTML elements and CSS properties that matter to you, the beginner, and making sure that you really, truly, deeply understand how and when to use them.
In any case, once you’re done with Head First HTML & CSS, you’ll be able to pick up any reference book and get up to speed quickly on all the elements and properties we left out.
This book advocates a clean separation between the structure of your pages and the presentation of your pages.
Today, serious Web pages use HTML and XHTML to structure their content, and CSS for style and presentation.
This book teaches you to use HTML for structure and CSS for style; we see no reason to teach you out-dated bad habits.
We encourage you to use more than one browser with this book.
While we teach you to write HTML, CSS, and XHTML that is based on standards, you’ll still (and probably always) encounter minor differences in the way Web browsers display.
So, we encourage you to pick at least two up-to-date browsers and test your pages using them.
This will give you experience in seeing the differences among browsers and in creating pages that work well in a variety of  browsers.
While this may not be technically correct (because <a> is an opening tag, not a full blown element), it does make the text more readable, and we always follow the name with the word “element” to avoid confusion.
The exercises and activities are not add-ons; they’re part of  the core content of  the book.
Some of  them are to help with memory, some are for understanding, and some will help you apply what you’ve learned.
The crossword puzzles are the only things you don’t have to do, but they’re good for giving your brain a chance to think about the words in a different context.
One distinct difference in a Head First book is that we want you to really get it.
And we want you to finish the book remembering what you’ve learned.
Most reference books don’t have retention and recall as a goal, but this book is about learning, so you’ll see some of  the same concepts come up more than once.
Our readers tell us that it’s frustrating to wade through 200 lines of  an example looking for the two lines they need to understand.
Most examples in this book are shown within the smallest possible context, so that the part you’re trying to learn is clear and simple.
Don’t expect all of  the examples to be robust, or even complete—they are written specifically for learning, and aren’t always fully-functional.
We’ve placed all the example files on the Web so you can download them.
For some of  them, there is no right answer, and for others, part of  the learning experience of  the Brain Power activities is for you to decide if  and when your answers are right.
In some of  the Brain Power exercises you will find hints to point you in the right direction.
Johannes de Jong organized and led the whole effort, acted as “series dad,” and made it all work smoothly.
Pauline McNamara, “co-manager” of  the effort, held things together and was the first to point out when our examples were a little more “baby boomer” than hip.
The whole team proved how much we needed their technical expertise and attention to detail.
You guys rock! And further thanks to Corey and Pauline for never letting us slide on our often too formal (or we should just say it, incorrect) punctuation.
A shout out to JavaRanch as well for hosting the whole thing.
A big thanks to Louise Barr, our token Web designer, who kept us honest on our designs and on our use of  XHTML & CSS (although you’ll have to blame us for the actual designs)
We’re also extremely grateful to our esteemed technical reviewer David Powers.
We have a real love/hate relationship with David because he made us work so hard, but the result was oh so worth it.
The truth be told, based on David’s comments, we made significant changes to this book and it is technically twice the book it was before.
Our biggest thanks to our editor, Brett McLaughlin, who cleared the path for this book, removed every obstacle to its completion, and sacrificed family time to get it done.
Brett also did hard editing time on this book (not an easy task for a Head First title)
Our sincerest thanks to the whole O’Reilly team: Greg Corrin, Glenn Bisignani, Tony Artuso, and Kyle Hart all led the way on marketing and we appreciate their outof-the-box approach.
Thanks to Ellie Volkhausen for her inspired cover design that continues to serve us well, and to Karen Montgomery for stepping in and bringing life to this book’s cover.
Thank you, as always, to Colleen Gorman for her hardcore copyedit (and for keeping it all fun)
And, we couldn’t have pulled off  a color book like this without Sue Willing and Claire Cloutier.
No Head First acknowledgment would be complete without thanking Mike Loukides for shaping the Head First concept into a series, and to Tim O’Reilly for always being.
Finally, thanks to Mike Hendrickson for bringing us into the Head First family and having the faith to let us run with it.
Last, and anything but least, to Kathy Sierra and Bert Bates, our partners in crime and the BRAINS who created the series.
Thanks guys for trusting us even more with your baby.
The three-day jam session was the highlight of  writing the book, we hope to repeat it soon.
Oh, and next time around can you give LTJ a call and tell him he’s just going to have to make a trip back to Seattle?
The large number of acknowledgments is because we’re testing the theory that everyone mentioned in a book acknowledgment will buy at least one copy, probably more, what with relatives and everything.
If you’d like to be in the acknowledgment of our next book, and you have a large family, write to us.
Don’t let the sweater fool you, this guy is hard core (technically of course)
The only thing that is standing between you and getting yourself  on the Web is learning to speak the lingo: HyperText Markup Language, or HTML for short.
After this chapter, not only are you going to understand some basic.
Want to get an idea out there?  Sell something?  Just need a creative outlet?  Turn to the Web – we don’t need to tell you it has become the universal form of  communication.
Even better, it’s a form of  communication YOU can participate in.
But, if  you really want to use the Web effectively, you’ve got to know a few things about HTML, not to mention how the Web works.
To make Web pages, you create files written in the HyperText Markup Language (HTML for short) and place them on a Web server (we’ll talk about how to get your files on a server later in the book)
Once you’ve put your files on a Web server, any browser can retrieve your Web pages over the Internet.
And there are a lot of PCs and devices connected to the Internet all running Web browsers.
More importantly, there are friends, family, fans, and potential customers using those PCs!
The HTML in your Web page tells the browser everything it needs to know to display your page.
And, if you’ve done your job well, your pages will even display well on PDAs and mobile devices, and work with speech browsers and screen magnifiers for the visually impaired.
What does the Web server do? Web servers have a full time job on the Internet, tirelessly waiting for requests from Web browsers.
What kinds of  requests? Requests for Web pages, images, sounds, or maybe even a movie.
When a server gets a request for any of  these resources, the server finds the resource, and then sends it back to the browser.
What does the Web browser do? You already know how a browser works: you’re surfing around the Web and you click on a link to visit a page.
That click causes your browser to request an HTML page from a Web server, retrieve it, and display the page in your browser window.
Each server stores HTML files, pictures, sounds and other file types.
Browsers make requests for HTML pages or other resources, like images.
The server’s just a computer connected to the Internet wait.
But, how does the browser know how to display a page? That’s where HTML comes in.
So, you know HTML is the key to getting a browser to display your pages, but, what exactly does HTML look like? And, what does it do?
At this point you should just be getting a feel for what HTML looks like; we’re.
For now, study the HTML and see how it gets represented in the browser on the next page.
Be sure to pay careful attention to each letter annotation and how and where it is displayed in the browser.
When the browser reads your HTML, it interprets all the tags that surround your text.
The tags tell the browser about the structure and meaning of  your text.
So rather than just giving the browser a bunch of  text, with HTML you can use tags to tell the browser what text is in a heading, what text is a paragraph, what text needs to be emphasized, or even where images need to be placed.
Let’s check out how the browser interprets the tags in the Head First Lounge:
Notice how each tag in the HTML maps to what the browser displays.
Q: So HTML is just a bunch of tags that I put around my text?
Remember that HTML stands for HyperText Markup Language, so HTML gives you a way to “mark up” your text with tags that tell the browser how your text is structured.
But there is also the HyperText aspect of HTML, which we’ll talk about a little later in the book.
Q: How does the browser decide how to display the HTML?
A: HTML tells your browser about the structure of your document: where the headings are, where the paragraphs are, what text needs emphasis, and so on.
Given this information, browsers have builtin default rules for how to display each of these elements.
But, you don’t have to settle for the default settings.
You can add your own style and formatting rules with CSS that determine font, colors, size, and a lot of other characteristics of your page.
Q: The HTML for the Head First Lounge has all kinds of indentation and spacing, and yet I don’t see that when it is displayed in the browser.
Browsers ignore tabs, returns, and most spaces in HTML documents.
Instead, they rely on your markup to determine where line and.
So why did we insert our own formatting if the browser is just going to ignore it?  To help us more easily read the document when we’re editing the HTML.
As your HTML documents become more complicated, you’ll find a few spaces, returns, and tabs here and there really help to improve the readability of the HTML.
Unless you are creating a complex and large document, you typically won’t use headings beyond <h3>
Q: Why do I need the <html> tag? Isn’t it obvious this is a HTML document?
A:  The <html> tag tells the browser your document is actually HTML.
While some browsers will forgive you if you omit it, some won’t, and as we move toward “industrial strength HTML” later in the book, you’ll see it is quite important to include this tag.
Q: What makes a file an HTML file? A: Basically an HTML file is a simple text file.
Unlike a word processing file, there is no special formatting embedded in it.
But, as you’ve seen, what really matters is what we put inside the file.
A:  The Web is created out of text files without any special formatting characters.
This enables any browser in any part of the world to retrieve a Web page and understand its contents.
You’ll see that on the Web, in many ways HTML is more powerful than using a proprietary document format.
Q: Is there any way to put comments to myself in HTML?
Say you wanted to write a comment “Here’s the beginning of the lounge content”
You’d do that like this: <!-- Here’s the beginning of.
Take a look at the tags and see if you can guess what they tell the browser about the content.
Write your answers in the space on the right; we’ve already done the first couple for you.
Tells the browser this is the end of the HTML.
Starbuzz Coffee has made a name for itself  as the fastest growing coffee shop around.
If  you’ve seen one on your local corner, look across the street – you’ll see another one.
In fact, they’ve grown so quickly, they haven’t even managed to put up a web page, yet...
We really need a Web page that features the Starbuzz.
Can you determine the structure of it? In other words, are there obvious headings? Paragraphs? Is it missing anything like a title?
Go ahead and mark up the napkin (using your pencil) with any structure you see, and add anything that is missing.
If by chance you chose options A, B, or D on the previous page, we recommend you donate this book to a good library, use it as kindling this winter, or what the hell, go ahead and sell it on Amazon and make some cash.
Of course, the only problem with all this is that you haven’t actually created any Web pages, yet.
But, that’s why you decided to dive head first into HTML, right? No worries, here’s what you’re going to do on the next few pages:
Type in the menu the Starbuzz CEO wrote on the napkin.
Open the file “index.html” in your favorite browser, step back, and watch the magic happen.
To create a text file you need an application that allows you to create plain text without throwing in a lot of  fancy formatting and special characters.
We’ll use TextEdit on the Mac in this book; however, if  you prefer another text editor, that should work fine as well.
And, if  you’re running Windows, you’ll want to skip ahead a couple of  pages to the Windows instructions.
The easiest way to get there is to choose “New Finder Window” from the Finder’s File menu and then look for the Application directly in your shortcuts.
You’ll probably have lots of  applications listed in your applications folder, so scroll down until you see TextEdit.
To run the application, double click on the TextEdit icon.
If  you want to make your life easier, click and hold on the TextEdit icon in the Dock (this icon appears once the application is running)
When it displays a popup menu, choose “Keep in Dock.” That way, the TextEdit icon will always appear in your Dock and you won’t have to hunt it down in the Applications folder every time you need to use it.
Change your TextEdit Preferences By default, TextEdit  is in “rich text” mode, which means it will add its own formatting and special characters to your file when you save it – not what you want.
So, you’ll need to change your TextEdit Preferences so that TextEdit saves your work as a pure text file.
Set Preferences for Plain text Once you see the Preferences dialog box, there are three things you need to do.
First, choose “Plain text” as the default editor mode in the New Document tab.
Second, in the “Open and Save” tab, make sure that the “Add .txt extension to plain text files” is unchecked.
Last, make sure “Ignore rich text commands in HTML files” is checked.
That’s it; to close the dialog box click on the red button in the top left corner.
Quit and restart Now quit out of  TextEdit by choosing Quit from the TextEdit menu, and then restart the application.
This time, you’ll see a window with no fancy text formatting menus at the top of  the window.
This text formatting menu means you’re in “rich text” mode.
If you see these, you need to change your preferences.
See, the formatting menu is gone: that means we’re in text mode.
If  you’re reading this page you must be a Windows XP user.
If  not, you might want to skip a couple of  pages ahead.
Or, if  you just want to sit in the back and not ask questions, we’re okay with that too.
To create HTML files in XP we’re going to use Notepad – it ships with every copy of  Windows, the price is right, and it’s easy to use.
If you’ve got your own favorite editor that runs on XP, that’s fine too; just make sure you can create a plain text file with an “.html” extension.
Assuming you’re using Notepad, here’s how you’re going to create your first HTML file.
The easiest way to get there is to click on the “Start” menu, then on “All Programs”, then “Accessories”
Open Notepad Once you’ve located Notepad in the Accessories folder, go ahead and click on it.
You’ll see a blank window ready for you to start typing HTML.
By default XP’s File Explorer hides the file extensions of  well known file types.
For example, a file named, “Irule.html” will be shown in the Explorer as “Irule” without its “.html” extension.
It’s much less confusing if  XP shows you these extensions, so let’s change your folder options so you can see the file extensions.
First, in any Explorer window select “Folder Options...” from the Tools menu.
Next, in the “View” tab, under “Advanced settings”, scroll down until you see “Hide extensions for known file types” and uncheck this option.
Click on the OK button to save the preference and you’ll now see the file extensions in the Explorer.
Q: Why am I using a simple text editor? Aren’t there powerful tools like Dreamweaver, FrontPage and GoLive for creating Web pages?
A: You’re reading this book because you want to understand the true technologies used for Web pages, right? Now those are all great tools, but they do a lot of the work for you, and until you are a master of HTML and CSS you want to learn this stuff without a big tool getting in your way.
Once you’re a master, however, these tools do provide some nice features like syntax checking and previews.
At that point, when you view the “code” window, you’ll understand everything in it, and you’ll find that changes to the raw HTML and CSS are often a lot faster than going through a user interface.
You’ll also find that as standards change, these tools aren’t always updated right away and  may not support the most recent standards until their next release cycle.
Since you’ll know how to change the HTML and CSS without the tool, you’ll be able to keep up with the latest and greatest all the time.
Q: I get the editor, but what browser am I supposed to be using? There are so many – Internet Explorer, Firefox, Opera, Safari – what’s the deal?
The complex answer: in reality there are slight differences in the way browsers handle your pages.
If you’ve got users who will be accessing your pages in a variety of browsers, then always test your web page in several different browsers.
The more advanced you become with HTML and CSS, the more these slight differences may matter to you, and we’ll get into some of these subtleties throughout the book.
If you’re looking for a good browser, give Mozilla’s Firefox a try; it has very good HTML and CSS support.
Q: I’m creating these files on my own computer – how am I going to view these on the Web/Internet?
A: That’s one great thing about HTML: you can create files and test them on your own computer and then later publish them on the Web.
Right now we’re going to worry about how to create the files and what goes in them.
We’ll come back to getting them on the Web a bit later.
Okay, now that you know the basics of  creating a plain text file, you just need to get some content into your text editor, save it, and then load it into your browser.
Start by typing in the beverages straight from the CEO’s napkin; these beverages are the content for your page.
You’ll be adding some HTML markup to give the content some structure in a bit, but for now, just get the basic content typed in.
While you’re at it, go ahead and add “Starbuzz Coffee Beverages” at the top of  the file.
Once you’ve typed in the beverages from the CEO’s napkin, you’re going to save your work in a file called “index.html”
Before you do that, you’ll want to create a folder named.
To get this all started, choose “Save” from the File menu and you’ll see a “Save As” dialog box.
First, create a “starbuzz” folder for all your Starbuzz related files.
Next, click on the newly created “starbuzz” folder and then enter “index.html” as the file name and click on the Save button.
Using Windows you need to also choose “All Files” as your type, otherwise Notepad will add a “.txt” to your filename.
Opening your Web page in a browser Are you ready to open your first Web page? Using your favorite browser, choose “Open File...” (or “Open...” using Windows XP and Internet Explorer)  from the File menu and navigate to your “index.html” file.
On the Mac, navigate to your file, and select it by clicking on the file icon and then on the Open button.
Then click “Browse” to get a browse dialog and navigate to where you saved your file.
Depending on your operating system and browser, often you can just double-click the HTML file or drag it on top of the browser icon to open it.
Success! You’ve got the page loaded in the browser, although the results are a little...
But that’s just because all you’ve done so far is go through the mechanics of  creating a page and viewing it in the browser.
And, so far, you’ve only typed in the content of  the Web page.
What’s structure? As you’ve already seen, it is a way of  marking up your text so that the browser knows what’s a heading, what text is in a paragraph, what text is a subheading, and so on.
Once the browser knows a little about the structure, it can display your page in a more meaningful and readable manner.
Mocha Cafe Latte, $2.35 Espresso, steamed milk and chocolate syrup.
Cappuccino, $1.89 A mixture of espresso, steamed milk and foam.
Chai Tea, $1.85 A spicy drink made with black tea, spices, milk and honey.
Your job is to add structure to the text from the Starbuzz napkin.
Use the fridge magnets at the bottom of the page to mark up the text so that you’ve indicated which parts are headings, subheadings and paragraph text.
You won’t need all the magnets below to complete the job; some will be left over.
They might have looked like fridge magnets, but you were really marking up your text with HTML.
Only, as you know, we usually refer to the magnets as tags.
Check out the markup below and compare it to your magnets on the previous page.
Notice that you don’t have to put matching tags on the same line.
You can put as much content as you like between them.
Are we there yet? You have an HTML file with markup – does that make a Web page?  Almost.
The body contains all the content and structure of your Web page – the parts of the Web page that you see in your browser.
This tells the browser the content of the file is HTML.
The title usually appears at the top of the browser window.
Notice that the title, which you specified in the <head> element, shows up here.
Once you’ve done that, save your changes and reload the file into your browser.
You can reload the index.html file by selecting the “Open File” menu item again.
The browser has interpreted your tags and created a display for the page that is not only more structured but also more readable.
In this case we can call it the <h1> element.
An element consists of the enclosing tags and the content in between.
Okay, you’ve seen a bit of markup, so let’s zoom in and take a look at how tags really work...
Here we’re using tags to tell the browser that our content, “Starbuzz Coffee Beverages”, is a top level heading (that is, heading level one)
To tell the browser about the structure of your page, use pairs of tags around your content.
We call an opening tag and its closing tag matching tags.
Tags can be a little more interesting than what you’ve seen so far.
Here’s the paragraph tag with a little extra added to it.
Q: So matching tags don’t have to be on the same line?
A: No; remember the browser doesn’t really care about tabs, returns, and most spaces.
So, your tags can start and end anywhere on the same line or they can start and end on different lines.
Q: Why do the closing tags have that extra “/”?
A: That “/” in the closing tag is to help both you and the browser know where a particular piece of structured content ends.
Otherwise, the closing tags would look just like the opening tags, right?
Q: I’ve noticed the HTML in some pages doesn’t always match opening tags with closing tags.
In general, browsers do a pretty good job of figuring out what you mean if you write incorrect HTML.
But, as you’re going to see, these days there are big benefits to writing totally correct HTML.
If you’re worried you’ll never be able to write perfect HTML, don’t be; there are plenty of tools to verify your code before you put it on a Web server so the whole world can see it.
For now, just get in the habit of always matching your opening tags with closing tags.
There are some elements that use a shorthand notation with only one tag.
Keep that in the back of your mind for now and we’ll come back to it in a later chapter.
Q: An element is an opening tag + content + closing tag, but can’t you have tags inside other tags? Like the head and body are inside an <html> tag?
If you think about it, it’s natural for an HTML page to have a body, which contains a paragraph, and so on.
So many HTML elements have other HTML elements between their tags.
We’ll take a good look at this kind of thing in later chapters, but for now just get your mind noticing how the elements relate to each other in a page.
Oh, I forgot to mention, we need our company mission.
Type in your HTML using a text editor, and save it as.
Check your work at the end of the chapter before moving on...
But, don’t forget the CEO said the site needs to look.
You already know that HTML gives you a way to describe the structure of  the content in your files.
When the browser displays your HTML, it uses its own built-in default style to present this structure.
But, relying on the browser for style obviously isn’t going to win you any “designer of  the month” awards.
Let’s get our feet wet by creating some CSS that makes the Starbuzz page look a little more presentable (and launch your Web career in the process)
We have the structure down, so now we’re going to concentrate on its presentation.
We’ll get into what that all means later, but for now just know that CSS gives you a way to tell the browser how elements in your page should look.
Meet the style element To add style, you add a new (say it with us)  E-L-E-M-E-N-T to your page – the <style> element.
Let’s go back to the main Starbuzz page and add some style.
Because you’re going to use CSS, you need to specify the “text/css” type.
And, here’s where you’re going to define the styles for the page.
Q: An element can have an “attribute?”  What does that mean?
A: Attributes give you a way to provide additional information about an element.
Like, if you have a style element, the attribute allows you to say exactly what kind of style you’re talking about.
You’ll be seeing a lot more attributes for various elements; just remember they give you some extra info about the element.
Q: Why do I have to specify the type of the style, “text/css”, as an attribute of the style?  Are there other kinds of style?
A: There aren’t currently any other styles that work with today’s browsers, but those designers of HTML are always planning ahead and anticipate that there may be other types of style in the future.
Now that you’ve got a <style> element in the HTML head, all you need to do is supply some CSS to give the page a little pizazz.
Whenever you see the                 logo, you’re seeing HTML and CSS that you should type in as-is.
You’ll learn how the markup works later, after you’ve seen what it can do.
So, take a look at the CSS and then add it to your “index.html” file.
It’s time for another test drive, so reload your “index.html” file again.
This time you’ll see the Starbuzz Web page has a whole new look.
We’ve got a gray border around the content as well...
There’s now some padding between the content and the border (on all sides)
Q: CSS looks like a totally different language than HTML.
Why have two languages?  That’s just more for me to learn, right?
A: You are quite right that HTML and CSS are completely different languages, but that is because they have very different jobs.
Just like you wouldn’t use English to balance your checkbook, or Math to write a poem, you don’t use CSS to create structure or HTML to create style because that’s not what they were designed for.
While it does mean you need to learn two languages, you’ll discover that because each language.
A: There are a few different ways to specify colors with CSS.
The most popular is called a “hex code”, which is what #d2b48c is.
For now, just go with it, and we’ll be showing you exactly how #d2b48c is a color a little later.
Q: Why is there a “body” in front of the CSS rules?  What does that mean?
Even though you’ve just glanced at CSS, you’ve already begun to see what it can do.
Match each line in the style definition to what it does.
Defines a border around the body that is dotted and the color gray.
Sets the left and right margins to take up 20% of the page each.
Write the HTML for the “mission.html” page below, and then add the new CSS.
Make sure your mission page looks like ours, at the end of the chapter.
Now that you’ve put a little style in the Starbuzz “index.html” page, go ahead and update your “mission.html” page to have the same style.Exercise.
Greetings CSS;  I’m glad you’re here because I’ve been wanting to clear up some confusion about us.
Lots of  people think that my tags tell the browsers how to display the content.
It’s just not true!  I’m all about structure, not presentation.
Well, you can see how some people might get confused; after all, it’s possible to use HTML without CSS and still get a decent-looking page.
People need to learn how powerful CSS is and how easily I can give their web pages great style.
Heck yeah - I don’t want people giving you credit for my work!
Having your content structured is much more important than having it look good.
Style is so superficial; it’s the structure of  the content that matters.
Get real!  Without me web pages would be pretty damn boring.
Not only that, take away the ability to style pages and no one is going to take your pages seriously.
Whoa, what an ego!  Well I guess I shouldn’t expect anything else from you – you’re just trying to make a fashion statement with all that style you keep talking about.
Fashion statement? Good design and layout can have a huge effect on how readable and usable pages are.
And you should be happy that my flexible style rules allow designers to do all kinds of  interesting things with your elements without messing up your structure.
In fact we’re totally different languages, which is good because I wouldn’t want any of your style designers messing with my structure elements.
Yea, that is obvious to me any time I look at CSS – talk about an alien language.
I’ve got a nice clean syntax that fits right in with the content.
Yeah, like HTML can be called a language? Who has ever seen such a clunky thing with all those tags?
Just notice that no matter where you go, I’ve got you surrounded by <style> tags.
Not only is this one fine cup of House Blend, but now we’ve got a web page to tell all our customers about our.
I’ve got some bigger ideas for the future; in the meantime, can you start thinking.
Web servers store and serve Web pages, which are created from HTML and CSS.
Browsers retrieve pages and render their content based on the HTML and CSS.
Using HTML we mark up content with tags to provide structure.
An element is composed of three parts: an opening tag, content and a closing tag.
There are a few elements, like <img>, that are an exception to this rule.
Closing tags have a “/” after the left angle bracket, in front of the tag name to distinguish them as closing tags.
Information about the Web page goes into the <head> element.
What you put into the <body> element is what you see in the browser.
Most whitespace (tabs, returns, spaces) are ignored by the browser, but you can use these to make your HTML more readable (to you)
You specify the style characteristics of the elements in your HTML using CSS.
It’s time to sit back and give your left brain something to do.
It’s your standard crossword; all of the solution words are from this chapter.
Appears at the top of the browser for each page.
Appears at the top of the browser for each page.
Go ahead and mark up the napkin (using your pencil) with any structure you see, and add anything that is missing.
Markup Magnets Solution Your job is to add some structure to the text from the Starbuzz napkin.
Use the fridge magnets at the bottom of the page to mark up the text so that you’ve indicated which parts are headings, subheadings and paragraph text.
You won’t need all the magnets below to complete the job; some will be left over.
Mocha Cafe Latte, $2.35 Espresso, steamed milk and chocolate syrup.
Cappuccino, $1.89 A mixture of espresso, steamed milk and foam.
Chai Tea, $1.85 A spicy drink made with black tea, spices, milk and honey.
Even though you’ve just glanced at CSS, you’ve already seen the beginnings of  what it can do.
Match each line in the style definition to what it does.
Defines a border around the body that is dotted and the color gray.
Sets the left and right margins to take up 20% of the page each.
Did someone say “hypertext?” What’s that? Oh, only the entire basis of the Web.
In Chapter 1 we kicked the tires of HTML and found it to be a nice markup.
Along the way we’re going to meet a powerful new.
Remember the Head First Lounge? Great site, but wouldn’t it be nice if customers could view a list of  the refreshing elixirs?  Even better, we should give customers some real driving directions so they can find the place.
The “detailed directions” link leads to an HTML page with driving directions.
We’ve added links to two new pages, one for elixirs and one for driving directions.
You’ll find them in the source files for the book, which are available at http://www.headfirstlabs.com.
Let’s rework the original Head First Lounge page so it links to the two new pages.
Last, you’ll give the pages a test drive and try out your new links.
When you get back we’ll sit down and look at how it all works.
Once you’ve downloaded them, look under the folder “chapter2/lounge” and you’ll find.
The Head First Lounge is already growing; do you think that keeping all the site’s files in a single directory is a good way to organize the site?  What would you do differently?
Go ahead and take a peek - you already know everything you need to understand them.
And here’s all the images needed for our new and improved lounge.
When you’re finished with the changes, save the file “lounge.html” and open it in your browser.
Add the new text and HTML that is highlighted below.
Go ahead and type this in; we’ll come back and see how it all works on the next page.
Here’s where we add the HTML for the link to the elixirs.
And here’s where we add the link to the directions, again using an <a> element.
We need to add some text here to point customers to the new directions.
To create links we use the <a> element; we’ll take a look at how this element works in just a sec...
Click on the elixir link and the new elixir page will display.
Click on the browser’s back button and “lounge.html” should be displayed again.
Click on the directions link and the new directions page will display.
The content of the <a> element acts as a label for the link.
In the browser the label appears with an underline to indicate you can click on it.
Okay, I’ve loaded the new lounge page, clicked the links, and everything worked.
First we need to put the text we want for the link in an <a> element, like this:
Now that we have a label for each link, we need to add some HTML to tell the browser where the link points to:
The <a> element is used to create a link to another page.
The href attribute is how you specify the destination of the link.
For this link, the browser will display an “elixirs” label that, when clicked, will take the user to the “elixir.html” page.
Use the <a> element to create a hypertext link to another web page.
The content of the <a> element becomes clickable in the web page.
The href attribute tells the browser the destination of the link.
First, as the browser renders the page, if it encounters an <a> element, it takes the content of the element and displays it as a clickable link.
Both “elixirs” and “detailed directions” are between the opening and closing <a> tags, so they end up being clickable labels in the web page.
Next, when a user clicks on a link, the browser uses the “href” attribute to determine the page the link points to.
Understanding attributes Attributes give you a way to specify additional information about an element.
While we haven’t looked at attributes in detail, you’ve already seen a few examples of  them:
Let’s cook up an example to give you an even better feel for how attributes work:
But this <car> element only gives a descriptive name for your car  – it doesn’t tell us the make, precise model, whether it is a convertible, or a zillion other details we might want to know.
So, if <car> were really an element, we might use attributes like this:
Better, right? Now this markup tells us a lot more information in an easy to write, convenient form.
The type attribute specifies which style language we’re using, in this case CSS.
The href attribute tells us the destination of a hyperlink.
The src attribute specifies the filename of the picture an img tag displays.
You may see some sloppy HTML on the Web that leaves off the double quotes, but don’t get lazy yourself.
Being sloppy can cause you a lot of problems down the road (as we’ll see later in the book)
With no attributes, all we can supply is a descriptive name for the car.
But with attributes, we can customize the element with all kinds of information.
Q: Can I just make up new attributes for an HTML element?
A: No, because Web browsers only know about a predefined set of attributes for each element.
If you just made up attributes, then Web browsers wouldn’t know what to do with them, and as you’ll see later in the book, doing this will very likely get you into trouble.
When a browser recognizes an element or an attribute, we like to say that it “supports” that element or attribute.
You should only use attributes that you know are supported.
Q: Who decides what is “supported?” A: There are standards committees that worry about the elements and attributes of HTML.
These committees are made up of people with nothing better to do who generously give their time and energy to make sure there’s a common HTML roadmap that all companies can use to implement their browsers.
Q: How do I know what attributes and elements are supported? Or, can all attributes be applied to any element?
A: Only certain attributes can be used with a given element.
Think about it this way: you wouldn’t use an attribute “convertible” with the element <toaster>, would you? So, you only want to use attributes that make sense and are supported by the element.
We’re going to be learning which attributes are supported by which elements as we make our way through the book.
After you’ve finished the book there are lots of great references you can use to refresh your memory, such as HTML & XHTML: The Definitive Guide (O’Reilly)
It’s certainly a pleasure to interview as big an attribute as you.
It’s good to be here and get away from all the linking; it can wear an attribute out.
Every time someone clicks on a link, guess who gets to tell the browser where to go next? That would be me.
HeadFirst: We’re glad you could work us into your busy schedule.
This says that the <a> element, which is labeled “Sign up now!”,  links to the “signup.html” page.
Now, there are lots of  other attributes in the world, but I’m the one you use with the <a> element to tell it where it points to.
Now, I have to ask, and I hope you aren’t offended, but what is with the name?  href ? What’s with that?
It means “hypertext reference”, but all my friends just call me “href ” for short.
Usually the resource is a Web page, but I can also point to audio, video...
All our readers have seen so far are links to their own pages; how do we link to other pages and resources on the Web?
Besides, isn’t it your job to teach them this stuff ?
HeadFirst: Okay okay, yes, we’re getting to that in a bit...
Add a link with the label “Back to the Lounge” at the bottom of the elixir page that points back to “lounge.html”
Q: I’ve seen many pages where I can click on an image rather than text.
We’re not going to talk about images in depth for a few chapters, but they work just fine as links.
Q: So I can put anything between the <a> tags and it will be clickable?  Like, say, a paragraph?
Not every element can be placed inside an <a> element.
In general you’ll just be using text and images (or both) within the <a> element.
What tags will go inside other tags is a whole other topic, but don’t worry; we’ll get there soon enough.
Given your new knowledge of the <a> element, we’re hoping you can help.
In each row below you’ll find some combination of the label, destination, and the complete <a> element.
Getting organized Before you start creating more HTML pages, it’s time to get things organized.
So far, we’ve been putting all our files and images in one folder.
You’ll find that even for modestly-sized Web sites, things are much more manageable if  you organize your Web pages, graphics, and other resources into a set of  folders.
Your work on the Head First Lounge has really paid off.
Now we’ve got plans for expanding the lounge’s online content in all.
See, this is getting sorta cluttered already, and we only have three pages and a few graphics.
We’ve got a top-level folder called “lounge” that holds all.
This is often referred to as the “root” folder of the site, which means it is the top-level folder that contains the entire site.
Here are the three HTML files: for the lounge, the elixirs page, and the directions.
Keep in mind there are lots of  ways to organize any site; we’re going to start simple and create a couple of  folders for pages.
Q: Since you have a folder for images, why not have another one called “html” and put all the HTML in that folder?
There aren’t any “correct” ways to organize your files; rather, you want to organize them in a way that works best for you and your users.
As with most design decisions, you want to choose an organization scheme that is flexible enough to grow, while keeping things as simple as you can.
Q: Or, why not put an images folder in each other folder, like “about” and “beverages.”
We expect that some of the images will be reused among several pages, so we put images in a folder at the root (the top level) to keep them all together.
If you have a site that needs lots of images in different parts of the site, you might want each branch to have its own image folder.
Q: “Each branch”? A: You can understand the way folders are described by looking at them as upside down trees.
At the top is the root and each path down to a file or folder is a branch.
We’re going to leave the main “lounge.html” page in the “lounge” folder.
Let’s create a folder to hold pages about the lounge, like the directions.
We could also add new pages here about the management, events, and so on.
We’ll also create a folder to hold pages about the lounge’s beverages.
Right now that’s just the elixirs, but we’ll be adding more soon.
Technical difficulties It looks like we’ve got a few problems with the lounge page after moving things around.
Now you need to create the file and folder structure shown on the previous page.
Locate your “lounge” folder and create three new subfolders named “about”, “beverages”, and “images”
And, when you click on elixirs (or detailed directions) things get much worse: we get an error saying the page can’t be found.
Some browsers display this error as a web page rather than a dialog box.
I think the problem is that the browser thinks the files.
We need to change the links so they point to the files.
So far you’ve used href values that point to pages in the same folder.
Sites are usually a little more complicated, though, and you need to be able to point to pages that are in other folders.
To do that, you trace the path from your page to the destination file.
That might mean going down a folder or two, or up a folder or two, but either way we end up with a relative path that we can put in the href.
We need to tell the browser the new location of the pages.
What do you do when you’re planning that vacation in the family truckster? You get out a map and start at your current location, and then trace a path to the destination.
The directions themselves are relative to your location – if  you were in another city, they’d be different directions, right?
To figure out a relative path for your links, it’s the same deal: you start from the page which has the link, and then you trace a path through your folders until you find the file you need to point to.
Let’s work through a couple of  relative paths (and fix the lounge at the same time):
Okay, you’d really go to Google maps, but work with us here!
We need to fix the elixirs link in the “lounge.html” page.
When we re-organized the lounge, we left “lounge.html” in the “lounge” folder, and we put “elixir.html” in the “beverages” folder, which is a subfolder of  “lounge”
Right now we’re just using the filename “elixir.html”, which tells the browser to look in the same folder as “lounge.html”
To get from the “lounge.html” file to “elixir.html”, we need to go into the “beverages” folder first, and then we’ll find “elixir.html” in that folder.
First we need to go down into the “beverages” folder.
Now that we know the path, we need to get it into a format the browser understands.
Now when the link is clicked on, the browser will look for the “elixir.html” file in the “beverages” folder.
Check your answer in the back of the chapter, and then go ahead and change both <a> elements in “lounge.html.”
Going the other way; linking up into a “parent” folder.
Now we need to fix those “Back to the Lounge” links.
First we need to go UP into the “lounge” folder...
Now that you know the path, you need to get it into a format the browser understands.
Now when you click on the link, the browser will look for the “lounge.html” file in the folder above.
Q: What’s a parent folder? If I have a folder “apples” inside a folder “fruit”, is “fruit” the parent of “apples”?
Folders (you might have heard these called directories) are often described in terms of family relationships.
For instance, using your example, “fruit” is the parent of “apples”, and “apples” is the child of “fruit”
If you had another folder “pears” that was a child of “fruit”, it would be a sibling of “apples.”  Just think of a family tree.
A: When you need to tell the browser that the file you’re linking to is in the parent folder, you use “..” to mean “move UP to the parent folder.”  In other words, it’s browserspeak for parent.
So we had to tell the browser to look UP one folder.
Q: What do you do if you need to go up two folders instead of just one?
A: You can use “..” for each parent folder you want to go up.
Each time you use “..” you’re going up by one parent folder.
So, if you want to go up two folders, you’d type “../..”
Q: Once I’m up two folders, how do I tell the browser where to find the file?
You might expect that we’d call “../..” the “grandparent” folder, but we don’t usually talk about them that way, and instead say, “the parent of the parent folder,” or “../..” for short.
Q: Is there a limit to how far up I can go?
A: You can go up until you’re at the root of your Web site.
So, you could only go up as far as “lounge”
Q: What about in the other direction – is there a limit to how many folders I can go down?
A: Well, you can only go down as many folders as you have created.
But we don’t recommend that – when you have that many folder levels, it probably means your website organization is too complicated! In addition, there is a limit to the number of characters you can have in a path: 255 characters.
That’s a lot of characters, so it’s unlikely you’ll ever need that many, but if you have a large site, it’s something to be aware of.
Q: My operating system uses “\” as a separator; shouldn’t I be using that instead of “/”?
Various operating systems use different file separators (for instance, Windows uses “\” instead of “/”) but when it comes to the Web, we pick a common separator and all stick to it.
So, whether you’re using Mac, Windows, Linux, or something else, always use “/” in the paths in your HTML.
Your turn: trace the relative path from “elixir.html” to “lounge.html” from the “Back to the Lounge” link.
You’ve almost got the lounge back in working order; all you need to do now is fix those images that aren’t displaying.
Here’s the relative path, which tells the browser where the image is located.
We specify this just like we do with the href attribute in the <a> element.
Hey, it’s nice you fixed all those links, but didn’t you forget.
Finding the path from “lounge.html” to “drinks.gif” To find the path, we need to go from the “lounge.html” file to where the images are located, in the “images” folder.
The elixirs page contains images of  several drinks: “red.jpg”, “green.jpg”, “blue.jpg”, and so on.
Let’s figure out the path to “red.jpg” and then the rest will have a similar path because they are all in the same folder:
GOAL: we’re in the beverages folder and we need to get over to the images folder.
Remember this will be written as “..” in the path.
You did it! Now we’ve got organization and all our links are working.
That covers all the links we broke when we reorganized the lounge, although you still need to fix the images in your “lounge.html” and “elixir.html” files.
In “elixir.html”, update the image src attribute so that “../images/” comes before each image name.
You’ll now be able to navigate between all the pages and view the images.
When you want to link from one page to another, use the <a> element.
The href attribute of the <a> element specifies the destination of the link.
The content of the <a> element is the label for the link.
The label is what you see on the Web page.
By default, it’s underlined to indicate you can click on it.
You can use words or an image as the label for a link.
When you click on a link, the browser loads the Web page that’s specified in the href attribute.
You can link to files in the same folder, or files in other folders.
A relative path is a link that points to other files on your Web site relative to the Web page you’re linking from.
Just like on a map, the destination is relative to the starting point.
Use “..” to link to a file that’s one folder above the file you’re linking from.
When your path to an image is incorrect, you’ll see a broken image on your Web page.
Don’t use spaces in names when you’re choosing names for files and folders for your Web site.
It’s a good idea to organize your Web site files early on in the process of building your site, so you don’t have to change a bunch of paths later when the Web site grows.
There are many ways to organize a Web site; how you do it is up to you.
Here’s your chance to put your relativity skills to the test.
We’ve got a Web site for the top 100 albums in a folder named “music”
In this folder you’ll find HTML files, other folders and images.
Your challenge is to find the relative paths we need so we can link from our Web pages to other Web pages and files.
On this page, you’ll see the Web site structure; on the next page you’ll find the tasks to test your skills.
For each source file and destination file, it’s your job to make the correct relative path.
If you succeed, you will truly be champion of relative paths.
HTMLcross How does a crossword help you learn HTML? Well, all the words are HTML-related and from this chapter.
In addition, the clues provide the mental twist and turns that will help you burn alternative routes to HTML right into your brain!
We put the link inside its own paragraph to keep things tidy.
From coldplay.html, which is down in the rock folder, we had to go up TWO folders to get to music, and then go down into images, and finally artists to find the image chris.gif.
I was told I’d actually be creating Web pages in this book? You’ve certainly learned a lot already: tags, elements, links, paths...
What better way to enjoy my new Segway than to hit the open.
What I really need to do is get this in a Web page so my friends.
Make sure you read through Tony’s adventures - they’ll co me in.
Tony’s got his hands full driving across the United States on his Segway.
Why don’t you give him a hand and create a Web page for him.
First, you’re going to create a rough sketch of  the journal that is the basis for your page design.
Once you have the outline, then you’re going to translate it into real HTML.
Finally, with the basic page done, you’ll add some enhancements and meet some new HTML elements along the way.
Take a close look at Tony’s journal and think about how you’d present the same information in a Web page.
No need to get too fancy, you’re just creating a rough sketch.
Assume all his journal entries will be on one page.
Think of the page in terms of large structural elements: headings, paragraphs, images, and so on.
Are there ways his journal might be changed to be more appropriate for the Web?
My first day of the trip! I can’t believe finally got everything packed and ready to go.
Because I’m on a Segway, I wasn’t able to bring a whole lot with me: cellphone, iPod, digital camera, and a protein bar.
As Lao Tzu would have said, “A journey of a thousand miles begins with one Segway.”
I saw some Burma Shave style signs on the side of the road today: “Passing cars, When you can’t see, May get you, A glimpse, Of eternity”
Segway’n USA Documenting my trip around the US on my very own Segway!
Tony’s journal looks a lot like a Web page; all we need to do to create the design sketch is to get all his entries on one page and map out the general organization.
It looks like, for each day that Tony creates an entry, he has a date heading, an optional picture, and a description of  what happened that day.
Tony gave his journal a title, “Segway’n USA”, so let’s get that right at the top as a heading.
We’ll capture that here as a small paragraph at the top.
Each day, Tony creates an entry that includes the date, usually a picture, and a description of the day’s adventures.
So, that’s a heading, an image, and another paragraph of text.
In this entry he just has a heading (the date) and a description of the day’s events.
His friends and family can just use the scroll bar to.
The third entry should look just like the first one: a heading, an image, and a paragraph.
From a sketch to an outline Now that you’ve got a sketch of  the page, you can take each section and draw something that looks more like an outline or blueprint for the HTML page...
All you need to do now is figure out which HTML element maps to each content area, and then you can start writing the HTML.
Here we’ve taken each area of the sketch and created a corresponding block in our blueprint.
Now that you know what “building blocks” make up each part of the page, you can translate this blueprint directly.
Now all you need to do is create the corresponding HTML to represent the page and fill in Tony’s text.
We’re using the title of the journal as the title of the Web page.
Adding some new elements You have the basic elements of  HTML down.
Now we’re going to s-t-r-e-t-c-h your brain a little and add a few more common elements.
Let’s take another look at Tony’s journal and see where we can spruce things up a bit...
Check this out: Tony has a little quote stuck at the end of his first post.
It’s his remixed version of a Lao Tzu quote: “A journey of a thousand miles begins with one Segway.”
Got a short quote in your HTML? The <q> element is just what you need.
Here’s a little test HTML to show you how it works:
Notice that we don’t put our own double quote characters around the quotes.
Notice the browser has gone to the trouble of adding the double quotes.
There are lots of  reasons people use double quotes in text, but when we use <q> that means something specific.
In other words what we’ve done is to add some additional meaning by marking up the quote.
Before we added the <q> element, the browser just knew it had a paragraph of  text with a few double quote characters in it.
Now, because we’re using the <q> element, the browser knows that some of  that text is a real quote.
So what?  Well, now that the browser knows this is a quote it can display it in the best way possible.
Some browsers will display double quotes around the text, some won’t, and in instances where browsers are using non-English languages, other methods might be used.
And don’t forget mobile devices, like cell phones, or audio HTML browsers for the visually impaired.
It’s also useful in other situations, such as a search engine that scours the Web looking for Web pages with quotes.
One of  the best reasons (as you’ll see when we get back to presentation and CSS later in the book) is that you’ll be able to style quotes to look just the way you want.
Suppose you want quoted text to be displayed in italics and colored gray? If  you’ve used the <q> element to structure the quoted content in your Web pages, you’ll be able to do just that.
See! Using double quotes doesn’t make something an actual quote.
Go ahead and rework his Lao Tzu quote to use the <q> element.
After you’ve done it on paper, make the changes in your “journal.html” file and give it a test drive.
You’ll find the solution in the back of the chapter.
The Case of the Elements Separated at Birth Identical twins were born in Webville a number of years ago and by a freak accident involving an Internet router malfunction, the twins were separated shortly after birth.
Both grew up without knowledge of the other, and only through another set of freak circumstances did they later meet and discover their identity, which they decided to keep secret.
After the discovery, they quickly learned that they shared a surprising number of things in common.
Being identical twins, they bore a strong resemblance to each other, and so they decided to put together an evil scheme whereby they might stand in for each other now and then.
They first tested this on their wives (the details of which we won’t go into) and they passed with flying colors – their wives had no idea (or at least pretended not to)
Next they wanted to test their switching scheme in the work place where,  as another coincidence, they both performed the same job: marking up quotes in HTML documents.
So, on the chosen day, the brothers went to the other’s work place fully confident they’d pull off their evil plan (after all, if their wives couldn’t tell, how could their bosses?), and that’s when things turned bad.
Within 10 minutes of starting the work day, the brothers had both been found to be imposters and the standards authorities were immediately alerted.
How were the twins caught in the act? Keep reading for more clues...
Looooong Quotes Now that you know how to do short quotes, let’s tackle long ones.
Tony’s given us a long quote with the Burma Shave jingle.
In his journal Tony just put the Burma Shave quote right inside his paragraph, but wouldn’t it be better if  we pulled this quote out into a “block” of  its own, like this:
I saw some Burma Shave style signs on the side of the road today: Passing cars, When you can’t see, May get you, A glimpse, Of eternity.
It’s important to use the right tool for the job, and the.
If you don’t know what “Burma Shave” slogans are, we’ll tell you all about them in just a few pages...
We also put each line of text on a separate line so it reads more like a Burma Shave slogan.
Open your “journal.html” file and locate the July 14th entry.
Open “journal.html” in your browser and take a look at the results of  your work:
To insert the <blockquote> element, we need to end this paragraph first.
Next we put the Burma Shave text in the <blockquote> element.
Q: Multiple paragraphs in a block quote? How do I do that?
Just put paragraph elements inside your <blockquote>, one for each paragraph.
Q: How do I know what my quotes or block quotes will look like in other browsers? It sounds like they may handle it differently.
You don’t really know what your quotes will look like without trying them out in different browsers.
Some browsers use double quotes, some use italics and some use nothing at all.
The only way to really determine how they’ll look is to style them yourself, and we’ll certainly be doing that later.
A: Because the <blockquote> really is like a new paragraph.
Think about this as if you were typing it into a word processor.
When you finish one paragraph you hit the return key twice and start a new paragraph.
To type a block quote you’d do the same thing and indent the quote.
Put this in the back of your mind for a moment; it’s an important point and we’re going to come back to it in a sec.
Also, remember that the indenting is just the way some browsers display a <blockquote>
Not all browsers use indentation for <blockquote>, and those that do might not in new versions.
So, don’t rely on a <blockquote> to look the same in all browsers.
You might do this if you’re quoting someone who quoted someone else.
But couldn’t I just use the <em> element to italicize my quotes?
A: Well, you could, but it wouldn’t be the right way to do it, because you’d be using the <em> element for its effect on the display rather than because you’re really writing emphasized text.
If the person you were quoting really did emphasize a word, or you want to add emphasis to make a strong point about the quote, then go right ahead and use the <em> element inside your quote.
There are easier and better ways to get the look you want for your elements with CSS.
But that’s a whole ’nother story (it didn’t end well)
What’s the difference? Block elements are always displayed as if  they have a linebreak before and after them, while inline elements appear “in line” within the flow of  the text in your page.
Remember: block elements stand on their own; inline elements go with the f low.
Block: stands on its own Inline: goes with the flow.
Each block element is displayed on its own, as if it has a linebreak before and after it.
Q: I think I know what a linebreak is; it’s like hitting the carriage return on a typewriter or the return key on a computer keyboard.
A linebreak is literally a “break in the line,” like this, and happens when you hit the Return key, or on some computers, the Enter key.
You already know that linebreaks in HTML files don’t show up visually when the browser displays a page, right? But now you’ve also seen that any time you use a block element, the browser uses linebreaks to separate each “block”
You’re soon going to see that the way you combine elements in a page has a lot to do with whether elements are block or inline.
In the meantime, you can also think about block versus inline this way: block elements are used as the major building blocks of  your Web page, while inline elements mark up small pieces of  content.
When you’re designing a page, you typically start with the bigger chunks (the block elements) and then add in the inline elements as you refine the page.
The real payoff  is going to come when we get to controlling the presentation of  HTML with CSS.
If  you know the difference between inline and block, you’re going to be sipping martinis while everyone else is still trying to get their layout right.
You’ve always got those linebreaks hanging around keeping everyone away from you, like they’re your body guards or something.
Yeah, you’re great, but where would you be without inline content? Paragraphs and headings and all that are kind of  pointless without text and inline content like links.
Block elements are really the major building blocks of  all these Web sites.
If  you didn’t have me, these pages would just crumble.
I agree <a> is an important element, and we’ve actually been trying to recruit him over to our side.
But the most important part of  a page is that it be designed well at the foundation, and that takes block elements.
You can’t just take a bunch of  links and make a real page, now can you?
Well, a lot of  people do think at first that the <img> element is block, but he’s not, and he makes much more sense as an inline element.
People like images mixed in with all their text and links.
Because people like to use small quotes inline with their text.
Let me know how all that page building goes without any inline elements.
I’m sure those are going to be some useful pages.
We’ve got a perfectly good block quote; why do we need <q>?
Where are those linebreak body guards when I need them? Look how behind I am now.
Add a <br> element to any line when you want to break the flow and insert a “linebreak.”
Wouldn’t that be nice? You’d actually be able to make the browser pay attention and insert some carriage returns for a change.
Turns out there is an element, the <br> element, just for that purpose.
What if you had an element whose only job was to give you a linebreak when you needed one?
Now it reads like a Burma Shave slogan should read!
Go ahead and add the  <br> elements to Tony’s journal.
After you make the changes, save the file, and give it a test drive.
Content? Hmm, the whole point of this element is to insert a linebreak.
We know there’s never going to be any content between those tags.
In Chapter 1 we said that an element is an opening tag +
The <br> element is an element that doesn’t have any content.
Why? Because it’s just meant to be a linebreak, nothing else.
So, when an element doesn’t have any real content by design, we just use a shorthand to represent the element and it ends up looking like <br>
After all, if  we didn’t have this shorthand, you’d be writing <br></br> every time you needed a linebreak, and how much sense does that make?
Keep in mind, the reason for the shorthand isn’t laziness so much as it is efficiency.
It’s more efficient to represent empty elements this way (efficient in typing, in the number of  characters that end up in a page, and so on)
In fact, after reading HTML for a while, you’ll find that it is easier on your eyes too.
Yeah, if we just type this then it really represents the same thing.
Q: So, the only purpose of <br> is to insert a linebreak?
If you want to insert a linebreak into your text, then you use the <br> element.
A: Because it has no content, as in element = opening tag + content + closing tag.
There is no content you are trying to mark up, so it’s empty.
Since it is empty, we don’t need all the extra brackets and markup, so we just shorten it into a more convenient form.
If an element doesn’t need to mark up some text, then it is probably an empty element.
Q: Are there any other empty elements? I think <img> must be an empty element, too, right?
You’ve already seen us use the <img> element, and we’ll be getting to the details of this element soon.
Elements that don’t have any HTML content by design are called empty elements.
This is a convenient shorthand that reduces the amount of markup in your HTML.
You’ve come a long way already in this chapter: you’ve designed and created Tony’s site, you’ve met a few new elements, and you’ve learned a few things about elements that most people creating pages on the Web don’t even know (like block and inline elements, which are really going to come in handy in later chapters)
We can take Tony’s site from good to great by looking for a few more opportunities to add some markup.
Well I’ve made it 1200 miles already, and I passed through some interesting places on the way:
Wouldn’t it be great if  we could mark up this text so the browser knows this text is a list?  Then the browser could display the list items in a more useful way.
Tony wrote the list of cities that he’s been through in his August journal entry.
Note that not only is this a list, but it’s an ordered list.
You always want to choose the HTML element that is closest in meaning to the structure of  your content.
If  this is a list, let’s use a list element.
Doing so gives the browser and you (as you’ll see later in the book) the most power and flexibility to display the content in a useful manner.
It wouldn’t be hard to make a list using the <p> element.
Of course, you could use the <p> element to make a list...
If  you use that, then the browser knows the text is a list, and can display it in the best way possible.
The paragraph element is really meant for paragraphs of  text, not lists.
It probably wouldn’t look much like a list, just a bunch of  numbered paragraphs.
If  you wanted to change the order of the list, or insert a new item, you’d have to re-number them all.
Remember, it’s important to use the right tool for the job, and the <p> element is.
As with any other HTML element, the content between the tags can be as short or as long as you like and broken over multiple lines.
Locate this HTML in your “journal.html” file and keep up with the changes as we make them.
Each of these <li> elements will become an item in the list.
Creating an HTML list requires two elements that, when used together, form the list.
The first element is used to mark up each list item.
The second determines what kind of  list you’re creating: ordered or unordered.
Let’s step through creating Tony’s list of  cities in HTML.
Here’s how you enclose your items in an <ol> element.
We want this to be an ordered list, because Tony visited the.
All the list items sit in the middle of the <ol> element and become its content.
Again, we’re just showing a fragment of the HTML from Tony’s journal here.
Can you rework the list so the numbering is correct?
Taking a test drive through the cities Make sure you’ve added all the HTML for the list, reload your.
Notice that the browser takes care of automatically numbering each list item (so you don’t have to)
There’s a linebreak before the list starts, so <ol> must be a block element.
But there’s also a linebreak after each item, so <li> must be a block element too!
Here’s another list from Tony’s journal: cell phone, iPod, digital camera, and a protein bar.
Go ahead and add the HTML to change the items into an HTML unordered list (remember, you use <ul> for unordered lists)
When you’ve finished, check your answers in the back of the chapter.
Then make these changes in your “journal.html” file and test.
Neither one of these elements really makes sense without the other.
Q: What about unordered lists? Can I make the bullet look different?
We’ll come back to that when we’re talking about CSS and presentation.
Q: What if I wanted to put a list inside a list?  Can I do that? A: Yes, you sure can.
Q: I think I basically understand block elements and inline elements, but I’m totally confused about what elements can go inside other elements, or, as you say, what can be “nested” inside of what.
A: That’s one of the hardest things to get straight with HTML.
This is something you’re going to be learning for a few chapters, and we’ll show you a few ways to make sure you can keep the relationships straight.
But, we’re going to back up and talk about nesting a little more first.
In fact, since you brought it up, we’ll do that next.
Q: Burma Shave? A: Burma Shave was a company that made brushless shaving cream in the early part of the 20th century.
They began advertising their product using roadside signs in 1925, and these signs proved to be very popular (if somewhat distracting for drivers)
The signs were grouped in bunches of four, five or six, each with one line from the slogan.
At one point, there were 7,000 of these signs on roadsides throughout the United States.
Most are gone now, but there are still a few left, here and there.
Putting one element inside another is called “nesting” When we put one element inside another element, we call that nesting.
The more you learn about HTML, the more important having this nesting in your brain becomes.
But no worries – before long you’ll naturally think about elements this way.
Drawing the nesting of  elements in a Web page is kind of  like drawing a family tree.
Your first payoff  for understanding how elements are nested is that you can avoid mismatching your tags.
What does “mismatching your tags” mean and how could that happen? Take a look at this example:
So far, so good, but it’s also easy to get sloppy and write some HTML that looks more like this:
It’s okay to mess up your nesting if  you like playing Russian roulette.
If  you write HTML without properly nesting your elements, your pages may work on some browsers but not on others.
By keeping nesting in mind, you can avoid mismatching your tags and be sure that your HTML will work in all browsers.
This is going to become even more important as we get more into “industrial strength HTML” in later chapters.
Below, you’ll find an HTML file with some mismatched tags in it.
Your job is to play like you’re the browser and locate all the errors.
After you’ve done the exercise look at the end of the chapter to see if you caught all the errors.
A bunch of HTML elements, in full costume, are playing a party game, “Who am I?” They’ll give you a clue – you try to guess who they are based on what they say.
Fill in the blanks to the right to identify the attendees.
Also, for each attendee, write down whether or not the element is inline or block.
Tonight’s attendees: Any of the charming HTML elements you’ve seen so far just might show up!
I’m a list, but I don’t have my affairs in order.
Use me to quote text that stands on its own.
I was just creating a Web page explaining everything I was.
Isn’t that going to mess up the nesting? Do I need to put double.
But, HTML gives you an easy way to specify these and other special characters using a simple abbreviation called a character entity.
Here’s how it works: for any character that is considered.
So, say you wanted to type “The <html> element rocks.” in your page.
Another important special character you should know about is the & character.
So what about the copyright symbol? And all those other symbols and foreign characters? You can look common ones up at this URL:
Q: Wow, I never knew the browser could display so many different characters.
Your browser will only display all these characters if your computer or device has the appropriate fonts installed.
A: No, no! The reason & is special is precisely because it is the first character of any entity.
So, it’s perfectly fine to use & in your entity names, just not by itself.
A: You can use either the number, like &#100 or the name of an entity in your HTML (they do the same thing)
However, not all entities have names, so in those cases your only choice is to use the number.
Evel, in his quest for world domination, has put up a private Web page to be used by his evil henchmen.
You’ve just received a snippet of intercepted HTML that may contain a clue to his whereabouts.
Given your expert knowledge of HTML, you’ve been asked to crack the code and discover his location.
Here’s a bit of the text from his home page:
Hint: visit http://www.w3schools.com/tags/ref_entities.asp and/or type in the HTML and see what your browser displays.
Here’s a bunch of elements you already know, and a.
Use this element for formatted text when you want the browser to show your text exactly as you typed it.
Something that you want to highlight as a longer passage, say, from a book.
The code element is used for displaying code from a computer program.
Need to display a list? Say, a list of ingredients in a recipe or a todo list?  Use the <ul> element.
If you need an ordered list instead, use the <ol> element.
Whenever you want to make a link, you’ll need the <a> element.
This element tells the browser that the content is an address, like your contact info.
It’s perfect for my trip and it really does a.
Plan the structure of your Web pages before  n you start typing in the content.
Start with a sketch, then create an outline, and finally write the HTML.
Plan your page starting with the large, block  n elements, and then refine with inline elements.
Remember, whenever possible, use elements  n to tell the browser what your content means.
Always use the  n element that most closely matches the meaning of your content.
For example, never use a paragraph when you need a list.
They stand on their own and are displayed with space above and below the content within them.
Use the <br> element when you need to insert  n your own linebreaks.
HTMLcross It’s time to give your right brain a break and put that left brain to work: all the words are HTML-related and from this chapter.
Okay, it doesn’t LOOK any different, but don’t you FEEL better now?
Here’s the rework of Tony’s Lao Tzu quote using the <q> element.
Here’s another list from Tony’s journal: cell phone, iPod, digital camera, and a protein bar.
This doesn’t match the opening <ol> tag at the start of the list, above.
I’m a list, but I don’t have my affairs in order.
Use me to quote text that stands on its own.
A bunch of HTML elements, in full costume, are playing a party game “Who am I?” They gave you a clue – you tried to guess who they were based on what they said.
Tonight’s attendees: Quite a few of the charming HTML elements you’ve seen so far showed up for the party!
Stumped? <br> is in limbo land between block and inline.
It does create a linebreak, but isn’t typically displayed with space above and below it, like block elements are.
We haven’t talked about this in detail yet, but, yes, <img> is inline.
You could have looked up each entity, or typed them in.
Web pages are a dish best served on the Internet.
So far you’ve only created HTML pages that live on your own computer.
In this chapter we’ll encourage you to get those Web pages on the Internet.
WARNING: once you get to Webville, you may never come back.
We’re going to Webville! We’re leaving our dusty ol’ local file system.
Getting Starbuzz (or yourself) onto the Web You’re closer to getting Starbuzz – or even better, your own site – on the Web than you might think.
All you need to do is find a “Web Hosting Company” (we’ll call this a “hosting company” from now on) to host your pages on their servers, and then copy your pages from your computer to one of  those servers.
Of  course it helps to understand how your local folders are going to “map” to the server’s folders, and once you put your pages on the server, how you point a browser to them.
For now, let’s talk about getting you on the Web.
Remember me from way back in Chapter 1? You were.
Find a way to get your files from your computer to a server at the hosting company (there are a few ways)
Point your friends, family, and fans to your new site and let the fun begin.
We’re going to take you through each of  these steps, and even if  you’re not going to set up a Web site online right now, follow along because you’ll learn some important things you’ll need to know later.
Finding a hosting company To get your pages on the Web, you need a server that actually lives on the Web full-time.
Your best bet is to find a hosting company and let them worry about the details of  keeping a server running.
No worries, though; finding a hosting company is fairly straightforward and inexpensive.
Which company? Well, we’d love to sign you up for Web hosting at Head First Hip Web Hosting, Inc., but that doesn’t really exist.
So, you’re going to have to do a little homework on your own.
While finding a company to host your pages isn’t difficult, it’s kind of  like choosing a cable TV company: there are lots of  options and plans.
You really have to shop around for the best deals and for the service that works for you.
The good news is that you should be able to get started for almost nothing out of  your pocket, and you can always upgrade later if  you need additional features.
While we can’t suggest a particular provider, we can tell you a few things to look for in a provider, and we also list a few of  the more popular providers at: http://www.headfirstlabs.com/providers.html.
Note from marketing: if a hosting company writes a big enough check we can!
Data transfer: This is a measure of the amount of pages and data the hosting company will let you send to your visitors during a given month.
Most hosting companies offer reasonable amounts of data transfer for small sites in their most basic plans.
If you’re creating a site that you expect will have lots of visitors, you may want to carefully look into this.
Backups: Does the hosting company regularly make a backup of your pages and data that can be recovered in the event that the server has a hardware failure?
Domain names: Does the hosting company include a domain name in its pricing? More about these on the next page.
Reliability: Most hosting companies report keeping Web sites up 99% of the time or better.
Goodies: Does your package include other goodies such as email addresses, forums, or support for scripting languages (something that may become important to you in the future)?
Even if  you’ve never heard of  a domain name, you’ve seen and used a zillion of  them; you know...
So what is a domain name? Just a unique name that is used to locate your site.
This part is the name of a specific server IN the domain.
There are different domain “endings” for different purposes: .com, .org, .gov, .edu; and also for different countries: .co.uk, .co.jp, and so on.
When choosing a domain, pick the one that best fits you.
How can you get a domain name? The easy answer is to let your hosting company worry about it.
They’ll often throw in your domain name registration with one of their package deals.
However, there are hundreds of  companies that would be glad to help – you can find a list of  them at.
As with finding a hosting company, we’re afraid we’ll have to leave you to find and register your own domain name.
You’ll probably find that going through your hosting company is the easiest way to get that done.
There are a couple of  reasons you should care about domain names.
If  you want a unique name for your site, you’re going to need your own domain name.
Domain names are also used to link your pages to other Web sites (we’ll get to that in a few pages)
Domain names are controlled by a centralized authority (called ICANN) to make sure that only one person at a time uses a domain name.
Also (you knew it was coming), you pay a small annual registration fee to keep your domain name.
Q: Why is it called a “domain name” rather than a “Web site name”?
So the domain name is something you can use for a lot of Web sites.
A: If that meets your needs there is nothing wrong with using their name.
If, on the other hand, you have a domain name, you can just take that with you to your new hosting company (and your users will never even know you’ve switched)
Q: If domain names are unique, that means someone might already have mine.
Most companies that provide registration services for domain names allow you to search to see if a name is taken (kind of like searching for vanity license plates)
Remember, you can visit Head First Labs for some suggestions and resources.
Here’s an exercise you really need to go off and do on your own.
We’d love to personally help but there’s only so much you can ask of book authors (and feeding the cat while you’re on vacation is probably out too)
The hosting company has already created a root folder for you, which is where all your pages are going to go.
Remember your Starbuzz pages? There are two: the main page (index.html) and the page that contains the mission statement (mission.html)
Congratulations! You’ve got your hosting company lined up, you’ve found a domain name, and you’ve got a server all ready for your Web pages.
Even if  you don’t, keep following along because this is important stuff.
Now what? Well, it’s time to move in, of  course.
So, take that For Sale sign down and gather up all those files, we’re going to get them moved to the new server.
Like any move, the goal is to get things moved from, say, the kitchen of  your old place to the kitchen of  your new place.
On the Web, we’re just worried about getting things from your own root folder to the root folder on the Web server.
Let’s get back to Starbuzz and step through how we do this.
A: Up until now the root folder has just been the top-level folder for your pages.
On the Web server, the root folder becomes even more important because anything inside the root folder is going to be accessible on the Web.
Q: My hosting company seems to have called my root folder “mydomain_com”
The important thing is that you know where your root folder is located on the server, and that you can copy your files to it (we’ll get to that in a sec)
We’ve been putting all our pages for the site in one folder, which we call the root folder.
Now we’re going to copy all that over to the server’s root folder?
You’re going to take all the pages on your own computer, and put them all inside your site’s root folder on the hosting company server.
A: Yes, you’re basically going to replicate all the pages, files, and folders in your own root folder onto the server.
So if you’ve got an “images” folder on your computer, you’ll have one on the server too.
You’re now one step away from getting Starbuzz Coffee on the Web: you’ve identified the root folder on your hosting company’s server and all you need to do is copy your pages over to that folder.
But how do you transfer files to a Web server? There are a variety of ways, but most hosting companies support a method of  file transfer called FTP, which stands for File Transfer Protocol.
You’ll find a number of  applications out there that will allow you to transfer your files via FTP; we’ll take a look at how that works on the next page.
As much FTP as you can possibly fit in two pages Seriously, this really is an HTML and CSS book, but we didn’t want to leave you up a creek without a paddle.
So, here’s a very quick guide to using FTP to get your files on the Web.
Keep in mind your hosting company might have a few suggestions for the best way to transfer your files to their servers (and since you are paying them, get their help)
After the next few pages, we’re off our detour and back to HTML and CSS until we reach the end of  the book (we promise)
Some are command-line driven, some have complete graphical interfaces, and some are even built into applications like Dreamweaver and GoLive.
They all use the same commands, but with some applications you type them in yourself, while in others you use a graphical interface.
Use the “cd” command to change your current directory to the directory where you want to transfer files.
Transfer your files to the server using the “put” command.
To connect, you’ll need a username and password supplied by your hosting company.
Transfers a copy of the “index.html” file into the current directory on the server.
Make a directory for images, and then quit using the bye command.
You can also make a new directory on the server with the “mkdir” command.
Here’s an example of FTP being used from a command-line application:
Transfers a copy of the file from the server back to your computer.
This is just like making a new folder, only you’re doing it on the server, not your own computer.
Q: My hosting company told me to use SFTP, not FTP.
A: SFTP, or Secure File Transfer Protocol, is a more secure version of FTP, but works mostly the same way.
Just make sure your FTP application supports SFTP before you make a purchase.
Q: So do I edit my files on my computer and then transfer them each time I want to update my site?
A: Yes, for small sites, that is normally the way you do things.
Use your computer to test your changes and make sure things are working the way you want before transferring your files to the server.
For larger Web sites, organizations often create a test site and a live site so that they can preview changes on the test site before they are moved to the live site.
If you’re using a tool like Dreamweaver or GoLive, these tools will allow you to test your changes on your own computer, and then when you save your files, they are automatically transferred to the Web site.
Q: Can I edit my files directly on the Web server?
A: That usually isn’t a good idea because your visitors will see all your changes and errors before you have time to preview and fix them.
That said, some hosting companies will allow you to log into the server and make changes on the server.
To do that you usually need to know your way around a DOS or Linux command prompt, depending on what kind of operating system your server is running.
Most FTP applications have a trial version you can download to try before you buy.
Here’s a few of the most popular FTP applications for Mac and.
Make sure you know where your root folder is on the server at your hosting company.
Figure out the best way (and the best tool to use) to transfer files from your computer to the server.
For now, go ahead and transfer the Starbuzz “index.html” and “mission.html” files to the root folder of the server.
That’s the end of  the detour and we’re back on the Web superhighway.
At this point you should have the two Starbuzz pages, “index.html” and “mission.html”, sitting under your root folder on a server (or if  not, you’re at least following along)
After all this work, wouldn’t it be satisfying to make your browser retrieve those pages over the Internet and display them for you? Let’s figure out the right address to type into your browser...
All Web page addresses start with this, right? We’ll look into what http means in a sec.
You’ve probably heard the familiar “h” “t” “t” “p” “colon” “slash” “slash” a zillion times, but what does it mean? First, of all, the Web addresses you type into the browser are called URLs or Uniform Resource Locators.
If  it were up to us we would have called them “Web addresses,” but no one asked, so we’re stuck with Uniform Resource Locators.
A Uniform Resource Locator (URL) is a global address that can be used to locate anything on the Web, including HTML pages, audio, video, and many other forms of Web content.
In addition to specifying the location of the resource, a URL also names the protocol that you can use to retrieve that resource.
To locate anything on the Web, as long as you know the server that hosts it, and an absolute path to the resource, you can create a URL and most likely get a Web browser to retrieve it for you using some protocol – usually HTTP.
The first part of the URL tells you the protocol that needs to be used to retrieve the resource.
And the third part is the absolute path to the resource from the root folder.
In other words, it’s an agreed-upon method (a protocol) for transferring hypertext documents around the Web.
While “hypertext documents” are usually just HTML pages, the protocol can also be used to transfer images, or any other file that a Web page might need.
So each time you type a URL into your browser’s address bar, the browser asks the server for the corresponding resource using the HTTP protocol.
If  the server finds the resource, it returns it to the browser and the browser displays it.
If  the resource can’t be found, you’ll get the familiar “404 Error”, which the server reports back to your browser.
What’s an Absolute Path? The last time we talked about paths we were writing HTML to make links with the <a> element.
An absolute path tells the server how to get from your root folder to a particular page or file.
Say you want to look in Earl’s inventory to see if  your new Mini Cooper has come in.
To do that, you’ll need to figure out the absolute path to the file “inventory.html” that is in the “new” folder.
All you have to do is trace through the folders, starting at the root, to get to the “new” folder where his “inventory.html” file is located.
The path is made up of  all the folders you go through to get there.
So, that looks like root (we represent root with a “/”), “cars”, “new”, and finally, the file itself, “inventory.html”
Add on each folder as you navigate to the file.
In between the folder names, put a “/” to keep them separate.
A: The absolute path is what a server needs to locate the file you are requesting.
If the server didn’t have an absolute path, it wouldn’t know where to look.
Q: I feel like I understood the pieces (protocols, servers, Web sites, and absolute paths), but I’m having trouble connecting them.
A: If you add all those things together you have a URL, and with a URL you can ask a browser to retrieve a page (or other kinds of resources) from the Web.
How? The protocol part tells the browser the method it should use to retrieve the resource (in most cases, this is HTTP)
The Web site part (which consists of the server name and the domain name) tells the browser which computer on the Internet to get the resource from.
And the absolute path tells the server what page you’re after.
Q: We learned to put relative paths in the href attribute of our <a> elements.
How can the server find those links if they aren’t absolute?
When you click on a link that is relative, behind the scenes the browser creates an absolute path out of that relative path and the path of the page that you click on.
So, all the Web server ever sees are absolute paths, thanks to your browser.
Q: Would it help the browser if I put absolute paths in my HTML?
A: Ah, another good question, but hold that thought, we’ll get back to that in a sec.
Before you do, fill in the blanks below and then type in the URL (like you haven’t already)
If you’re having any problems, this is the time to work with your hosting company to get things sorted out.
I’d like my visitors to be able to type “http://www.starbuzzcoffee.com”
One thing we haven’t talked about is what happens if  a browser asks for a directory rather than a file from a Web server.
When a Web server receives a request like this, it tries to locate a default file in that directory.
Typically a default file is called “index.html” or “default.htm” and if  the server finds one of  these files, it returns the file to the browser to display.
So, to return a file by default from your root directory (or any other directory), just name the file “index.html” or.
When a server receives a request like yours without the trailing “/” and there is a directory with that name, then the server will add a trailing slash for you.
But I asked about “http://www.starbuzzcoffee.com”, which looks a little different.
Remember, when we’re talking about Web servers or FTP, we usually use the term “directory” instead of “folder.”  But they’re really the same thing.
Q: So anyone who comes to my site with the URL http://www.mysite.com is going to see my “index.html” page?
Or, possibly “default.htm” depending on which kind of Web server your hosting company is using.
Note that “default.htm” usually has no “l” on the end.
There are other possible default filenames, like “index.php”, that come into play if you start writing scripts to generate your pages.
That’s way beyond this book, but that doesn’t mean you won’t be doing it in the future.
Q: So when I’m giving someone my URL, is it better to include the “index.html” part or not?
What if, in the future, you change to another Web server and it uses another default file name like “default.htm”? Or you start writing scripts and use the name “index.php”?  Then the URL you originally gave out would no longer be valid.
The server says “that looks like a directory, is there a default file in that directory?”
He needs a little help figuring out the URL for each of the files below, labeled A, B, C, D, and E.
URLs aren’t just for typing into browsers; you can use them right in your HTML.
And, of  course, right on cue, the Starbuzz CEO has a new task for you: make a link from the main Starbuzz page over to the caffeine information at http://buzz.headfirstlabs.com.
As you can probably guess, we’re going to throw that URL right into an <a> element.
To link to any resource on the Web, all you need is its Uniform Resource Locator, which goes in the <a> element as the value of  the href attribute.
Let’s go ahead and add this in the Starbuzz “index.html” page.
Let’s add two new links: a relative link to the mission statement in.
Make the changes below, then save and load your “index.html” file in your browser.
And we’ve added some structure here by grouping the links and text into a paragraph.
Here’s the page with the new link, just as we planned.
Notice, we only linked the words “Caffeine Buzz” so it looks a little different from the other link.
Q: It seems like there are two ways to link to pages now: relative paths and URLs.
A: Well, relative paths can only be used to link to pages within the same Web site, while URLs are typically used to link to other Web sites.
Q: Wouldn’t it be easier if I just stuck with URLs for links to my own pages and outside pages? That would work wouldn’t it?
A: Sure, it would work, but there’s a couple of reasons you don’t want to go there.
One problem is that URLs are hard to manage when you have a lot of them in a Web page: they’re long, difficult to edit, and they make HTML more difficult to read (for you, the page author)
Also, if you have a site with nothing but URLs that link to local pages and you move the site or change its name, you have to go change all those URLs to reflect the new location.
If you use relative paths, as long as your pages stay in the same set of folders – because the links are all relative – you don’t have to make any changes to your <a> element href attributes.
So, use relative links to link to your own pages in the same site, and URLs to link to pages at other sites.
Q: Haven’t we seen one other protocol? I kept seeing “file://” before we started using a Web server.
The file protocol is used when the browser is reading files right off your computer.
This path may look different depending on your operating system.
One important thing to notice in case you try to type in a file URL is that the file URL has three slashes, not two, like HTTP.
Remember it this way: if you take an HTTP URL and delete the Web site name you’ll have three slashes, too.
Q: Are there other protocols? A: Yes, many browsers can support retrieval of pages with the FTP protocol, and there is a mail protocol that can send data via email.
Q: I’ve seen URLs that look like this: http://www.mydomain.com:8000/ index.html.
A: The “:8000” is an optional “port” that you can put in an HTTP URL.
Think of a port like this: the Web site name is like an address, and the port is like a mailbox number at an address (say, in an apartment complex)
The Case of Relatives and Absolutes PlanetRobots, Inc., faced with the task of developing a Web site for each of its two company divisions – PlanetRobot Home and PlanetRobot Garden – decided to contract with two firms to get the work done.
RadWebDesign, a seemingly experienced firm, took on the Home division’s Web site and proceeded to write the site’s internal links using only URLs (after all, they’re more complicated, they must be better)
However, during a demo at the unveiling, the horror-of-horrors occurred: as the team leader for RadWebDesign demonstrated the site he clicked on a link that resulted in a “404 - Page Not Found” error.
Displeased, the CEO of RobotsRUs suggested that RadWebDesign might want to consider changing their name to BadWebDesign and asked CorrectWebDesign if they were available to consult on fixing the Home site.
What happened? How did RadWebDesign flub things up so badly when all that changed was the name of the Web server?
Can you say “Web career?” You’ve certainly delivered everything the Starbuzz CEO has asked for, and you’ve now got a high profile Web site under your belt (and in your portfolio)
You want your Web sites to have that professional “fit and finish” that makes good sites into great ones.
You’re going to see lots of  ways to give your sites that extra “polish” in the rest of this book, but let’s start here with a way to improve your links.
The <a> element has an attribute called title just for this purpose.
They have the same name because they are related – it is often suggested that the value of  the title attribute be the same as value of  the <title> element of  the Web page you are linking to.
But that isn’t a requirement and often it makes more sense to provide your own, more relevant description in the title attribute.
Here’s how you add a title attribute to the <a> element:
The title element has a value that is a textual description of the page you are linking to.
Now that we’ve got a title attribute, let’s see how your visitors would make use of it.
Different browsers make different use of the title, but many display a tool tip.
Add the changes above to your “index.html” file and reload the page to see how it works in your browser.
For most browsers, the title is displayed as a “tool tip” when you pass the mouse over a link.
Remember that browsers for the visually impaired may read the link title aloud to a visitor.
The title is displayed as a “tool tip” in most browsers.
Just pass your mouse over the link and hold it there a second to see the tool tip.
The Head First Guide to Better Links Here are a few tips to keep in mind to further improve the fit and finish of your links:
Don’t make entire sentences or large pieces of text into links.
Never use link labels like “click here” or “this page”
Users tend to scan pages for links first, and then read pages second.
So, providing meaningful links improves the usability of your page.
Test your page by reading just the links on it; do they make sense? Or do you need to read the text around them?
Open your Starbuzz “index.html” file and add a title to the link to “mission.html” with the text “Read more about Starbuzz Coffee’s important mission”
Notice that we didn’t make the mission link’s label as concise as it should be.
Check the back of the chapter for the answer, and test your changes.
So far, whenever you’ve linked to another page, the page loads and your browser displays it from the top.
But, the CEO’s asking you to link into a particular spot in the page: the Coffee section.
Sound impossible? Come on, this is Head First – we’ve got the technology.
How? Well, we haven’t told you everything about the <a> element yet.
Turns out the <a> element can play two roles: you’ve already seen it act as the jumping off  point for traveling from one page to another, but it can also act as a landing point or destination of  a link.
Here’s the snippet from “index.html” with the Chai heading and description.
When you use an <a> element to create a destination, we call that a “destination anchor.” Creating a destination anchor is straightforward.
Here’s how you can do it in three short steps:
Find the location in the page where you’d like to create a landing spot.
This can be any text on the page, but often is just a short piece of  text in a heading.
Choose a identifier name for the destination, like “coffee” or “summary” or “bio”, and insert an id attribute into your <a> element.
Say you want to provide a way to link to the Chai Tea item on the Starbuzz page.
You’ve made a destination anchor out of the Chai Tea heading in the “index.html” page.
You already know how to link to pages using either relative links or URLs.
In either case, to link more specifically to a destination anchor in a page, just add a # on the end of  your link, followed by the destination anchor identifier.
So if  you wanted to link from any Starbuzz Coffee Web page to the “chai” destination anchor you’d write your <a> element link this:
Unfortunately, linking to Chai Tea with a destination anchor isn’t very impressive because the whole page is small enough that it easily fits in the browser.
Alter the existing <a> element in the Starbuzz Coffee “index.html” file to point to the destination anchor.
So, visit the page and when it is fully loaded, choose the “View Source” option, and you’ll see the markup for the page.
You’ll also find “View Source” in the browser menu, usually under “View”
Scroll down until you see the Coffee section; it looks like this:
You can see the heading for it along with the start of the paragraph below.
Now all you need to do is revisit the link to Caffeine Buzz and add on the destination anchor name, like this:
Add # along with the destination anchor id to your href.
You should be taken directly to the Coffee section of Caffeine Buzz’s front page.
Q: When I have two attributes in an element, is the order important? For example, should the title attribute always come after the href?
A: The order of attributes is not important in any element (if it were we’d all have headaches 24/7)
Q: Normally when I use an <a> element the browser underlines the text, but when I used the id attribute instead of href, it doesn’t.
When you use the id attribute it has no effect on the look of the text the <a> element surrounds.
Remember, the point of the destination anchor (<a> with the id attribute) is just to mark the location within the page, not to create a link, so there isn’t any need to display it visually.
Q: Why is it called an anchor? What’s anchor-like about it?
We’re not even going to try to give you a cute metaphor to understand how it could possibly be an anchor.
Basically we’re all stuck with the name, but now you do know what it does, and before long you won’t even give the name a second thought.
Q: Well even with the bad name, why use the same element to do such different things? Why not have separate linking and destination elements?
A: Think of it this way: you have to link from something to something else.
The <a> element with an href provides a way to describe the from something.
And the to something has always been just the top of the other Web page – in other words, you got the to something for free.
With the destination anchor you can also define the to something yourself.
So, while confusing, there is some sanity to the naming.
Q: I noticed in the anchor id names, you used “chai” with all lowercase letters and Caffeine Buzz used “Coffee” with a upper case “C”
A: You can use any combination of upper- and lowercase characters in your id attributes.
Just make sure you are consistent and always use the same upper- and lowercase letters in your hrefs and destination anchor id (which is why it is often easier to make these names entirely lowercase every time)
If you aren’t consistent, don’t expect your links to work correctly on every browser.
Q: Can I put a link to a destination anchor from within the same document?
In fact, it is common to define a destination anchor “top” at the top of a page and have a link at the bottom of the page saying “Back to top”
It is also common in long documents to have a table of contents for the entire page.
Q: If a Web page doesn’t provide a destination anchor and I still need to link to a specific part of the page, how can I?
If there is no destination anchor then you can’t direct the browser to go to a specific location in a Web page.
Q: Can I have a destination anchor id like “Jedi Mindtrick” or does an id have to be only one word?
A: To work consistently with the most browsers, always start your id with a letter (A-Z or a-z) and follow it with any letter, digit, hyphen, underscore, colon, or period.
So, since you can’t use a space, you can’t have a name like “Jedi Mindtrick”; but that isn’t much of a restriction because you can always have “Jedi-Mindtrick”, “Jedi_ Mindtrick”, “JediMindtrick”, and so on.
Q: How can I tell others what destination anchors they can link to?
A: There is no established way of doing this, and in fact, “View Source” remains the oldest and best technique for discovering the destination anchors you can link to.
The Case of Relatives and Absolutes So, how did RadWebDesign flub up the demo?  Well, because they used URLs for their hrefs instead of relative links, they had to edit and change every single link from http://www.planetrobots.com to http://www.robotsrus.com.
CorrectWebDesign, on the other hand, used relative paths for all internal links.
So, all CorrectWebDesign had to do was update the company name on a few pages.
So RadWebDesign left the demo sleep-deprived and with a little egg on their face, while CorrectWebDesign left the meeting with even more business.
It turns out that RadWebDesign dropped by a little coffeehouse/ bookstore after the demo and, determined not to be outdone, picked up a certain book on HTML & CSS.
What happened? Join us in a few chapters for “The Case of Brute Force versus Style.”
Linking to a new window We have another new requirement from the Starbuzz CEO (there are always new requirements for Web sites)
What he wants is this: when you click on the “Caffeine Buzz” link in the Starbuzz Coffee page, the Starbuzz Coffee page shouldn’t go away.
Instead a whole new window should open up with the Caffeine Buzz page in it, like this:
What the CEO wants is a whole new window to  open when you click on the Caffeine Buzz link.
When the Caffeine Buzz window pops open, it will open over the top of the Starbuzz page, but the Starbuzz page will still be there.
To open a page in a new window, you need to tell the browser the name of  the window in which to open it.
If  you don’t tell the browser a specific window to use, the browser just opens the page in the same window.
You can tell the browser to use a different window by adding a target attribute to the <a> element.
The value of  the target attribute tells the browser the “target window” for the page.
If  you use “_blank” for the target, the browser will always open a new window to display the page.
However, this is a good question because it brings up an important point: you don’t actually have to name your target “_blank”
If you give it another name, say, “coffee”, then all links with the target name “coffee” will open in the same window.
The reason is that when you give your target a specific name, like “coffee”, you are really naming the new window that will be used to display the page at the link.
Add the target attribute to the <a> tag that links to the Caffeine Buzz page.
Now give it a try – did you get a new window?
The target attribute tells the browser where to open the Web page that is at the link in the href attribute.
If there is no target, then the browser opens the link in the same window.
If the target is “_blank” then the browser opens the link in a new window.
Can you think of some advantages and some disadvantages to using the target attribute to open a page in a new window?
Head First: Hello target, we’re so glad you could join us.
It’s nice to know you’re still interested in hearing about me.
Target: Well, to be honest, I’m not as popular as I used to be.
Target: I think it’s because users want to be in control of  when a window opens.
They don’t always like new windows popping open at unexpected times.
Head First:  Well, it can be very confusing – we’ve had complaints from people who end up with so many windows on their screens, they can’t find the original page.
Target: But it’s not like it’s difficult to get rid of the windows...
Head First: True, but if  users don’t know a new window has opened then they can get confused.
Sometimes the new window completely covers the old window and it’s hard to tell what’s happening.
That can be confusing for anyone, but especially for someone with a visual impairment.
Head First:  Well, think about it: if  someone’s got their browser window magnified, and a whole new window opens on top of  the one.
It’s hard to tell what’s going on when you’re not looking at the whole screen at once.
Some screen readers play a sound when a new window opens, but others just ignore the new window completely, or else they jump right to the new window immediately.
Either way, it’s gotta be confusing for someone who can’t see what’s going on.
And of  course, since the page is in a whole new window, there’s no way to use the back button to get back to the original window.
Target: [Sigh]  I’m starting to see why I’m not as popular as I used to be.
Head First: Don’t get too depressed; there are times when it’s nice to have a new window open, right?
Target: Yes, I always thought having those little informational windows for “extra information” was handy, and I’m especially proud when people use me to open large versions of  images.
That way, the user can view the large image and then go right back to the main page.
Head First:  Okay, see, you do come in handy at times.
We’ve just got to remember to use you when it’s appropriate, but to keep in mind those people who might be visually impaired and not overuse you.
HTMLcross Here are some mind benders for your left brain.
Attribute used to anchor an <a> element to a page.
Always use these kinds of links when linking to pages on the same server.
Typically the best way to get on the Web is  n to find a hosting company to host your Web pages.
A hosting company can create one or more  n Web servers in your domain.
The File Transfer Protocol ( n FTP) is a common means of transferring your Web pages and content to a server.
A  n URL is a Uniform Resource Locator, or Web address, that can be used to identify any resource on the Web.
A typical URL consists of a protocol, a Web  n site name, and an absolute path to the resource.
The file protocol is used by the browser to  n read pages from your computer.
An absolute path is the path from the root  n folder to a file.
If you specify a directory without a filename, the Web server will look for a default page to return to the browser.
You can use relative paths or URLs in your  n <a> element’s href attribute to link to other Web pages.
For other pages in your site, it’s best to use relative paths, and use URLs for external links.
Use the id attribute to create a destination  n anchor in a page.
Use ‘#’ followed by a destination anchor id to link to that location in a page.
To help  n accessibility, use the title attribute to provide a description of the link in <a> elements.
Use the target attribute to open a link in  n another browser window.
Don’t forget that the target attribute can be problematic for users on a variety of devices and alternative browsers.
Wait, wait! Before you go, we need our logo on the Web page! Hello?
Oh, I guess they’ve already gone on to Chapter 5...
Attribute used to anchor an <a> element to a page.
Always use these kinds of links when linking to pages on the same server.
Add a title to the link to “mission.html” with the text “Read more about Starbuzz Coffee’s important mission”
Notice that we didn’t make the mission link’s label as concise as it should be.
Smile and say “cheese.” Actually, smile and say “gif”, “jpg”, or “png” – these are going to be your choices when “developing pictures” for the Web.
Got a logo you need to get on your page? Got it covered.
By the end of the chapter you’re going to know all the ins and outs of how.
You’re also going to see exactly how this little element.
How the browser works with images Browsers handle <img> elements a little differently than other elements.
When the browser sees these tags in a page, all it needs to do is display them.
But, when a browser sees an <img> element something very different happens: the browser has to retrieve the image before it can be displayed in a page.
The best way to understand this is to look at an example.
Let’s take a quick look back at the elixirs page from the Head First Lounge, which has four <img> elements:
Chock full of vitamins and minerals, this elixir combines the healthful benefits of green tea with.
Combining raspberry juice with lemon grass, citrus peel and rosehips, this icy drink will make your mind feel clear and crisp.
Blueberries and cherry essence mixed into a base of elderflower herb tea will put you in a relaxed.
First the browser retrieves the file “elixir.html” from the server.
Next the browser reads the “elixir.html” file, displays it, and sees it has four images to retrieve.
So, it needs to get each one from the Web server, starting with “green.jpg”
Now let’s take a look behind the scenes and step through how the browser retrieves and displays this page when it is requested from http://lounge.headfirstlabs.com:
The HTML page is retrieved, but the browser still needs to get the images.
Having just retrieved “green.jpg”, the browser displays it and then moves on to the next image: “lightblue.jpg”
Now the browser has retrieved “lightblue.jpg”, so it displays that image and then moves on to the next image, “blue.jpg”
How images work Images are just images, right? Well, actually there are a zillion formats for images out there in the world, all with their own strengths and weaknesses.
But luckily, only two of  those formats are commonly used on the Web: JPEG and GIF.
The only tricky part is deciding which to use when.
Use GIF for images with solid colors, logos, and geometric shapes.
Is a  “lossy” format because to reduce the file size, it throws away some information about the image.
Can represent images with up to 16 million different colors.
Works best for images with a few solid colors, and images with lines, like logos, clip art, and small text in images.
Allows one background color to be set to “transparent” so that anything underneath the image will show through.
As soon as you get good at representing complex images, like photos, I’m sure people will be happy to stick with you, but you still don’t know how to represent anything that needs more than a puny 256 colors.
You wanna talk to me about quality? I let my users choose exactly how much quality they want.
Yeah, but at what cost?  Face it, to get a photo down to a size that is reasonable to transmit over the Web, you have to lose a little quality in the image.That’s true, but most people are more than.
With me, users can usually choose a quality setting of  low or medium and they are just fine with the quality of  the images.
And, if  they used you instead, they’d have huge files for the same image.
Sure, sure, but have you ever looked at lines, logos, small text, solid colors? They don’t look so great with JPEG.
Hey, representing photos is easy if  you’re willing to lose quality.
If  I can’t represent an image fully, I won’t do it.
Just take a look at some of  the logos you’ve tried to represent ...
If  JPEG is so great, how come you can’t make parts of  your images transparent like I can?  With transparency, what is underneath the image shows through.
If  my users want a logo on a Web page, and the page has a colored background, they’ll use me because they know I’ll let the background show through the parts of  the logo without any color.
I think you make way too much of  this transparency thing – I say,  just build that background color into the image.
Transparency is the way to go, and to get it, you gotta use me.
Well, I’m not too worried about it; there aren’t many photos without backgrounds.
Oh yeah?  How about if  you want to cut out a picture of  a person, or even a tree, and use it on a Web page without a background?
Yeah, sure, GIF works great for those, but only as long as there are a small number of  those colors.
You’d be surprised how often I get to represent photos just because my users want that transparent background.
Stick to your logos and simple text images, and I’ll stick to photos and complex images.
Congratulations: you’ve been elected “Grand Image Format Chooser” of  the day.
For each image below, choose the format that would best represent it for the Web.
And now for the formal introduction: meet the <img> element.
As you can see, there’s more to dealing with images than just the HTML markup.
Let’s start by taking a closer look at the element (although you’ve probably already picked up on most of  how <img> works by now):
The src attribute specifies the location of an image file to be included in the display of the Web page.
It doesn’t cause linebreaks to be inserted before or after it.
There are a couple of  attributes you’ll want to know about.
And of  course you’ll also want to know how to use the <img> element to reference images on the Web that aren’t on your own site.
But really, you already know the basics of using the <img> element.
Let’s work through a few of  the finer points of  using the <img> element, and then put all this knowledge to work.
Here’s a “Sharpen your pencil” that is actually about pencils (oh, and images too)
This exercise involves a bit of trivia: Given a typical, brand-new pencil, if you drew one continuous line with it, using the entire pencil up, how long would the line be? What’s that got to do with images? To find the answer you’re going to have to write some HTML.
The answer to this trivia is contained in the image that is at the URL: http://www.headfirstlabs.com/trivia/pencil.gif.
Your job is to add an image to this HTML and retrieve the answer:
The src attribute can be used for more than just relative links; you can also put a URL in your src attribute.
Images are stored on Web servers right alongside HTML pages, so every image on the Web has its own URL, just like Web pages do.
You’ll generally want to use a URL for an image if  you’re pointing to an image at a different Web site (remember, for links and images on the same site, it’s better to use relative paths)
Here’s how you link to an image using a URL:
To include an image using its URL, just put the whole URL of the image in the src attribute.
The URL is the path to the image, so the filename at the end is always the filename of an image.
There’s no such thing as a default image like there is for Web pages.
We’ll talk about a couple of attributes you can add to the element.
Later, you’ll see a number of ways to use CSS to change the visual style of an image.
But there’s a lot to know about the images themselves.
What are the different image formats for? When should I use one over the other? How big should they be? How do I prepare images for use in a Web page?
Q: We’ve learned that empty elements are elements without content.
A: Well, to be more precise, an empty element is an element that doesn’t have any content in the HTML page to put the open and closing tags around.
True, an image is content, but the <img> element refers to the image.
Instead, the image replaces the <img> element when the browser displays the page.
And remember, HTML pages are purely text, so the image could never be directly part of the page.
Q: Back in the example of a Web page loading with images...
That is, the browser makes requests for multiple images at the same time.
Given the speed of computers and networks, this all happens fast enough that you usually see a page display along with its images.
Q: If I see an image on a Web page, how do I determine its URL so that I can link to it?
A: Most browsers allow you to “right-click” on an image, which brings up a contextual menu with some choices.
In these choices you should see “Copy Image Address” or “Copy Image Link”, which will place the URL in your clipboard.
Another way to find the URL is to right-click and choose “Open Image in New Window”, which will open the image in a browser window.
Then you can get the URL of the image from the browser’s address bar.
A last option is to use your browser’s “View Source” menu option and look through the HTML.
Keep in mind, though, you might find a relative link to the image, so you’ll have to “reconstruct” the URL using the Web site domain name and the path of the image.
Q: What makes a JPEG photo better than a GIF photo, or a GIF logo better than a JPEG logo?
A: “Better” is usually defined as some combination of image quality and file size.
A JPEG photo will usually be much smaller than an equivalent quality GIF, while a GIF logo will usually look better, and have a smaller file size than in JPEG format.
A: PNG is the latest newcomer in graphic formats, and an interesting one as it can support both JPEG and GIF styles of images.
Right now, PNG is a little on the cutting edge because not all browsers support it.
You should feel free to use PNG, but just be aware that it won’t work on every browser.
Always provide an alternative One thing you can be sure of  on the Web is that you never know exactly which browsers and devices will be used to view your pages.
Visitors are likely to show up with mobile devices, screen readers for the visually impaired, browsers that are running over very slow Internet connections (and may retrieve only the text, not the images, of  a site), cell phones, Internet-enabled toasters...
But in the middle of  all this uncertainty you can be prepared.
Even if  a browser can’t display the images on your page, there is an alternative.
You can give the visitor some indication of  what information is in the image using the <img> element’s alt attribute.
Update the image element to include the alt attribute “Pencil line 35 miles long”
This image doesn’t actually exist, so you’ll get a broken image.
Finally, download a couple of other browsers and give this a try.
In this exercise you’re going to see how your browser handles the alt attribute when you have a broken image.
The theory goes that if an image can’t be found, the alt attribute is displayed instead.
But not all browsers implement this, so your results may vary.
Look at the end of the chapter to see our results...
If the image can’t be displayed, then this text is used in its place.
The alt attribute just requires a short bit of text that describes the image.
For instance, you could try Firefox (http://www.mozilla.org/) or Opera (http://www.opera.com/)
Sizing up your images There’s one last attribute of  the <img> element you should know about actually, they’re a pair of  attributes: width and height.
You can use these attributes to tell the browser, up front, the size of  an image in your page.
The height attribute tells the browser how tall the image should appear in the page.
The width attribute tells the browser how wide the image should appear in the page.
Q: Why would I ever use these attributes if the browser just figures it out anyway?
A: On many browsers, if you supply the width and height in your HTML, then the browser can get a head start laying out the page before displaying it.
If you don’t, the browser often has to readjust the page layout after it knows the size of an image.
Remember, the browser downloads images after it downloads the HTML file and begins to display the page.
The browser can’t know the size of the images before it downloads them unless you tell it.
You can also supply width and height values that are larger or smaller than the size of the image and the browser will scale the image.
Many people do this when they need to display an existing image at a size that is larger or smaller than its original dimensions.
As you’ll see later, however, there are many reasons not to use width and height for this purpose.
Q: Do I have to use these attributes in pairs? Can I just specify a width or a height?
A: You can, but if you’re going to go to the trouble to tell the browser one dimension, supplying the second dimension is about the same amount of work (and there isn’t a lot to be gained by supplying just a width or a height unless you’re scaling the image to a particular width or height)
Q: We’ve said many times that we are supposed to use HTML for structure, and not for presentation.
A: It depends on how you are using these attributes.
If you’re setting the image width and height to the correct dimensions, then it is really just informational.
However, if you are using the width and height to resize the image in the browser, then you are using these attributes for presentation.
In that case, it’s probably better to consider using CSS to achieve the same result.
Both width and height are specified using the number of  pixels.
If you’re not familiar with pixels, we’ll go into what they are in a little more detail later in this chapter.
You can add width and height attributes to any image; if  you don’t, the browser will automatically determine the size of  the image before displaying it in the page.
Creating the ultimate fan site: myPod iPod owners love their iPods, and they take them everywhere.
Imagine creating a new site called “myPod” to display pictures of  your friends and their iPods from their favorite locations, all around the world.
What do you need to get started? Just some knowledge of  HTML, some images, and a love for your iPod.
We’ve already written some of  the HTML for this site, but we haven’t added the images yet – that’s where you come in.
But before you get to the images, let’s get things set up; look for the “chapter5” folder in the sample source for the book.
Open the “mypod” folder and here’s what you’ll see inside:
We’ve already written some of the HTML for the myPod site.
We’re going to use the photos folder to hold the images for the site.
My iPod in Seattle! You can see rain clouds and the Space Needle.
Open up the file “index.html” and you’ll see work has already begun on myPod.
As you can see, a lot of the HTML is already written to get myPod up and running.
All you need to do is add an <img> element for each photo you want to include.
There’s one photo so far, “seattle.jpg”, so go ahead and add an element to place that image in the page below.
When you’ve finished, load the page in your browser and check out the view of Seattle.
This is where you need to place the first photo.
Here’s the full size of the image, which is bigger than the size of the browser window...
If the image fits nicely in your browser window, then your browser may have an “auto image resize” option turned on.
Well, the image is right there where it should be, but that is one large image.
Then again, most of  the images that come from digital cameras these days are that large (or larger)
Should we just leave the image like it is and let visitors use the scroll bar? You’re going to see there are a couple of  reasons why that’s a bad idea.
Let’s take a look at the image and the browser and see just how bad this situation is...
We could use the scroll bars to see the rest of the image, but wouldn’t it be better if we could fit this image into the browser window?
Q: What’s wrong with having the user just use the scroll bar to see the image?
A: In general, Web pages with large images are hard to use.
Not only can your visitors not see the entire image at once, but using scroll bars is cumbersome.
Large images also require more data to be transferred between the server and your browser, which takes a  lot of time and may result in your page being very slow to display, particularly for users on dialup or other slow connections.
Q: Why can’t I just use the width and height attribute to resize the images on the page?
A: Because the browser still has to retrieve the entire large image before it scales it down to fit your page.
Q: You said the browser window is 800 pixels wide; what exactly does that mean?
A: Your computer’s display is made up of millions of dots called pixels.
If you look very closely at your display you’ll see them:
And, while screen sizes and resolutions tend to vary (some people have small monitors, some large), 800 pixels is the typical width that most people set their browsers to.
So, 800 pixels is a good rule of thumb for the maximum width of your images (and your Web pages too, but we’ll get to that in a later chapter)
Q: How do the number of pixels relate to the size of the image on the screen?
Q: Well, how large should I make my images then? A: In general, you want to keep the width of your image to less than 800 pixels.
Of course, you may want your images to be significantly smaller depending on what you’re using the image for.
What if the image is a logo for your page? You probably want that small, but still readable.
After all, you don’t need a logo the width of the entire Web page.
So, ultimately, the answer to your question depends on the design of your page.
For photos – which you usually do want to view as large as possible – you may want to have a page of small thumbnail images that load quickly, and then allow the user to click on each thumbnail to see a larger version of the image.
Q: I think my browser automatically resized the image of Seattle, because it fits perfectly in the window.
A: Some browsers have a feature that resizes any image that doesn’t fit within the width of your browser.
But many browsers don’t do this, so you don’t want to rely on it.
Even if every browser did have this feature, you’d still be transferring a lot more data than necessary between the server and browser, which would make your page slow to load and less usable.
Here’s a lot of pixels that together make up the upper part of the right wing of the butterfly.
This image is made up of thousands of pixels when it’s displayed on a computer screen.
Let’s fix up this image so it fits the browser page better.
Because we want the width of  the image to be less than 800 pixels, we need to decide on a width that would fit our myPod Web page nicely.
The whole point of  myPod is viewing photos of  iPods in their surroundings, so we probably want to have reasonably large images.
We need to resize the image so that it’s still reasonably large, but is less than 800 pixels wide.
Good question – there are lots of  photo editing applications on the market (some freely available), which are all quite similar.
We’re going to use Adobe’s Photoshop Elements to resize the images, because it is one of  the most popular photo editing applications, and is available on both Windows and the Macintosh.
If  you own another photo editing application, you should have no problem following along and translating each editing task to your own application.
If  you don’t yet have a photo editing application, you might first check to see if  there was one included with your operating system.
If  you have a Mac, you can use iPhoto to edit your photos.
If you’re a Windows user, you might find Microsoft’s Digital Image Suite on your computer already.
If  you still don’t have an editing application available to you, follow along and and for each step you can use the HTML and images included in the example folders.
Before we get started, which photo editing application are we going to use to resize the image?  I.
If you don’t have Adobe Photoshop Elements, but you’d like to follow along for the rest of the chapter with it, you can download it and try it out free for 30 days.
First, start your photo editing application and open the “seattle.jpg” image.
In Photoshop Elements, you’ll want to choose the “Browse Folders...” menu option under the “File” menu, which will open the “File Browser” dialog box.
When you’ve located the “seattle.jpg” image, double-click it to open.
As you navigate through folders, you’ll see a preview of the images in those folders here.
Single clicking the preview image shows you a larger preview of the image.
Or, if you’re using Windows, use the File > Open menu to open the “seattle.jpg” image directly.
Now that “seattle.jpg” is open, we’re going to use the “Save for Web” dialog to both resize the image and save it.
To resize the image, choose “Save for Web” from the File menu.
After you’ve selected the “Save for Web” menu option, you should see the dialog box below; let’s get acquainted with it before we use it.
This dialog lets you do all kinds of interesting things.
For now, we’re going to focus on how to use it to resize and save images in JPEG format for Web pages.
This split window shows you your original image on the left, and the image in the format you’re saving it for the Web on the right.
Currently this is showing “GIF” format; we’ll be changing this to JPEG in an upcoming step.
Once the width and height are set correctly, click “Apply” to let Elements know this is the size you want.
As you can see, there’s a lot of  functionality built into this dialog.
Then you need to save the image in JPEG format.
This will not affect the original image, just the file you’re going to save.
You must click Apply to reduce the image size; otherwise, the image will be saved at its original width and height.
Now that the image size is set, you just need to choose the format for the image.
Currently it’s set to save as GIF; change this to JPEG like we’ve done here.
That’s it; click “OK” and go to the next page.
Now you just need to save the image in the correct format (JPEG)
To do that, you need to choose JPEG format and set the quality to “Medium”
Notice that when you clicked “Apply” in the previous step, the image was resized and redisplayed.
Q: Can you say more about the quality setting in “Save for Web”?
A: The JPEG format allows you to specify the level of image quality you need.
The best way to get a feel for quality settings and the various image formats is to experiment with them on your own images.
You’ll soon figure out what quality levels are needed for your image and the type of Web page you’re developing.
You’ll also get to know when to use JPEG versus other formats.
Q: What is the number 30 next to the Quality label in the JPEG Options dialog box?
A: 30 is a number that Photoshop Elements considers “Medium” quality.
Q: Couldn’t I just use the <img> element’s width and height attributes to resize my image instead?
A: You could use the width and height attributes to resize an image, but that’s not a good idea.
Why?  Because if you do that, you’re still downloading the full-size image, and making the browser do the work to resize the image (just like when you have the auto resize option on in browsers that support that feature)
The width and height attributes are really there to help the browser figure out how much space to reserve for the image; if you use them, they should match the actual width and height of the image.
Photoshop Elements even tells you how long it would take to transfer over a dialup modem to a browser.
Why? People usually like to save their original, high-quality, big photos for printing, and put smaller versions on the Web.
If you saved this as “seattle.jpg”, you’d be losing the original photo!
Fixing up the myPod HTML Once you’ve saved the image, you can quit out of  Photoshop Elements.
Here’s a snippet of  the “index.html” file, showing only the parts you need to change.
Go ahead and make the changes, save them, and reload “index.html” in your browser.
Now the image is sized just right to give your visitors a good view – without overwhelming them with a large photo.
You’ll find this information in the preview pane below the image.
Once you’ve finished, determine which setting makes the most sense for this image.
A new batch of  photos has arrived for myPod: two more from Seattle and a few from a friend in Britain.
The photos have already been resized to less than 800 pixels wide.
Add the <img> elements for them (you’ll find the images already in the photos folder):
Feel free to add some of your own photos here as well.
Taking myPod for another test drive At this point we don’t need to tell you to reload the page in your browser; we’re sure you’re way ahead of  us.
Wow, what a difference a few images make, don’t you think? This page is starting to look downright interesting.
While you’ve got a great set of  images on the page, and even though you’ve already resized them, the images are still quite large.
Not only is the page going to load more and more slowly as you add more images, but the user has to do a lot of scrolling to see them all.
Wouldn’t it be better if  users could see a small “thumbnail” image for each photo, and then click on the thumbnail to see the larger image?
And, here’s what the page looks like now, close up.
Here’s what the whole page looks like now, with all the images.
Set the src of  each <img> element in “index.html” to the thumbnail version of  the photo.
Add a link from each thumbnail to a new page containing the larger photo.
You’re now going to make this page more usable by substituting a smaller image (which we’ll call a thumbnail) for each photo, and then you’ll create a link from that thumbnail to each of  the larger photos.
Here’s how you’re going to do this, one step at a time:
Create a new directory for thumbnails To keep things organized, create a separate folder for the thumbnail images.
Otherwise, you’ll end up with a folder of  larger images and small thumbnails all lumped together, which could get quite cluttered after you’ve added a significant number of  photos.
If you’re working from the book example files, you’ll find this folder already in there.
Create a new folder called “thumbnails” in the “mypod” folder.
Create the thumbnails You’ve got a place to put your thumbnails, so let’s create them.
With the image resized, choose “OK” and save it as the same name but in the thumbnail folder.
Be careful: if  you save it to the “photos” folder you’ll be replacing the larger image.
Now, repeat this for each photo in your “photos” folder.
If you’re working with the example files, you’ll find the thumbnails already in the “thumbnails” folder so you don’t have to do every one (after all, you’re learning HTML, not batch photo processing)
In Photoshop Elements, choose the “Save for Web” menu option.
Then change the width to 150 and the height to.
Don’t forget to change the format to JPEG, Medium quality.
Now you just need to change the HTML so that the <img> elements get their images from the “thumbnails” folder rather than the “photos” folder.
All you need to do is change the folder from “photos” to “thumbnails”
Visitors can see all the available pictures at a glance.
They can also tell which photos go with each city more easily.
Now we need to find a way to link from each thumbnail to the corresponding large image.
In other words, we didn’t “pull anything.” Because <img> is an inline element, it doesn’t cause linebreaks to be inserted before and after the element is displayed.
So, if there are several images together in your HTML, the.
The reason the larger photos weren’t side by side is because the browser didn’t have room to display them next to each other.
A browser always displays vertical space before and after a block element, and if  you look back at the screenshots, you’ll see the images are right on top of each other with no space in between.
Right; but remember the <img> element is an inline element.
Now you just need to create a link from each thumbnail image to its larger version.
A visitor sees a thumbnail they like, say the downtown iPod thumbnail...
The visitor can click the back button to get back to the myPod page.
Let’s create the pages first, and then we’ll come back and finish off  the links.
A page to display each photo along with a heading that describes its content.
A link from each thumbnail in “index.html” to its corresponding photo page.
As you’ve probably guessed, we’ve already created this folder for you in the book examples.
First, create a new folder called “html” to hold these individual pages, just below the “mypod” folder:
Now we’re going to create one HTML file for each photo.
In each HTML file, we’ll have a heading that describes the photo, followed by the photo.
Here’s our ready bake CSS again, just to keep the page a consistent color.
Notice that we need to use “..” in the relative path because the “html” folder is a sibling of the “photos” folder, so we have to go up one folder and then down into “photos” when using relative links.
If you look in the “html” folder in the chapter example files, you’ll find all of the single photo pages already there, except one – the page for.
You’ll find the answer in the back of the chapter if you have any problems.
You’ve got your large photos, your smaller thumbnails, and even a set of HTML pages for displaying individual photos.
Now you need to put it all together and get those thumbnails in “index.html” linked to the pages in the.
When you click the image, the browser will retrieve the page in the href.
Add the image links to “index.html” This is the last step.
Remember, the href of  each <a> element should link to the page containing the large version of  the image in the “html” folder.
Make sure that your links, thumbnails, and pages all match up correctly.
All you need to do is add the HTML marked in gray.
For each thumbnail image, wrap an <a> element around it.
Just be careful to get the right href in each link!
Q: When we put an <a> element around text we get an underline.
A: Actually, most browsers DO put a border around an image to show it is linked.
Our browser, Safari, is one of the few that don’t.
If your browser puts a border around your linked images, and you don’t like it, hold on a few more chapters and you’ll learn how to take that border off with CSS.
Also notice that when you pass your mouse over an image, your cursor will change to indicate you can click on the linked image.
In most cases your users will know an image is linked by context and by the mouse cursor, even if there’s no border.
Q: Can’t we just link to the JPEG image directly without all those HTML pages? I thought the browser was smart enough to display images by themselves.
If you did that and clicked on the link, the browser would display the image by itself on a blank page.
In general though, linking directly to an image is considered bad form, because you usually want to provide some context for the images you are displaying.
In fact, we’ve got a myPod logo all ready to go.
Take another look in the folder “chapter5/mypod”, and you’ll find a folder called “logo”
The “.psd” means that the file has been saved in the Photoshop format,  a common format for digital images.
But Photoshop format files are meant for processing digital images, not for Web pages, so we’ll have to do some work to get a “Web ready” image from it.
Many photo editing applications understand .psd files, so even if you don’t have Photoshop Elements, follow along for the next few pages.
If your application can’t open the “.psd” file, you’ll find the images from each step in the “logo” folder.
If your photo editing application won’t open the file, follow along anyway - the same principles apply for other formats as well.
Nice logo; it’s got some typography combined with two circles, one gray and one white (obviously inspired by the click-wheel controls on the iPod)
But what is that checkered pattern in the background?  That’s the way most photo editing applications show you areas that are transparent.
Keep all that in mind as we choose a graphic format for the logo...
Whenever you see this checkered pattern, that indicates a transparent area in the image.
We’re going to set the format to GIF to save the logo.
You already know that we have a couple of  options in deciding how to save this image: we could use JPEG or GIF.
This logo uses only three colors, text, and some geometric shapes.
So, go ahead and choose GIF in the format drop down, and you’ll see we have a few more options.
When you set the format to GIF, this Transparency checkbox appears.
Here’s where Photoshop Elements shows you the number of colors being used to save the GIF.
Try unchecking the Transparency checkbox: you’ll see the GIF preview at the bottom change to a white background.
This is related to transparency, as you’ll see in a sec.
To be transparent, or not to be transparent? That is the question...
The myPod logo is going to be placed on a light green background, so you might think that transparency is going to be a good thing, right?  Well, let’s compare how the logo looks using a few options in the “Save for Web” dialog:
Here’s what we get if we check Transparency and save.
For this version we told Photoshop Elements to create the matte around the text using a green background.
The halos happen because the photo editing application creates a “matte” to soften the text’s edges against the background color.
When it did that for this logo, however, it assumed it was softening the edges against a white background.
Here’s the logo saved in three different ways and displayed on a Web page with a green background.
You know you want a transparent GIF version of  the logo, and you also know we’ll need to use a matte to prevent the halos around the text.
Now we need to take a look at the Matte option.
The Matte option allows you to select the color for the matte around the text.
And we want that to be the color of  the Web page background.
Since the Web page is a light green, we want to use the same color for the matte.
What? You can’t tell that’s light green? For now take our word for it; we’ll come back to this in a few chapters and explain all about colors.
The Color Picker gives you a lot of different ways to choose the matte color.
We just want to set it to the background of the Web page, and we already know that is eaf3da...
When you click on the Matte pulldown menu and choose the “Other...” menu option, Photoshop Elements will bring up the Color Picker dialog.
Wait, what is the color of the Web page background?
Remember that Ready Bake CSS in the myPod “index.html” file? That CSS is what sets the background color of  the page to light green.
This box is designed specifically for colors written in the Web format.
You can type the letters in upperor lowercase, it doesn’t matter.
Once you’ve typed the color into the Color Picker, click “OK” and it will apply the change to the logo.
Now, when you look close up at the logo, you’ll see the matte matches the green color in the background of the “mypod.html” Web page.
Go ahead and enter the color, “eaf3da”, into the “Color Picker” dialog box.
You’ll see the color change to the background color of  the myPod page.
Check out the logo with a matte Now take a close look at the logo again in the preview pane.
You’ll see Photoshop Elements has added a light green matte around the hard edges, which will give the myPod logo text a softer, more polished look when the logo is in the Web page.
Okay you’ve made all the adjustments you need to in the “Save for Web” dialog, so go ahead and click “OK” to save the image as “mypod.gif ”
Elements will automatically change the extension of your filename to “.gif”
Add the logo image at the top of the myPod Web page.
Remember to use the correct relative path for the logo, in the “logo” folder, and add an alt attribute that describes the image.
Now all you need to do is add the logo to the myPod Web page.
We’ll add it to the top so it appears above the Web site description and iPod images.
That way, it’s the first thing your visitors see when they come to your myPod page.
And now for the final test drive Let’s test this puppy!   Reload the Web page in the browser and see how your myPod transparent GIF logo works.
Q: Do  I really need to know all this stuff about image formats to write good Web pages?
However, images are a big part of the Web, so some knowledge of how images work can really help.
Sometimes just an image or two makes the difference between a good page and a great one.
There’s a lot to know about images, but it’s easy to learn as you go.
Q: Why does the text need its edges softened? A: Check out the two versions of the myPod logo below:
You’ll see the top version has very hard, jagged edges and is less readable.
This is the way text is displayed by default on a computer screen.
The second version has had its edges softened using a technique called anti-aliasing.
Words that are anti-aliased on a computer screen are more readable and more pleasant to the eye.
Q: So where does the “Matte” come in? A: The process of anti-aliasing softens the edges relative to the background color.
If you put the bottom version of the logo (from the previous Q&A) against a colored background, you’d see it has white edges in it.
The Matte option in Photoshop Elements allows you to specify the color of the background that the text will be placed on, so when the text is softened it is done so against that color.
Q: Does this technique just work for text? A: No, it works for any lines in your graphics that might result in “jaggies”
Check out the circle in the myPod logo; it was matted too.
Q: Why can’t I just make the logo background color solid and match the color to the Web page?
A: You could do that too, but there is one disadvantage: if there are other things in your Web page that are showing through the transparency, then they won’t be seen with the solid color version.
You haven’t seen any examples of this yet, but when we get into CSS, you will.
Q: What if I change my background color after I make the matted version?
A: A slight variation in your background color probably wouldn’t be noticeable; however, if you change the color dramatically, you’ll have to recreate the GIF with a new matte color.
Use the <img>  n element to place images in your Web page.
Browsers treat <img> elements a little  n differently than other HTML elements; after reading the HTML page, the browser retrieves each image from the Web server and displays it.
If you have more than a couple of large  n images on a Web page, you can make your Web page more usable and faster to download by creating thumbnails – small images that the user can click on to see the large version of the image.
The <img> element is an inline element,  n which means that the browser doesn’t put a linebreak before or after an image.
The src attribute is how you specify the  n location of the image file.
You can include images from your own site using a relative path in the src attribute, or images from other sites using a URL.
The alt attribute of an <img> element is a  n meaningful description of the image.
It is displayed in some browsers if the image can’t be located, and is used by screen readers to describe the image for the visually impaired.
A width of less than 800 pixels is a good  n rule of thumb for the size of photo images in a Web page.
Most photo images that are created by digital cameras are too large for Web pages, so you’ll need to resize them.
Photoshop Elements is one of many photo  n editing applications you can use to resize your images.
Images that are too large for the browser  n make Web pages difficult to use and slow to download and display.
A pixel is the smallest dot that can be  n represented on the screen.
The JPEG format is best for photographs and  n other complex images.
The GIF format is best for logos and other  n simple graphics with solid colors, lines, or text.
The GIF image format allows you to make an  n image with a transparent background.
If you put an image with a transparent background in a Web page, what’s behind the image, such as the background color of the page, will show through the transparent parts of the image.
In Photoshop Elements, use the Matte color  n menu in the “Save for Web” dialog to choose the right color for softening the edges of your transparent GIF image.
Images can be used as links to other Web  n pages.
HTMLcross It’s time to give your right brain a break and put that left brain to work.
Web server makes a request for each one of these.
The larger the image, the _____ it takes to transfer it.
Congratulations: you’ve been elected “Grand Image Format Chooser” of  the day.
For each image below, choose the format that would best represent it on the Web.
It has lots of continuous colors (JPEG), but is also slightly geometric (GIF) and you may want to use this in a way that requires transparency (GIF)
Only a couple of colors with some text; definitely a GIF.
Here’s a “Sharpen your pencil” that is actually about pencils (oh, and images of course)
This exercise involves a bit of trivia: Given a typical, brand-new pencil, if you drew one continuous line with it, using the entire pencil up, how long would the line be? What’s that got to do with images? To find the answer you’re going to have to write some HTML.
Your job is to add an image to this HTML and retrieve the answer:
Here are the results of having a broken image in a few different browsers.
In most cases, the browser is able to use the extra alt attribute information to improve what is displayed.
Why do we care? After all, this is an error in a Web page; we should just fix it, right? Well, in the real world things are often not ideal; sometimes things break, Internet connections go bad in the middle of a page load, or visually impaired users need to hear what is in the image, because they can’t see it.
The Firefox browser just displays the alt attribute, as if it were text, if the image can’t be retrieved.
Mac Internet Explorer displays a broken image icon and the alt attribute text next to it.
On the Mac, Internet Explorer also displays a broken image icon and the alt attribute text next to it.
Safari on the Mac doesn’t make good use of the alt attribute from broken images.
If you want a really high quality image, then you might want Very High.
If you want the fastest possible site, then try Low.
We’ve chosen Medium because it is a nice trade off in size versus the quality of the image.
You may think Low is good enough, or that it’s worth bumping the quality up to High.
One thing is for sure however, GIF doesn’t work very well for this image (which should not be a surprise)
Note that your numbers may differ depending on the version of software you are using.
This file should go in the “html” folder under “mypod”
Web server makes a request for each one of these.
The larger the image, the _____ it takes to transfer it.
Here’s how you add the image “seattle.jpg” to the file “index.html”
What else is there to know about HTML?  You’re well on your way to mastering HTML.
In fact, isn’t it about time we move on to CSS and learn how to make.
Frank: You know, make sure it meets the HTML “standards.”
Frank:  Actually guys, I hate to admit it but I think the boss is right on this one.
Joe:  Come on, this is just going to mean even more work.
Frank:  Guys, what I’m saying is that I think this will help us do less work in the future.
Frank: Okay, here goes: the browser reads our HTML and then does its best to display it, right?  In fact, browsers are pretty forgiving...
Frank:  But different browsers (say Internet Explorer versus Firefox versus Safari) have different ways of  handling imperfect HTML.
In other words, if  you have mistakes in your HTML, then all bets are off  in terms of  how your pages will look in different browsers.
It’s only when you don’t have mistakes that most browsers display things consistently.
And when we start adding presentation to our HTML with CSS, the differences will get even more dramatic if  our HTML isn’t up to snuff.
So, by making sure we’re, as they say, “compliant” with the “standards,” we’ll have a lot fewer problems with our pages displaying incorrectly for our customers.
After all, our customers use every browser under the sun.
Frank:  Maybe nothing, but there are a few things we can to do to make sure.
Frank:  Well, we can start by helping the browser a bit by telling it exactly which version of  HTML we’re using.
Joe: I’m not even sure I know which version we’re using.
Frank: Ah ha!  So there is some room for improvement here.
Okay, let’s begin by figuring out which version of  HTML we’re using and how we can tell the browser about it.
There are a few other things we need to do too, but don’t worry, this isn’t a big deal.
And, when we’re done, life will be much easier when we start using CSS.
Browsers all do a pretty good job of consistently displaying your pages when you write correct HTML, but when you make mistakes or do nonstandard things in your HTML, pages are often displayed differently from one browser to another.
Pages weren’t pretty, but at least they were hypertext enabled.
No one cared much about presentation, and just about everyone on the Web had their very own.
The long, cold days of the “Browser Wars.” Netscape and Microsoft were duking it out for control of the world.
After all, he who controls the browser controls the Universe, right?
At the center of the fallout was the Web developer.
During the wars, an arms race emerged as each browser company kept adding their own proprietary extensions in order to stay ahead.
Who could keep up? And not only that, back in those days, you had to often write two separate Web pages: one for the Netscape browser and one for Internet Explorer.
Their plan: to bring order to the Universe by creating the ONE HTML “standard” to rule them all.
The key to their plan? Separate HTML’s structure and presentation into two languages – a language for structure (HTML 4.0) and a language for presentation (CSS) – and convince the browser makers it was in their best interest to adopt these standards.
While everyone hoped 4.0 would be the ONE, it’s always the case that a few fixes are needed here and there.
Compared to the early days of HTML (when we all had to walk barefoot in 6 feet of snow, uphill both ways), we were all cruising along writing HTML 4.01 and sleeping well at night knowing that almost all browsers (at least the ones anyone would care about) are going to display your content just fine.
And what will happen in the future? Will we all be going to work in flying cars and swallowing nutrition pills for dinner? Keep reading to find out.
As always, the world keeps moving, so we’ll also talk later in the book about where things are going.
But, of course, just as we were all getting comfortable, new technologies were created and things changed.
What does that mean?  You’ll find out soon enough, because we’re going to have you creating XHTML Web pages before you can say.
Our goal in this chapter is to get ourselves up to HTML 4.01
As you know, “HTML versions” have become a popular issue.
What’s the deal with that? You’re a Web browser after all.
I give you HTML and you display it the best you can.
Like you said, my job is to try to display every single one of  those pages, no matter what.
Head First:  So what’s the big deal?  What does it really matter which version of  HTML I use?
Browser:  Remember the browser wars?  All kinds of  elements were added to HTML that we aren’t supposed to use anymore.
But some people expect us browsers to be able to display them anyway, and we don’t always agree on how that should be done.
Head First: Why aren’t we supposed to use those elements any more?
Browser: Well, before CSS was invented, HTML had elements that were there for presentation, not structure.
Now, with CSS, we don’t need those anymore, but there are still plenty of  Web pages out there that use them.
Head First:  I think I’m starting to see the problem.
So how do you manage to display all these pages in all these different versions of  HTML?  That’s quite a tall order.
Browser:  Yeah, like I said, it’s tough being a browser.
What we end up doing is having two sets of rules for displaying Web pages: one for old HTML and one for the newer, standard HTML.
When I use the old rules, I call that my “quirks mode” because.
Head First:  That sounds like a pretty good solution to me...
If  you’re writing new HTML, but you don’t tell me you’re writing new HTML, then I have to assume you’re writing old HTML, and go into quirks mode just in case.
Browser:  Not all browsers agree on how to display the older stuff, but we all do a pretty consistent job with standard HTML.
So if  you’re using standard HTML, tell me and you’ll get more consistent results in all browsers.
Head First:  Oh, so you can end up using the quirks mode rules on the pages written using new HTML?
If  I don’t know you’re writing new HTML, I go into my quirks mode and do the best I can.
But, you don’t want that because all those “quirks” mean that your pages might end up looking a bit off, when they could have looked beautiful if  I’d only known you were using new HTML.
So, what’s the solution to this mess?  We definitely want our Web pages to look good.
Tell me up front which version of HTML you’re using.
That way I know which rules to use to display your page.
This week’s interview: Why do you care which version of  HTML you’re displaying?
When you do that, the browser knows exactly how to handle your page and (at least on any browser you’d care about) the page is going to display as you’d expect.
So, how do you tell the browser? Easy, you just add one line to the top of  your HTML files.
It has a “!” after the “<” at the beginning, which tells you this is something different.
This is all tricky to type in with all the slashes, quotes, and so on.
So instead of typing it in, you can copy and paste this text from the file “doctype.txt”
You can type this all on one line, or if you want, you can add a return where we did.
Just make sure you only press return in between the parts in the quotes.
Okay, we know that is one butt ugly line, but keep in mind, it is written for your browser, not you.
This line is called a document type definition because it tells the browser the type of  the document, and in this case, the document is your HTML page.
Let’s just take a quick peek at this line to get a feel for it.
But again, this is browser speak, not something you need to know well or memorize.
Just throw it in the top of  your HTML and you’re ready to go.
This means that <html> is the root (first) element in your page.
This points to a file that identifies this particular standard.
This part says we’re using HTML version 4.01 and that HTML markup is written in English.
This just means the HTML 4.01 standard is publicly available.
We’ll talk more about the word transitional in a bit....
Q: What exactly do you mean when you say we’re “compliant,” or that we’re writing “standard HTML?”
A: “Standard HTML” just means the version of HTML that everyone has agreed is “the standard,” and right now that is HTML 4.01
Being compliant is just another way of saying your pages meet the standard.
Q: And why should I care about standard HTML, or about making my pages compliant? They look fine to me.
A: Do you really want to go to all the trouble of writing Web pages and then styling them with CSS, only to have them display inconsistently (which is another way of saying “display badly”) in some browsers? By making them compliant, you’re assuring that your pages are going to display as consistently as possible in a variety of browsers.
Q: How do I make sure my pages are compliant, then? A: You need to do a couple of things, which we’re going to go through, but we’re also going to make use of a freely available tool on the Web that checks your pages to make sure they’re compliant.
The Web keeps moving ahead, though, so we’ll talk in the very next chapter about what’s new in the standards world.
It’s likely that there won’t be an HTML 5 because the new standard for writing Web pages is XHTML.
You’re going to learn all about XHTML in the next chapter.
The good news is that you’re already in great shape to use either HTML 4.01 or.
XHTML, so no matter which standard you choose, it will be easy for you to write Web pages based on what you’ve learned so far.
Q: Let me get this straight: if I throw the document type definition in the top of my HTML file, then the browser sees it and can make certain assumptions about my HTML, which is a good thing?
That’s good because the browser will use the layout and display rules for HTML 4.01, and not use quirks mode.
A: The browser will figure out that you’re not really writing HTML 4.01 and go back to quirks mode.
And then you’re back to the problem of having the various browsers handle your page in different ways.
The only way you can get predictable results is to tell the browser you’re using “HTML 4.01” and to actually do so.
Q: I really don’t have to worry about what’s in the document type line? Just throw it on my page?
Although there is one gotcha: there are a few different document types you might want to know about and we’re going to talk about another one of those in just a sec.
But, in terms of using the document type, just throw it in the top of your file.
Once you’ve got the DOCTYPE in there, no one worries on a daily basis about what it has in it.
Q: The word “transitional” in that document type worries me a bit.
I thought this was a standard, but it sounds less than standard if it is “transitional.”
If you’ll hold on a few pages we’ll get to the bottom of that question.
Adding the document type definition Enough talk, let’s get that DOCTYPE in the HTML.
Remember, you can type it all on one line, or you can hit return between the quoted parts like we’ve done here.
Just add it as the very first thing in the “lounge.html” file.
Well, we didn’t really expect any because all the DOCTYPE does is let the browser know for sure you’re using HTML 4.01
The DOCTYPE test drive Make the changes to your “lounge.html” file in the.
Frank:  You’re right, because your promise to the browser is only good if you actually have written perfect HTML 4.01
What we can do is make use of  a free online service that can look at a page and tell us if  it’s compliant.
Frank: Well, this service first looks at the document type and then checks all your HTML and makes sure it’s actually correct...
Jim:  Wow, and this is free? Who provides this service?
Jim:  This sounds like the answer to writing compliant HTML.
But how do I know all those things you just mentioned, like what elements go inside what elements?
Frank:  Let’s check out the validator first and then we’ll come back to that...
If your page is on the Web, then you can type in the URL here, click the “Check” button, and the service will retrieve your HTML and check it.
You can click “Choose file” (or “Browse” if you’re using Windows) and choose a file on your computer.
Then click “Check” and the service will check your HTML.
Let’s give the validator a spin and have it check out the lounge files.
We’re going to use option (3) to validate the “lounge.html” file.
That means we need to copy and paste the HTML from.
We clicked on the “Choose File” button and browsed to the file “lounge.html”, which now has the DOCTYPE for Transitional HTML 4.01 at the top.
Why do you think the alt attribute is required in HTML 4.01?
You know the alt attribute; add it into the <img> element.
Go ahead and open “lounge.html”, make the change, save, and then let’s try to validate again.
Hmm; it looks like we’re now “tentatively valid HTML 4.01 Transitional.” That sounds like “close, but no cigar.” Let’s take a look:
There’s definitely some issue with the lounge Web page, but what the heck does this mean??
It looks like if we fix the problem above we’ll have valid HTML.
So, we’ve got a perfectly valid HTML file in terms of  how we’ve written the HTML, but it looks like we have to tell it something about our “Character Encoding”
To solve that we’re going to have to find out what the heck it means...
Frank: The character encoding tells the browser what kind of characters are being used in the page.
For instance, pages can be written using encodings for English, Chinese, Arabic, and lots of  other types of  characters.
Jim:  What’s so hard about figuring out how to display a character? If  there’s an “a” in the file, then the browser should display an “a”
Frank: Well, what if  you’re using Chinese in your pages?  It’s an entirely different “alphabet” and it has a heck of  a lot more than 26 A-Z characters.
But shouldn’t the browser be able to tell the difference? Those other languages look nothing like English.
It could assume it was getting English-language characters, but what if  it’s not?  The character encoding takes the guesswork out of  it.
Jim:  We’ve had the site up for a long time; why is this an issue now?
Frank:  Because the validator is saying “Hey, if  I’m going to validate your page, you’d better tell me up front what characters you’re going to use!” And think about it, we’d want to do that for the browsers out there anyway.
Don’t stress, we just need to add one more line to our HTML, called a <meta> tag.
Jim:  Got any other surprises for us?  I really thought our Web page would validate after we put the document type definition in our file...
Frank:  I sure hope there are no more surprises! Let’s get the <meta> tag in there and find out.
Most of  you reading this book are probably using English or Western-European languages (the so-called “Latin” languages), so you’ll need a <meta> tag in your HTML that looks like this:
Just like other HTML tags, the <meta> tag has attributes.
You’re going to throw this line in as the first thing inside the <head> element of  your HTML.
This tag tells any browser the content type of  your file, and what kinds of characters are used to encode it.
Let’s look at the <meta> tag in a little more detail...
And we’re going to tell it something more about the content type of the page.
First we tell it that this is an HTML file.
This is a bit redundant, because the browser already knows that (remember we told it that in the DOCTYPE as well)
The content attribute is where we specify the content type information.
Here’s the new part; this tells the browser that we’re using the ISO-8859-1 character encoding.
A: Specifying a DOCTYPE and a <meta> content tag are kind of like taxes: you gotta do them to be compliant.
Look at it this way: you already understand them more than 99% of the Web page writing population, which is great.
But at the end of the day, everyone just puts the DOCTYPE and <meta> tag in their HTML and moves on with life.
So make sure you’ve got the right DOCTYPE and <meta> tag and then go do something much more fun.
It’s like WD-40; you don’t worry about why it’s called that, you just use it.
If you’re writing in another language, check out the information on character encoding at http://www.w3.org/International/O-charset.html.
Notice that this whole string is the value of the content attribute.
Making the validator (and more than a few browsers) happy with a <meta> content tag...
You just need to type the <meta> content type line right into your HTML.
Want to place another bet? Is this going to validate? First, make the changes to your “lounge.html” file, save it and reload it into your browser.
Once again, you won’t notice any change, but the browser will.
Always add this line above any other elements in the <head> element.
Or, you can validate by copying and pasting your HTML into the form, or even transfer the files to your Web site and give the validator your URL, whichever you prefer.
Like it says, you told the browser (and the validation service) that you are using HTML 4.01 Transitional, and the service was able to validate your page successfully.
I think we’re going to be talking BONUS when the boss.
Okay, it’s been more than a “few pages” since you said.
Imagine you’ve got a Web site with hundreds of  Web pages, all written in nonstandard HTML.
What do you do? Use the HTML 4.01 Transitional DOCTYPE, which allows you to validate your pages but still permits some of  the legacy HTML.
That way, you can be sure you don’t have any outright mistakes in your markup (like typos, mismatched tags, and so on) but you won’t have to rework all your HTML to get it to validate.
Then, after you’ve removed all the legacy HTML, you’re all ready for the strict document type, which ensures you have a fully compliant, standardized Web site.
There are actually two DOCTYPEs, one for those transitioning to HTML 4.01, and a more strict DOCTYPE for those who are already there.
But why are we using it? Why didn’t we just.
But, while we’ve been writing pretty decent HTML in this book, we’re just now learning how to write it in a way that is correct and standardized.
Right? And, as you can see, it took us a few steps to get there, what with all the DOCTYPEs and <meta> tags and the alt attribute.
But now that we’re there, and we’ve got validated transitional 4.01 HTML, we’re in a good position to start using the strict form of HTML.
Let’s give strict a try and then we can talk a little more about transitional versus strict.
I think we’ve been pretty darn strict in our HTML.
To move from transitional HTML 4.01 to strict, we change the DOCTYPE to the strict version.
Once we’ve done that, the validator (and browsers) will assume we’re playing by stricter rules that don’t allow some of  the legacy HTML.
We’ll talk about those rules in a sec, but for now let’s give the strict DOCTYPE a try.
To do that, we’ll start by taking a quick look at the DOCTYPE:
The “transitional” word is gone and we have a different URL that defines the strict version of  HTML 4.01
Let’s replace the transitional DOCTYPE with the strict and try to validate.
To change from transitional to strict, you just need to do two things to the DOCTYPE: delete the word.
Or if you like, you can delete the old line and type the new one in.
Just make sure your DOCTYPE looks exactly as it does above.
Now all that remains is to ask the validator if  our HTML is compliant with the strict version of  HTML 4.01
Use the validator again to check the page, after making sure your page has the changes above.
Let’s look at the error message: it looks like strict HTML doesn’t like where we put the <img> element.
It looks like we’re not valid under the strict rules, but why?
That was okay in older versions of  HTML, and 4.01 transitional lets it slide, but in the current standard, inline elements belong inside block elements.
It’s easy to fix though; all you have to do is stick your image in a block element like <p> and you’ll be good to go.
Joe:  I guess that’s clear if  you look at that error message...
Joe:  But I don’t see all the block elements we’ve used...
Joe:  Well, how are we supposed to know if  we’re nesting things properly before we try to validate – is there a list of  “nesting rules” somewhere?
Judy: There is, but you can remember most of  them using common sense once you’ve looked at the rules.
Frank:  Judy, are there any other places where we didn’t nest things properly?
Frank:  Okay, well let’s fix it and get this page validated.
I’m ready to see the green bar of  success here, guys.
So it looks like strict HTML 4.01 prefers that images, which are inline elements, be nested inside a block element, like a paragraph or a heading.
Now, the image “drinks.gif” is safely nested inside a <p> element.
Once you’ve done that, save and reload the page in your browser.
You’ll see it doesn’t really affect the look of  the page.
Why?  Because the heading above the image and the paragraph below are already block elements with linebreaks below and above them, respectively.
So the <p> element around the image doesn’t actually add any new linebreaks or spacing.
Ask the validator to give your “lounge.html” file another try.
Try validating them – do they validate?  If not, fix them so that they do.
Q: Okay, I think I get all this, and it was kind of fun having the validator check my HTML, but SO WHAT? Again, what is all this “compliance” really getting me?
A: How does happier customers sound?  If you know your HTML is valid, then it’s more likely that your Web pages will work consistently in a wide variety of browsers, which is going to give your Web page users a better experience.
There are a few other benefits: Web pages with compliant HTML load faster and work better on other devices that are now being used to surf the Web (like TVs and phones)
They’re also more accessible to the visually impaired who are using aural screen readers.
Q: So can you explain the error in detail?  I want to understand exactly what it means.
A: The error was caused by the <img> element not being nested inside a block element.
Imagine the browser is reading through your HTML, and sees an <img> element where it expected.
Just take it one error message at a time, fix your mistake, and you’ll often find you eliminate more than one error message in the process.
Q: Are all the validator’s error messages so difficult to understand?
A: Generally, yes, the error messages can be a little difficult to decipher.
This is a piece of software telling you what is wrong, not a human or a Head First book.
Remember, the validator doesn’t know what you meant to do and can only attempt to decipher and indicate errors in what you actually did.
Most of the time, it will point you to the right line in your HTML where your error is occurring, which is half the battle.
After reading these error messages for a while you’ll start to get the hang of them and often know what they are referring to, even if the validator doesn’t tell you specifically.
Q: Why are all the element names listed in that error message in uppercase?  I thought element names were written in lowercase.
However, the W3C is changing the rules, so in the future element names will all be lowercase.
So, while technically the validator for Strict HTML 4.01 still allows (and displays) uppercase tags, we’re only using lowercase so you’ll get into the habit of using only lowercase.
This means you won’t have to update your tag names down the road (and that means less work for you)
And when we say “down the road,” we actually mean in the next chapter.
Don’t you think it’s about time you learn the local rules of  the road? Luckily, Webville has prepared a handy guide to using strict HTML 4.01
This guide is meant for you  –  someone who is new to Webville.
It isn’t an exhaustive reference, but rather focuses on the more important common sense rules of  the road.
And you’ll definitely be adding to the knowledge in this guide as you get to know your way around Webville in coming chapters.
Always start each page with a DOCTYPE, but following that, the <html> element must always be the top, or root, element of your Web page.
All inline elements and text need to be inside another block element before they can go in the <body> element.
Failure to do so will result in HTML that isn’t compliant.
Webville Guide to Strict HTML 4.01 Traveling on the information super-highway can be dangerous if you don’t know the rules.
In this handy guide, we’ve boiled strict HTML 4.01 down into a common sense set of rules, starting with the major rules first:
The only things you can put in an inline element are text and other inline elements.
Paragraphs are for text, so keep block elements out of your paragraphs.
Why would you want to put anything other than a list item in an unordered or ordered list anyway?
The <blockquote> element requires one or more block elements inside it.
While it’s common to see text directly inside a block quote, that isn’t up to code here in Webville.
Please always put your text and inline elements inside block elements before adding them to a <blockquote>
Go ahead, put whatever you want in a list item.
Webville has very liberal laws when it comes to the <li> element: you can put text, inline elements, or block elements inside your list items.
That text should have been put inside a <p> first.
Webville Guide to Strict HTML 4.01 Continued Now that you’ve got the major rules down, let’s look at some of the finer points of the law.
Be careful about nesting an inline element inside another inline element.
While you can nest just about any inline element in another, there are a couple of cases that don’t make sense.
Also, empty elements like <img> provide no way to nest other inline elements within them.
Q: That wasn’t too bad; I was expecting pages of rules I had to remember.
Can I really write strict HTML 4.01 just following these rules?
A: These rules will get you a long way, but remember, you haven’t learned everything about HTML yet, so there are going to be a few new things that you’ll need to keep in mind too.
That said, there is no reason to memorize all these rules.
Just throwing up a page that three people in the world will see? Hey, as long as it looks good in all your browsers, who cares.
But if you’re doing something a fair number of people will visit, you’ll be better off keeping your HTML up to standards and validating it.
Should that be the transitional or strict standard? Well, the world is moving in the strict direction, so you can pay now or pay later, but eventually, it will be in your best interest to go strict.
And if you use strict, moving to XHTML will be a lot easier, and we’re going to do that in the very next chapter and use XHTML in the rest of the book.
A: In principle, someone might want to put emphasis on emphasis.
That seems silly, but since it doesn’t cause problems, like nested <a> elements do, the standard just says, if you want to do it, you can.
So, in general you can nest any of the inline elements inside other inline elements.
Some of these make more sense than others, but the <a> element is the only one that you can’t nest inside itself.
Remember too, that the <img> element is empty, so you can’t nest anything inside it.
Q: So why can’t I put text directly in a <blockquote>? A list item can have text or a block element.
You’re right, it does seem inconsistent, but it’s all based on the intent of the element.
It’s for one text paragraph, so of course no other block elements are allowed in it.
So the point is to “quote blocks.” List items? They’re like the contortionists of the element world – they have to be able to hold simple text, large bits of text like paragraphs or even other lists, so they can handle everything.
Q: I noticed the validator said the standard requires the “alt” attribute on <img> elements.
Yes, the alt attribute is required on images for accessibility, so that, for instance, the visually impaired can know what the image is, even if they can’t see it.
The other required attribute is the src attribute on an image – what good is an <img> element if it doesn’t point to an image? There are also some attributes that were okay with HTML 3.2 that you can’t use anymore with strict HTML Web pages looked, and you’re supposed to be using CSS for that kind of styling (more on this topic in just a couple of chapters)
Forget a rule? Just run it by me, the Validator.
You here to talk about how much you love frustrating Web page writers?
Oh, you know, all those Web page writers out there who are struggling to get their Web pages to validate with your strict DOCTYPE.
Not everyone can, or wants to, transition their entire Web site to the strict standard overnight, you know.
Sooner or later any page of  importance really needs to move to strict.
You may think I’m tough now, but you’ll love me later.
Huh?  You encourage people to stay behind the times with all those old tags and attributes.
The way I see it, people get to say they’re “standard HTML” when in reality, they’re still relying on old habits.
Hey man, some of  your tags have been “deprecated.” Do you know what that means? It means they’re going away.
By going strict now, it’ll be a lot easier to update to the next version of  HTML.
So, you’re just going to leave behind all those millions of  Web pages out there that still use older versions of  HTML?  Ignore them completely?  I bet you use some nonstrict Web pages yourself.
How ’bout I come over and check your history list?
Not everyone wants to be on the cutting edge, you know.
Other people want to take things a bit slower, make sure they understand exactly what the new standard is before jumping in and willy-nilly changing their pages.
You know, you really should be nice to me; I’ve helped a lot of  pages move to strict.
True, they can just start strict and won’t need me.
Anyway, I’m going back to my kinder and gentler method of  moving pages to strict.
Did you bother telling the readers that by the end of  the chapter, you’ll be obsolete too?
Oh no, you’re not coming near my browser history; keep your grubby paws off  it.
You’re right, there are a lot of  useful pages out there that need to be updated, and maybe they never will be, but we’re trying to build a better Web.
It’s actually cleaner and simpler to understand than the older HTML versions.
And, if  people write their Web pages correctly, they’ll be well prepared to have their pages work well in browsers for a long time.
Okay, it is helpful for people to be able to mark their pages as transitional until they learn the new stuff.
All I’m saying here is transitional shouldn’t be used as a crutch.
And anyone reading this book who is new to HTML and CSS has no need to be transitional.
Pages will be thanking me down the road for keeping them strict.
What is all this old markup that isn’t allowed in.
Even though we haven’t been including a DOCTYPE or a <meta> tag, and we’ve been a little lazy on the image nesting rules, throughout this book you’ve been writing HTML that is very close to the standard.
So, you haven’t had much opportunity to see the phased out elements and attributes.
Want to see some? Just visit a few Web pages with your browser and choose “View Source” from the “View” menu (your browser’s menus may differ)
Any tag or attribute that looks like it is used to alter the display of  the page is most likely deprecated in HTML 4.01 (because that is now CSS’s job)
It doesn’t hurt to know a little about these legacy elements, because you are quite likely to run into some of  them now and then.
That’s a good thing, because sometimes unlearning a bad habit is the hardest part of a new standard.
Font changes were made with the <font> element and its face attribute.
Right align a paragraph, or center a piece of text.
Text size was controlled with the <font> element, using the size attribute.
Your job is to play like you’re the validator and locate ALL the errors.
After you’ve done the exercise, look at the end of the chapter to see if you caught them all.
Use the validator to check your work once you’ve done (or if you need hints)
The World Wide Web Consortium (W3C) is  n the standards organization that defines what.
Many browsers have two modes for displaying  n HTML: “quirks” mode for old HTML and standards mode for HTML 4.01
If you don’t tell the browser which version of  n HTML you are using, many browsers will use quirks mode, which may cause inconsistent page display in various browsers.
The document type definition (DOCTYPE) is  n used to tell the browser which version of HTML your Web page is written in.
The strict DOCTYPE is used if you are writing  n fully compliant HTML 4.01
Use the transitional DOCTYPE if you are  n transitioning HTML that still includes displayoriented elements and attributes.
A character encoding tells the browser the  n character set that is used in the Web page.
Most Western-European languages used on  n computers today can be represented with the ISO-8859-1 character encoding.
The  n W3C validator is a free online service that checks pages for compliance with standards.
Use the validator to ensure that your HTML  n is well formed and that your elements and attributes meet the standards.
By adhering to  n standards, your pages will display more quickly and with fewer display differences between browsers.
Go ahead and grab a cup of your favorite beverage, sit back, and strengthen those neural connections by doing this crossword.
The boss wanted to standardize before adding this to the HTML.
Definition that tells the browser and validator what kind of HTML you're using.
This service will check your HTML for compliance with the standards.
The ________ encoding tells the browser which set of characters you're using.
If the browser can't tell what version of HTML a page is, it uses this  mode.
Your job is to play like you’re the validator and locate ALL the errors.
The boss wanted to standardize before adding this to the HTML.
Definition that tells the browser and validator what kind of HTML you're using.
This service will check your HTML for compliance with the standards.
The ________ encoding tells the browser which set of characters you're using.
If the browser can't tell what version of HTML a page is, it uses this  mode.
Try validating them – do they validate?  If not, fix them so that they do.
Solution: To validate “elixir.html”, you’ll have to add the alt attribute to each of your <img> elements.
We know you thought you bought an HTML book, but this is really an XHTML book in disguise.
XHTML?  Well, meet eXtensible HTML – otherwise known as XHTML – the next evolution of.
It’s leaner, meaner, and even more tuned for compatibility with browsers on a wide.
In this short little chapter we’re going to get you from HTML to XHTML in three.
Joe: I can’t believe our manager knows what it is.
Frank: Hey guys, XHTML is the new standard for HTML.
Jim:  That’s great, but do we need to be so cutting edge?
The X in XHTML is for “eXtensible,” which is another way of  saying it’s based on something called XML.
Joe:  Don’t the software guys use that to store some of  our data?
Okay, we’re going to take a big step back, for a page or two, and look at XML (not to be confused with XHTML)
This is going to be a fast ride, so hang on...
With HTML you’re basically told what elements you can and can’t use, right? So, if  you want to just make up an element, like <cool>, to wrap around content, you can’t do it, can you? Ah, but with XML, you can.
If  fact, you can invent totally new markup languages using XML.
Just by looking at the element names you can tell this is a recipe.
Other than the element names, the way the elements look and are used is just like HTML (opening tags, closing tags, and so on)
Think about how you would create a Web page using HTML.
Notice it has some extra attributes in it, which you’ve never seen on an <html> element in HTML.
What does this have to do with HTML? If  XML is a language that can be used to invent new markup languages, and HTML is a markup language, can we use XML to recreate HTML? We sure can.
Let’s see how this might look before we talk about why in the heck you’d actually want to:
Everything here looks normal, except the empty elements have that weird “/>” on the end again.
We changed the DOCTYPE and added a couple of new attributes, but the rest of this example is totally like HTML.
This is going to sound very anticlimatic, but XHTML is XML while HTML is, well, just HTML.
The big distinction may be difficult for you to see at first glance, but the reason XML is a good thing (and the reason the W3C and others have gone to all the trouble of  creating XHTML, when they already had HTML) is that once your pages are written in XHTML, all sorts of  things become possible that aren’t possible with HTML.
There’s another way to look at this: the differences between HTML and XHTML can all be seen on the previous page.
You’ve got a new DOCTYPE, and some minor changes to attributes and the way you write empty elements.
These small changes are all that is required to turn your HTML into XHTML.
Now that you know that moving to XHTML is so easy, it’s time for you to get a better idea of what it gets you.
So why would you want to use XHTML? By using HTML 4.01 Strict, you’re already reaping some of  the benefits of  XHTML.
However, because XHTML is XML, it has some interesting advantages beyond HTML 4.01
Let’s take a look at everything XHTML gets you, including some of  the benefits you’re already getting out of  using HTML 4.01 Strict, through the eyes of  a few people already using XHTML.
Unlike HTML, XHTML can be extended to include new markup.
By using XHTML I’m future-proofing my Web pages to take advantage of all.
There’s already a lot of data and information written in XML, and it’s more easily transformed into XHTML.
So, we’ll be able to get all that information on the.
The <html> tag must be the first tag after the DO CTYPE.
All attributes must have values, and those values m ust be.
Here’s the list of  things you must do to co nvert from HTML to XHTML.
We’ve checked off the requirements that you’re already on top of.
So, that doesn’t leave you with much to do to move to XHTML 1.0
You really only have a few things you need to take care of, and we’ll talk about those next.
On the other hand, if  you have a lot of  legacy HTML you need to convert, then you may have a big job on your hands.
But, even in that case, there are some tools that can help get you there.
You’re much closer to using XHTML than you might think Even though HTML and XHTML are almost the same, there are a few small differences, as you’ve seen.
If my HTML is transitional 4.01, and I want to switch to XHTML strict, then I have a little more work.
So, going from transitional HTML 4.01 to HTML Strict or XHTML Strict is about the same amount of  work.
To change your transitional HTML to either, you’ll first need to do all the things we mentioned in Chapter 6 to remove presentation tags and clean up your HTML.
They both allow deprecated presentational elements, and inline elements directly in the body of  your page.
So, if  you want to use that instead, remember to use the transitional XHTML 1.0 DOCTYPE instead of  the strict DOCTYPE.
You already know all about DOCTYPEs and you’re used to seeing the HTML 4.01 Strict document type.
Well, there’s also a document type for XHTML 1.0 Strict, and you need to change your DOCTYPE to use it instead.
Just like the HTML DOCTYPE, this is a public document type.
And it has a URL pointing to the definition of XHTML 1.0 Strict.
Add the xmlns, lang and xml:lang attributes to your <html> element.
Remember that XML can be used to define many markup languages other than XHTML.
To keep all those languages straight, XML needs to know which language you’re talking about when you use the element <html> (after all, someone could come along and make up their own language with XML and call it the “Hippo Tipping Markup Language,” which would cause mass confusion)
So, to keep things straight, the xmlns attribute specifies which language the <html> element belongs to.
And what about all the rest of  the elements inside the <html> element?  By default, they inherit the xmlns attribute of  their parent.
The <html> element also needs lang and xml:lang attributes, which specify the language being used in the XML document.
Here’s what your <html> opening tag should look like in XHTML:
The xmlns attribute is used to identify which XML language “html” belongs to.
It doesn’t matter what is at the URL - the URL alone is enough to make it unique.
And we just need to specify that we’re using English.
Going from strict HTML to XHTML 1.0 in three steps.
Depending on the way your XHTML is interpreted by the browser, you may need either one of these, so it’s best practice to use both.
This is the final, and most bizarre step of  the HTML to XHTML 1.0 transformation.
But it’s not so mysterious if  you know the background.
We’ve told you XHTML is stricter than HTML, and one area where it is stricter is with closing tags.
In HTML, you can have an empty element without a closing tag.
But in XHTML, if  you aren’t going to have a closing tag, you have to tell the browser about it by putting a slash before the final.
That little slash on the end tells the browser it shouldn’t expect a closing tag, because the <br/> is all there is.
Now you might have noticed we didn’t include a space before the “/>”
Let’s look at a couple of  examples so you know how to transform HTML empty elements into XHTML empty elements:
If your element is empty, let the browser know by putting a “/” before the ending “>”
And, give those older browsers a break by inserting a space before the forward slash.
Q: Can you explain the xmlns attribute a bit more; I feel like I missed something.
This is one of the most confusing parts of XML.
Okay, it works like this: lots of people can create XML languages (personally, we say get out and see the world, but some people seem to be into this sort of thing)
Let’s say two people call their elements the same thing.
For some people this is an element in HTML; for others, it’s part of an XML language for furniture.
So, if you use <table> in your XML, how do we know which one you mean? That’s where the xmlns attribute comes in.
The xmlns attribute holds a unique identifier that determines which language you mean.
It may look like a URL to you, but just think of it as something that is supposed to be unique.
The idea is that you could visit that URL and find out something about the language, although there is no requirement that anything actually exist at the URL.
A: Because XHTML is meant to be backwards compatible with HTML.
If they changed the root element to <xhtml> then older browsers wouldn’t know how to display your pages.
Q: You mentioned some tools earlier that could help convert my HTML to XHTML.
A: Yes, there’s a great little tool called Tidy that can do much of the work to get your HTML documents validating and ready for XHTML.
Tidy has a number of options and can take nonvalidating HTML and perform many of the tasks needed to make HTML validate.
It can also remove a fair amount of legacy presentational HTML and replace it with CSS.
Q: So if I have strict HTML, this is really all I have to do to move to XHTML?
You’re going to take Tony’s journal (remember him from Chapter 3?) and convert it to XHTML.
Add the xmlns, lang and xml:lang attributes to your <html> opening tag.
Be sure to check your work at the end of the chapter.
You do that in exactly the same way that you validated HTML.
The validator will check your XHTML and report that it’s valid, or report any errors to you.
Q: How does the validator know whether I’m validating HTML or XHTML? After all, this is the same page I used for HTML.
A: The validator looks at your DOCTYPE declaration, which states that the document is either XHTML Transitional or XHTML Strict, and that’s what it bases its validation on.
If you see any errors, check your typing, get them fixed, and try again.
You’ve done it: you’ve transitioned your HTML over to XHTML.
Now’s the time you can go tell all your friends you’re already using XHTML (we won’t tell them there isn’t much of  a difference between HTML and XHTML if  you don’t)
Oh, and if  we haven’t said so already, XHTML is just as compatible with CSS for styling, and you’re just a few pages from adding your first style to an XHTML page.
So, while you can use XHTML today, there are a few issues you need to keep in mind.
Right now the biggest problem you’re going to encounter is that while you might be using XHTML, some browsers are still going to treat your pages as HTML.
In most cases, this is fine, because XHTML is designed to be backwards compatible with HTML.
However, in the worst case, a browser may display your XHTML in the dreaded quirks mode (look back at Chapter 6 if  you’ve forgotten about quirks mode), so you could get some inconsistent display of  your XHTML.
What to do? Well, the best you can do right now is test your XHTML in a variety of  browsers to make sure things are working as you expect.
It really comes down to whether or not the XML benefits of  XHTML are meaningful to you.
If  they are, you can start using XHTML today – just be diligent about validating so that in the future, when real, strict XHTML browsers emerge, your pages will play well with them.
Because XHTML browsers are strict, they won’t accept invalid XHTML.
And, if  you use HTML 4.01 Strict and validate your pages, you’ll be ready to switch to XHTML at a moment’s notice.
I’m certainly glad to have the opportunity to persuade you to stick with me: HTML 4.01
I’m going to be around a long time, have no worries there.
Anyone with their head on straight should be moving to XHTML.
There’s really just not enough difference between you and me for people to really care.
And right now, that and a quarter won’t even get you a cup of  coffee.
The number of  devices that read XHTML is increasing every day.
And there are a lot of  applications out there that are gearing up to use XHTML.
That’s the problem: you think everyone wants to have applications using XHTML, or that everyone is creating Web sites for mobile devices.
Why are you asking them to go through all this pain?
Well that’s just it – there really is no pain.
If  you’re already using HTML 4.01, then XHTML is just a hop, skip, and jump away.
All you have to do is change your DOCTYPE, and add a couple of  attributes to your <html> element.
So, what’s the big deal? Why not have the latest and greatest with just a few minutes work?
The designers of XHTML knew that not all browsers would support XHTML, so they made it backwards compatible.
In other words, you can move to XHTML today, and still have it all work even on older browsers.
So you do all that work and then you’re just fooling yourself  that your XHTML is somehow different.
Ah, but that’s changing; more and more support for XHTML is arriving every day.
It’s easy, and when the new browsers and devices get here, you’ll be ready without even trying.
But what’s the point? If  your XHTML is just considered HTML by a browser, then it’s just HTML!
You can’t envision all the ways XHTML is going to be used in the future.
This is all great, but I keep saying people just don’t care.
Okay; let’s say you’re right, and XHTML is going to be the way of  the future.
But as you also said, XHTML is just a hop, skip, and a jump away.
So, my users can just wait until XHTML gets here, and they can hop, skip, and jump then.
What’s that saying? “You can’t teach an old dog a new trick?”
I think you mean “You can lead a horse to water...”
Do any of the advantages of XHTML matter to you? Are you translating existing XML into HTML for the Web? Are you working on pages that you need to display well on mobile devices? Are some of the newer XHTML technologies going to be important to you in the near future? Or, do you just want to be on the cutting edge? Well, we have good news: you can  move to XHTML today.
Now, not every browser will give you credit for moving to XHTML, but sooner or later they will have to, and, until they do, your pages will display just fine because.
None of that is important to you? You’re mainly concerned with making great Web pages? We have good news for you, too: you can easily stick with HTML 4.01 Strict and reap all the rewards of using the browser’s current choice of languages.
And, should you ever feel the need to upgrade to XHTML, then you can follow the three-step program outlined in this chapter to get you there.
So, no matter what your choice is, you’ve made an excellent one, and we wish you the best.
That said, the differences between HTML and XHTML are really minimal, so why not go ahead and move to XHTML? We have, and in the rest of this book we’ll be using XHTML 1.0
If, for some reason, you need to stick with HTML 4.01, that’s fine.
And in fact, since they really are basically the same, you’ll have no problems with the rest of the book.
Just make sure you’re using the right DOCTYPE for whichever version you’re using.
You’re going to take Tony’s journal (remember him from chapter 3?) and convert it to XHTML.
Don’t forget to put “ />” in your empty elements.
So far you’ve been concentrating on learning XHTML to create the structure of your Web pages.
Could it really be so easy? Well, you are going to have to learn a new language; after.
Don’t get me wrong, the hair, the hat, it all looks great.
But don’t you think he’d like it if you spent a little more time.
You’re not in Kansas anymore You’ve been a good sport learning about markup and structure and validation and proper syntax and nesting and compliance, but now you get to really start having some fun by styling your pages.
But no worries, all those XHTML pushups you’ve been doing aren’t going to waste.
In fact, you’re going to see that a solid understanding of  XHTML is crucial to learning (and using) CSS.
And, learning CSS is just what we’re going to do over the next several chapters.
Just to tease you a bit, on these two pages we’ve sprinkled a few of  the designs you’re going to work with in the rest of  the book.
Quite a difference from the pages you’ve been creating so far, isn’t it? So, what do you need to do to create them? Learn the language of  CSS of  course.
Remember the Wizard of Oz? Well, this is the part of the book where things go from black & white to color.
Not up on the latest reality TV? No problem, here’s a recap: take two neighbors, two homes, and $1,000
Of  course, in the Webville edition of  the show, everyone talks about design in CSS.
If  you’re having trouble understanding them, here’s a little translation tip: each statement in CSS consists of  a location (like bedroom), a property in that location (like drapes, or carpet), and a style to apply to that property (like the color blue, or 1 inch tiles)
Using CSS with XHTML We’re sure CSS has a bright future in the home design category, but let’s get back to XHTML.
Want to paint the walls of  your <p> elements red?  No problem; only paragraphs don’t have walls, so you’re going to have to settle for the paragraph’s background-color property instead.
The first thing you do is select the element you want to style, in this case the <p> element.
Notice in CSS, you don’t put <> around the name.
Then you specify the property you want to style, in this case the <p> element’s background color.
There’s a colon in between the property and its value.
Like XHTML, you can format your CSS pretty much as you like.
For longer rules you’ll usually want to add some linebreaks and indenting to make the CSS more readable (for you)
Wanna add more style? You can add as many properties and values as you like in each CSS rule.
Say you wanted to put a border around your paragraphs, too.
All you have to do is add another property and value.
If you change the background color of the paragraph, do you think you also have to change the background of the <em> element so it matches the background color of the paragraph?
Q: Does every <p> element have the same style? Or can I, say, make two paragraphs different colors?
A: The CSS rules we’ve used so far define the style for all paragraphs, but CSS is very expressive: it can be used to specify styles in lots of different ways, for lots of different elements – even subsets of elements.
You’ll see how to make paragraphs two different colors later in this chapter.
Q: How do I know what properties I can set on an element?
A: Well, there are lots of properties that can be set on elements, certainly more than you’d want to memorize, in any case.
You’re going to get quite familiar with the more common properties in the next few chapters.
You’ll probably also want to find a good CSS reference.
There are plenty of references online, and O’Reilly’s CSS Pocket Reference is a great little book.
Q: Remind me why I’m defining all this style in a separate language, rather than in XHTML.
Since the elements are written in XHTML, wouldn’t it be easier just to write style in XHTML, too?
A: You’re going to start to see some big advantages to using CSS in the next few chapters.
But, here’s a quick answer: CSS really is better suited for specifying style information than XHTML.
Using just a small bit of CSS, you can create fairly large effects on the style of your XHTML.
You’re also going to see that CSS is a much better way to handle styles for multiple pages.
Getting CSS into your XHTML Okay, you know a little about CSS syntax now.
You know how to select an element and then write a rule with properties and values inside it.
But you still need to get this CSS into some XHTML.
In the next few chapters, we’re going to revisit our old friends – Starbuzz, and Tony and his Segway journal – and make things a little more stylish.
But, who do you think is dying to have their site styled first? Of  course, the Head First Lounge guys.
Remember, in the last chapter we fixed things up a little and made it strict XHTML (would you have expected any less of  us?)
Now, we’re adding some style tags, the easiest way to get style into your pages.
We’ll come back to this later in the chapter and see another way.
To add CSS style directly to your XHTML, add opening and closing style tags in the <head> element.
And your CSS rules are going to go right in here.
Adding style to the lounge Now that you’ve got the <style> element in your XHTML, you’re going to add some style to the Lounge to get a feel for writing CSS.
This design probably won’t win you any “design awards,” but you gotta start somewhere.
The first thing we’re going to do is change the color (something to match those red lounge couches) of  the text in the paragraphs.
To do that, we’ll use the CSS color property like this:
Here’s the rule that is going to specify the font color of the paragraphs.
The p selector selects all the paragraphs in the XHTML.
We’re selecting just the <p> element to apply this style to.
We’re setting the text to a lovely maroon color that happens to match the lounge couches.
Instead of setting the color, what if you set background-color of the <p> elements to maroon instead?  How would it change the way the browser displays the page?
Go ahead and make all the changes from the last couple of pages to your “lounge.html” file in the “chapter8/lounge” folder, save, and reload the page in your browser.
You’ll see that the paragraph text color has changed to maroon:
Everything else is as it should be: the headings are still black, because all we selected to style were the <p> elements.
How about changing the font a bit?  Let’s change both the type of  font, and also the color of the heading fonts:
Actually, since these rules are exactly the same, we can combine them, like this:
Here’s the rule to select <h1> elements and change the font-family to sans-serif and the font color to gray.
And here’s another rule to do the exact same thing to the <h2> element.
Add this new CSS to your “lounge.html” file and reload.
Both of the headings on the page are now styled with a sans-serif font and colored gray.
Let’s put a line under the welcome message too Let’s touch up the welcome heading a bit more.
How about a line under it? That should set the main heading apart visually and add a nice touch.
This property controls how the border under an element looks.
But now we’re adding a second rule that adds another property just to <h1>: the border-bottom property.
You’ll see that the new rule added a black border to the bottom of  the main heading, which gives us a nice underline on the heading and really makes it stand out.
You’ve seen how to select an element to style it, like this:
Or, how to select more than one element, like this:
You’re going to see that CSS allows you to specify all kinds of  selectors that determine which elements your styles are applied to.
Knowing how to use these selectors is the first step in mastering CSS, and to do that you need to understand the organization of  the XHTML that you’re styling.
After all, how can you select elements for styling if  you don’t have a good mental picture of  what elements are in the XHTML, and how they relate to one another?
So, let’s get that picture of  the Lounge XHTML in your head, and then we’ll dive back into selectors.
The style is applied to the elements described by the selector - in this case, <h1> elements.
Q: So how does that work when you have more than one rule for an element?
A: You can have as many rules as you want for an element.
Each rule adds to the style information of the rule before it.
Q: What’s the advantage of that approach? Isn’t it better to organize each element separately, so you know exactly what styles it has?
If you combine common styles together, then if they change, you only have to change them in one rule.
If you break them up, then there are many rules you have to change, which is error-prone.
Q: Why do we use a bottom border to underline text? Isn’t there an underline style for text?
There is an underline style for text and we could use that instead.
However, the two styles have slightly different effects on the page: if you use border-bottom then the line will extend to the edge of the page.
The property to set text underline is called text-decoration and has a value of “underline” for underlined text.
Markup Magnets Remember drawing the diagram of HTML elements in Chapter 3? You’re going to do that again for the Lounge’s main page.
Below, you’ll find all the element magnets you need to complete the diagram.
Using the Lounge’s XHTML (on the right), complete the tree below.
You’ll find the answer in the back of the chapter.
Let’s take some selectors and see how they map to the tree you just created.
This selector matches any <h1> elements in the page, and there’s only one.
We can only style elements in the body, so we’re not showing the <head> element and everything under it.
If we use a “p” selector, here’s how that looks:
This selector matches all the <p> elements in the tree.
Color in the elements that are selected by these selectors:
The Case of Brute Force versus Style When we last left RadWebDesign in Chapter 4, they had just blown the corporate demo and lost RobotsRUs’ business.
CorrectWebDesign was put in charge of the entire RobotsRUs site and got to work getting everything nailed down before the site launch later in the month.
But, you’ll also remember that RadWebDesign decided to bone up on their XHTML & CSS.
They decided to rework the RobotsRUs site on their own, using strict XHTML and style sheets, just to get some experience.
As fate would have it, just before RobotsRUs’ big site launch, it happened again: RobotsRUs called CorrectWebDesign with an urgent message.
CorrectWebDesign responded that it would take them a few days to rework the site.
Desperate, the CEO decided to call in RadWebDesign for help.
You flubbed up the demo last month, but we really need your help.
How did RadWebDesign go from disgrace to Web page superheroes? What allowed them to change the look and feel of a hundred pages faster than a speeding bullet?
Getting the Lounge style into the elixirs and directions pages It’s great that we’ve added all this style to “lounge.html”, but what about.
If  you did that, then whenever you needed to change the style of  the site, you’d have to change every single file – not what you want.
Take the rules in “lounge.html” and place them in a file called “lounge.css”
Create an external link to this file from your “lounge.html” file.
Creating the “lounge.css” file You’re going to create a file called “lounge.css” to contain the style rules for all your Head First Lounge pages.
To do that, create a new text file named “lounge.css” in your text editor.
Now type, or copy and paste from your “lounge.html” file, the CSS rules into the “lounge.css” file.
Delete the rules from your “lounge.html” file while you’re at it.
Linking from “lounge.html” to the external style sheet Now we need a way to tell the browser that it should style this page with the styles in the external style sheet.
We can do that with an XHTML element called <link>
Here’s how you use the <link> element in your XHTML:
Here’s the XHTML that links to the external style sheet.
You don’t need the <style> element any more - just delete it.
Let’s take a closer look at the <link> element since you haven’t seen it before:
And the style sheet is located at this href (in this case we’re using a relative link, but it could be a full-blown URL)
The rel attribute specifies the relationship between the XHTML file and the thing you’re linking to.
We’re linking to a style sheet, so we use the value “stylesheet”
So, all you need to do is add the following <link> element to both files:
You should see no changes in its style, even though the styles are now coming from an external file.
Wow!  We have a whole new style for the Elixirs and Directions pages with only a one line change to the HTML in each file!  Now you can really see the power of  CSS.
The Case of Brute Force versus Style So, how did RadWebDesign become Web page superheroes? Or, maybe we should first ask how the “do no wrong” CorrectWebDesign firm flubbed things up this time? The root of the problem was that CorrectWebDesign was creating the RobotsRUs pages using circa 1998 techniques.
Compare that with what RadWebDesign did: they used strict XHTML 1.0, so they had no old presentation HTML in their pages, and they used an external style sheet.
The result? To change the style of the entire site, all they had to do was go into their external style sheet and make a few changes to the CSS, which they easily did in minutes, not days.
They even had time to try out multiple designs and have three different versions of the CSS ready for review before the site launch.
Amazed, the RobotsRUs CEO not only promised RadWebDesign more business, but he also promised them the first robot that comes off the assembly line.
Now that you’ve got one external style file (or “style sheet”), use it to change all the paragraph fonts to “sans-serif” to match the headings.
Remember, the property to change the font style is “font-family”, and the value for sans-serif font is “sans-serif”
The headings use sans-serif fonts, which don’t have “serifs” and have a very clean look.
The paragraphs still use the default serif fonts, which have “serifs”, and are often considered more difficult to read on a computer screen.
Just add a font-family property to your paragraph rule in the “lounge.css” file.
Did you notice when you added the font-family property to your “p” selector that it also affected the font family of  the elements inside the <p> element? Let’s take a closer look:
When you added the font-family property to your CSS p selector, i.
Just like you can inherit your blue eyes or brown hair from your parents, elements can inherit styles from their parents.
It makes sense that changing your paragraph style would change the style of  the elements in the paragraph, doesn’t it?  After all, if  it didn’t, you’d have to go in and add CSS rules for every inline element in every paragraph in your whole site...
Let’s take a look at our XHTML tree to see how inheritance works:
If we set the font-family of all the <p> elements, here are all the elements that would be affected.
The <img> element is a child of a paragraph, but it doesn’t have any text, so it’s not affected.
What if we move the font up the family tree?
Simply by changing the fontfamily property in the body rule, we could change the font for an entire site.
First, add a new rule that selects the <body> element.
Then add the font-family property with a value of sans-serif.
Now all these elements are going to inherit the font-family.
Open your “lounge.css” file and add a new rule that selects the <body> element.
Then remove the font-family properties from the headings and paragraph rules, because you’re not going to need them anymore.
Test drive your new CSS As usual, go ahead and make these changes in the “lounge.css” style sheet, save, and reload the “lounge.html” page.
You shouldn’t expect any changes, because the style is the same.
But you should feel better about your CSS because now you can add new elements to your pages and they’ll automatically inherit the sans-serif  font.
Okay, so now that the whole site is set to sans-serif with.
This doesn’t look any different at all, but that is exactly what we were expecting, isn’t it? All you’ve done is move the sans-serif font up into the body rule and let all the other elements inherit that.
Overriding inheritance By moving the font-family property up into the body, you’ve set that font style for the entire page.
But what if  you don’t want the sans-serif font on every element?  For instance, you could decide that you want <em> elements to use the serif  font instead.
But you’ve decided you want your <em> elements to have the serif font-family instead.
You need to override the inheritance with a CSS rule.
Well, then you can override the inheritance by supplying a specific rule just for <em>
Here’s how you add a rule for <em> to override the font-family specified in the body:
Test drive Add a rule for the <em> element to your CSS with a font-family property value of  serif, and reload your “lounge.html” page:
Notice that the “Dance Dance Revolution” text, which is the text in the <em> element, is now a serif font.
As a general rule, it’s not a good idea to change fonts in the middle of a paragraph like this, so go ahead and change your CSS back to the way it was (without the em rule) when you’re done testing.
Q: How does the browser know which rule to apply to <em> when I’m overriding the inherited value?
A: With CSS, the most specific rule is always used.
We’ll talk more later about how you know which rules are most specific.
Q: How do I know which CSS properties are inherited and which are not?
A: This is where a good reference really comes in handy, like O’Reilly’s CSS Pocket Reference.
Other properties, such as border, are not inherited, which makes sense, right?  Just because you want a border on your <body> element doesn’t mean you want it on all your elements.
A lot of the time you can follow your common sense (or just try it and see), and you’ll get the hang of it as you become more familiar with the various properties and what they do.
Q: Can I always override a property that is being inherited when I don’t want it?
You can always use a more specific selector to override a property from a parent.
Is there any way I can add comments to remind myself what the rules do?
You can also put comments around CSS and browsers will ignore it, like: /* this rule will have no effect.
I was thinking it would be cool to have the text below each elixir match the color of.
Can you style each of  these paragraphs separately so that the color of  the text matches the drink? The problem is that using a rule with a “p” selector applies the style to all <p> elements.
Using both XHTML and CSS, we can define a class of  elements, and then apply styles to any element that belongs to that class.
So, what exactly is a class? Think of  it like a club – someone starts a “greentea” club, and by joining you agree to all the rights and responsibilities of  the club, like adhering to their style standards.
Anyway, let’s just create the class and you’ll see how it works.
We’re not sure we agree with the aesthetics of that suggestion, but, hey, you’re the customer.
Adding a class to “elixir.html” Open up the “elixir.html” file and locate the  “Green Tea Cooler” paragraph.
This is the text we want to change to green.
All you’re going to do is add the <p> element to a class called greentea.
To add an element to a class, just add the attribute “class” along with the name of the class, like “greentea”
And, now that the green tea paragraph belongs to the greentea class, you just need to provide some rules to style that class of  elements.
To select a class, you write the selector like this:
So now you have a way of  selecting  <p> elements that belong to a certain class.
All you need to do is add the class attribute to any <p> elements you want to be green, and this rule will be applied.
Give it a try: open your “lounge.css” file and add the p.greentea class selector to it.
Your turn: add two classes, “raspberry” and “blueberry”, to the correct paragraphs in “elixir.html”, and then write the styles to color the text blue and purple, respectively.
The property value for raspberry is “blue” and for blueberry is “purple”
Put these at the bottom of your CSS file, under the greentea rule: raspberry first, and then blueberry.
A greentea test drive Save, and then reload to give your new class a test drive.
Now the font is green and matches the Green Tea Cooler.
Maybe this styling wasn’t such a bad idea after all.
Yeah, we know you’re probably thinking, how can a raspberry be blue?  Well, if Raspberry Kool-aid is blue, that’s good enough for us.
And seriously, when you blend up a bunch of blueberries, they really are more purple than blue.
You’ve already written one rule that uses the greentea class to change any paragraph in the class to the color “green”:
But what if  you wanted to do the same to all <blockquote>s? Then you could do this:
Just add another selector to handle <blockquote>s that are in the greentea class.
If  you want all elements that are in the greentea class to have a style, then you can just write your rule like this:
If you leave out all the element names, and just use a period followed by a class name, then the rule will apply to all members of the class.
So, can an element be in more than one class?
It’s easy to put an element into more than one class.
Say you want to specify a <p> element that is in the greentea, raspberry, and blueberry classes.
Here’s how you would do that in the opening tag:
Place each class name into the value of the class attribute, with a space in between each.
Now you may be wondering what happens when an element belongs to multiple classes, all of  which define the same property – like our <p> element up there.
How do you know which style gets applied? You know each of  these classes has a definition for the color property.
So, will the paragraph be green, blue (raspberry), or purple?
We’re going to talk about this in great detail after you’ve learned a bit more CSS, but on the next page you’ll find a quick guide to hold you over.
So, for example, I could put an <h1> into my “products”
Use multiple classes when you want an element to have styles you’ve defined in different classes.
In this case, all your <h1> elements associated with products have a certain style, but not all your products are on sale at the same time.
The world’s smallest & fastest guide to how styles are applied Elements and document trees and style rules and classes...
How does all this stuff  come together so that you know which styles are being applied to which elements? As we said, to fully answer that you’re going to have to know a little more about CSS, and you’ll be learning that in the next few chapters.
But before you get there, let’s just walk through some common sense rules-of-thumb about how styles are applied.
First, do any selectors select your element? Let’s say you want to know the font-family property value for an element.
The first thing to check is: is there a selector in your CSS file that selects your element? If  there is, and it has a font-family property and value, then that’s the value for your element.
What about inheritance? If  there are no selectors that match your element, then you rely on inheritance.
So, look at the element’s parents, and parents’ parents, and so on, until you find the property defined.
Struck out again?  Then use the default If  your element doesn’t inherit the value from any of  its ancestors, then you use the default value defined by the browser.
In reality, this is a little more complicated than we’re describing here, but we’ll get to some of  those details later in the book.
What if multiple selectors select an element? Ah, this is the case we have with the paragraph that belongs to all three classes:
There are multiple selectors that match this element and define the same color property.
Which rule breaks the tie? Well, if  one rule is more specific than the others, then it wins.
But what does more specific mean? We’ll come back in a later chapter and see exactly how to determine how specific a selector is, but for now, let’s look at some rules and get a feel for it:
And this rule selects only paragraphs that are in the greentea class, so that’s even more specific.
These rules also select only paragraphs in a particular class.
So they are about the same in specificity as the p.greentea rule.
And if we still don’t have a clear winner? So, if  you had an element that belonged only to the greentea class there would be an obvious winner: the p.greentea selector is the most specific, so the text would be green.
But you have an element that belongs to all three classes: greentea, raspberry, and blueberry.
So, p.greentea, p.raspberry, and p.blueberry all select the element, and are of equal specificity.
What do you do now? You choose the one that is listed last in the CSS file.
If  you can’t resolve a conflict because two selectors are equally specific, you use the ordering of  the rules in your style sheet file.
That is, you use the rule listed last in the CSS file (nearest the bottom)
And in this case, that would be the p.blueberry rule.
Next, open your CSS file and move the p.greentea rule to the bottom of the file.
Finally, move the p.raspberry rule to the bottom of the file.
After you’ve finished, rewrite the green tea element to look like it did originally:
Did you see that? I’m like Houdini! I broke right out of  your <style> element and into my own file.
And you said in Chapter 1 that I’d never escape.
Have to link me in? Come on; you know your pages wouldn’t cut it without my styling.
If  you were paying attention in this chapter, you would have seen I’m downright powerful in what I can do.
Don’t get all excited; I still have to link you in for you to be at all useful.
Okay, okay, I admit it; using CSS sure makes my job easier.
All those old deprecated styling elements were a pain in my side.
I do like the fact that my elements can be styled without inserting a bunch of  stuff  in the XHTML, other than maybe an occasional class attribute.
But I still haven’t forgotten how you mocked my syntax...
You have to admit XHTML is kinda clunky, but that’s what you get when you’re related to an early ’90s technology.
I can select just the elements I want, and then describe exactly how I want them styled.
And you’ve only just begun to see all the cool styling I can do.
I can style fonts and text in all kinds of  interesting ways.
I can even control how each element manages the space around it on the page.
And you thought you had me controlled between your <style> tags.
You’re going to see I can make your elements sit, bark, and rollover if  I want to.
And you think CSS is elegant? I mean, you’re just a bunch of rules.
After all, my elements want to have some control over their own lives.
Who gets the inheritance? Sniff, sniff; the <body> element has gone to that great browser in the sky.
But he left behind a lot of descendants and a big inheritance of color “green”
Mark all the descendants that inherit the <body> element’s color green.
Use this to determine which of the above elements hit the jackpot and get the green (color)
Below, you’ll find the CSS file “style.css”, with some errors in it.
Your job is to play like you’re the browser and locate all the errors.
After you’ve done the exercise look at the end of the chapter to see if you caught all the errors.
If you have errors in your CSS, usually what happens is all the rules below the error are ignored.
So, get in the habit of looking for errors now, by doing this exercise.
Those W3C boys and girls aren’t just sitting around on their butts, they’ve been working hard.
Type that URL in your browser and we think you’ll feel quite at home when you get there.
You’re going to find a validator that works almost exactly like the HTML and XHTML validators.
To use the CSS version, just point the validator to your CSS URL, upload a file with your CSS in it, or just paste it into the form and submit.
You shouldn’t encounter any big surprises, like needing DOCTYPEs or character encodings with CSS.
Go ahead, give it a try (like we’re not going to make you do it on the next page, anyway)
Making sure the Lounge CSS validates Before you wrap up this chapter, wouldn’t you feel a lot better if  all that Head First Lounge CSS validated? Sure you would.
Use whichever method you want to get your CSS to the W3C.
If  you have your CSS on a server, type your URL into the form; otherwise, either upload your CSS file or just copy and paste the CSS into the form.
If  you upload, make sure you’re directing the form to your CSS file, not your XHTML file.
This is just telling you that the CSS needs correct XHTML to style, so make sure your XHTML (or HTML) also validates.
And here’s all the valid CSS, which is ALL your CSS, so this means your CSS validates.
If your CSS didn’t validate, check it with the CSS a few pages back and find any small mistakes you’ve made, then resubmit.
Q: Do I need to worry about those warnings? Or do what they say?
A: It’s good to look them over, but you’ll find some are more in the category of suggestions than “must do’s”
The validator can err on the side of being a little anal, so just keep that in mind.
You’ll see quite a few of these in the rest of this book, but have a.
Use this property to put an image behind an element..
This property sets the space between lines in a text element.
You can have a solid border, a ridged border, a dotted border...
If you need space between the edge of an element and its content, use margin.
This property lets you change how list items look in a list.
Use color to set the font color of text elements.
Use this property to align your text to the left, center, or right.
The <link> element is used to include an  n external style sheet.
You can always override properties that are  n inherited by creating a more specific rule for the element you’d like to change.
Use the  n class attribute to add elements to a class.
Use a “.” between the element name and the  n class name to select a specific element in that class.
Use  n “.classname” to select any elements that belong to the class.
An element can belong to more than one class  n by placing multiple class names in the class attribute with spaces between the names.
It looks like you’re getting the hang of this style stuff.
We’re looking forward to seeing what you come up with in.
XHTMLcross Here are some clues with mental twist and turns that will help you burn alternative routes to CSS right into your brain!
Markup Magnets Solution Remember drawing the diagram of XHTML elements in Chapter 3?  You did that again for the Lounge’s main page.
Your turn: add two classes, “raspberry” and “blueberry” to the correct paragraphs in “elixir.html” and then write the styles to color the text blue and purple respectively.
The property value for raspberry is “blue” and for blueberry is “purple”
There are no CSS rules for blockquote, so blockquote also inherits its color from body.
But, since p overrides the color to black, the blockquote color won’t matter.
This one em is fortunate to be a child of h2, who inherits the body color.
Since there’s no em rule overriding the color with its own property, this em inherits body’s color.
Unfortunately for these em elements, they are children of parents who override the body color, the p element.
Below, you’ll find a CSS file with some errors in it.
Your job is to play like you’re the browser and.
No XHTML in your CSS!  The <style> tags are XHTML and don’t work in a CSS style sheet.
Using the XHTML tag instead of just the element name.
Next open your CSS file and move the p.greentea rule to the bottom of the file.
Finally, move the p.raspberry rule to the bottom of the file.
After you’ve finished, rewrite the green tea element to look like it did originally:
It’s purple because the blueberry rule is last in the CSS file.
It’s still purple because the ordering of the names in the class attribute doesn’t matter.
Now, it’s green, because the greentea rule comes last in the CSS file.
Now, it’s blue, because the raspberry rule comes last in the CSS file.
Okay, now the <p> element only belongs to one class, so we use the most specific rule, which is p.greentea.
You already have the basics of CSS down and you know how to create CSS rules to select and specify.
Now it’s time to build your vocabulary, and that means picking up.
A lot of  the CSS properties are dedicated to helping you style your text.
Using CSS, you can control typeface, style, color, and even the decorations that are put on your text, and we’re going to cover all these in this chapter.
We’ll start by exploring the actual fonts that are used to display your pages.
You’ve already seen the font-family property and in this chapter you’re going to learn a lot more about specifying fonts.
Before we dive in, let’s get the 30,000 foot view of  some properties you can use to specify and change the look of  your fonts.
After that, we’ll take the fonts one by one and learn the ins and outs of  using each.
Customize the fonts in your pages with the font-family property.
Fonts can have a dramatic effect on your page designs.
In CSS, fonts are divided into “font families” from which you can specify the fonts you’d like used in each element of  your page.
Only certain fonts are commonly installed on most computers, so you need to be careful in your font choices.
In this chapter we’ll take you through everything you need to know to specify and make the best use of  fonts.
Control the size of your fonts with the font-size property.
Font size also has a big impact on the design and the readability of  your Web pages.
There are several ways to specify font sizes with CSS, and in this chapter we’ll cover each one, but we’ll also teach you how to specify your fonts in a way that allows your users to increase the font size without affecting your designs.
You can change your text color with the color property.
To do that, it helps to know a little about Web colors, and we’ll take you through all the ins and outs of  color, including the mysterious color “hex codes.”
Affect the weight of your fonts with the font-weight property.
Why settle for boring, average fonts when you can give them some extra weight when needed? Or, are your fonts looking too heavy? Slim them down to a normal weight.
Add even more style to your text with the text-decoration property.
Using the text-decoration property you can decorate your text with decorations including overlines, underlines, and line-throughs.
And if  you didn’t get enough of  blinking text on the Web in the 1990s, the designers of  CSS have even included a blink value for text-decoration (although thankfully they don’t require browsers to implement it)
What is a font family anyway? You’ve already come across the font-family property, and so far you’ve always specified a value of  “sans-serif ”
You can get a lot more creative than that with the font-family property, but it helps to know what a font family is first.
These fonts are usually considered more readable on computer screens than serif fonts.
A lot of people associate the look of these fonts with newspaper print.
Each font-family contains a set of fonts that share common characteristics.
There are  five font families: sans-serif, serif, monospace, cursive, and fantasy.
Each family includes a large set of fonts, so on this page you’ll see only a few examples of each.
Serifs are the decorative barbs and hooks on the ends of the letters.
In fact, the set of available fonts will vary depending on the operating system as well as what fonts and applications a user has installed.
So keep in mind that the fonts on your machine may differ from what is available to your users.
The Monospace family is made up of fonts that have constant width characters.
For instance, the horizontal space an “i” takes up will be the same width that an “m” takes up.
These fonts are primarily used to show software code examples.
These fonts are usually not widely available and are rarely used for serious Web designs.
Take a good look at the font families: serif fonts have an elegant, traditional look, while sans-serif fonts have a very clean and readable look.
Monospace fonts feel like they were typed on a typewriter.
Cursive and Fantasy fonts have a playful or stylized feel.
Font Magnets Your job is to help the fictional fonts below find their way home to their own font family.
Move each fridge magnet on the left into the correct font family on the right.
Review the font family descriptions on the previous pages if you need to.
Okay, so there are a lot of  good fonts out there from several font families.
How do you get them in your pages? Well, you’ve already had a peek at the font-family property in the last chapter, when you specified a font-family of  “sans-serif ” for the lounge.
Check to see if the font Verdana is available on the computer and if so, use it as the font for this element (in this case, the <body> element)
You can specify more than one font using the font-family property.
Write font names as they are spelled, including upperand lower-case letters.
How font-family specifications work Here’s how the browser interprets the fonts listed in your font-family specification:
If Verdana isn’t available, then look for the font Geneva, and if it is available, use it for the body.
Finally, if none of the specific fonts can be found, just use whatever the browser considers its default “sans-serif” font.
You don’t have to specify four alternative fonts; you can have two, three, etc.
In the last chapter we only used one - the default sans-serif font - although we don’t recommend that because it doesn’t give you much control over the fonts you’d like used.
The font-family property gives you a way to create a list of  preferred fonts.
Hopefully most browsers will have one of  your first choices, but if  not, you can at least be assured that the browser will provide a generic font from the same family.
If Geneva isn’t available, then look for the font Arial, and if it is available, use it for the body.
Usually your font-family specification contains a list of alternative fonts, all from the same family.
Dusting off Tony’s Journal Now that you know how to specify fonts, let’s take another look at Tony’s Segway’n USA page and give it a different look.
We’ll be making some small, incremental changes to the text styles in Tony’s page and while no single change is going to look dramatically different, by the end of  the chapter we think you’ll agree the site has a slick new look.
Let’s get an idea of  where we might make some improvements and then let’s give Tony a new font-family.
Remember that we haven’t applied any styles to Tony’s site, so his site is using a serif font-family for the entire page.
It would be nice to improve its look a bit by adding some font-style.
The default size of the heading fonts is also pretty large and doesn’t make for an attractive page.
Except for the photos, this page is rather monochromatic, so we’ll also add some font color to make it a little more interesting.
And if all else fails, we have the default sans-serif.
Remember, the elements in the <body> will inherit these fonts.
After you’ve made this change, save the file, fire up your browser and load the page.
Now you need to link Tony’s journal to the new style sheet file.
To do that, open the file “journal.html” in the “chapter9/journal” folder.
All you need to add is the <link> element to link in the style in “journal.css”, like we did below.
The font definitely gives Tony’s Web page a new look.
The headings now have a cleaner look without the serifs on the letters, although they still look a tad large on the page.
Open the page with the new CSS in the browser and you should see we’ve now got a nice set of  sans-serif  fonts.
Because font-family is an inherited property, all elements on the page are now using a sans-serif font, even the list elements...
And if the serif fonts were more your cup of tea, don’t let us stop you.
You can always redo the font-family declaration to use serif fonts.
Q: How do I specify a font with multiple words in the name, like Courier New?
A: Just put double quotes around the name in your fontfamily declaration, like this: font-family: “Courier New”, Courier;
Q: So the font-family property is really a set of alternative fonts?
The first is the font you’d like used, followed by a good substitute, followed by more substitutes, and so on.
For the last font, you should specify the catch-all generic “sans-serif” or “serif”, which should be in the same family as all the fonts in your list.
A: “serif” and “sans-serif” are not the names of actual fonts.
However, your browser will substitute a real font in place of “serif” or “sans-serif” if the other fonts before it in the font-family declaration can’t be found.
The font used in its place will be whatever the browser has defined as the default font in that family.
Q: How do I know which to use? Serif or sans-serif?
However, on a computer display, many people consider sans-serif the best for body text.
You’ll find plenty of designs that use serif for body text, or mix serif fonts with sans-serif fonts.
So, it really is up to you and what kind of look you want your page to have.
The unfortunate thing about fonts is that you can’t control what fonts are on your users’ computers.
The best you can do is to create a list of  fonts that are most appropriate for your pages and then hope the user has one of  those fonts installed.
If  they don’t, well, at least we can count on the browser to supply a generic font in the same font family.
At least, that’s the basic strategy for ensuring your page is displayed using appropriate fonts.
But it turns out, given the differences in fonts between operating systems (especially Windows versus Mac), you do have to take this a little further to really do your job well.
What you need to do is ensure that your font-family declaration includes fonts that are likely to occur on both Windows and the Mac (as well as any other platforms your users might be using, like Linux or perhaps mobile devices)
Here’s a quick guide to some of  the common fonts on each operating system, but we encourage you to explore this area more if  you need to closely control the fonts on your pages.
These fonts are likely to be available on both Windows and Macintosh computers.
These fonts are most likely to be found on Macintosh computers.
If it’s not, Geneva would be nice, but this will probably only happen on Macs.
That’s okay, because we can probably count on Arial to be on either Windows or Macs, but if it’s not...
Then that’s still okay, we’ll just let the browser choose a sansserif font for us.
Let’s take a look at our definition for Tony’s pages again...
When you specify font size in pixels, you’re telling the browser how many pixels tall the letters should be.
In CSS you specify pixels with a number followed by “px”
This says that the font-size should be 14 pixels high.
The px must come right after the number of pixels.
Adjusting font sizes Now that Tony has a new set of  fonts, we need to work on those font sizes, as most people find the default sizes of  the headings a bit large, at least aesthetically.
To do that, you need to know how to specify font sizes, and there are actually a few ways to do this.
Let’s take a look at some ways to specify font-size and then we’ll talk about how best to specify font size so they are consistent and user friendly.
Unlike pixels, which tell the font exactly how big it should be in pixels, a font size specified as a percentage tells the font how big it should be relative to another font size.
But, which other font size?  Well, since font-size is a property that is inherited from the parent element, when you specify a % font size, it is relative to the parent element.
If you do things right, any user will be able to increase the font sizes on your Web page for readability.
Here we’ve specified a body font size in pixels, and a level one heading as 150%
You can also specify font sizes using “em”, which, like percentage, is another relative unit of  measure.
With em you don’t specify a percentage; instead you specify a scaling factor.
This says that the font size should be scaled by 1.2
Say you use this measurement to specify the size of  an <h2> heading.
You can specify a font size as xx-small, x-small, small, medium, large, x-large, or xx-large and the browser will translate these keywords into pixel values using defaults that are defined in the browser.
This is typically how the various keyword sizes relate to one another.
Keep in mind, however, that the keywords aren’t always defined the same way in every browser, and that users can redefine them if they want.
So, how should I specify my font sizes? You’ve got quite a few choices for specifying font sizes: px, em, percentages, and keywords.
So, which do you use?  Here’s a recipe for specifying font sizes that will give you consistent results for most browsers.
In most browsers this will result in the body text being about 12 pixels.
Choose a keyword (we recommend small or medium) and specify it as the font size in your body rule.
Specify the font sizes of your other elements relative to your body font size using either em or percentages (the choice between em and percentages is yours, as they are essentially two ways to do the same thing)
Now, let’s say you decide to make your font size bigger, OR the user makes the font size bigger using the browser.
All your other elements automatically get bigger too, without you having to do a thing.
That gives you a document tree that looks like this:
Now, let’s say you want to increase the size of  the fonts on the page, or perhaps the user does.
Then, you set all the other font sizes relative to that size, like this:
Now the body font size has changed to large, and everything else has changed too, in relation to the body font size.
That’s great, because you didn’t have to go through and change all your other font sizes; all you had to do was change the body font size.
And if  you’re a user, everything happened behind the scenes.
When you increased the text size, all the text got bigger because all the elements are sized relative to one another, so the page still looks good at a larger font size.
Unfortunately, Internet Explorer users cannot resize fonts if your font sizes are specified using pixels.
So, that’s one reason to stay away from pixel sizes.
If you use pixels, you’ll be reducing the accessibility of your pages for many of your users.
Fortunately, if you follow the recipe of supplying a keyword to define your body’s font size, and use relative sizes for your other elements using em or %, then IE will properly scale your fonts if the browser is asked to make the text bigger or smaller.
Let’s make these changes to the font sizes in Tony’s Web page.
It’s time to try these font sizes in Tony’s Web page.
Add the new properties to the “journal.css” file in the “chapter9/journal” folder.
Once you’ve made the changes, reload the page in the browser and check out the differences in the font size.
If  you don’t see a difference, check your CSS carefully for errors.
And we’ll set the other fonts relative to the body font size.
Following our recipe, we’re using a font-size of small for the <body> element.
The default body text font size is usually 16px, although it does depend on the browser.
But it’s still easily readable at the “small” size, which is probably about 12px.
The design is starting to look a little less clunky!
It doesn’t overwhelm the body text and the page in size.
Q: So, by defining a font size in the <body> element, I’m somehow defining a default size for the page? How does that work?
By setting a font size in your <body> element, you can then define the other font sizes of your elements in relation to their parent.
What’s so great about that? Well, if you need to change the font size, then all you need to do is change the body font size, and everything else will change in proportion.
Q: Do we really need to worry about users resizing their browser fonts? I never do that.
Almost all browsers allow their user to make the text of a page bigger or smaller, and many users take advantage of this feature.
If you define your fonts in a relative manner, then your users will have no trouble doing this.
Just be careful not to use pixel sizes, because some browsers have problems resizing those.
Q: I like the idea of using pixels because then my page will look exactly like I specify it.
A: There is some truth to that – by using pixels for every element’s font size, you are choosing the precise font size you want for each element.
But you do that at the cost of giving some of your users (the ones using certain versions of Internet Explorer) the flexibility to pick a font size that is appropriate for their display and eyesight.
You also are creating pages that are a little harder to maintain because if you suddenly want to increase the font sizes of all the elements in a page, you have a lot of changes to make.
Q: What’s the difference between em and %? They seem like the same thing.
A: They are basically two different ways to achieve the same thing.
Both give you a way to specify a size relative to the parent font size.
A lot of people find percent easier to think about than em, and also easier to read in your CSS.
Q: If I don’t specify any font sizes, do I just get the default font sizes?
A: Yes, and what those sizes are depends on your browser, and even the version of the browser you are running.
But in most cases the default body font size will be 16 pixels.
Q: And what are the default sizes for the headings?
If you’d like a font size slightly different than the keywords provide, go ahead and use % or em.
Q: There seems to be so many differences between browsers: fontfamily, font-size, various default settings, and so on.
How will I ever know if my design looks good on other browsers?
The easy answer is that if you follow the guidelines in this chapter then most of your designs are going to look just fine in other browsers.
However, you should know that they may look slightly different in different browsers – the fonts may be slightly bigger or smaller, spacing here and there may be different, etc.
But, all the differences should be very minor and should not affect the readability of your pages.
However, if you really care about having your pages looking almost identical in many browsers, then you really need to test them in lots of browsers.
And, to really take this to the extreme, you’ll find a variety of CSS “hacks” to try to make different browsers behave the same.
If you want to take it this far, there’s nothing wrong with that, but just keep in mind a lot of these activities take time and have diminishing returns.
Changing a font’s weight The font-weight property allows you to control how bold the text looks.
As you know, bold text looks darker than normal text and tends to be a bit fatter too.
You can make any element use bold text by setting the font-weight property to bold, like this:
If  you have an element that is set to bold by default, or is inheriting bold from a parent, then you can remove the bold style like this:
Write the CSS to change the headings in Tony’s page from their default bold value to normal weight.
Then, add the rule to your CSS and give it a test drive.
You’ll find the answer to this one on the next page.
There are also two relative font-weight properties: bolder and lighter.
These will make your text style a little bolder or a little lighter relative to its inherited value.
These values are seldom used and because not many fonts allow for slight differences in the amount of  boldness, in practice these two values often have no effect.
Here we’re changing the font-weight of both headings to normal in the same CSS rule.
It’s a good idea to combine common properties into one rule like this to avoid duplication.
Adding style to your fonts You’re familiar with italic text, right?  Italic text is slanted, and sometimes has extra curly serifs.
You can add an italic style to your text in CSS using the font-style property:
However, not all fonts support the italic style, so what you get instead is called oblique text.
Oblique text is also slanted text, but rather than using a specially designed slanted set of characters in the font, the browser just applies a slant to the normal letters.
The regular letters are slanted to the right in the oblique style.
You can use the font-style property to get oblique text too, like this:
In practice, you’re going to find that, depending on your choice of  font and browser, sometimes the two styles will look identical, and sometimes they won’t.
So, unless italic versus oblique is very important to you, choose one and move on.
If, on the other hand, it is important, you’ll need to test your font and browser combination for the best effect.
Italic and oblique styles are two styles that give fonts a slanted appearance.
Unless you can control the fonts and browsers your visitors are using, you’ll find that sometimes you get italic, and sometimes oblique, no matter which style you specify.
So just go with italic and don’t worry about the differences (you probably can’t control them anyway)
Styling Tony’s quotes with a little italic Now we’re going to use the font-style property to add a little pizazz to Tony’s quotes.
Remember the Burma Shave slogan in the <blockquote> element? We’re going to change the slogan to italic style to set it off  from the rest of  the text.
To do that we just need to style the <blockquote> with a font-style of  italic, like this:
Add this new CSS rule to the CSS in your “journal.css” file, save it, and give the page a test drive.
You should see the Burma Shave slogan change to italic; here’s our test drive.
Here’s the new style on the Burma Shave slogan in Tony’s page.
A: Remember, by default most elements get their font styles from their parents, and the parent of this paragraph is the <blockquote> element.
So the paragraph within the <blockquote> inherits the italic style.
Hey, how about a little color in those fonts? Say, ummm...
You’d think we could just tell you there was a color property and send you on your way to use it.
But, unlike font sizes or weights or text styles, you’ve got to understand a fair bit about color to be able to work with it and specify it in CSS.
So, over the next few pages, you’re going to dive into color and learn everything you need to know to use it on your pages: how colors on the screen work, the various ways of  describing color in CSS, what those mysterious hex codes are all about, whether you should be worried about.
You’re starting to see that there are lots of  places you can add color to your pages: background colors, border colors, and soon, font colors as well.
But, how do colors on a computer actually work?  Let’s take a look.
Web colors are specified in terms of how much red, green, and blue make up the color.
Notice that on a computer screen, mixing together colors results in a lighter color.
But, if you add, say, only 60% of each component (red, green, and blue) then what would you expect? Less white, right? In other words, you get a gray color, because we’re sending equal amount of the three colors, but not as much light to the screen.
If you look at the center you’ll see how they all add up.
On a computer screen, if 0% blue is added, then blue doesn’t add anything to the color.
You’d expect an orange color, right? Well, that’s exactly what you’ll get.
Notice that if a color is contributing zero, then it doesn’t affect the other two colors.
Again, this is because there is no blue light being mixed with red and green.
And what if you mix 0% of red, green, and blue, then what do you get? That means you’re sending no light of any kind to the screen, so you get black.
Why do I need to know all this “color theory”? Can’t I just specify my colors by name? Like “red”, “green”, or “blue”? That’s.
Having seventeen colors in your palette gets old pretty quickly and really limits the expressiveness of  your pages.
We’re going to show you how to specify colors in a way that will allow you to name a lot more than seventeen colors; in fact, you’ll be able to work from a palette of sixteen million colors.
Now, you’ve already seen a few examples of  colors in XHTML, and yes, they do look a little funky, like #fc1257
So, let’s first figure out how to specify colors and then you’ll see how you can easily use color charts or your photo-editing application to pick your colors.
You certainly can use color names all you like, but CSS defines the names of only 17 colors.
How do I specify Web colors? Let me count the ways...
You can specify the name of  a color, specify a color in terms of  its relative percentages in red, green and blue, or you can specify your color using a hex code, which is shorthand for describing the red, green, and blue components of  the color.
While you might think that the Web would have decided on one format by now, all these formats are commonly used, so it’s good to know about them all.
However, hex codes are by far the most common way of  specifying Web colors.
But, remember that all these ways of  specifying color ultimately just tell the browser the amount of  red, green, and blue that goes into a color.
Let’s work through each method of  specifying colors in CSS.
The most straightforward way to describe a color in CSS is just to use its name.
But, as you know, there are only seventeen colors that can be specified this way.
Let’s say you want to specify the color “silver” as the background color of  a body element; here’s how you write that in CSS:
So, to specify a color by name, just type the color name as the value of  the property.
Remember these are just names for predefined amounts of  red, green, and blue.
Color in a book happens by light bouncing off the printed page.
On a computer, the light is emitted by the screen, so these.
You can also specify a color as the amount of  red, green, and blue.
And then specify the percentages for red, green, and blue within parentheses, and with a % sign after each one.
Here’s how you use straight numeric values to specify your color:
To specify numeric values and not percentages, just type in the value and don’t use a “%”
Q: Why are there two different ways to specify rgb values? Don’t percentages seem more straightforward?
This number is related to the number of values that can be held in one byte of information.
So, for historical and technical reasons, 255 is often used as a unit of measurement for specifying red, green, and blue values in a color.
Q: I never see anyone use rgb or actual color names in their CSS.
It seems everyone uses the #00fc9a type of color codes.
A: Using rgb percents or numeric values are becoming more common, but you are right, “hex codes” are still the most.
Here’s the secret to them: each set of  two digits of  a hex code just represents the red, green, and blue component of  the color.
So the first two digits represent the red, the next two the green, and the last two represent the blue.
Then specify the red, green, and blue components, using two digits for each.
Wait a sec, how is “f”  or “c” a digit?
Let’s take a quick look at how hex codes really work and then we’ll show you how to get them from color charts or your photo editing application.
Believe it or not, they are digits, but they’re written using a notation only a computer scientist could love.
But, what does BB, or E1, or FF mean? Let’s disassemble a hex color and see what it actually represents.
In fact, here’s how you can do that for any hex color you might encounter.
Remember that each hex color is made up of  a red, green and blue component.
The first thing you want to do is separate those.
Take your hex color and break it up into its red, green, and blue components.
Let’s start with the hex number for the red component:
Take the right-most number and write down its decimal value.CC.
Now you’ve got the numbers for each component and you know exactly how much red, green, and blue go into the color.
You can disassemble any hex color in exactly the same way.
Putting it all together You’ve now got a few different ways to specify colors.
In CSS we could specify this color in any of  these ways:
The two most common ways to find Web colors are to use a color chart or an application like Photoshop Elements.
You’ll also find a number of  Web pages that allow you to choose Web colors and translate between rgb and hex codes.
Let’s check out Photoshop Elements (most photo-editing applications offer the same functionality)
Most photo-editing applications provide a Color Picker that allows you to visually choose your color by using one or more color spectrums.
Color Pickers also allow you to select only “Web safe” colors.
You’ll also find some useful color charts on the Web.
These charts typically display Web colors that are arranged according to a number of different criteria with their corresponding hex code.
Using these colors is as easy as choosing the colors you want in your page and copying the hex codes into your CSS.
This chart is maintained by the wikipedia at http://en.wikipedia.org/wiki/Web_colors You’ll also find many others by searching for “HTML color charts”
Make sure you use the hex code for your colors, not the decorative name, which isn’t likely to be supported across browsers.
Q: I heard that if I don’t use Web-safe colors, my pages will never look right on other browsers.
A: Back in the early days of Web browsers, few people had computer screens that supported a lot of colors, so the Web-safe palette of colors was created to ensure that pages looked consistent on most displays.
Today the picture has changed drastically and most Web users have computer displays that support millions of colors.
So, unless you have a special set of users that.
Q: I know how to specify colors now, but how do I choose font colors that work well together?
A: It would take an entire book to answer that question properly, but there are some basic guidelines to selecting font colors.
The most important is to use colors with high contrast for the text and the background to aid readability.
For instance, black text on a white background has the highest contrast.
You don’t always have to stick with black and white, but do try to use.
Some colors, when used together, can create strange visual effects (like blue and orange, or red and green), so try your color combinations out on some friends before launching them on the world.
Q: I’ve seen hex codes like #cb0; what does that mean?
A: You’re allowed to use shorthand if each two-digit pair shares the same numbers.
However, if your hex code is something like #ccbb10, then you can’t abbreviate it.
Evel’s master plans have been locked away inside his personal safe and you’ve just received a tip that he encodes the combination in hex code.
In fact, so he won’t forget the combination, he makes the hex code the background color of his home page.
Your job is to crack his hex code and discover the combination to the safe.
To do that, simply convert his Web color into its red, green, and blue decimal values and you’ll have the right-left-right numbers of his combination.
We’re going to make the headings orange, and add an underline too Now that you know all about color, it’s time to add some color to Tony’s Web page.
But, rather than making all his text orange – which would probably be unattractive and hard to read against a white background – we’re going to add a subtle splash of  color in his headings.
The orange is dark enough that there is good contrast between the text and the background, and by color-coordinating with the orange in the photos (Tony’s shirt), we’re creating a color relationship between the headings and the photos that should tie the images and text together.
And just to make sure the headings stand out and create separation between the journal entries, we’ll also add an underline to each heading.
You haven’t seen how to add an underline yet, but let’s do it, and then we’ll look at more about text decorations.
We use the text-decoration property and set it to underline.
What do all these colors have in common?  Try each one in a Web page, say as a font color, or use your photo-editing application’s color picker to determine what colors they are by entering the hex code into the dialog box directly.
This ties in nicely with Tony’s orange theme and shirt.
Let’s quickly look at some other text decorations, then we’ll reconsider these underlines in the Web page.
Everything you ever wanted to know about text-decorations in less than one page.
Text decorations allow you to add decorative effects to your text like underlines, overlines, line-throughs (also known as a strike-through) and, on some browsers, blinking text.
To add a text decoration, just set the text-decoration property on an element, like this:
You can set more than one decoration at a time.
Say you want underline and overline at the same time, then you specify your text decoration like this:
And if  you have text that is inheriting text decoration you don’t want, just use the value “none”:
This rule will cause the <em> element to have a line through the middle of the text.
This rule results in the <em> element having an underline AND overline.
Q: So if I have two different rules for an <em>, and one specifies overline and the other underline, will they be added together so I get both?
You need to combine the two values into one rule to get both text decorations.
Only one rule is chosen for the text-decoration, and decorations in separate rules are not added together.
Only the rule that is chosen for the text-decoration styling will determine the decoration used, so the only way to get two decorations is to specify them both in the same text-decoration declaration.
Q: I’ve been meaning to ask why the color property isn’t called text-color?
A: The color property really controls the foreground color of an element, so it controls the text and the border color, although you can give the border its own color with the border-color property.
Can I use it on text I’m editing to indicate things that need to be deleted?
There is a similar element called <ins> that marks content that should be inserted.
Typically browsers will style these elements with a strike-through and underline respectively.
And with CSS you can style them any way you like.
A: Blink is a holdover from an old Netscape style.
Browsers aren’t required to implement it, and most people consider using blink to be in bad Web taste.
Let’s get rid of  that confusing underline and instead add a nice bottom border like we did in the Lounge.
Definitely more stylish and less confusing than a text decoration underline.
You can almost read this like English: “add a thin, dotted line with the color #888888 on the bottom border”...
In the next chapter we are going to go into borders in detail.
A font-family is a set of fonts that share common characteristics.
The font families for the Web are serif, sans-serif, monospace, cursive, and fantasy.
The fonts that your visitors will see in your Web page depend on the fonts they have installed on their own computers.
It’s a good idea to specify font alternatives in your font-family CSS property in case your users don’t have your preferred font installed.
Always make the last font a generic font like serif or sans-serif, so that the browser can make an appropriate substitution if no other fonts are found.
Font-sizes are usually specified using px, em, %, or keywords.
If you use pixels (“px”) to specify your font size, you are telling the browser how many pixels tall to make your letters.
Using relative sizes for your fonts can make your pages more maintainable.
Use the font size keywords to set the base font size in your body rule, so that all browsers can scale.
You can make your text bold using the font-weight CSS property.
The font-style property is used to create italic or oblique text.
Web colors are created by mixing different amounts of red, green, and blue.
You can specify which color you want using percentages of red, green, and blue, using numerical values of 0-255 for red, green, and blue, or using a color’s hex code.
An easy way to find the hex code of a color you want is to use a photo-editing application’s color picker or one of many online Web tools.
The first two digits represent the amount of red, the second two the amount of green, and the last two the amount of blue.
You can use the text-underline property to create an underline for text.
Underlined text is often confused as linked text by users, so use this property carefully.
XHTMLcross You’ve absorbed a lot in this chapter: fonts, color, weights, and styles.
It’s time to do another crossword and let it all sink in.
Element that can be used to mark text for deletion.
You can specify fonts in terms of pixels, em, or ________
Considered cleaner and easier to read on a computer display.
When you specify fonts in the font-family property, you are specifying ______
Markup Magnets Solutions Your job is to help the fictional fonts below find their way home to their own font family.
Move each fridge magnet on the left into the correct font family on the right.
Evel’s master plans have been locked away inside his personal safe and you’ve just received a tip that he encodes the combination in hex code.
In fact, so he won’t forget the combination, he makes the hex code the background color of his home page.
Your job is to crack his hex code and discover the combination to the safe.
To do that, simply convert his Web color into its red, green, and blue decimal values and you’ll have the right-left-right numbers of his combination.
What do all these colors have in common?  You can try each one in a Web page, or use the color picker to determine what colors they are, by entering the hex code into the dialog box directly.
All colors that use just one digit in their hex codes are grays, from very dark (almost black) to very light (almost white)
Element that can be used to mark text for deletion.
You can specify fonts in terms of pixels, em, or ________
Considered cleaner and easier to read on a computer display.
When you specify fonts in the font-family property, you are specifying ______
To do advanced Web construction you really need to know your building materials.
In this chapter we’re going to take a close look at our building materials: the XHTML elements.
But we don’t stop there – you’ll also see how you can give elements unique identities.
And, if that weren’t enough, you’re going to learn when and why you might want to use.
So, turn the page and start getting intimate with elements.
I think we’d be a little closer if it weren’t for all the padding, margins, and.
The lounge gets an upgrade You’ve come a long way in nine chapters, and so has the Head First Lounge.
In fact, over the next two chapters, we’re giving it a total upgrade with all new content for the main page and restyling it from scratch.
And, just to entice you, we’re going to give you a little sneak peek before we even get started.
Check this out – on this page you’ll find the new unstyled lounge page with all the new content.
On the next page you’ll find the stylized version that we’re going to create by the end of  the next chapter.
There’s a new graphic for the header of the page.
The lounge guys have supplied a lot of new text describing the lounge and what it offers.
They’ve included a set of elixir specials for the week.
And they even let visitors sample some of the music that is played in the lounge each week, a common request of customers.
Finally, they’ve got some legalese in the footer of the page with a copyright.
Now the Lounge design might be a tad on the, well, “ultra-stylish” side for you, but hey, it is a lounge.
And we’re sure that you can see this design is starting to look downright sophisticated – just think what the same techniques could do for your pages.
Well, after this chapter and the next, designs like this are going to be easily within your reach.
We’ve got headings that match the site’s color theme, an aquamarine.
This paragraph has been highly stylized, which helps set it off from the text and gives the page an attractive look.
It also looks like the font is a serif font, which is different from the main text.
And the footer is centered and displayed in a very small font.
The elixirs have been dramatically restyled into an appetizing display of drinks.
The elixirs have also been moved over to the side.
Starting with a few simple upgrades Now you’re all ready to start styling the lounge.
Let’s add a few rules to your CSS just to get some basics out of  the way – like the font family, size, and some color – that will immediately improve the lounge (and give you a good review from the last chapter)
Take a look at the “chapter10/lounge” folder and you’ll find the file “lounge.html”, with all new content.
Open the file in your editor and have a look around.
Everything should look familiar: head, paragraphs, a few images, and a list.
You’re going to spend most of  this chapter adding style to this XHTML, so you need a place for your CSS.
Next, you need to create the new “lounge.css” in the “chapter10/lounge” folder.
This file is going to hold all the new CSS for the new lounge.
Before we start the major construction, let’s get familiar with the new lounge.
Remember, this <link> element tells the browser to look for an external style sheet called “lounge.css”
We’re going to go with a sans-serif fontfamily for the lounge.
We’ve picked a few font alternatives, and ended the declaration with the generic sans-serif font.
A very quick test drive Let’s do a quick test drive just to see how these styles affect the page.
Make sure you’ve made all the changes; then save, and test.
Headings are now sans-serif and a color that matches the logo, creating a theme for the page.
Paragraph text is also sans-serif since every element inherits the <body>’s font-family property.
The <h2> heading is also styled with a new color and sans-serif, but a tad smaller.
This link looks oddly out of place with its default blue color.
One more adjustment We’re going to make one more adjustment to the lounge before we move on to start making some bigger changes.
This adjustment involves a new property you haven’t seen before, but, at this point, you’ve got enough experience under your belt that we’re not going to treat you with kid gloves every time a new property comes along.
Here’s what we’re going to do: we’re going to adjust the line height of  the text on the entire page so that there’s more vertical space between each line.
To do that we add a line-height property in the body rule:
Increasing the line height of your text can improve readability.
It also gives you another way to provide contrast between different parts of your page (you’ll see how that works in a bit)
Checking out the new line height As you might have guessed, the line-height property allows you to specify the amount of  vertical space between each line of  your text.
Like other font-related properties, you can specify the line height in pixels, or using an em or percent value that’s relative to the font size.
Let’s see what the effect of  the line-height property is on the lounge.
Make sure you add the line-height property to your CSS file and then save.
You should see the line height increase when you refresh.
Using the line-height property we’ve increased the space between each line of text from the default to 1.6em.
Which looks the best? The worst? Which is most readable? When you’re done, make sure you change the line-height back to 1.6em.
The line-height property is inherited, so by setting it in the body, all the elements on the page now have a line height of 1.6em.
Getting ready for some major renovations After only a few pages of  this chapter, you already have a ton of text style on the new lounge.
We’re going to move from changing simple properties of  elements, like size, color, and decorations, to really tweaking some fundamental aspects of  how elements are displayed.
This is where you move up to the big leagues.
But to move up to the big leagues, you’ve got to know the box model.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Every box is made up of a content area along with optional padding, border, and margins.From the.
All elements are treated as boxes: paragraphs, headings, block quotes, lists, list items, and so on.
Even inline elements like <em> and links are treated by CSS as boxes.
The content area, which holds the content (text or an image, for instance)
What is the content area? Every element starts with some content, like text or an image, and this content is placed inside a box that is just big enough to contain it.
Notice that the content area has no whitespace between the content and the edge of this box.
Any box can have a layer of padding around the content area.
Padding is optional, so you don’t have to have it, but you can use padding to create visual whitespace between the content and the border of the box.
The padding is transparent and has no color or decoration of its own.
We’ve drawn an edge around the content area just so you know how big it is.
But in a browser there is never a visible edge around the content area.
You’re going to be able to control every aspect of  the box with CSS: the size of  the padding around the content, whether or not the element has a border (as well as what kind and how large), and how much margin there is between your element and other elements.
Let’s check out each part of  the box and its role:
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Using CSS, you’re going to be able to control the width of the padding around the entire content area, or even control the padding on any one side (top, right, bottom, or left)
The border surrounds the padding and, because it takes the form of a line around your content, borders provide visual separation between your content and other elements on the same page.
The margin gives you a way to add space between your element and other elements on the same page.
If two boxes are next to each other, the margins act as the space in between them.
Like padding, margins are transparent and have no color or decoration of their own.
We have a content area, surrounded by optional padding, surrounded by an optional border, surrounded by an optional margin.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Using CSS, you’re going to be able to control the width, color, and style of the border.
Notice that the padding separates the content area from the border.
Using CSS, you’re going to be able to control the width of the entire margin, or of any particular side (top, right, bottom, or left)
What you can do to boxes The box model may look simple with just the content, some padding, a border, and margins.
But when you combine these all together there are endless ways you can determine the layout of  an element with its internal spacing (padding) and the spacing around it (margins)
Take a look at just a few examples of  how you can vary your elements.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
You can style a box to have padding, a border, and a margin.
Or choose from eight different styles of borders, like dashed.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
With CSS you can control padding on any side of the content area.
Here we’ve got a lot of left and right padding.
And here the content is offset to the bottom right with padding on the top and left.
You have the same level of control over the margins.
And like padding, you can specify all sides independently to create margins like this.
You can even control width and height in a variety of ways.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Q: It seems like knowing this box stuff would be important if I were someone creating the software for a Web browser, but how is this going to help me make better Web pages?
A: To go beyond simple Web pages that use the browser’s default layout, you need to be able to control how elements sit on the page, as well as the relative position of other elements.
To do that, you alter various aspects of each element’s padding and margins.
So to create interesting Web page designs, you definitely need to know something about the box model.
Q: What’s the difference between padding and margin? They seem like the same thing.
A: The margin provides space between your element and other elements, while padding gives you extra space around your content.
If you have a visual border, the padding is on the inside of the border and the margin on the outside.
Think of padding as part of the element, while the margin surrounds your element and buffers it from the things around it.
Q: I know they are all optional, but do you need to have padding to have a border or a margin?
A: No, they are all totally optional and don’t rely on each other.
So you can have a border and no padding, or a margin and no border, and so on.
Q: I’m not sure I get how elements get laid out and how margins fit into that.
While you’re going to see a little of how margins interact with other elements in this chapter, we’ll get way into this topic in Chapter 11 when we talk about positioning.
Q: So other than size, it sounds like I can’t really style padding and margins?
Both are used to provide more visual space, and you can’t give the padding or margin a direct color or any kind of decoration.
But, because they are transparent, they will take on the color of any background colors or background images.
One difference between padding and margins is that the element’s background color (or background image) will extend under the padding, but not the margin.
Q: Is the size of the content area determined solely by the size of the content in it?
A: Browsers use a lot of different rules to determine the width and height of the content area, and we’ll be looking at that more in-depth later.
The short answer is that you can set the width and height yourself if you need control over the size of the element.
We do have our work cut out for us on the lounge page, so let’s get back to it.
Did you notice the blue, stylized paragraph when you looked at the final version of  the lounge page in the beginning of  the chapter? This paragraph contains text with the lounge’s guarantee to their customers, and obviously they want to really highlight their promise.
Let’s take a close look at this paragraph, and then we’ll build it.
And the text looks serif, not sans-serif, and it’s italic.
See if you can identify the padding, border and margins of this paragraph.
Mark all the padding and margins (left, right, top, and bottom):
Before going on to the next page, think about how you might use padding, borders, and margins to transform an ordinary paragraph into the “guarantee  paragraph.”
Open your “lounge.html” file and locate the paragraph that starts “Our guarantee”
Add a class called “guarantee” to the element like this:
Add the class attribute along with a value of “guarantee”
Remember, a class will allow you to style this paragraph independently of the other paragraphs.
You’re going to add a border and background color to the guarantee paragraph.
Add the following CSS to the bottom of your style sheet and then save.
The first three properties add a border to any element that is in the guarantee class.
We’re also giving the element a background color, which will help you see the difference between padding and margins, and make the guarantee look good.
Creating the guarantee style Let’s get started by making a few small changes to the style of  the guarantee paragraph just to get a feel for how the paragraph’s box is set up.
To do that you’re going to add the paragraph to a class called “guarantee” so that you can create some custom styles for just this paragraph.
You’re then going to add a border along with a little background color, which will let you see exactly how the paragraph is a box.
Then we’ll get to work on the rest of  the style.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
A test drive of the paragraph border Reload the page in your browser and you’ll now see the guarantee paragraph with an aquamarine background and a thin black border around it.
It doesn’t look like the paragraph has any padding around the content - there is no space between the text and the border.
There isn’t a noticeable margin between the left and right edges of the paragraph and the browser window edges.
But there does seem to be a margin on the top and bottom of the paragraph element.
Here’s what the paragraph would look like if  we drew it as a box model diagram:
And we have a border, but it’s right up against the content, which means the padding is set very small, or there’s no padding at all.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Padding, border, and margins for the guarantee Now that you’ve seen how the padding, border, and margins are currently set on the guarantee paragraph, let’s think more about how we’d actually like them to look.
And we want some more margin space around the paragraph.
You can set this property either to a number of  pixels or a percentage of  area inside the border.
We’ll use pixels and set the padding to 25 pixels.
We’re adding 25 pixels of padding to all sides of the content (top, right, bottom, and left)
Now you can see 25 pixels of space between the edge of the text content and the border.
Notice that the background color is under both the content and the padding.
Now let’s add some margin Margins are easy to add using CSS.
Like padding, you can specify the margin as a percentage or in pixels.
You’re going to add a 30-pixel margin around the entire guarantee paragraph.
We’re adding 30 pixels of margin to all sides of the content (top, right, bottom, and left)
A test drive with some padding When you reload the page in your browser, you’ll notice the text in the guarantee paragraph has a little more breathing room on the sides now.
There’s some space between the text and the border, and it’s much easier to read.
Now we have 30 pixels of margin on all sides.
A test drive with the margin When you reload the lounge page, you’ll see the paragraph is really beginning to stand out on the page.
With the margins in place, the paragraph looks inset from the rest of  the text, and that, combined with the background color, makes it look more like a “call out” than an ordinary paragraph.
As you can see, with only a few lines of  CSS, you’re doing some powerful things.
If you look at the guarantee paragraph as it’s supposed to look in its final form, it has an italic, serif font, a line height greater than the rest of the page, and if you’re looking really close, gray text.
Check your CSS with the answers in the back of the chapter, then type it in and test.
What’s left?  We still need to get the white “guarantee star” graphic into the paragraph and work on the border, which is a solid, black line.
Now, you just need to get that image into your paragraph element, so you’ll be using an <img> element, right? Not so fast.
If  you’re adding an image to the background of  an element, there is another way.
Using CSS, you can add a background image to any element using the background-image property.
Let’s give it a try and see how it works:
This image is a simple star-like pattern in white against a transparent background.
Notice that it also has a matte around it that matches the color of the background.
Add this to your CSS, save, and reload your page.
Here are the properties you added in the exercise on the previous page.
Wait a sec, it seems like we have two ways to put.
No, the background-image property has a very specific purpose, which is to set the background image of  an element.
It isn’t for placing images in a page – for that you definitely want to use the <img> element.
Think about it this way: a background image is pure presentation, and the only reason you would use a background-image is to improve the attractiveness of  your element.
An <img> element, on the other hand, is used to include an image that has a more substantial role in the page, like a photo or a logo.
Now, we could have just placed the image inside the paragraph, and we could probably get the same look and feel, but the guarantee star is pure decoration – it has no real meaning on the page and it’s only meant to make the element look better.
Test driving the background image Well, this is certainly an interesting test drive – we have a background image, but it appears to be repeated many times.
Let’s take a closer look at how to use CSS background images, and then you’ll be able to fix this.
Notice that it sits on top of the background color, and because it has a transparent background, it lets the color show through.
Also notice that background images, like the background color, only show under the content area and padding, and not outside the border in the margin.
The background-image property places an image in the background of an element.
Places the image in the top, left of the element.
There are many different ways to position things in CSS and we’ll be talking more about that in two chapters.
By default, a background image is “tiled”,  or repeated over and over to fill the background space.
Display the image once, don’t repeat the image at all.
Luckily there is a no-repeat value for the background-repeat property.
We want the background image to not repeat.And we want it in the top left corner.
Another test drive of the background image Here we go again.
This time, it looks like we’re much closer to what we want.
But, since this is a background image, the text can sit on top of  it.
How do we fix this?  That’s exactly what padding is for! Padding allows you to add visual space around the content area.
Let’s increase the padding on the left and see if  we can nail this down once and for all.
But we’d really like for the text not to run over the top of the image.
How do you add padding only on the left? For padding, margins, and even borders, CSS has a property for every direction: top, right, bottom, and left.
To add padding on the left side, use the padding-left property, like this:
We’re using the padding-left property to increase the padding on the left..
Notice that we first set the padding on all sides to 25 pixels, and then we specify a property for the left side.
Order matters here - if you switch the order, then you’ll set the padding for the left side first, and then the general padding property will set all sides back to 25 pixels, including the left side!
Are we there yet? Make sure you save your changes and reload the page.
You should see more padding on the left side of  the paragraph, and the text is now positioned well with respect to the guarantee star.
This is a great example of  where you use padding instead of  margins.
If  you need more visual space around the content area itself, use padding, as opposed to if you want space between elements or the sides of  the page, in which case, use margin.
In fact, we could actually use a little more margin on the right side to set the paragraph off  even more.
Let’s do that, and then all we need to do is fix the border.
Now the text is well positioned with respect to the graphic.
We could increase the margin on the right now to give this a little more of a “call out” look on the page.And we still need.
How do you increase the margin just on the right? You do this just like you did with the padding: add another property, margin-right, to increase the right margin.
Remember we’re already setting the margins to be 30 pixels.
See the pattern? There’s a property to control all sides together, and properties for each side if you want to set them individually.
And now we’re going to override that setting for the right side, and set it to 250 pixels.
Now the paragraph should have 250 pixels of  margin on the right side.
A two-minute guide to borders There’s only one thing left to do to perfect the guarantee paragraph: add a better border.
Before you do, take a look at all the different ways you can control the border of  an element.
The solid style is just what it sounds like, a solid border.
A groove style looks like a groove in the page (difficult to see in a book)
The outset style looks like an outset that rises from the page.
And the dashed style is just a set of dashes round the border.
The inset style looks like an inset that sinks into the page.
The ridge style looks like a raised ridge on the page.
The border-style property controls the visual style of the border.
There are eight border styles available, from a solid line to dotted lines to ridges and grooves.
Border Width The border-width property controls the width of the border.
You can use keywords or pixels to specify the width.
Border Color The border-color property sets the color of the border.
This works just like setting font colors; you can use color names, rgb values, or hex codes to specify color.
Specifying Border Sides Just like margins and padding you can specify border style, width, or color on any side (top, right, bottom, or left):
You can use any of the common ways to specify color.
You can specify widths using the keywords thin, medium, or thick, or by the number of pixels.
Browsers can have different default sizes for the keywords thin, medium, and thick, so if the size of your border is really important to you, consider using pixel sizes instead.
Browsers don’t always agree on the size of thin, medium, and thick.Watch it!
Border fit and finish It’s time to finish off  the guarantee paragraph.
All we need to do is give it a ragged-looking border.
But which style is that?  The available styles are solid, double, dotted, dashed, groove, ridge, inset, and outset.
So how do we make it look ragged? It’s actually just a trick: we’re using a dashed border that has its color set to white (matching the background color of  the page)
Find the border-style property in your “lounge.css” and change it, like this:
Now, to get a ragged-looking border, just set the color of  the border to white.
This makes the border look like it is cutting into the background color.
Give it a try: find the border-color property and set it to white.
And here we’ve changed the border color from black to white.
Nice! I can’t wait to see the entire page remodeled.
Congratulations! Bravo! You’ve taken an ordinary HTML paragraph and transformed it into something a lot more appealing and stylish using only fifteen lines of CSS.
It was a long trip getting here, so at this point we encourage you to take a little break.
Grab yourself an iced chai and take a little time to let things sink in – when you come back, we’ll nail down a few more of the fine points of CSS.
We’re just about to listen in on an interview with an XHTML class...
Head First: Hey, Class; you know we’ve been making good use of  you, but we still don’t know a lot about you.
If  you want to create a “group, ” so to speak, that you can style, just come up with a class, put your elements in it, and then you can style all the elements in that class together.
Head First: So the class lets you take sets of  elements and apply one or more style properties to them?
Say you have some holiday-themed areas in your page; one Halloween, one Christmas.
Then you can style those elements independently, say orange for Halloween and red for Christmas, by writing rules that apply to each class.
We just saw a good example of  that in this chapter, didn’t we?
Head First:  Well, we have a paragraph on the Head First Lounge page that contains a written guarantee from the owners, and they want this paragraph to stand out independently of  the other paragraphs.
Head First: Well, I don’t think there is any reason to have multiple guarantee paragraphs and I don’t see the same style being applied anywhere else in the page, so just the one.
You see, classes are meant to be used for styles that you want to reuse with multiple elements.
If  you’ve got one unique element that you need styled, that’s not really what classes are for.
Head First:  Wait a second – a class seemed to work perfectly...
All you need to do is switch your class attribute to an id attribute.
Head First:  An id attribute? I thought those were for those destination anchors, like in Chapter 4?
Head First:  Can you tell us a little more about id attributes? This is all news to me.
I mean, I just went through an entire chapter using class incorrectly! Class:  Hey, no worries; it’s a common mistake.
Basically all you need to know is that you use a class when you might want to use a style with more than one element.
And, if  what you need to style is unique and there’s only one on your page, then use an id.
Head First:  Okay, I think I’ve got it, but why does it really matter? I mean, class worked just fine for us.
Class:  Because there are some things you really want only one of  on your page.
The guarantee paragraph you mentioned is one example; but there are better examples, like the header or footer on your page, or a navigation bar.
You’re not going to have two of  those on a page.
Of  course, you can use a class for just one element, but someone else could come along and add another element to the class, and then your element won’t have a unique style anymore.
It also becomes important when you are positioning HTML elements, which is something you haven’t gotten to yet.
It sounds like we definitely need to convert that paragraph from a class to an id.
Choose whether you’d use class or id for the following elements:
Answer: The footer, the picture of the day, and the to do.
A set of  headings and paragraphs that contain company biographies.
Q: What’s the big deal? Why do I need an id just to prove something is unique on the page?  I could use a class exactly the same way, right?
A: Well, you can always “simulate” a unique id with a class, but there are many reasons not to.
Say you’re working on a Web project with a team of people.
One of your teammates is going to look at a class and think it can be reused with other elements.
If, on the other hand, she sees an id, then she’s going to know that’s for a unique element.
There are a couple of other reasons ids are important that you won’t see for a few chapters.
Q: Can an element have an id and also belong to a class?
Think about it this way: an id is just a unique identifier for an element, but that doesn’t prevent it from belonging to one or more classes (just like having a unique name doesn’t prevent you from joining one or more clubs)
Because you’ve already used ids on <a> elements, and because you already know how to use a class attribute, you’re not going to have to learn much to use the id attribute.
There’s usually only one footer on any page, so that sounds like the perfect candidate for an id.
Here’s how you’d add the identifier “footer” to a paragraph that contains the footer text:
Similar to a class, just add the attribute “id” and choose a unique id name.
Unlike a class, you can only have one element in your page with an id of “footer”
Giving an element an id is similar to adding an element to a class.
The only differences are that the attribute is called “id”, not “class”, an element can’t have multiple ids, and you can’t have more than one element on a page with the same id.
But how do I use id in CSS? You select an element with an id almost exactly like you select an element with a class.
To quickly review: if  you have a class called “specials”, there are a couple of  ways you can select elements using this class.
You could select just certain elements in the class, like this:
Or, you can select all the elements that belong to the “specials” class, like this:
This selects only paragraphs that are in the specials class.
To select an element by its id, you use a “#” character in front of  the id (compare this to class, where you use a “.” in front of  the class name)
Say you want to select any element with the id “footer”:
Or, you could select only a <p> element with the id “footer”, like this:
This selects a <p> element if it has the id “footer”
The only other difference between class and id is that an id selector should match only one element in a page.
Using an id in the lounge Our “guarantee paragraph” really should have an id since it’s intended to be used just once in the page.
While we should have designed it that way from the beginning, making the change is going to be quite simple.
Step One: change the class attribute to an id in your “lounge.html”:
Step Two: change the “.guarantee” class selector in “lounge.css” to an id selector:
Just change the “.” to a “#” in the selector.
But, don’t you feel much better now that everything is as it should be?
A: We could have done either and they both would select the same thing.
On this page we know that we will always have a paragraph assigned to the id, so it doesn’t really matter (and #guarantee is simpler)
However, on a more complex set of pages you might have some pages where the unique id is assigned to, say, a paragraph, and on others it’s assigned to a list or block quote.
Q: Should I always start with a class, and then change it to an id when I know it’s going to be unique?
You’ll often know when you design your pages if an element is going to be unique or not.
We only did things this way in the chapter because, well, you didn’t know about id when we started.
But don’t you think we tied id into the story rather nicely?
When I put an id on other types of elements, do they become destinations too?
A: That’s the idea, and most modern browsers support this, but older browsers don’t.
Remixing style sheets Before we wind this chapter down, let’s have a little fun remixing some style sheets.
Well, who ever said you can’t use more than one style sheet? You can specify a whole set of  style sheets to be used with any XHTML.
But you may be wondering why anyone would want to? There are a couple of  good reasons.
Imagine that the Head First Lounge takes off, gets franchised, does the IPO, and so on (all thanks to you and your terrific Web work, of  course)
Then there would be a whole corporate Web site with hundreds of pages, and obviously you’d want to style those pages with external CSS style sheets.
There would be various company divisions and they might want to tweak the styles in individual ways.
And the lounge franchises also might want some control over style.
We’ve set up all the main styles to be used by the company Web sites.
In your XHTML you can specify more than one style sheet.
The beverage division can add to the corporate style a little, or even override some of the corporate styles.
And the lounge in Seattle has its own tweaks in their style sheet.
Order matters! A style sheet can override the styles in the style sheets linked above it.
So how do you start with a corporate style and then allow the division and the lounge franchises to override and make changes to the styles? You use several style sheets, like this:
A: Yes, they go top to bottom, with the style sheets on the bottom taking precedence.
So if you have, say, a fontfamily property on the <body> element in both the corporate and the division style sheets, the division’s takes precedence, since it’s the last one linked in the XHTML.
Q: Do I ever need this for a simple site?
Sometimes there’s a style sheet you want to base your page on, and rather than changing that style sheet, you just link to it, and then supply your own style sheet below that to specify what you want to change.
Q: Can you say more about how the style for a specific element is decided?
And for now, just add to that knowledge that the ordering of the style sheets linked into your file matters.
Then in the next chapter, after you’ve learned a few other CSS details, we’re going to go through exactly how the browser knows which style goes with which element.
Style sheets - they’re not just for desktop browsers anymore...
The media attribute allows you to specify the type of device this style sheet is for.
Here we’re specifying that this style sheet is appropriate for computer screens.
You can specify multiple <link> elements with different media types in one XHTML file, like this:
Now we have two other <link> elements, one that specifies print and one for small devices with small screens and limited communication speeds.
If you don’t supply a media type then the style file should be suitable for all devices.
And now for the second reason you might want to have multiple style files.
Let’s say you want to have slightly different styles for computer screens, PDAs, or mobile devices, and printed versions of  your pages.
There is an optional attribute for the <link> element called media, that you can use to specify the kinds of  devices your style files are intended for.
So I can set up different style sheets for different devices?
A: Yes, you can set up several style sheets and then link to them all in your XHTML.
It’s the browser’s job to grab the right style sheet based on the media type.
Q: Say you have a “handheld” link and a link that applies to all browsers; which one gets applied?
But, assuming the “handheld” link is below the “all” link, the handheld rules take precedence, just like we talked about before with the corporate, division, and lounge CSS files.
Q: So we have screen (computers), print (print-like media), handheld (mobile devices and cell phones)
A: Here are a few more: aural (for speech browsers), Braille (for people who need tactile readers), projection (for projected presentations or slides), tty (for teletypes and terminals), and tv (for televisions, of course)
Open up “lounge.html” in the “chapter10/lounge” folder and add a new link to this style sheet for the media type “print”
Make sure you also add the attribute media=“screen” to the <link> element that links to “lounge.css”, so you have one style sheet for the screen, and one for the printer.
Then save, reload the page, and choose your browser’s “Print” option.
Here’s the new link you need to add to your “lounge.html” file.
You’ve totally changed how the page looks when it’s printed, using CSS.
Unfortunately, not all browsers support the media attribute, so if you didn’t get this result, try a newer browser.
Boxes consist of the content area and optional  n padding, border, and margin.
The content area contains the content of the  n element.
The padding is used to create visual space  n around the content area.
The border surrounds the padding and content  n and provides a way to visually separate the content.
The margin surrounds the border, padding,  n and content, and allows space to be added between the element and other elements.
Padding and margin size can be set in pixels  n or percentages.
Border width can be set in pixels or by using  n the keywords thin, medium, and thick.
There are eight different styles for borders,  n including solid, dashed, dotted, and ridge.
When setting margins, padding, or the border,  n CSS provides properties for setting all the sides (top, right, bottom, left) at once, or it allows them to be set independently.
Use the  n line-height property to add space between lines of text.
You can place an image in the background  n of an element with the background-image property.
Use the class attribute for elements that you  n want to style together, as a group.
Use the id attribute to give an element a  n unique name.
You can also use the id attribute to provide a unique style for an element.
There should only be one element in a page  n with a given id.
An element can have only one id, but it can  n belong to many classes.
You can use more than one style sheet in your  n XHTML.
If two style sheets have conflicting property  n definitions, the style sheet that is last in the XHTML file will receive preference.
You can target media devices such as “print”  n or “handheld” by using the media attribute in your <link> element.
If you want your element to have a unique style, use this kind of selector.
Property used to increase the space between lines of text.
If you want your element to have a unique style, use this kind of selector.
Property used to increase the space between lines of text.
See if you can identify the padding, border and margins of this paragraph.
Mark all the padding and margins (left, right, top, and bottom):
You can add the new properties anywhere in the rule.
If you look at the guarantee paragraph as it’s supposed to look in its final form, it has a italic, serif font, a greater line height than the rest of the page, and if you’re looking really close, gray text.
Notice that if a font name has spaces in it you should surround it with quotes.
Now, we couldn’t help but notice that your CSS toolbelt is really.
If you’re thinking that “pseudo-classes” would make a great name for your.
You know, we’d love it if you could make the elixir specials.
Wow, the design is a lot different than the rest of the page: it’s thin, the text is centered, there are red headings, an aquamarine border around the whole thing, and even some cocktail graphics at the top.
The ultimate healthy drink, this elixir combines herbal botanicals, minerals, and vitamins with a twist of lemon into a smooth citrus wonder that will keep your immune system going all day and all night.
Want to boost your memory?  Try our Black Brain Brew elixir, made with black oolong tea and just a touch of espresso.
Join us any evening for these and all our wonderful elixirs.
Alice sure has asked for a tall order, hasn’t she? She wants us to take the existing lounge XHTML and  make it look like the handout menu.
But, before we jump right into styling, let’s get an overview of  the existing XHTML.
Here’s just the XHTML snippet for the elixir specials; you’ll find it in “lounge.html” in the “chapter11/lounge” folder:
And, finally, at the bottom, there is another paragraph, with some text and a link to the real elixirs page.
Jim:  Come on, Frank, you know we can just create a class or two and then style all the elixir elements separately from the rest of  the page.
I’m sure there is a simple property to make text align to the center  And we know how to handle the colored text.
Jim:  Wait a sec, what about that border around everything?
If  we put separate borders on every element, they’ll just look like separate boxes.
What we need is an element to nest all these other elements inside, so we can put a border on that.
Then we’ll have one border around everything in the elixirs section of  the page.
Jim: Well, I see why you get paid the big bucks, Frank.
I don’t think we’d want to do that anyway; paragraphs are for text.
Joe:  And <blockquote>’s not right either, because this is an elixir menu, not a quote.
Joe:  <div> – what’s that? It sounds like it’s for math.
Frank:  That’s not far off, because a <div> lets you divide your page into logical sections or groupings.
Let me show you guys how to divide a page into logical sections, and then I’ll show you what I know about <div>...
There are a lot of style changes we’ve got to make, and the elixirs style.
Let’s explore how we can divide a page into logical sections.
This is a pretty normal looking page: lots of headings, paragraphs, and an image in there.
Take a look at the Web page to the right: it’s a Web page for PetStorz.com and we’re going to spend a few pages looking at how we might add some additional structure to it by identifying some logical sections and then enclosing those inside a <div> element.
But by just focussing on the structure of the page, you can’t really tell a whole lot about the page.
What elements make up the header? Is there a footer on the page? What are the content areas?
Okay, so our job is to locate “logical sections” in this page.
What’s a logical section? It’s just a group of  elements that are all related on the page.
For instance, in the PetStorz.com Web page, there are some elements that are used for the cats area on the page, and some that are used for dogs.
The PetStorz page has two main content areas, one for cats, and one for dogs.
It has some other areas too, but we’ll come back to those.
In this case, both the cats and dogs sections consist of two elements, a heading and a paragraph.
Now that you know which elements belong in each section, you can add some XHTML to mark up this structure.
The common way to do this is to place <div> opening and closing tags around the elements that belong to a logical section.
Let’s first do this pictorially, and then we’ll come back to the real markup in a couple of  pages.
Just by nesting your elements in <div>s, you’ve indicated that all those elements belong to the same group.
But you haven’t given them any kind of  label that says what the grouping means, right?
A good way to do that is to use an id attribute to provide a unique label for the <div>
Here we’ve added an id of “cats” to the first <div> to indicate what the logical section is for.
On a referral from the Starbuzz CEO, you’ve been asked to come in and consult on style changes to PetStorz main page.
How quickly would you understand the PetStorz Web page if you were shown Page One?
Okay, so you’ve added some logical structure to the PetStorz page, and you’ve also labeled that structure by giving each <div> a unique id.
That’s all you need to start styling the group of  elements contained in the <div>
Adding some style Now the <div>s have a little style.
For cats we have a leopard image, and for dogs we have a mutt image.
There are a couple of  reasons you might want to add more structure to your pages with <div>s.
First, you may want to further expose the underlying logical structure of  your pages, which can help others understand them, and also help in maintaining them.
Second, there are times when you need the structure so that you have a way to apply style to a section.
Often, you’ll want to add the structure for both reasons.
So, in the case of  PetStorz, we could take this to the next level and add a few more <div>s...
Now we’ve added another <div> with an id indicating this is the header of the page.
For instance, in the PetStorz page, we have a cat section and a dog section, and the two together are logically the “pets” section of  the page.
Adding this structure through <div>s can even help you think through your page design.
For instance, does this lone <p> really need to be here?
Now we’ve marked up this XHTML so that we know there is a logical section in the page with “pets” content in it.
Further, that “pets” section has two logical subsections, one for “cats” and one for “dogs”
Q: So, a <div> acts like a container that you can put elements into to keep them all together?
Not only do they act as logical containers that you can use to hold a bunch of related elements (like the “cat” elements) together, but when we start styling <div>s and using them for positioning in the next chapter, you’ll see they act as graphical containers, too.
Q: Beyond the structure I’m already putting into my pages with headings and paragraphs and so on, should I also be adding a higher level of structure with <div>s?
You want to add structure where it has a real purpose, but don’t add structure for structure’s sake.
Always keep your structure as simple as possible to get the job done.
However, if it provides no real benefit, then it just complicates your page.
After working with <div>s for a while, you’ll start to get a feel for when and how much to use them.
Q: Do you ever put <div>s in a class instead of giving it an id?
A: Well, remember that an element can have an id and be in one or more classes at the same time, so the choice isn’t mutually exclusive.
And, yes, there are many times you create <div>s and place them into classes.
Say you have a bunch of album sections in a page of music playlists; you might put all the elements that make up the album into a <div> and then put them all in a class called “albums”
That identifies where the albums are, and they can all be styled together with the class.
At the same time you might give each album an id so that it can have additional style applied separately.
The <div> is really no different; you’re just nesting an element inside another element, and, in the case of PetStorz, we’re using it to show larger chunks of structure (a “cats” and “dogs” nested in a “pets” section)
Or, you might use <div>s to have a beer section nested in a beverages section nested in a menu section.
Put this in the back of your mind and you’ll see an example soon enough where we need one.
Add additional structure where it helps you separate a page into logical sections for clarity and styling.
Adding <div>s just for the sake of creating a lot of structure in your pages complicates them with no real benefit.
Okay, enough “theory” about <div>s – let’s get one into the lounge page.
Remember, we’re trying to get all the elixir elements into a group and then we’re going to style it to make it look like the elixir handout.
Here’s the opening tag, and we’ve given it an id of “elixirs” to identify it.
Remember we’re just showing a snippet of XHTML from the entire file.
When you open “lounge.html”, you’ll see all the markup for the page.
Taking the <div> for a test drive That was easy, wasn’t it? Now that we’ve got a more structured page, let’s fire up the browser and see how it looks...
That said, a <div> is just a block element, and you can apply any styles you want to it.
So, once you know how to style a block element (and you do), you know how to style a <div>
Remember, the goal here is to restyle the elixir content on the page so it looks like the handout.
Before we took a detour to learn about <div>s, we were trying to figure out how to get a border around the entire set of elixirs.
Now that you’ve got a <div> in “lounge.html”, how would you go about adding a border?
The ultimate healthy drink, this elixir combines herbal botanicals, minerals, and vitamins with a twist of lemon into a smooth citrus wonder that will keep your immune system going all day and all night.
Want to boost your memory?  Try our Black Brain Brew elixir, made with black oolong tea and just a touch of espresso.
Join us any evening for these and all our wonderful elixirs.
An over-the-border test drive After you’ve added the CSS, save it and then reload your “lounge.html” file.
Here’s the border that you just added to the elixirs <div> element.
Notice that the border goes around all the elements inside the <div> element.
You added a visible border to this <div>, but it still has no padding and no margin.
Adding a border Okay, now that you have a <div> around all the elements in the elixirs section, the fun begins: you can style it.
The first thing we want to reproduce in the elixirs handout is a border that wraps around all the elements in the elixirs section, right?  Well, now that you actually have a <div> element that wraps around the elixirs section, you can style it and add a border.
You’ll need a new rule in the lounge’s CSS to select the <div> element using its id.
Open up your “lounge.css” file in the “chapter11/lounge” folder, and add this rule at the end:
It selects the elixirs <div> element using its id, and adds a thin, solid border in our favorite aquamarine color.
The main heading and the paragraph text are black, while the drink names are a red color that matches the red in the logo.
The text and images are centered, and there’s padding on the sides to add space between the text and the border.
The line-height of the paragraphs looks a lot more like the default line height for the page (before we changed it in the last chapter)
The font family is a sans-serif font, just like the body font, so we don’t have to change that.
Remember that the <div> element and all the elements nested in it inherit the font family from the body.
The width of the elixirs handout is narrower than the rest of the page.There’s a background.
We’ve found a way to get that border around the entire section.
Now you’re going to see how to use the <div> to customize the styling of  the entire elixirs section independent of  the rest of  the page.
We obviously have some padding issues to deal with, because the border is right up against the content.
But there’s a lot of  other style we need to work out, too.
Let’s take a look at everything we need to take care of...
That’s a lot of  new style, so let’s get a game plan together before attacking it.
First, we’re going to change the width of  the elixirs <div> to make it narrower.
Next, we’ll knock out some of  the styles you’re already familiar with, like padding and the background image.
We’ll also play with the text alignment, which you haven’t seen before.
Then all we’ve got left are the text line heights and the heading colors.
You’re going to see that you need to upgrade your CSS selector skills just a bit to get those changed.
The width property lets you specify the width of the element’s content area.
Here we’re specifying that the content width be 200 pixels.
We’d like the elixirs to be quite narrow, so it looks like the narrow handout menu at the lounge; about 1/4 the width of  a typical browser window should be about right.
You’ve set the widths of  padding, borders, and margins, but you’ve never set the width of  an element before.
To do that you use the width property, like this:
Open your “lounge.css” and add this rule to the bottom.
It doesn’t change, even if you make your browser window really wide, or really narrow.
Compare the behavior of the <div> to that of the other elements when you make your browser window wide.
The paragraphs automatically expand to fill the width of the browser.
Notice that the height of the elixirs section got a lot taller.
That’s because we made it narrower, so the content takes up more room vertically instead.
Next, save the CSS and then reload the “lounge.html” file.
You’ll see the elixirs section get much skinnier, thanks to the width you gave it.
Can you resize your browser window to less than the width of the elixirs <div>?  Some browsers won’t let you go that narrow; others will.
If you can go narrower, compare the text in the elixirs <div> with the rest of the text on the page.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
I was wondering how the width property relates to padding.
Is this the width of the content itself? Or the entire box.
To figure out the width of  the entire box, you need to add the width of  the content area to the width of  the left and right margins, the left and right padding, and the border width.
Don’t forget that you have to include twice the border width, because there is a border on the left and the right.
The width property specifies the width for the content area only.
Well then how do we specify the width of the.
Say you set the content area width to be 300 pixels using the width property in a CSS rule.
What’s the width of  your element’s box? Well, it’s the width of the content area added to the width of  the left and right margins, the left and right padding, and the left and right border width.
You specify the width of the content area, the padding, the border, and the margin.
All of that added together is the width of the entire element.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Figure out how much is taken up by the margins, padding, and border.
Q: If I don’t set the width of an element, then where does the width come from?
A: The default width for a block element is “auto”, which means that it will expand to fill whatever space is available.
If you think about any of the Web pages we’ve been building, each block element can expand to the entire width of the browser, and that’s exactly what it does.
Now, hold this thought, because we’re going to go into this in detail in the next chapter.
Just remember that “auto” allows the content to fill whatever space is available (after taking padding, border, and margin into account)
Q: What if I don’t have any margin, padding, or borders?
A: Then your content gets to use the entire width of the box.
Q: What are the different ways I can specify widths?
A: You can specify an actual size – usually in pixels – or you can specify a percentage.
If you use a percentage, then the width is calculated as a percentage of the width of container the element is in.
You can explicitly set a height, but you risk cutting off the bottom of your content if your height isn’t big enough to contain it.
In general, leave your element heights unspecified so they default to auto.
We’re going to talk about this more in the next chapter as well.
Sharpen your pencil Here’s a box that has all the widths labelled.
Our guarantee: at the lounge, we’re committed to providing you, our guest, with an exceptional experience every time you visit.
Whether you’re just stopping by to check in on email over an elixir, or are here for an out-ofthe-ordinary dinner, you’ll find our knowledgeable service staff  pay attention to every detail.
If  you’re not fully satisfied have a Blueberry Bliss Elixir on us.
Use text-align on block elements to align the text they contain.
First, we’re going to change the width of  the elixirs <div> to make it narrower.
Next, we’ll knock out some of  the styles you’re already familiar with, like padding, text alignment, and the background image.
Then all we’ve got left are the text line heights and the heading colors.
You’re going to see that you need to upgrade your CSS selector skills just a bit to get those changed.
Now we’re going to concentrate on some of  the basic styles, like the padding, the text alignment, and also getting that background image of  the cocktail glasses in the elixirs <div>
You’re already familiar with how most of  this works, so let’s take a quick look at the CSS:
And finally we’re specifying an image to use in the background, in this case the cocktail image.
We’re setting the background-repeat property to repeat-x, which will tile the image only in the horizontal direction.
We’re adding some margin on the left to i ndent.
So in this case, we’re setting the property on the <div> block element and all its inline content is nicely centered as a result.
Just remember that text-align, despite its name, works on any kind of  inline element.
One other thing to keep in mind: the text-align property should be set on block elements only.
It has no effect if  it’s used directly on inline elements (like <img>)
Test driving the new styles Now it’s time to add those new properties to your.
Let’s check out the changes: the headings, the images, and the text are all centered in the <div> and have a little more breathing room now that there’s some padding in place.
We’ve also got a little decoration at the top with the tiled cocktail image.
We’ve got some padding here, and at the bottom and left...
The tiled image looks nice, and it only tiles horizontally.
All the text inside the <div> element is in nested block elements, but it is all aligned now.
That’s because these block elements inherit the text-align property from the <div>
So here’s the difference: rather than the <div> itself  aligning the text in the headings and the paragraphs (which it won’t do because these are block elements), the headings and paragraphs are inheriting the text-align value of.
Of  course, keep in mind that not all properties are inherited by default, so this won’t work for all properties.
So now that you understand widths, what’s the total width of the elixirs box? To start with, we know the content area is 200 pixels.
We’ve also set some left and right padding that affects the width, as well as a border that’s set to “thin”
Just assume a thin border is 1 pixel thick, like it is on most browsers.
And what about margins? We set a left margin value, but no right margin value, so the right margin is 0 pixels by default.
Your job is to figure out the total width of the elixirs <div>
The ultimate healthy drink, this elixir combines herbal botanicals, minerals, and vitamins with a twist of lemon into a smooth citrus wonder that will keep your immune system going all day and all night.
Want to boost your memory?  Try our Black Brain Brew elixir, made with black oolong tea and just a touch of espresso.
Join us any evening for these and all our wonderful elixirs.
Sounds pretty easy, right? After all, you’ve done all this before.
In fact, given that you know you can just set styles on the <div> and they will be inherited, you can take care of this real fast.
First, we’re going to change the width of  the elixirs <div> to make it narrower.
Next, we’ll knock out some of  the styles you’re already familiar with, like padding, text alignment, and the background image.
Then all we’ve got left are the text line heights and the heading colors.
You’re going to see that you need to upgrade your CSS selector skills just a bit to get those changed.
Then we’ve got the <h3>s in the elixirs, which need to be red.
Jim:  Yeah, no problem, we’ll just add a few more rules.
Anytime you add a new heading to the elixirs <div> you’ll have to remember to add it to the class.
Frank:  Actually Jim, before you use classes, go check out descendant selectors.
We’ve almost got this done, we just need to change the header colors and also the.
Let’s take a quick look at what we’re trying to do to the heading colors.
Here’s just the main heading elements in the lounge XHTML.
Now, we could use a class like Jim suggested, but we’re going to give Frank’s idea a try first...
What we need is a way to select descendants What we’re really missing is a way to tell CSS that we want to only select elements that descend from certain elements, which is kinda like specifying that you only want your inheritance to go to the children of  one daughter or son.
Leave a space between the parent name and the descendant name.
Write the rest of your rule just like you always do.
But we’ve got an id on the elixirs <div>, so let’s use it to be more specific about which descendants we want:
Now the parent element is the element with the id elixirs.
This rule says to select any <h2> that is a descendant of an element with the id “elixirs”
Also label the elements in the graph below that are selected.
So a descendant selector selects any <h2> nested inside an element, no matter how deeply it is nested.
Q: Well, is there a way to select a direct child?
Go ahead and add these new properties to the bottom of  your.
We’ve got black and red headings in the elixirs section, and we haven’t affected the aquamarine color being used for <h2> headings in the main page.
Now all we need to do is fix the line height.
Fixing the line height Recall that in the last chapter we made the line height of  the text in the lounge a little taller than normal.
This looks great, but in the elixirs we want our text to be a normal, single-spaced, line height to match the handout.
Sounds easy enough, right? Just set the line-height property on the <div> and everything will be fine, because line-height is inherited.
The only problem is that the headings will also inherit the line-height, and we’ll end up with something like this.
Notice that the line height in the heading is too small and the two lines are starting to run together.
How can you do this? Well, line-height is a bit special because you can use just a number instead of  a relative measure – like em or % – for line-height.
We set body to “small”, so that’s inherited by elixirs.
Wow, that’s fantastic! You were able to make the elixirs section on the Web site look like the handout, with just a little CSS.
You’ve completely transformed it, and now it looks just like the handout.
And, other than adding a <div> and an id attribute to your XHTML, you were able to do this with just a few CSS rules and properties.
By now, you should be realizing just how powerful CSS is, and how flexible your Web pages are when you separate your structure (XHTML) from your presentation (CSS)
You can give your XHTML a whole new look, simply by changing the CSS.
Remember, this is how the elixirs section looked when we started...
It’s time to take a little shortcut You’ve probably noticed that there are quite a few CSS properties that seem to go together.
How about background-image, background-color, and background-repeat? Those all set different property values on the background of  an element.
Have you also noticed it gets a little tedious typing all those in?  There are better things to spend your time on than typing all this, right?
That’s a lot of typing just to specify four numbers.
You’re going to learn how to specify all those values without risking carpal tunnel.
And here’s the new and improved way to write them as a shorthand.
You can use the same sort of  shorthand with margins:
If  your padding or margins are the same value on all sides, you can make the shorthand really short:
If all your padding values are the same, then you can write it like this.
And what about the border properties we mentioned? You can use a shorthand for those too.
The border shorthand is even more flexible than margins or padding because you can specify them in any order you like.
Like border, values can go in any order in this shorthand.
And even more shorthands No description of  shorthands would be complete without mentioning font shorthands.
Check out all the properties we need for fonts: font-family, font-style, font-weight, font-size, font-variant, and don’t forget line-height.
Well, there’s a shorthand that wraps all these into one.
You can specify any combination of them, but they need to come before font-size.
If you want to specify one, just put a / right after the font-size and add your line height.
Here are the properties that go into the font shorthand.
We’re not using any of these, but that’s okay, they’re all optional.
Wow, that’s quite a shorthand, huh? You’re going to be able to double your time at the slopes (or on the beach) now.
You only need to specify one font, but alternatives are highly encouraged.
It’s time to put all your new knowledge to work.
You’ll notice that at the bottom of the lounge, there’s a small section with copyright information that acts as a footer for the page.
Add a <div> to make this into its own logical section.
We’re also setting the line-height to be “normal”, which is a keyword you haven’t seen yet.
And let’s add some top margin to give the footer a little breathing room.
And while you’re at it, have a look over the entire “lounge.css” file.
Is there anywhere you might want to simplify things with shorthands? If so, go ahead and make those changes.
Shorthands do have the advantage of reducing the size of your CSS files, and certainly they are more quickly entered because they require less typing.
However, when there is a problem, they are a little more difficult to “debug” if you have incorrect values or the wrong order.
So, you should use whichever form is more comfortable because they are both perfectly valid.
Q: Shorthands are more complex because I have to remember the ordering and what is and isn’t optional.
A: Well, you’ll be surprised how quickly it becomes second nature, but those of us in the “biz” have a little secret we like to call.
To remember the ordering of the padding and margin shorthand values, think of a clock labelled with top, right, bottom, and left.
Then, always go in a clockwise direction: top to right to bottom to left.
I saw the nice job you did on the elixirs.
All the CD titles are in an italic font style.
What do you think is the best way to style the CD and artists in the “What’s playing at the Lounge” section?
Frank:  Yeah, but that’s kind of  like using a <blockquote> just to indent text.
What I mean is that we don’t really want to emphasize and strongly emphasize the CD and artists.
Jim:  Well, I actually thought about that, but I couldn’t think of  any other way to do it.
I mean this is just text in the same list item.
It’s not like we have any way to style it.
Jim:  We can only style elements, and here we just have a bit of  text, like, “Music for Airports, Brian Eno”
We’d need an element around each piece of  text to be able to style them differently.
But that’s a block element, so that is going to cause linebreaks.
There’s another element like <div> that is for inline elements.
Frank:  Well, a <span> gives you a way to create a grouping of  inline characters and elements.
You’re going to nest the CDs and artists in separate <span> elements.
You’re going to add one <span> to the “cd” class and the other to the “artist” class.
You’re going to create a rule to style the “cd” class with italic, and the “artist” class with bold.
Steps one and two: adding the <span>s Open your “lounge.html” file and locate the “Who’s playing at the Lounge” heading.
Just below that you’ll see the unordered list of  recommendations.
Each list item consists of a CD title, a comma, and then the music artist.
Let’s try adding <span>s to the first CD and artist:
Just add a <span> opening tag along with the class attribute and a value of “cd”
Step three: styling the <span>s Before we move on, save the file and reload it in your browser.
Add these two rules to the bottom of  your “lounge.css” file:
We’re going to add a rule for each of the new classes, cd and artist.
A: As always, you want to mark up your content with the element that most closely matches the meaning of your content.
Q: Can I set properties like width on <span> elements? Actually, what about inline elements in general?
You can also add margin and padding to these elements, as well as a border.
Margins and padding on inline elements work a little differently from block elements – if you add a margin on all sides of an inline element, you’ll only see space added to the left and right.
You can add padding to the top and bottom of an inline element, but the padding doesn’t affect the.
The width, padding, and margin properties all behave more like they do for a block element.
This can sometimes be handy if you can’t edit the image yourself to change the dimensions, and you want the image to appear bigger or smaller on the page.
But remember, if you rely on the browser to scale your image, you may be downloading more data than you need (if the image is larger than you need)
Add <span> elements to the rest of the music recommendations and test your page.
You’ll find the solution in the back of the chapter.
Is there something about its style that seems different from other elements?
Hey guys, I know you think you’re about done, but you.
Have you noticed that links act a little differently when it comes to style? Links are chameleons of  the element world because, depending on the circumstance, they can change their style at a moment’s notice.
And if you hold your mouse over a link without clicking, this is called “hovering”
On some browsers you’ll see a tool tip that displays the text of the “title” attribute.
And, if you pay close attention, on some Web pages, you’ll see a different style as you hover.
Usually, visited links are displayed in a different color than unvisited links so that you can tell the difference.
Unlike other elements, the style of  an <a> element changes depending on its state.
If  the link has never been clicked on, it has one style, and if  it has been clicked on, another.
And if  you hover over a link, it can have yet another style.
Perhaps there’s more to styling <a> elements than meets the eye? You betcha...
How can you style elements based on their state? A link can be in a few states: it can be unvisited, visited, or in the “hover” state (and a couple of  other states too)
So, how do you take advantage of  all those states? For instance, it would be nice to be able to specify what the visited and unvisited colors are.
Or maybe highlight the link when the user is hovering over it.
Well, of  course there is, but if  we told you it involves using pseudo-classes you’d probably just decide you’ve read enough for the night, and close the book.
Right? But hold on! Pretend we never said the word pseudo-class and let’s just look at how you can style your links:
This selector is applied to links when they are in an unvisited state.
And this selector is applied to links when they are visited.
And this selector is applied when you hover over a link.
Add these rules to the bottom of your “lounge.css” file and then save and reload “lounge.html”
Play around with the links to see them in each state.
Note that you might have to clear your browser history to see the unvisited color (green)
Once you’re done, make sure you take these rules out of your.
A: You certainly can do that, but then your links will look the same in all states, which makes your links less user-friendly because you can’t tell which ones you’ve visited and which ones you haven’t.
The focus state occurs when the browser focuses on your link.
What does that mean? Some browsers allow you to press your tab key to rotate through all the links on your page.
When the browser comes to a link, that link has the “focus.”  The active state occurs when the user first clicks on a link.
One word of warning about these two states: they aren’t well supported by all browsers yet, so make sure and test them if they are important to your design.
Q: Can’t my links be in multiple states at the same time? For instance, my link could be visited, have the mouse hovering over it, and the user could be actively clicking on it all at once.
You determine which style is applied by the ordering of your rules.
So, the right ordering is generally considered to be: link, visited, focus, hover, and then active.
If you use that ordering, you’ll get the results you expect.
What’s a pseudo-class? A: Only one of the most confusing words in the CSS language.
Notice we have the element <a>, followed by a “:”, followed by the state we want to select.
I must confess that when they first asked me to do this interview, I drew a blank.
Pseudo-class? The only thing that came to mind was that ’80s Phil Collins song.
Can you tell us a little about where Pseudo came from?
Pseudo-class:  Pseudo usually means something that looks like the real thing, but isn’t.
It’s a grouping you create to place elements in so you can style them together.
Put “pseudo” and “class” together and you have a pseudo-class: it acts like a class, but it isn’t a real class.
Head First:  What’s not real about it if  it acts like a class?
Pseudo-class:  Okay, open up an XHTML file and look for the class :visited, or :link, or :hover.
Pseudo-class:  And yet, a:link, a:visited, and even a:hover all allow you to specify style, just like they were classes.
In other words, you can style pseudo-classes, but no one ever types them into their XHTML.
The browser goes through and adds all your <a> elements to the right pseudoclasses.
If  a link’s been visited, no problem; it goes into the “visited” class.
Is the user hovering over a link?  No problem, the browser throws it in the “hover” class.
Oh, now the user isn’t hovering?  The browser yanks it out of  the “hover” class.
So there are all these classes out there that the browser is adding and removing elements from behind the scenes.
Pseudo-class:  That’s right, and it’s damned important to know about, otherwise how would you give your links style that adapted to what state the link was in?
Some browsers already support pseudoclasses like active and hover on other types of elements.
For instance, the pseudo-class :first-child is assigned to the first child of any element, like the first paragraph in a <blockquote>
But be careful on everything other than :link, :visited, and :hover because browser support isn’t fully there yet.
Head First:  Well, I’ve certainly learned something in this interview.
Who knew that song was actually called “Sussudio”?! Thanks for being here Pseudo-class.
You’ve probably just learned the most important thing in this book: pseudo-classes.
Why? No, no, not because it allows you to style elements based on various “classes” your browser decides they belong to, like :link or :firstchild.
And, no, not because they give you really powerful ways to style elements based on things that happen while your visitors are using your page, like :hover.
It’s because the next time you’re in that design meeting and you start talking about pseudo-classes with a real understanding, you’re going to move to the head of  the class.
You’ve already added some pseudo-class rules to your “lounge.css” and they had a dramatic impact on the look of  the links, but they’re probably not quite right for the lounge.
When the user is hovering over the link, we’re changing the background to red.
This makes the link look highlighted when you pass the mouse over it.
Open up your “lounge.css” and rework your a:link, a:visited, and a:hover rules to use the new descendant selector and the new style definitions.
Your job is to give the “detailed directions” link in the lounge some style.
Just like the elixirs link, we want all unvisited links to be aquamarine, and all visited links to be gray.
However, we don’t want the other links in the lounge to have any hover style...
So, how would you do it?  Fill in the blanks to give the “detailed directions” link, and any other links you might add to the lounge later, this style.
Check your answer in the back of the chapter and then make the changes in your lounge files.
When you reload you should see some new style in the elixirs section.
Keep in mind, to see the unvisited links you may have to clear your browser’s history, otherwise the browser will know you’ve visited these links before.
Now we’ve got green unvisited links, gray visited links, and a very cool red highlight when you hover over the link.
Isn’t it about time we talk about the “cascade”? Well, well, we’re quite far into this book (473 pages to be exact) and we still haven’t told you what the “Cascade” in Cascading Style Sheets is all about.
Truth be told, you have to know a lot about CSS to fully understand the cascade.
But guess what, you’re almost there, so wait no more.
Here’s just one last piece of  information you need to understand the cascade.
You already know about using multiple style sheets to either better organize your styles or to support different types of  devices.
But there are actually some other style sheets hanging around when your users visit your pages.
First, there are all the style sheets you’ve written for your page.
But some browsers also allow users to create their own styles for XHTML elements.
If your style sheet doesn’t define these styles, the user’s style sheet is used instead.
And finally, you already know that the browser itself maintains a set of default styles that are used if you don’t define the styles for an element.
These are also the styles that are used if you don’t have any author or reader style sheets.
Note that there is a way for a reader to actually override your styles.
To do that they put “!important” at the end of a property declaration.
When the browser needs to determine which style to apply to an element, it uses all these style sheets.
Priority is given first to the author’s styles (that is, your styles), then to the reader’s styles, and then finally to the browser’s default styles.
So, to review, as the page authors, we can use multiple.
And on top of all that we might have multiple selectors that apply to the same.
How do we figure out which styles an element gets?
The cascade is the way the browser decides, given a bunch of  styles in a bunch of  style sheets, which style is going to be used.
To answer that question we need to bring everything together – all the various style sheets hanging around, the rules, and the individual property declarations in those rules.
In the next two pages we’re going to step through the nitty gritty details of  how all this works.
The details involve a lot of sorting and various details of  determining which rules are the most specific with respect to an element.
But here’s the payoff: after going through the next two pages, you’ll be able to get to the bottom of  any styles that don’t seem to be applied in the way you expect, and further, you’re going to understand more about the cascade than 99% of  Web page developers out there (we’re not kidding)
The cascade For this exercise, you need to “be the browser”
Let’s say you’ve got an <h1> element on a page and you want to know the font-size property for it.
For this step you need ALL the styles sheets: the style sheets the Web page author has written, any style sheets that the reader has added to the mix, and the browser’s default styles.
Remember, you’re the browser now, so you have access to all this stuff.
We’re looking specifically for the font-size property, so look at all the declarations for font-size that have a selector which could possibly select the <h1> element.
Go through all the style sheets and pull out any rules that match <h1> and also have a font-size property.
Now that you’ve got all the matching rules together, sort them in the order of author, reader, browser.
In other words, if  you wrote them as the author of  the page, then they are more important than if  the reader wrote them.
And, in turn, the reader’s styles are more important than the browser’s default styles.
Step three: Remember we mentioned that the reader could put !important on their CSS properties, and if they do that, those properties come first when you sort.
Now sort all the declarations by how specific they are.
But there is a little recipe you can follow to calculate exactly how specific a selector is, and we’ll do that on the next page.
Finally, sort any conflicting rules in the order they appear in their individual style sheets.
Now you just need to take the list, and order any conflicting rules so that the ones appearing later (closer to the bottom) of  their respective style sheets are more important.
That way, if  you put a new rule in your style sheet, it can override any rules before it.
That’s it! The first rule in the sorted list is the winner, and its font-size property is the one to use.
Now let’s see how you determine how specific a selector is.
Welcome to the “What’s my specificity game” To calculate the specificity you start with a set of  three numbers, like this:
In the old days we used four numbers, but that was before XHTML...
Does the selector have any element names? One point for each.
Does the selector have any classes or pseudo-classes? One point each.
And then we just tally up various things from the selector, like this:
For instance, the selector “h1” has one element in it, so you get:
As another example, the selector “h1.blue” has one element and one class, so you’d get:
Sharpen your pencil Try your hand at calculating the specificity of these selectors using the rules above:
After you’ve tallied up all the ids, classes, and elements, the bigger the specificity number, the more specific the rule.
Neither have ids in their selectors, so they both get a.
Q: I can’t get the reader’s style sheet, so how can I ever figure out the way the cascade works?
A: You can’t, but look at it this way: if the reader overrides your styles, then that is really beyond your control.
So just make your pages look like you want them to using your styles.
If the reader chooses to override them, then they’ll get what they ask for (for better or for worse)
Putting it all together Woo hoo!  It’s time for an example.
Say you want to know the color property for this <h1> element:
Remember, you’re the browser, because you’re trying to figure out how to display this <h1> element.
Now take all your matches, and sort them by author, reader, browser.
To do that we need to first calculate each specificity score, and then reorder the rules.
Here are all the rules that could possibly match the <h1> element and that contain the color property.
Here we’ve just reordered the rules by author, then reader, and then browser.
The rule with the blueberry class moves to the top because it has the highest specificity.
Notice that we only sort within the author, reader, and browser categories.
We’re okay here, because we don’t have any conflicting rules at this point.
The blueberry, with a score of 11, is the clear winner.
If there had been two rules with a score of 011, then the rule appearing latest would be the winner.
Finally, sort any conflicting rules in the order that they appear in their individual style sheets.
Q: So, one more time: I get that the lower in the CSS file the higher the precedence, but how does having multiple links to style sheets in my XHTML work?
A: It’s always top to bottom, whether it is in the same CSS file or not.
Just pretend that you inserted the CSS all together right into your file in the order the files are linked.
Q: So when you sort for specificity, you don’t re-sort everything?
Think of each time you sort as refining what you’ve done before.
Then, within each of those sortings, you sort for specificity.
And then, for any elements that have the same specificity, you sort again based on the ordering in the style sheets.
But there are cases where people with visual impairments do, and of course you’ve always got the crowd that just has to tinker with everything.
But, since each reader is controlling only how they see things, it really shouldn’t factor into your designs.
Q: How much of this do I really need to remember?
A: You’re going to develop some intuition for how all these style sheets fit together, and on a day to day basis that intuition will get you a long way.
Every once in a while, though, you’ll see a style popping up in your pages that just boggles your mind, and that’s when you fall back on your training.
You’ll be able to work through the cascade and before you know it, you’ll know exactly what’s happening in your page.
After sweating through the first choice of elements, the sorting, more sorting, and being judged on specificity, the “h1.blueberry” rule has risen to the top.
So the color property in the <h1> element will be blue.
If  you don’t find a match for the property in any rules in the cascade, then you try to use inheritance.
Remember that not all properties are inherited, like border properties for instance.
But for the properties that are inherited (like color, font-family, line-height, and so on), the browser looks at the ancestors of  the element, starting with its parent, and tries to find a value for the property.
Then the only thing left to do is fall back on the default values that are set in the browser’s style sheets, and all browsers should have default styles for every element.
So, what happens if, after all this, I still don’t.
Hey, but what if the property isn’t inherited or I can’t find a value in the ancestor’s rules? Then what?
The name “cascade” was chosen because of  the way that styles coming from multiple style sheets can all “cascade” down into the page, with the most specific styling being applied to each element.
If  that doesn’t clear things right up for you about why it’s called cascade, don’t feel bad.
This is a special brain power; so special that we’re going to let you think about it between chapters.
Save your file, and reload the page in your browser.
Move the entire elixirs <div> section to the top of  the file so it’s just below the paragraph that contains the lounge logo.
STOP! Do this exercise before going on to the next chapter!
Also label the elements in the graph below that are selected.
We select any <h3> descendant of an element with the id elixirs.
Your job was to figure out the width of an entire box.
So now that you understand widths, what’s the total width of the elixirs box? To start with, we know the content area is 200 pixels.
We’ve also set some left and right padding that affects the width, as well as a border that’s set to “thin”
Just assume a thin border is 1 pixel thick, like it is on most browsers.
And what about margins? We set a left margin, but no right margin, so the right margin is 0 pixels by default.
Your job was to figure out the total width of the elixirs <div>
It’s time to put all your new knowledge to work.
You’ll notice at the bottom of the lounge there’s a small section with copyright information that acts as a footer for the page.
Add a <div> to make this into its own logical section.
And let’s add some top margin to give the footer a little breathing room.
Your job was to finish adding the <span> elements to the rest of the music recommendations and test your page.
Sharpen your pencil Try your hand at caclulating the specificity of these selectors using the cascade rules.
Sharpen your pencil Your job is to give the “detailed directions” link in the lounge some style.
Just like the elixirs link, we want all unvisited links to be aquamarine, and all visited links to be gray.
However, we don’t want the other links in the lounge to have any hover style...
So, how would you do it?  Fill in the blanks to give the “detailed directions” link, and any other links you might add to the lounge later, this style.
We’re not going to let those XHTML elements just sit there anymore – it’s about time they get.
No, we’re not just talking about more background and font colors, we’re.
You can bet all my divs and spans are in the right place.
If  you didn’t do the Super Brain Power at the end of the last chapter, then march right back there and do it.
Okay, now that we have that out of  the way, at the end of  the last chapter, we left you with a bit of  a cliffhanger.
We asked you to move the elixirs <div> up under the logo, and then add one little property to the elixirs rule in your CSS, like this:
And, wow, what a difference one property can make! All of  a sudden the page has gone from a fairly ordinary-looking Web page to a great-looking Web page with two columns.
So what’s the magic? How did this seemingly innocent little property produce such big effects? And, can we use this property to do even more interesting things with our pages? Well, of  course, this is Head First, after all.
But first, you’re going to need to learn how a browser lays out elements on a page.
Once you know that, we can talk about all kinds of  ways you can alter how it does that layout, and also how you can start to position your elements on the page.
Here’s the good news: you already know all about block elements and inline elements, and you even know about the box model.
These are the real foundations of  how the browser puts a page together.
Now all you need to know is exactly how the browser takes all the elements in a page, and decides where they go.
The Flow is what gives a CSS master his power.
Flow is what the browser uses to lay out a page of XHTML elements.
The browser starts at the top of  any XHTML file and follows the flow of  elements from top to bottom, displaying each element it encounters.
And, just considering the block elements for a moment, it puts a linebreak between each one.
So the first element in a file is displayed first, then a linebreak, followed by the second element, then a linebreak, and so on, from the top of  your file to the bottom.
Each block element is taken in the order it appears in the markup, and placed on the page.
Notice that elements take up the full width of the page.
Open your “lounge.html” file and locate all the block elements.
Flow each one on to the page to the left.
Just concentrate on the block elements nested directly inside the body element.
You can also ignore the “float” property in your CSS because you.
Here are all the block elements you’ll need to complete the job.
What about inline elements? So you know that block elements flow top to bottom, with a linebreak in between each element.
Inline elements are flowed next to each other, horizontally, from top left to bottom right.
If we take the inline content of this <p> element and flow it onto the page, we start at the top left.
The inline elements are laid next to one another horizontally, as long as there is room on the right to place them.
Here, there’s room to fit all the inline elements horizontally.
Notice that text is a special case of an inline element.
The browser breaks it into inline elements that are the right size to fit the space.So what if we make the browser w.
Now the content has been flowed left to right until there’s no more room, and then the content is placed on the next line.
Notice the browser had to break the text up a little differently to make it fit nicely.
And if we make the content area even thinner, look what happens.
The browser uses as many lines as necessary to flow the content into the space.
Now that you know how block and inline elements are flowed, let’s put them together.
We’ll use a typical page with headings, paragraphs, and a few inline elements like spans, some emphasis elements, and even images.
We’re starting with a browser window that’s been resized to a fairly wide width.
Each block element is flowed top to bottom as you’d expect, with a linebreak in between each.
And the inline elements are flowed from the top left to the bottom right of the element’s content area.
If the inline content of each block fits the width of the content area, then it’s placed there; otherwise, more vertical room is made for the content and it’s continued on the next line.
Here, we’ve resized the browser window, squeezing all the content into a smaller horizontal size.
Things flow the same way, although in some places, the inline elements take up more vertical lines to fit.
Now the block elements take up more vertical room because the inline content has to fit into a smaller horizontal space.
During your stay at the lounge, you’ll enjoy a smooth mixture of   ambient and mystic sounds, filling the lounge and adding an extra dimension to your dining experience.
The decor surrounds you with the relaxing sentiments of  sights from eras past.
And, don’t forget, the lounge offers free wireless access to the Internet, so bring your laptop.
Stop in to sample the eclectic offering of  elixirs, teas, and coffees, or, stay a bit longer and enjoy the multicultural culinary menu that combines a harmony of  taste, texture, and color with the best in fresh and healthy ingredients.
During your stay at the lounge, you’ll enjoy a smooth mixture of   ambient and mystic sounds, filling the lounge and adding an extra dimension to your dining experience.
The decor surrounds you with the relaxing sentiments of  sights from eras past.
And, don’t forget, the lounge offers free wireless access to the Internet, so bring your laptop.
Stop in to sample the eclectic offering of  elixirs, teas, and coffees, or, stay a bit longer and enjoy the multicultural culinary menu that combines a harmony of  taste, texture, and color with the best in fresh and healthy ingredients.
During your stay at the lounge, you’ll enjoy a smooth mixture of   ambient and mystic sounds, filling the lounge and adding an extra dimension to your dining experience.
The decor surrounds you with the relaxing sentiments of  sights from eras past.
And, don’t forget, the lounge offers free wireless access to the Internet, so bring your laptop.
Stop in to sample the eclectic offering of  elixirs, teas, and coffees, or, stay a bit longer and enjoy the multicultural culinary menu that combines a harmony of  taste, texture, and color with the best in fresh and healthy ingredients.
Let’s zoom in just a bit and look at one more aspect of  how the browser lays out block and inline elements.
It turns out that the browser treats margins differently depending on which type of  element is being placed on the page.
One more thing you should know about flow and boxes.
When the browser is placing two inline elements next to each other...
When the browser has the task of  placing two inline elements side by side, and those elements have margins, then the browser does what you might expect.
It creates enough space between the elements to account for both margins.
When the browser is placing two block elements on top of each other...
Images are inline elements, right? So, the browser uses both of their margins to calculate the space that goes between them.
When the browser places two block elements on top of  each other, it collapses their shared margins together.
The height of  the collapsed margin is the height of  the largest margin.
When the browser places two block elements on top of each other, it collapses their margins.
Their shared margin is the size of the larger of the two margins.
If one of the margins is bigger, then the margin becomes the larger of the two, even if one margin is zero.
A: They sure can, although you won’t find that you set the margins of inline elements often.
It is very common to not only set margins but also borders and padding on images.
And while we aren’t going to be setting any inline element margins in this chapter, we will be setting the border on one a little later.
Q: What if I have one element nested inside another and they both have margins? Can they collapse?
Here’s how to figure out when they will: whenever you have two vertical margins touching, they will collapse, even if one element is nested inside the other.
This is sometimes puzzling when you first see it happen, so put it in the back of your mind for when it occurs.
Q: So how exactly does text work as an inline element since its content is not an element?
A: Even if text is content, the browser needs to flow it onto the page, right? So the browser figures out how much text fits on a given line, and then treats that line of text as if it were an inline element.
As you’ve seen, if you resize the page, then all those blocks may change as the text is refit within the content area.
We’ve been through seven pages of “flow.” When are you going to explain that one little property we put.
It might be one little property, but the way it works is closely tied to how the browser flows elements and content onto the page.
But hey, you know that now, so we can explain float.
Here’s the short answer: the float property first takes an element and floats it as far left or right as it can (based on the value of float)
It then flows all the content below it around the element.
Of  course there’s a few more details, so let’s take a look...
How to float an element Let’s step through an example of  how you get an element to float, and then we’ll look at what it does to the flow of  the page when you do.
Now give it a width A requirement for any floating element is that it have a width.
Now the paragraph is 200 pixels wide, and the inline content contained in it has adjusted to that width.
Keep in mind, the paragraph is a block element, so no elements are going to move up beside it because all block elements have linebreaks before and after them.
First, give it an identity Let’s take one of  these paragraphs and give it an id.
We’d like to call it the “amazing floating paragraph”, but we’ll just call it.
The float property can be set to either left or right.
First the browser flows the elements on the page as usual, starting at the top of the file and moving towards the bottom.
Now that we’ve floated the “amazing” paragraph, let’s step through how the browser flows it and everything else on the page.
When the browser encounters the floated element, it places it all the way to the right.
It also removes the paragraph from the flow, like it’s floating on the page.
Because the floated paragraph has been removed from the normal flow, the block elements are filled in, like the paragraph isn’t even there.
But when the inline elements are positioned, they respect the boundaries of the floated element.
Notice that the block elements are positioned under the floated element.
That’s because the floated element is no longer part of the normal flow.
However, when the inline elements are flowed within the block elements, they flow around the borders of the floating element.
Behind the scenes at the lounge Now you know all about flow and how floated elements are placed on the page.
Let’s look back at the lounge and see how this all fits together.
Moving the <div> allowed us to float it to the right and then have the entire page flow around it.
If we had left the elixirs <div> below the music recommendations, then the elixirs would have been floated right after most of the page had been placed.
All these elements follow the elixirs in the XHTML, so they are flowed around it.
Also notice that the text wraps around the bottom of the elixirs, because the text is contained in a block element that is the width of the page.
If yours doesn’t wrap, try narrowing your browser window until the text wraps underneath the elixirs.
Remember that the elixirs <div> is floating on top of the page.
All the other elements are underneath it, but the inline content respects the elixirs’ boundaries when they are flowing into the page.
Move the elixirs <div> back to its original place below the music recommendations, then save and reload the page.
Where does the element float now? Check your answer in the back and then put your elixirs <div> back underneath the header.
Sure, you’ve done a great job of  creating the typical top to bottom page, but now that you know flow, you should be able to give Starbuzz Coffee a slick new look that is more user-friendly than the last design.
Your job is going to be to provide all the layout.
Don’t worry, we’ll bring you up to speed on everything we’ve done so far – it’s nothing you haven’t seen before.
The new Starbuzz Let’s take a quick look at what we’ve got so far, starting with the page as it looks now.
Then we’ll take a peek at the markup and the CSS that’s styling it.
We’ve got a header now with a new spiffy Starbuzz logo and the.
We’ve got four sections: the header, a main content section, a section advertising something new called the “Bean Machine,” and a footer.
Each section is a <div> that can be styled independently.
It looks like we’ve got one background color for the page as a whole, and then each <div> is using an image as a background.
This links to a new area of Starbuzz Coffee where you can order your coffee beans online.
This link doesn’t work just yet because you’re going to build the Bean Machine in an upcoming chapter.
It doesn’t use a background image, just a background color.
Notice that we’ve styled the links in an interesting way, with dotted underlines...
A look at the markup Now let’s take a look at the new Starbuzz markup.
We’ve taken each of  the logical sections and placed it into a <div>, each with its own id.
So, take a quick look and get familiar with the structure, and then turn the page to check out the CSS style.
How does it work?  Just click on the Bean Machine link, enter your order, and behind the scenes, your coffee is roasted, ground (if you want), packaged, and shipped to your door.
This is more of the main content area continued over here.
And finally, we have the <div> that makes up the footer of the page.
And a look at the style Let’s get a good look at the CSS that styles the new Starbuzz page.
While the new Starbuzz page may look a little advanced, you’ll see it’s all just simple CSS that you already know.
This makes sure there’s no extra room around the edges of the page.
In each, we’re tweaking the font size, adding padding and margins and also - in the case of main and the sidebar - specifying a background image.
Next we set up the fonts and colors on the headings.
And then some colors on the class called slogan, which is used in the sidebar <div>
And likewise with the beanheading class, which is used there as well.
And for the last two rules in the Starbuzz CSS we use the a:link and a:visited pseudo-classes to style the links.
Notice that we’re getting a nice dotted underline effect on the links by using a dotted bottom border instead of an underline.
This is a great example of using the border property on an inline element.We’re setting the border-bottom as a shortcut.
Let’s take Starbuzz to the next level Here’s the goal: to turn Starbuzz Coffee into the site on the right.
To do that, we need to move the Bean Machine sidebar over to the right so we’ve got a nice two-column page.
Well, you’ve done this once already with the lounge, right? So, based on that, here’s what you need to do:
Give the element you’re going to float a unique name using an id.
Make sure the element’s XHTML is just below the element you want it to float under; in this case, the Starbuzz header.
In a few simple steps, we should have the Starbuzz CEO sending a few Chai Teas over on the house.
We’ve got a nice two-column look here, with discrete columns.
Move the sidebar just below the header It’s a fact of  life that when you float an element, you need to move the XHTML for the element directly below the element that you want it to float below.
In this case, the sidebar needs to come under the header.
Now the sidebar should be on top of the main content area.
Set the width of the sidebar and float it Let’s set the width of  the sidebar to 280 pixels.
And to float the sidebar, add a float property, like this:
We’re using an id selector to select the element with the id “sidebar”, which we know is the <div> for the sidebar.
We’re setting the width of the content area to 280 pixels.
Remember, this moves the sidebar as far right as possible below the header, and it also removes the sidebar from the normal flow.
Everything else below the sidebar in the XHTML is going to move up and wrap around it.
What we do is set a width on the main content <div> and float it to the left, and then let the rest of  the page flow around it.
That way we get to keep the ordering of  the page and we also get two columns.
The only problem is, this doesn’t result in a very nice page.
Here’s why: remember, you have to set a width on the element that you are going to float, and if  you set a width on the content area, then its width is going to remain fixed while the rest of  the page resizes along with the width of  the browser.
Typically, sidebars are designed to be narrower than the main content area, and often look terrible when they expand.
So, in most designs, you want the main content area to expand, not the sidebar.
But we are going to look at a way to use this idea that works great.
We’ll also talk a little more about why you’d even care what order your sections are in.
That’s actually a great idea, but there are a couple of issues.
In the future, why don’t we float the main content to the left, rather than the sidebar to the right.
Since the main content is already at the top, we.
Test driving Starbuzz Make sure you add the new sidebar properties to the.
Hmm, this looks pretty good, but if you flip back three pages you’ll see we’re not quite where we want to be.
The main content and the sidebar are on the left and the right, but they don’t really look like two columns yet.
Look at how the background images of the two sections just run together.
And the text wraps around and under the sidebar, which doesn’t make this look like two columns either.
Hmm, that is actually how the lounge worked too - maybe we should have expected that.
Fixing the two-column problem Are you sitting there waiting for us to come riding in on a white horse with the magic property that solves all this? Well, that’s not going to happen.
This is the point in CSS where page layout becomes more an art – or at least a set of  techniques – than a set of  properties that can solve every problem.
So, what we’re going to do is solve this using a common technique that is widely used.
It’s not perfect, as you’ll see, but in most cases it gives you good results.
And after this, you’re going to see a few other ways to approach the same two-column problem.
What’s important here is that you understand the techniques, and why they work, so you can apply them to your own problems, and even adapt them where necessary.
The first thing to remember is that the sidebar is floating on the page.
The main content area extends all the way under it.
So, what if we give the main content area a right margin that is at least as big as the sidebar? Then its content will extend almost to the sidebar, but not all the way.
Then we’ll have separation between the two, and since margins are transparent and don’t show the background image, the background color of the page itself should show through.
And that’s what we’re looking for (flip back a few pages and you’ll see)
What we want to do is set a right margin on the main content section so that it’s the same width as the sidebar.
But how big is the sidebar? Well, we hope you aren’t already rusty since the last chapter.
Here’s all the information you need to compute the width of the sidebar.
We’re changing the right margin to 330 pixels to match the size of the sidebar.
Test drive As usual, save your “starbuzz.css” file and then reload “index.html”
You should now see a nice gutter between the two columns.
Let’s think through how this is working one more time.
The sidebar is floating right, so it’s been moved as far to the right as possible, and the whole <div> has been removed from the normal flow and is floating on top of  the page.
Now the main content <div> is still taking up the width of  the browser (because that’s what block elements do), but we’ve given it a margin as wide as the sidebar to reduce the width of  the content area.
You know the box of  the main <div> still goes under the sidebar, but we won’t tell anyone if  you don’t.
Uh oh, we have another problem As you were test driving the page you might have noticed a little problem.
If  you resize the browser to a wide position, the footer comes up underneath the sidebar.
Why? Well, remember, the sidebar is not in the flow, so the footer pretty much ignores it, and when the content area is too short, the footer moves right up.
We could use the same margin trick on the footer, but then the footer would only be under the content area, not the whole page.
By expanding the margin of the main <div>, we’re creating the illusion of a two column layout, complete with a gutter in between.
When you resize your browser to a wide position, the footer and the sidebar start to overlap.
The problem with setting a width on both the content area and the sidebar is that this doesn’t allow the page to expand and contract correctly because both have fixed widths.
Check the screenshots below that show how it works (or rather, doesn’t work)
You’re thinking in the right ways, and a little later in the chapter we’re going to come back to this idea when we talk about “liquid versus fixed” layouts.
There are ways to make your idea work if  we lock a few other things down first.
And when the browser window is made small, the two start to overlap.
Back to clearing up the overlap problem Guess what, this time we are going to ride in on a white horse with a solution, but don’t get used to it.
The solution is called the clear property, and here’s how it works...
This happens because the sidebar has been pulled out of the flow.
So, the browser just lays out the main and footer <div>s like it normally would, ignoring the sidebar (although remember that when the browser flows inline elements, it will respect the borders of the sidebar and wrap inline elements around it)
We can solve this problem with the CSS clear property.
You can set this property on an element to request that as the element is being flowed onto the page, no floating content is allowed to be on the left, right, or both sides of  the element.
Here we’re adding a property to the footer rule, which says that no floating content is allowed on the right of the footer.
Now when the browser places the elements on the page, it looks to see if there is a floating element to the right side of  the footer, and if  there is, it moves the footer down until there is nothing on its right.
Now, no matter how wide you open the browser, the footer will always be below the sidebar.
Now the footer is placed below the sidebar so that there are no floating elements to its right.
Q: So why isn’t there just a twocolumn property in CSS? Why is it so hard to get this stuff to work correctly?
A: Yes, we have a winner!  You’ve asked the $64,000 question.
But, more seriously, while it seems like CSS should have some way of specifying “give me two columns, dammit!”, you have to keep in mind the whole purpose of XHTML and CSS.
So, it’s really no surprise that CSS isn’t the end-all-be-all of document presentation, and, if that’s what we wanted, we’d probably all just be using Microsoft Word.
But CSS does give you some nice tools to create layouts that are attractive and usable, and does a good job of gracefully degrading in less than optimal viewing conditions.
Q: Can I float to the center? A: No, CSS only allows you to float an element to the left or right.
But if you think about it, if you were to float to the center, then the inline content under the floated element would have to be flowed around both sides of your element.
While that might be doable, it probably wouldn’t be very readable or attractive.
The footer will always be below the sidebar, no matter how narrow or wide the browser.
Go ahead and add the clear property to your “starbuzz.css” file in the footer rule, and then reload “index.html”
You’ll see that when the screen is wide, the footer now stays below the sidebar.
There are other improvements we could think about making to this page, like having each column come down to meet the footer.
As it is now, there is a gap either between the main content and the footer (if  the browser window is set wide), or the sidebar and the footer (if  the browser is set to a normal width)
Unfortunately, it’s not easy to fix this, and we’re not going to try to do that in this chapter.
Layout in CSS is an art, and no layout solution is perfect.
When done right, layout with CSS gives you a better look for your Web page, while still allowing the page to look reasonably good in browsers that don’t have as much (or any) support for CSS.
We will take a look at a few more ways to layout your pages using CSS beyond using float.
There are many ways to do things in CSS, each with their own strengths and weaknesses.
The only thing I don’t like about this design is that when I view the web page on my PDA, it puts the sidebar.
This is one of  the disadvantages of  the way we’ve designed this page – because we need the sidebar to be located just under the header and before the main content, anyone using a browser with limited capabilities (PDAs, mobile phones, screen readers, and so on) will see the page in the order it is written, with the sidebar first.
However, most people would rather see your main content before any kind of  sidebar or navigation.
So, let’s look at another way of  doing this, which goes back to your idea of  using float “left” on the main content.
While we’re exploring that, we’ll talk about liquid versus frozen designs as well.
That happens because of the way we ordered the <div>s.
A: No, they don’t, and it’s pretty easy to see why.
Unlike block elements that are flowed on the page, floated elements are just, well, floating.
In other words, the margins of floated elements aren’t actually touching the margins of the elements in the normal flow, so they can’t be collapsed.
But this raises a good point, and identifies a common error in layouts.
If you have a main content area and a sidebar, it is common to set a top margin on each.
Then, if you float the sidebar, it still has a margin, and that.
So you can easily end up having different margins on the sidebar and on the main content if you don’t remember that floated elements don’t collapse margins.
The best example – and a common one – is to float images.
Give it a try – float an image left or right in a paragraph and you’ll see your text flow around it.
Don’t forget to add padding to give the image a little room, and possibly a border.
You can also float any other inline element you like, but it’s not commonly done.
Q: Is it correct to think about floated elements as elements that are ignored by block elements, while inline elements know they are there?
A: Yes, that’s a good way of thinking about it.
Inline content nested inside a block element always flows around a floated element, observing the boundaries of the floated element, while block elements are flowed onto the page as normal.
The exception is when you set the clear property on a block element, which causes a block element to move down until there are no floating elements next to it on the right, left or both sides, depending on the value of clear.
Now you can see the real order things will be seen in (or heard from a screen reader)
Just make sure you put it back when you’re done (after all, this is a chapter on CSS)
Righty tighty, lefty loosey Let’s get the Starbuzz page switched over so that the main content is floating left.
We’ll check out how that works, and then move on to make it really work.
You’re going to see the mnemonic righty tighty, lefty loosey holds true in the CSS world too...
It is still very readable, although the Bean Machine does come before the main content, which probably isn’t what we want.
Step One: start with the sidebar We’re basically swapping the roles of  the sidebar and the main content area.
The content area is going to have a fixed width and float, while the sidebar is going to wrap around the content.
We’re also going to use the same margin technique to keep the two visually separate.
After you’ve done that, here are the changes you need to make to the sidebar CSS rule:
We’re setting a fixed width on the main content <div>, so delete the sidebar width property along with the float.
Because the sidebar is now going to flow under the main content, we need to move the large margin to the sidebar.
The total width of the main content area is 470 pixels.
Go ahead and compute that yourself in all that free time you have.
Compute it in the same way as you did for the sidebar.
You should know that we’re going to set the width of the main content area to 420 pixels.
Step Two: take care of the main content Now we need to float the main <div>
We need to set an explicit width because we’re going to float this element.
Step Three: take care of the footer Now, we just need to adjust the footer to clear everything to the left, rather than the right.
Change the clear property to have a value of left, rather than right.
That way the footer will stay clear of the main content area.
We’re going to float the main <div> to the left.
A quick test drive We’ve already said there might be a few problems with this method of  floating the content to the left.
Do a quick test drive before you move on just to see how this is all working.
Go ahead and make the changes to your “starbuzz.css” file and then reload “index.html” in your browser.
Get a good feel for how the page performs when it is resized to narrow, normal, and wide.
Actually, this looks pretty good, and we have the <div>s in the right order now.
But it’s not great that the sidebar expands; it looks a lot better fixed.
Sidebars are often used for navigation and they don’t look very good when expanded.
When we float the sidebar <div> right, then the design stays nice and tight, allowing the content to expand, but if we float the main content to the left, the design feels too loose, allowing the sidebar to expand.
Is there a way we can have the best of both worlds: have the sidebar at a fixed width, but the main <div> still first in the XHTML? What design tradeoffs could we make to get there?
Liquid and Frozen Designs All the designs we’ve been playing with so far are called liquid layouts because they expand to fill whatever width we resize the browser to.
These layouts are useful because, by expanding, they fill the space available and allow users to make good use of  their screen space.
Sometimes, however, it is more important to have your layout locked down so that when a user resizes the screen, your design still looks as it should.
There are a couple of  layouts that work like this, but let’s start with frozen layouts.
Frozen layouts lock the elements down, frozen to the page, so they can’t move at all, and so we avoid a lot of  issues that are caused by the window expanding.
Going from your current page to a frozen page only requires one addition to your XHTML, and one new rule in your CSS.
We’re going to set the width of “ allcontent” to.
While we’re at it, since this is the first time we’re styling this <div>, let’s add some padding and give it its own background color.
You’ll see this helps to tie the whole page together.
In your XHTML you’re going to add a new <div> element with the id “allcontent”
Like its name suggests, this <div> is going to go around all the content in your page.
What’s the state between liquid and frozen? Jello, of course!
The frozen layout has some benefits, but it also just plain looks bad when you widen the browser.
This design is between frozen and liquid, and it has a name to match:
Jello layouts lock down the width of  the content area in the page, but center it in the browser.
It’s actually easier to change the layout to a jello layout and let you play with it, than to explain how it behaves, so let’s just do it:
Rather than having fixed left and right margins on the “allcontent” <div>, we’re setting the margins to “auto”
If you remember, when we talked about giving a content area a width of “auto”, the browser expanded the content area as much as it needed to.
With “auto” margins, the browser figures out what the correct margins are, but also makes sure the left and right margins are the same, so that the content is centered.
Go ahead and add this rule to the bottom of “starbuzz.css”, and then reload “index.html”
Now you can see why we call it a frozen layout.
This certainly solves the problem of the sidebar expanding and it looks pretty nice.
It is a little strange when the browser is very wide, though, because of all the empty space on the right side.
But, we’re not done yet; we’ve got a little room for improvement.
With CSS, there are typically lots of  ways to approach a layout, each with their own strengths and weaknesses.
Actually, we’re just about to look at another common technique for creating a two-column layout that keeps the content in the correct order, and avoids some of  the problems of  the liquid layouts.
With this new technique we’re not going to float elements at all.
Instead we’re going to use a feature of  CSS that allows you to precisely position elements on the page.
You can also use absolute positioning for some nice effects beyond just multi-column layouts, and we’ll look at an example of  that, too.
To do all this, we’re going to step back to the original XHTML and CSS we started with in the beginning of  this chapter.
Be sure and take another look at these files so you remember what they originally looked like.
Recall that we’ve got a bunch of  <div>s: one for the header, one for main, one for the footer, and also a sidebar.
Also remember that in the original XHTML, the sidebar <div> is below the main content area, where we’d optimally like to have it.
Test driving with a tank of jello Add the two margin properties to your “starbuzz.css” file, and then reload the page.
So if we want our content in the correct order, we either have to live with an expanding.
Let’s start by getting an idea of  what absolute positioning does, and how it works.
Here’s a little CSS to position the sidebar <div> with absolute positioning.
Don’t type this in just yet; right now we just want you to get a feel for how this works:
The first thing we do is use the position property to specify that the element will be positioned absolutely.
Because sidebar is now absolutely positioned, it is removed from the flow and positioned according to any top, left, right, or bottom properties that are specified.
When an element is absolutely positioned, the first thing the browser does is remove it completely from the flow.
The browser then places the element in the position indicated by the top and right properties (you can use bottom and left as well)
We’re also setting a width on the <div>, just like we did when it was floated.
The sidebar is positioned 200 pixels from the right of the page.
Because the sidebar is out of the flow, the other elements don’t even know it is there, and they ignore it totally.
Elements that are in the flow don’t even wrap their inline content around an absolutely positioned element.
They are totally oblivious to it being on the page.
And, the sidebar is positioned 100 pixels from the top of the page.
Another example of absolute positioning Let’s look at another example.
It’s also a bit wider than the sidebar, at 400 pixels.
Just like with the sidebar, we’ve placed the annoying ad <div> at a precise position on the page.
Any elements underneath that are in the normal flow of  the page don’t have a clue about the absolutely positioned elements layered overhead.
This is a little different from floating an element, because elements that were in the flow adjusted their inline content to  respect the boundaries of  the floated element.
But absolutely positioned elements have no effect whatsoever on the other elements.
Another interesting thing about absolutely positioned elements is that you can layer them on top of  each other.
But if  you’ve got a few absolutely positioned elements at the same position in a page, how do you know the layering? In other words, who’s on top?
Each positioned element has a property called a z-index that specifies its placement.
You’ll see how to specify a z-index in just a few pages.
The header, main, and footer <div>s are all in the flow, and flat on the page.
The sidebar and annoyingad <div>s are layered on the page, with the annoyingad having a greater z-index than the sidebar, so it’s on top.
Q: What is the position property set to by default?
With static positioning the element is placed in the normal document flow and isn’t positioned by you – the browser decides where it goes.
You can use the float property to take an element out of the flow, and you can say it should float left or right, but the browser is still ultimately deciding where it goes.
Compare this to the “absolute” value for the position property.
With absolute positioning, you’re telling the browser exactly where to position elements.
Q: Can I only position <div>s? A: You can absolutely position any element, block or inline.
Just remember that when an element is absolutely positioned, it is removed from the normal flow of the page.
Q: Are there position property values other than static and absolute?
A: There are actually four: static, absolute, fixed, and relative.
Fixed positioning places an element in a location that is relative to the browser window (rather than the page), so fixed elements never move.
You’ll see an example of fixed positioning in a few pages.
Relative positioning takes an element and flows it on the page just like normal, but then offsets it before displaying it on the page.
Relative positioning is commonly used for more advanced positioning and special effects.
Q: Do I have to specify a width for an absolutely positioned element just like the floated elements?
A: No, you don’t have to specify a width for absolutely positioned elements.
But if you don’t, by default, the block element will take up the entire width of the browser, minus any offset you specify from the left or right.
This might be exactly what you want, or it might not.
So set the value of the width property if you want to change this default behavior.
A: No – another common way to position elements is using percentages.
If you use percentages, the positions of your elements may appear to change as you change the width of your browser.
If you don’t need specific widths for your elements or margins, then you can use percentages to make both your main content area and your sidebars flexible in size.
You’ll see this done a lot in two- and threecolumn layouts.
Q: Do I have to know how to use z-indexes to use absolute positioning?
A: No, z-indexes tend to be used most often for various advanced uses of CSS, especially when Web page scripting is involved, so they’re a little beyond the scope of this book.
But they are a part of how absolute positioning works, so it’s good to know about z-index (and in fact, you’ll see a case where knowing about z-index is important in just a bit)
We’re now going to create a two column Starbuzz page using techniques similar to those we used with the float version of  the page; however, this time we’ll use absolute positioning.
First we’re going to make the sidebar <div> absolutely positioned.
In fact, we’re going to position it in exactly the same place that we floated it to before.
Next, we’re going to give the main content another big margin so that the sidebar can sit on top of  the margin space.
Finally, we’re going to give this a good testing and see how it compares to the float version.
Our XHTML is all ready to go, and the sidebar <div> is right where we want it (below the important main content)
All we need to do is make a few CSS changes and we’ll have a sidebar that is absolutely positioned.
Open your “starbuzz.css” file and let’s make a few changes to the sidebar:
We also want the sidebar to have a width, so let’s make it the same as the float version: 280 pixels.
You’ll see where the “128” came from in a sec...
You can work out of the “absolute” folder, or copy the files “index.html” and “starbuzz.css” into the “starbuzz” folder and work from there, like we did.
We’re just adding a margin like we did with the float version.
We’re going to give the sidebar some space to be positioned over by giving the main <div> a big margin.
This is really the same technique we used with the float.
The only difference is the way the sidebar <div> is being placed over the margin.
Okay, all you need to do is make that change to your margin, and then save.
But, before we take this for a test drive, let’s think about how this is going to work with the absolutely positioned sidebar.
The sidebar needs to be 128 pixels from the top because that’s exactly how much room the header takes up, including margins.
We’re positioning the sidebar to be 128 pixels from the top, and up against the right side of the page.
Keep in mind, the sidebar has 10 pixels of margin on the right, so the background color will show through that like before.
The main <div> is flowed just below the header, so it will align with the top of the sidebar.
Also, it has a right margin that is the same size as the sidebar, so all its inline content will be to the left of the sidebar.
Remember that the flowed elements don’t know about the absolutely positioned elements at all, so the inline content in the flowed elements doesn’t wrap around the absolutely positioned elements.
You might want to think about what happens to the footer.
Because flowed elements don’t know about absolute elements, we can’t use “clear” anymore.
Time for the absolute test drive Make sure you’ve saved the new CSS and then reload.
Wow, this looks amazingly like the float version; however, you know that the sidebar is being positioned absolutely.
As you resize the browser, the sidebar always sits 128 pixels from the top, and sticks to the right of the page.
The main content area has a margin that is exactly the width of the sidebar, and the sidebar sits on top of that space.
And the sidebar has a 10 pixel right margin, so it has spacing between it and the edge of the page.
And we’ve still got a nice gutter between the two columns.
But we are now back to having a problem with the footer.
When the browser gets wide enough, the absolutely positioned sidebar comes down over the top of  the footer.
Unfortunately, we can’t fall back on the clear property this time, because flowed elements ignore the presence of  absolutely positioned elements.
When the browser is wide, the vertical space of the main content area is reduced, and the sidebar can come down over the footer.
What can we do? Or, can’t you just tell me how to do a two-column layout that doesn’t break? Okay, you know that one of  the big motivations behind CSS was to separate structure from style.
Right? And CSS does a great job of  allowing you to create XHTML documents that can be used in a lot of  different browsers (even screen readers or text-only browsers) without having unnecessary style embedded into the XHTML.
But this also means that CSS is not meant to be a full-blown page layout language.
Rather, it gives you some interesting tools that you can use to arrange and position elements in XHTML documents.
Depending on the environment the page is viewed in, your mileage may vary in terms of  what the end result is.
If  you resize your browser to be ultra wide, well, then the layout may break.
So where does this leave you? In this chapter we’ve looked at several techniques for creating two-column layouts.
None of  them were perfect and, in fact, they all had various tradeoffs.
The Floating Layout Ahh, how cute, remember your first two-column Starbuzz page? You used a float property along with a clear on the footer and life was good.
The only problem is that this solution often results in putting your content in an order your users might not appreciate if  they are using another kind of  browser, like a screen reader that reads the content aloud to the user.
The Jello Layout First we created a frozen layout by wrapping a fixed size <div> around all the content in the page, and then we made it jello by allowing the margins to expand with the “auto” property value.
This makes for a great looking layout, and lots of  pages on the Web use this design.
The disadvantage here is that the content doesn’t expand to fill the entire browser window (which many people don’t find to be a disadvantage at all)
The Absolute Layout Finally, we were on a mission to have a liquid layout and yet have the content ordered like we wanted.
So, we used absolute positioning and actually achieved our goal.
But, there was a downside: since you can’t use the clear property with absolute elements, the footer creeps up under the sidebar when the browser is wide.
If  one of  these designs meets your needs, great, go with it.
For instance, lots of  people are very happy with jello layouts.
But there is always more tweaking you can do to perfect your particular layout.
Can we fix the footer? Not really, but we can make a tradeoff.
Your design might be fine if  the footer only showed under the main content area.
If  that’s the case, then we can fix the footer problem.
This solution trades having the footer under just the main content for having a footer under the entire page, to keep it from creeping up under the sidebar.
One tradeoff you can make to fix the footer To try this solution, just give the footer the same right margin size as the main content area, like this:
If  you save this and reload your page, you’ll see that the footer is now under the main content area only, and never creeps up under the sidebar.
And, as we’ve said, doing CSS layout is a bit of  an art.
To do layout, you need to experiment, explore, and keep an eye on the layouts others are creating with CSS (you’ll find some references for good CSS hangouts at the end of  the chapter)
In terms of  whether you want your layout to be liquid or frozen or jello, that really is a matter of  deciding what works best for your pages.
For some pages, a fixed content area size with expandable margins works great, and in fact can be more readable on wide browsers.
For other uses, you might want to use as much of  the browser as you can.
Once you’ve decided, you still need to figure out which method you’re going to use to create your pages (float? absolute? some combination?)
You’ve already learned the basics, so now it is time to start exploring, as there are many other approaches out there, and new ones being created every day.
The techniques you’ve learned in this chapter are often used as the basis for more sophisticated designs.
You should know that, in general, using float is considered the most flexible solution for multi-column layouts.
Just keep in mind, you may have to be careful in the order of  your content, depending on the design.
So this is all great, but what am I supposed to do? Use a liquid or jello.
Can we get it on the page front and center? All our.
Well, we could just throw this as an image into any old paragraph on the page, but the CEO really wants this to be noticeable on the page.
What if  we could place the award on the page like this?
Not only does that look great, but it’s exactly what the CEO wants.
But how? Well, you know all about absolute positioning now, so why not position the image on the page using that? After all, by using absolute positioning you can place it anywhere on the page you want, and since it isn’t in the flow it won’t affect any other element on the page.
Seems like an easy addition to make to the page without disrupting what’s already there.
Start by adding a new <div>, just below the header (the CEO thinks this is pretty important, so it should be up high in the order of  content)
Add this CSS to your “starbuzz.css” file, save, and reload the Web page.
You’ll see the award image appear like magic, right where we want it.
Make sure you resize the browser to see how the award displays.
A small glitch Did you notice a small glitch when you were resizing the browser? Depending on your browser, you may have seen the sidebar <div> overlap the awards image.
What on earth is going on? Remember how each absolutely positioned element has a z-index that describes the stacking behavior of  the elements? Some browsers will give the award element a lower z-index than the sidebar <div> by default.
All you need to do to fix that is to specify the z-index for the award, and give it a number higher than the sidebar.
On some browsers the sidebar will overlap and occlude the awards image.
Let’s give the award <div> a really high number to make sure it is always on top.
Go ahead and add the z-index property to your “starbuzz.css” file.
When you save and reload, you’ll see that now the award <div> is on top of  the sidebar, and the overlap glitch is gone.
Tonight’s talk:  Float and Absolute discuss who’s more appropriate for layout.
Absolute, have you noticed lots of  people are going with me to do their layouts?
Are you sure?  I’m used on a lot of  pages too, you know.
Didn’t you see?  All you have to do is add one little float property to your CSS in the right place, and bam! You’ve got two columns.
Hmm, I seem to remember a width property and a margin property to get things just right...
My point is that, with me, you don’t have to go around counting pixels to figure out where your content’s going to go – you can just float it and leave the rest to me.
We had to move the entire sidebar to a different location in the XHTML to get the float to work the first time.
I don’t call that “leaving the rest to you.”  That’s a lot of  work.
At least with me, it doesn’t matter what order the content comes in; I’ll always do the right thing.
Well, what about that footer issue?  You’re always going to overlap things in weird ways, aren’t you?   If  readers aren’t careful, they’ll have big chunks of  their Web pages sitting right on top of other content.
But the important part, the inline content, flows around me, just like it should.
And with me, you can position elements anywhere you want.
None of  this right and left crap like with you.
You don’t give people that many options, really, if  you think about it.
I’m more flexible and I give people a great way to lay out their pages.
Really? There’s no way you could have done that cool thing with the award.
Admit it!  You’re actually not as flexible as I am.
Well, maybe I can’t do everything you can do, but I think I’m a lot easier for people doing basic layouts, which is mostly what people want.
I dunno, I heard you’re kind of  buggy in older.
I used to have that reputation, but most modern browsers are just fine with me now.
And, now that Web developers are figuring that out, they’re going with me, like I said at the beginning.
I don’t think you’ve seen the end of  me; I’ve.
But check out all the designs out there that use float.
Well, that’s not really the point, is it? Anyway, I’ve got a float to clear, gotta run.
You might be good for Web layouts, but you’re not exactly the state of  art in graphic design.
So far, when you’ve used the left, right, top, and bottom properties to specify the position, these numbers have always been with respect to the edge of  the page, right? Well, we need to refine that just a bit.
When you position an element, you’re specifying the position relative to the closest ancestor element that is also positioned.
Say you wanted to absolutely position another <div> inside the sidebar.
And so, the positioning will be relative to the edges of  the sidebar, not the page.
One way to do this is to put your element into a relatively.
Time to put all this knowledge about floating and positioning to a test! Take a look at the Web page below.
Your job is to correctly match each of these elements with the CSS rules on the right, and fill in the correct id selector for each one.
Hey, can we get a coupon on the site and put it right in.
Why? Because it’s going to give us the opportunity to try a little fixed positioning.
What we’re going to do is put a coupon on the page that always stays on the screen, even if  you scroll.
Is this a great technique to make your users happy? Probably not, but work with us here...
Just the words we’ve been waiting for: “right in the customer’s face”
With fixed positioning, you specify the position of  an element just like you do with absolute positioning, but the position is an offset from the edge of  the browser’s window rather than the page.
The interesting effect this has is that once you’ve placed content with fixed positioning, it stays right where you put it, and doesn’t move, even if  you scroll the page.
So, say you have a <div> with an id of  “coupon”
Impress friends and coworkers by referring to the browser window as the viewport.
Try it, it works, and the W3C will nod approvingly.
You can also use right and bottom, just like with absolute positioning.
Once you’ve got an element positioned, then comes the fun: scroll around...
But, the point is, fixed position elements don’t move; they are there for good as long as the page is displayed.
Now, we’re sure you’re already thinking of  fun things to do with fixed positioning, but you’ve got a job to do.
Unfortunately, Internet Explorer version 6 (and earlier) doesn’t support fixed positioning.
Now we’re going to get the Free Coffee Coupon on the page.
Let’s start by creating a <div> for the coupon to go into:
And we’ve wrapped the image in an <a> element so that users can click on the image to be taken to a page with a coupon they can print.
Go ahead and add this <div> at the bottom of  your “index.html” file, just below the footer.
Because we’re going to position it, the placement in the XHTML will only matter to browsers that don’t support positioning, and the coupon isn’t important enough to have at the top.
We’re going to set the coupon to fixed positioning, 300 pixels from the top of the viewport, and let’s put the left side right up against the edge of the viewport.
So we need to specify 0 pixels from the left.
We need to style the image and the links, too; otherwise, we may have borders popping up on the image because it is clickable.
So, let’s set the border on the image to none, and do the same on both links and visited links.
Remember that we have a rule in the CSS that says to turn off textdecoration, and use a border to underline links, instead.
Here, we’re overriding that rule for the link in the coupon <div> and saying we don’t want any border on the link.
Go back and look at the original CSS if you need to remind yourself of the other rules for the links.
Putting the coupon on the page Add the new coupon rules to your “starbuzz.css” file, save, and then reload the page.
You may need to make the browser smaller to be able to see that the coupon stays put even when you scroll.
You know, this looks great, but it might just be even more snazzy if  the coupon was offset to the left, so it looks like it’s coming out of  the side of  the viewport.
Now, we could get into our photo editing software and cut off  the left hand side of  the image to create that effect.
Or, we could just use a negative offset so that the left side of  the image is positioned to the left of  the edge of  the viewport.
Using a negative left property value Specify a negative property value just like you do a positive one: just put a minus sign in front.
The browser will gladly position the image to the left of the viewport for you, and only the part of the image that is still on the screen will be viewable.
A rather positive, negative test drive Make sure you’ve put in the negative left property value, save, and reload the page.
Doesn’t that look slick? Congrats, you’ve just achieved your first CSS special effect.
Can you believe how good this site looks? I mean, look at where.
We still need to build the Bean Machine, so see you in a.
Getting relative This is it, the last type of  positioning: relative positioning.
Truth be told, it’s also the loneliest of  the positions because you just won’t find a lot of  people using it in their designs.
But, new designs come along every day, so when you see relative positioning, you’ll want to know how it works and what it does.
Unlike absolute and fixed positioning, an element that is relatively positioned is still part of  the flow of  the page, but at the last moment, just before the element is displayed, the browser offsets its position.
Let’s see how this works on the coffee bag in the Starbuzz Page.
We’re going to take the coffee bag and offset it to the side, so those coffee beans that spilled out of  the bag look like they’re spilling out of  the page, too.
Now we could absolutely position the coffee bag, but if  we did, we’d have to find a way for the space it’s taking up on the page to get reserved, since absolute positioning takes the document completely out of  the flow.
We can keep the element in the flow, have its space reserved, and then offset where it actually gets displayed.
We want to take the Starbuzz Coffee bag and move it about 100 pixels to the right.
With absolute positioning, the coffee bag moves, but since it is no longer in the flow, the rest of the page moves up underneath.
We’re using a descendant selector here to select only images inside the beanheading.
Then we specify a position of relative, and whatever offsets we want on the image.
The offset is from the position where it is placed in the flow.
So here we’re specifying that the image should be displayed 120 pixels from the left of where it sits in the flow of the document.
You can use right, top, and bottom as well, when specifying offsets.
You can use any of the positioning techniques, or even a float, on inline elements too.
Add this rule to your CSS and then save and reload.
The test drive After reloading the Starbuzz page, you should see the coffee bag over to the right part of  the sidebar.
What is interesting is that part of  the image is actually extending beyond the sidebar into the margin and off the edge of  the page.
How does that work? Well, as you’ve seen, the browser first flows a relative element onto the page, and only then does it offset where it is displayed.
So the element still takes up the same spot on the page, it’s just drawn in a different location.
Relative is a little like static positioning, but with a dash of  absolute thrown in.
But, unlike absolute, relative positioning is specified just as an offset from the element’s real location, not in absolute coordinates from the nearest containing block.
So, does this improve the page? We’re not sure, but it was fun.
You might want to remove the relative positioning before you show it to the CEO.
No matter how you tweaked the padding and margins you still can’t get an image to be positioned outside of  the box it’s in.
And why try to do it the hard way? We achieved a better effect with two lines of  CSS.
You can use relative positioning to display an element well beyond the element’s box in the flow, which you just can’t do with padding or margins.
While we’ve spent this chapter looking at two-column layouts, the real goal was to learn about the float and clear properties, along with the various forms of  positioning that CSS offers.
Now that you’ve got the basics down, you’re in a good position to think about three-column layouts, or any other layout you might desire.
The content area now has left and right margins that sit under the two floated <div>s.
And the footer has its clear property set to “both”
This design is built using techniques that you already understand.
To explore beyond what you’ve done here, it really does help to see how others have used CSS to create interesting designs, and we encourage you to get out there and look around.
Check out some of  our favorite online resources for CSS design at:
Block  n elements flow from the top down, with a linebreak between elements.
By default, each block element takes up the entire width of the browser window.
Inline  n elements flow inside a block element from the top left to the bottom right.
If more than one line is needed, the browser creates a new line, and expands the containing block element vertically to contain the inline elements.
The top and bottom adjacent margins of  n two block elements in the normal page flow collapse to the size of the larger margin, or to the size of one margin if they are the same size.
Floated elements sit on top of block elements  n and don’t affect their flow.
However, the inline content respects the boundaries of a floated element and flows around it.
The  n clear property is used to specify that no floated elements can be on the left or right (or both) of a block element.
A block element with clear set will move down until it is free of the block element on its side.
A floated element must have a specific width  n set to a value other than auto.
A  n liquid layout is one in which the content of the page expands to fit the page when you expand the browser window.
This has the advantage of providing more control over your design, but at the cost of not using the browser width as efficiently.
A jello layout usually places the content in the center of the.
This has the same advantages as the frozen layout, but is often more attractive.
There are four values the position property  n can be set to: static, absolute, fixed, and relative.
Absolute positioning lets you place elements  n anywhere in the page.
By default, absolutely positioned elements are placed relative to the sides of the page.
If an absolutely positioned element is nested  n within another positioned element, then its position is relative to the containing element that is positioned.
The properties top, right, bottom, and left are  n used to position elements for absolute, fixed, and relative positioning.
Absolutely  n positioned elements can be layered on top of one another using the z-index property.
A larger z-index value indicates it is higher in the stack (closer to you on the screen)
Fixed position elements are always positioned  n relative to the browser window and do not move when the page is scrolled.
Relatively  n positioned elements are first flowed into the page as normal, and then offset by the specified amount, leaving empty the space where they would normally sit.
When using relative positioning, left, right, top,  n and bottom refer to the amount of offset from the element’s position in the normal flow.
The same design can often be achieved using  n floating elements or absolutely positioned elements.
Float provides a flexible solution for multi- n column layouts and allows elements to clear floated elements from their sides, something that can’t be done with absolute positioning.
This has been a turbo-charged chapter, with lots to learn.
When you place two inline elements next to each other, their margins don't ________
In general _____ is a better technique for column layouts because you can use clear.
Special inline elements that get grouped together into boxes as the page is laid out.
This kind of margin was used on the coupon for a special effect.
Usually used to identify an element that is going to be positioned.
Method browser uses to position static elements on the page.
With this positioning, you specify the position relative to the edges of the containing block.
When boxes are placed on top of each other, these collapse.
Removes element from the flow, and sets it to one side.
Open your “lounge.html” file and locate all the block elements.
Just concentrate on the block elements nested directly inside the body element.
You can also ignore the “float” property in your CSS.
We didn’t ask you to, but if you went the extra mile, here’s how they get flowed.
Move the elixirs <div> back to its original place below the music recommendations, then save and reload the page.
Where does the element get floated now? You should have seen the elixirs below the music recommendations.
The <div> is floated to the right, just below the music recommendations, and the remainder of the XHTML is floated around it (which is just the footer)
What we want to do is set a right margin on the main content section so that it’s the same width as the sidebar.
But how big is the sidebar? Well, we hope you aren’t already rusty since the last chapter.
Here’s all the information you need to compute the width of the sidebar.
Time to put all this knowledge about floating and positioning to a test! Take a look at the Web page below.
Your job is to correctly match each of those elements with the CSS rules on the right, and fill in the correct id selector for each one.
When you place two inline elements next to each other, their margins don't ________
In general _____ is a better technique for column layouts because you can use clear.
Special inline elements that get grouped together into boxes as the page is laid out.
This kind of margin was used on the coupon for a special effect.
Usually used to identify an element that is going to be positioned.
Method browser uses to position static elements on the page.
With this positioning, you specify the position relative to the edges of the containing block.
When boxes are placed on top of each other, these collapse.
Removes element from the flow, and sets it to one side.
If  it walks like a table and talks like a table...
There comes a time in life when we have to deal with the dreaded tabular data.
But there’s more: with every order we’ll throw in our exclusive.
And, if you act now, as a special bonus, we’ll throw in.
Hey guys, I just created this little table of the cities in my journal.
I was going to put it on the Web site, but I couldn’t find a good way to do it with headings or blockquotes or paragraphs.
How do you make tables with XHTML? Tony’s right; you really haven’t seen a good way of  using XHTML to represent his table, at least not yet.
Before we dive into the <table> element, let’s first get an idea of  what goes into a table:
We call each piece of data a cell, or sometimes just table data.
If they put you in charge of XHTML, how would you design one or more elements that could be used to specify a table, including headings, rows, columns, and the actual table data?
How to create a table using XHTML Before we pull out Tony’s site and start making changes, let’s get the table working like we want it in a separate XHTML file.
Each <th> element is a table heading for a colum n.
Notice that the table headings are listed one after each other.
While these look like they might make up a column in the HTML, we are actually defining the entire table headings row.
Look back at Tony’s list to see how his headings map to these.
Here’s the first row, which we start with a <tr>
Each <td> element holds one cell of the table, and each cell makes a separate column.
Again, the <td> elements each hold one piece of table data.
Just a small bit of CSS so we can see the structure of the table in the browser.
Here’s the start of the second row, which is for the city Walla Walla.
What the browser creates Let’s take a look at how the browser displays this XHTML table.
We’ll warn you now: this isn’t going to be the best-looking table, but it will look like a table.
We’ll worry about how it looks shortly; for now let’s make sure you’ve got the basics down.
First type in the “Testing Tony’s Travels” XHTML from the previous page.
When you finish, give it a quick test, and then add the remaining items from Tony’s table.
It looks like the browser displays headings in bold by default.
Let’s take a closer look at each one to see exactly what role it plays in the table.
The <table> tag is the tag that starts the whole thing off.
So, all the table data that goes in a row is nested inside the <tr> element.
The <td> element contains one data cell in your table.
The <th> element contains one cell in the heading of your table.
Q: Why isn’t there a table column element? That seems pretty important.
A: The designers of XHTML decided to let you specify tables by row, rather than by column.
But notice that by specifying each row’s <td> elements, you are implicitly specifying each column anyway.
Q: What happens if I have a row that doesn’t have enough elements? In other words, I’ve got less things than the number of columns in the table?
A: The easiest way to deal with that is to just leave the content of the data cell empty; in other words, you write <td></td>
If you leave out the data cell, then the table won’t line up properly, so all the data cells have to be there, even if they are empty.
Q: What if I want my table headings to be down the left side of the table, instead of across the top; can I do that?
You just need to put your table heading elements in each row instead of all in the first row.
If your <th> element is the first item in each row, then the first column will consist of all table headings.
Q: My friend showed me a cool trick where he did all his page layout right within a table.
Using tables for layout was commonly done in the HTML era before CSS, when, frankly, there was no better way to do complex layouts.
However, it is a poor way to do your layouts today.
Using tables for layout is notoriously hard to get right and difficult to maintain.
Tell your friend that his technique is old school, and he needs to get up to speed with the right way to do layout: CSS with XHTML.
Q: Isn’t a table all about presentation? What happened to presentation versus structure?
With tables you are specifying the relationships between truly tabular data.
We’ll use CSS to alter the presentation of the table.
The number of columns in your table will be the number of data cells you have in a row.
In general, tables are not meant to be used for presentation; that’s the job of CSS.
On the left, you’ll find the XHTML for a table.
Your job is to play like you’re the browser displaying the table.
Argh! Someone needs to learn how to format their XHTML.
Adding a caption and a summary There are a couple of  things you can do right off  the bat to improve your tables, like adding a caption and a summary.
This is purely for accessibility, and acts as a bit of text a screen reader may read aloud to a user to describe the table.
The caption, on the other hand, is displayed in the browser.
If you don’t like the default location of the caption, you can use CSS to reposition it (we’ll give that a try in a sec), although some browsers don’t fully support repositioning the caption yet.
We really need to add some padding to the table data cells, to make them easier to read.
And a splash of orange to match Tony’s site could really pull the whole thing together.
We could use much “lighter” borders in the table cells, although it would be nice to have a dark border around the whole table.
Before we start styling, let’s get the table into Tony’s page Before we start adding style to Tony’s new table, we should really get the table into his main page.
Remember that Tony’s main page already has set a fontfamily, font-size, and a lot of  other styles that our table is going to inherit.
So without putting the table into his page we won’t really know what the table looks like.
When you’ve finished, move on to the next page before reloading.
I’ve also included a rating of the diners where I had lunch, on a.
Copying and pasting it from the previous file is the easiest way to get it here.
We’re changing the font-style to italic and adding some top padding.
We’re going to add a margin on the left and right, and a thin, black border to the table.
Let’s also change the border on the table data cells to be a much lighter, dotted border in gray.
And let’s add some padding to the data cells so there’s some space between the data content and the border.
Now let’s style the table Now we need to copy the table styles into “journal.css”
But, since we’re going to change them anyway, let’s just add new style instead.
Add the new styles highlighted below at the bottom of  the style sheet file.
And, we’re going to move that caption to the bottom of the table.
Taking the styled tables for a test drive That’s a lot of  changes at once.
Make sure you save them, and you should validate as well.
The table looks quite different now that you’ve styled it.
We’re also inheriting a few styles that were already in Tony’s journal.
All the fonts are now sans-serif and a smaller size.
We picked that up from the previous styles already in the file.
And we’ve got some margin on the table and some padding in each table cell.
Those dotted lines are looking really busy and distracting though.
It doesn’t help that they are duplicated between each pair of table cells.
Remember, in browsers that don’t support the caption-side property, the caption will still be at the top of the table.
Table cells look like they just use the box model too...
The box model is a good way to think about table cells, but they do differ when it comes to margins.
Let’s take a look at one of  the cells in Tony’s table:
Table cells do have padding and a border – just like you’ve seen in the box model – but they are a little different when it comes to margins.
So instead of  a margin, we have a border-spacing property, which is defined over the entire table.
In other words, you can’t set the “margin” of  an individual table cell; rather, you set a common spacing around all cells.
Q: So border spacing is defined for the entire table, while a margin can be set for an individual element?
Table cells don’t have margins; what they have is spacing around their borders, and this spacing is set for the entire table.
You can’t control the border spacing of each table cell separately.
Q: Well, is there any way to have different border spacing on the vertical than I have on the horizontal? That seems useful.
Q: The border-spacing doesn’t seem to work in my browser.
A: Are you using Internet Explorer? We’re sorry to report that IE version 6 doesn’t support border-spacing.
But, hey, you’re not going to forget that now, are you?
The double dotted lines are giving Tony’s table a busy and distracting look.
It would be much better, and wouldn’t detract from the table, if we could just have one border around each table cell.
Can you think of a way to do that with styling given what you’ve just learned? Give it a try and check your answer in the back of the chapter.
There is another way to solve the border dilemma, besides the border-spacing property.
You can use a CSS property called border-collapse to collapse the borders so that there is no border spacing at all.
When you do this, your browser will ignore any border spacing you have set on the table.
It will also combine two borders that are right next to each other into one border.
Follow along and make this change in your “journal.css” file:
Add a border-collapse property and set its value to “collapse”
Save the file and reload; then check out the changes in the border.
Now you just have one single border around all the table cells.
Just what we wanted, and don’t you agree the table looks much cleaner now?
You’re becoming quite the pro at XHTML and CSS, so we don’t mind giving you a little more to play with in these exercises.
How about this: we’d like to spruce this table up even a little more, starting with some text alignment issues.
Let’s say we want the date, temperature, and diner rating to be center-aligned.
And how about right alignment on the altitude and population? How would you do that? Here’s a hint: create two classes, one for center-aligned and one for rightaligned.
Finally, add the appropriate class to the correct <td> elements.
This may sound tough, but take it step by step; you already know everything you need to finish this one.
And, of course, you can find the answer in the back of the chapter, but give yourself the time to solve it before you peek.
You know Tony loves his signature color and there’s no reason not to add some color to his table; not only will it look great, but we can actually improve the readability of  the table by adding some color.
Add this new rule to your “journal.css” file and reload.
How about some color in the table rows? So far the color is looking pretty nice.
A common way to color tables is to give rows an alternating color, which allows you to more easily see each row without getting confused about which column goes with which row.
Now all you need to do is add this class attribute to each row you’d like to color.
Did we mention that Tony made an interesting discovery in Truth or Consequences, New Mexico?
It’s fair to say Tony found something interesting about Truth or Consequences, New Mexico; in fact, he found her so interesting that after going to Arizona, he turned around and came right back.
We’re glad for Tony, but he’s really given us a conundrum with the table.
While we could just add a new row for Truth or Consequences, we’d really like to do it in a more elegant way.
What are we talking about? Turn the page to find out.
Another look at Tony’s table Based on his return trip to New Mexico, Tony’s added a new entry for August 27th, just below the original Truth or Consequences entry.
He’s also reused a couple of cells where the information didn’t change (a great technique for reducing the amount of  information in a table)
You can see that when he added the new row, all he needed to do was list the things that were different the second time around (the date, the temperature, and that he revisited the diner)
But where does this leave you with XHTML? It seems like you’d have to add a entirely new row and just duplicate the city, altitude and population, right? Well, not so fast.
How to tell cells to span more than one row What does it mean for a cell to span more than one row? Let’s look at the entries for Truth or Consequences, NM in Tony’s table again.
The data cells for city, altitude, and population span two rows, not one, while the date, temp, and diner rating span one row, which is the normal, default behavior for data cells.
While the date, temp, and diner rating cells take up just one.
So, how do you do that in XHTML? It’s easier than you might think: you use the rowspan attribute to specify how many rows a table data cell should take up, and then remove the corresponding table data elements from the other rows that the cell spans over.
Have a look – it’s easier to see than describe:
Here are the two table rows that have the New Mexico data.
For the data cells that don’t change on the second visit (city, altitude, and population) we add a rowspan attribute indicating the table data spans two rows.
Then in the second row we specify just the columns we need (date, temp, and a new rating)
Just to make sure you’ve got this down, draw an arrow from each <td> element to its corresponding cell in the table.
The new and improved table Make the changes to the table in “journal.html” and give it a test run.
Think about exactly what you’re doing to the table: you’re using XHTML to specify that certain cells should take up more than one row, and to do that, you’re removing the <td>s they’re displacing.
Now we’ve got a great-looking table that doesn’t have any redundant information in it.
Q: You said you can have table data span columns too?
Just add a colspan attribute to your <td> element and specify the number of columns.
Unlike the rowspan, when you span columns, you remove table data elements that are in the same row (since you are spanning columns, not rows)
Q: Can I have a colspan and rowspan in the same <td>?
Just make sure you adjust the other <td>s in the table to account for both the row and column spans.
In other words, you’ll need to remove the corresponding number of <td>s from the same row, and from the column.
A: Well they certainly reduce the amount of information in the table, which is usually a good thing.
And, if you look at a few tables out there in the real world you’ll find that rowspans and colspans are quite common, so it’s great to be able to do them in XHTML.
But if you liked the table better before, feel free to change your XHTML and go back to the previous version.
Four out of five stars? I know my diners and that was a solid five star rating! You better change that in the table.
It looks like we’ve got a disagreement on the diner rating for August 27th, and while we could ask Tony and Tess to come to a consensus, why should we? We’ve got tables and we should be able to get another rating in there.
But how? We don’t really want to add yet another entry just for Tess’ review.
Why not put both their ratings in the table? That way we get more accurate information.
This table holds two diner ratings: one for Tess and one for Tony.
We’re using table headings for their names, and data cells for their ratings.
How do you do that? You create a simple table to represent both Tony’s and Tess’ ratings together, and when you have that working, put it inside the table cell that now holds Tony’s 4/5 rating.
Test driving the nested table Go ahead and type in the new table.
Tables are easy to mistype, so make sure you validate and then reload your page.
Only that background really is a bit much for a nested table.
Let’s keep the names bold, but take off the background color.
We want to change the background color of the nested table headers to white.
Determine the selector to select only the nested table heading elements.
It’s time to fall back on all that training you’ve done.
What you need to do is change the table heading background color for just Tony and Tess, and do it without changing the background of the main table headings.
How?  You need to find a selector that selects only the nested table headings.
You can target just the <th> elements in the nested table using a descendant selector.
Add a new rule to your CSS that uses the “table table th” selector to change the background color of the nested table headers to white:
Now save the changes to your “journal.css” file and reload.
Now the <th> in the nested table has a white background.
But notice it still has the bold font weight since we didn’t override that property.
You want Tony and Tess to have different background colors on their table rows; say, blue and pink.
Q: I used a class to solve the Brain Barbell.
A: There are lots of different ways to solve problems using CSS, and certainly your solution is an effective and perfectly valid way to use CSS.
We’ll just point out that by using the descendant selector instead, we didn’t have to make any changes to our XHTML.
What if Tony and Tess keep adding reviews for diners? Then for every review, you’d have to make sure and add the class to each <th>
Giving Tony’s site the final polish Tony’s page is really looking nice, but there’s one more area we haven’t spent any time styling yet: the list that contains the set of  items he was preparing for his trip.
You’ll find this list in his June 2nd entry; check it out below:
We’re looking at just the XHTML snippet from the June 2nd entry.
Giving the list some style You’re probably figuring out that once you know the basic CSS font, text, color, and other properties, you can style just about anything.
The same is true for lists; in fact, there are only a couple of  properties that are specific to lists.
The main list property is called list-style-type and it allows you to control the bullets (or “markers”, as they are called) used in your lists.
The circle property value gives you a simple circle marker.
What if you want a custom marker? Do you really think Tony would want anything less than his own custom marker? Well, luckily CSS has a property called list-style-image that lets you set an image to be the marker for a list.
Add the rule for the list item to your CSS and then reload.
The image “backpack.gif” is a small version of this backpack.
Seems fitting doesn’t it? And in Tony’s signature color, too.
Here’s the list-style-image property, which we’re setting to a URL.
Here’s the list with the marker replaced with an image and some extra margin and padding spacing.
Q: What about ordered lists? What can I do to change their style?
A: You style ordered and unordered lists in the same way.
Of course, an ordered list has a sequence of numbers or letters for markers, not bullets.
Using CSS you can control whether an ordered lists’ markers are decimal numbers, roman numerals, or alphabetic letters (like a, b, c) with the list-style-type property.
Consult a CSS reference for more options (there are many)
Q: How can I control the text wrap on lists? In other words, how can I control whether text wraps underneath the marker or just underneath the text?
If you set this property to “inside” then your text will wrap under the marker.
If you set it to “outside” then it will wrap just under the text above it.
A: Yes, and here’s what inside and outside really mean: if you set your linestyle-position to “inside” then the marker is inside your list item and so text will wrap under it.
If you set it to “outside”, then the marker is outside your list item and so text will just wrap under itself.
And, by “inside your item” we mean inside the border of the list item’s box.
Wow, who would have known we could take my site.
We’re going to get Tess a Segway of her own so she can go with me on the.
The <table> element defines and surrounds  n the entire table.
Tables are defined in rows, using the <tr>  n element.
Each row contains one or more data cells,  n defined with the <td> element.
Use the <th> element for data cells that are  n row or column headings.
You can provide additional information about  n your tables with the table summary attribute, and the <caption> element.
Table data cells can have padding, borders,  n and border spacing, which is the space between cells.
Just like you can control the padding, borders,  n and margins of elements, you can control the padding, borders, and border spacing of table cells with CSS.
The border-collapse property is a special CSS  n property for tables that allows you to combine cell borders into one border for a cleaner look.
You can change the alignment of the data in  n your table cells with the text-align and verticalalign CSS properties.
You can add color to your tables with the  n background-color property.
Background color can be added to the entire table, to each row, or to a single data cell.
If you have no data for a data cell, put no  n content into the <td> element.
You need to use a <td>...</td> element to maintain the alignment of the table, however.
If your data cell needs to span multiple rows or  n columns, you can use the rowspan or colspan attributes of the <td> element.
You can nest tables within tables by placing  n the <table> element and all its content inside a data cell.
Tables should be used for tabular data, not for  n laying out your pages.
Lists can be styled with CSS just like  n any other element.
There are a few CSS properties specific to lists, such as list-styletype and list-style-image.
XHTMLcross That crossword looks a bit like a table, doesn’t it?  Give your left brain a workout and solve this crossword.
When you finish, give it a quick test, and then add the remaining items from Tony’s table.
On the left, you’ll find the XHTML for a table.
Your job is to play like you’re the browser displaying the table.
The double dotted lines are giving Tony’s table a busy and distracting look.
It would be much better, and wouldn’t detract from the table, if we could just have one border around each table cell.
Can you think of a way to do that with styling given that you’ve just learned?  You can set the borderspacing property to 0 to remove the space between the borders.
We could use border-spacing to set spacing to 0; then the two lines would be right next to each other.
Here are the two classes, one for center and one for right alignment.
And here you just add each <td> to the appropriate class!
Just to make sure you’ve got this down, draw an arrow from each <td> element to its corresponding cell in the table.
It’s time to fall back on all that training you’ve done.
What you need to do is change the table heading background color just for Tony and Tess, and do it without changing the background of the main table headings.
How? You need to find a selector that selects only the nested table headings.
We can use a descendant selector to select just the nested table header.
Use this property to use an image instead of a built-in marker in your lists.
Used to control whether the marker is inside or outside the list items border.
What a data cell does when it uses more than one row or column.
Adds a short description that is displayed with the table.
So far all your Web communication has been one way: from your page to your visitors.
Golly, wouldn’t it be nice if your visitors could talk back? That’s where XHTML forms come in: once you enable your pages.
You’ll also learn a bit about what goes on behind the scenes in the server to support.
We’re checking it with the server now, and then we’ll get a response right back.
How forms work If  you use the Web at all, then you know what a form is.
But you might not have really thought about what they have to do with XHTML.
A form is basically a Web page with input fields that allows you to enter information.
When the form is submitted, that information is packaged up and sent off  to a Web server to be processed by a Web application.
When the processing is done, what do you get? Another Web page, of  course, as a response.
The browser packages up all the data in the form and sends it over to the Web server.
The Web server receives the form data, and then passes it off to a Web application to be processed.
The Web application processes the data in the form and creates a brand new XHTML page as a response, which it hands back to the Web server.
How forms work in the browser To a browser, a form is just a bit of  XHTML in a page.
You’ll see that you can easily create forms in your pages by adding a few new elements.
The browser loads the XHTML for a page like it always does, and when it encounters form elements, it creates controls on the page that allow you to input various kinds of  data.
A control is just something like a button or a text input box or a drop down menu – basically something that allows you to input data.
Depending on the type of  control, this happens in different ways.
You can type a single line of text into a text control, or you might click one option of  many in a checkbox control.
You submit the form by clicking on a submit button control.
That’s the browser’s cue that it needs to package up all the data and send that data off  to the server.
Once the server has the form data, it passes it off  to the appropriate Web application for processing.
This processing results in a brand new XHTML page that is returned to the browser, and since it’s just XHTML, the browser displays it for you.
What you write in XHTML There’s no deep mystery to creating forms with XHTML.
In fact, in this chapter you’re going to meet a whole new set of  XHTML elements that all work together to create forms.
The best way to get a feel for forms is to look at a little XHTML and then to give it a try.
Relax For now just take a good look at the form and what’s in it; we’ll be going into all the details throughout the chapter.
What the browser creates Big surprise; to create a form you use a <form> element.
Now, just about any block level element can go inside the <form> element, but there’s a whole new set of elements that are made especially for forms.
Each of  these form elements provides a different way for you to enter information: text boxes, checkboxes, menus of  options, and more.
We’ll examine all these elements, but first take another look back at the XHTML on the previous page and see how the elements and content inside the <form>  element are displayed in the page below:
Open it, take another look around, then load it in your browser and enter the contest.
And here are two text controls for entering a first and last name.
In XHTML you use the <input> element to create these.
Let’s take a closer look at the <form> element – not only does it hold all the elements that make up the form, but it also tells the browser where to send your form data when you submit the form (and the method the browser should use to send it)
The action attribute holds the URL of the Web server...
The method attribute determines how the form data will be sent to the server.
Later in the chapter we’ll talk about other ways to send data, and why you might or might not use POST.
I’ve got some form data I’m sending you via POST.
Okay, so I have an XHTML form - that seems like the easy part.
Creating Web applications is a whole topic unto itself and far beyond what we cover in this book.
Well, we tried to cover them, but the book ended up weighing more than you do (not good)
To create Web applications you need to know a scripting or programming language, and one that is supported by your hosting company.
Most hosting companies support languages like PHP, Perl, Python, and Java, and if  you’re interested, you’ll definitely want to pick up a book specifically for creating Web applications.
Also, check with your hosting company; they sometimes provide simple scripts to their customers, which takes the work out of  developing Web applications yourself.
As for this chapter, we’ve already developed all the Web applications you’ll need.
All you’ll need to do is put the URL of  these applications in the action attribute of  your <form> element.
What can go in a form? You can put just about any block element into a form, but that’s not what we really care about right now; we’re interested in the form elements that create controls in the browser.
Here’s a quick rundown of  all the commonly used form elements.
We’re going to start with the <input> form element, which plays a lot of  roles in the form’s world.
Optional attributes let you set a maximum number of characters and the width of this control.
Most form elements require a name that is used by the Web application.
An <input> element with a type attribute of “text” creates a one line control in the browser page.
When you click this button, the browser sends the form to the Web application for processing.
For a submit button, specify “submit” as the <input> element’s type.
The button is labelled “Submit” (or “Submit Query”) by default, although you can change that (we’ll show you how later)
Notice that both of these use the same XHTML element, but with different values in their type attribute.
Use the type attribute to indicate you want a “text” input.
These are like old time car radio buttons;  you “push” one in, and the rest “pop out”
The radio control allows only one of a set of choices.
All the radio buttons associated with a given set of choices must have the same name...
You can use multiple checkboxes together, and if you do, you can check as many or few as you like.
Unlike radio buttons, a checkbox allows zero or more of a set of choices.
Like radio, you use one checkbox <input> element for each choice.
Same here, we’re still using the <input> element, just with different type values.
If you type more text than will fit into the text area, then a scroll bar appears on the right side.
The <textarea> element is not an empty element, so it has both opening and closing tags.
The rows attribute tells the browser how many characters tall to make the text area.
Any text that goes between the opening and closing tags becomes the initial text in the browser’s text area control.
Use the name attribute to give the element a unique name.
What can go in a form? (Part II) Okay, not every form element is an <input> element.
The content of the <option> element is used for the menu items’ description.
Each menu option also includes a value representing the menu item.
After clicking on the menu, the menu items drop down.
The menu provides a way to choose between a set of choices.
The <select> element goes around all the menu options to group them into one menu.
The select element creates a menu that looks like this (although the look will vary depending on the browser you’re using)
A choice of whole or ground coffee (you can choose only one)
Gift wrap or include a catalog (choose zero, one, or both)
Markup Magnets Your job is to take the form element magnets and lay them on top of the corresponding controls in the sketch.
You won’t need all the magnets below to complete the job; some will be left over.
Check your answer in the back of the chapter before moving on.
All this file has in it are the XHTML basics:
Figuring out what goes in the form element It’s time to add your very first <form> element.
The first thing you have to know when creating a <form> element is the URL of  the Web application that is going to process your form data.
We’ve already taken care of  that for you; you’ll find the Web application that processes Starbuzz orders here:
All we’ve got so far is a heading identifying the page, along with instructions.
This application already knows how to take orders from the form we’re going to build.
For now, we’re going to build these forms without all the style we’ve been.
Adding the form element Once you know the URL of  the Web application that will process your form, all you need to do is plug it into the action attribute of  your <form> element, like this (follow along and type the changes into your XHTML):
And remember we’re using the “POST” method to deliver the form data to the server.
So far so good, but an empty <form> element isn’t going to get you very far.
Looking back at the sketch of  the form, there’s a lot there to add, but we’re going to start simple and get the “Ship to:” part of  the form done first, which consists of a bunch of  text inputs.
You already know a little about text inputs, but let’s take a closer look.
Here’s what the text inputs for the Starbuzz form look like:
We’ve got one text input for each input area in the form: Name, Address, City, State, and Zip.
We use the <input> element for a few different controls.
The type attribute determines what kind of control it is.
Here the type is “text” because this is going to be a text input control.
The name attribute acts as an identifier for the data the user types in.
Notice how each one is set to a different value.
How form element names work Here’s the thing to know about the name attribute: it acts as the glue between your form and the Web application that processes it.
When you type the elements for a form into your XHTML file, you give them unique names.
Each input control in your form has a name attribute.
Say you type your name, address, city, state, and zip into the form and click submit.
The browser takes each of these pieces of data and labels them with your unique name attribute values.
The browser then sends the names and values to the server.
When you submit a form, the browser packages up all the data using the unique names:
The Web application needs the form data to be labelled so it can tell what is what.
Each unique name gets a value from the data you type into the form.
Q: Can I make the submit button say something other than “Submit”?
A: Yes, just put a value attribute in the element and give it a value like “Order Now”
You can also use the value attribute of text input to give that input some default text.
If you’d like to limit how much your users can type into a text <input>, you can use the maxlength attribute and set it to a specific number of characters.
However, for a <textarea>, there is no way with XHTML to limit how much your users can type.
Q: I still don’t get how the names get matched up with the form data.
A: Okay, you know each form element has a unique name, and you also know that the element has a corresponding value.
Q: How does the Web application know the names I’m going to use in my form?  In other words, how do I pick the names for my form elements?
It really works the other way around: you have to know what form names your Web application is expecting and write your form to match it.
If you’re using a Web application that someone else wrote, they’ll have to tell you what names to use, or provide that information in the documentation for the application.
A good place to start is to ask your hosting company for help.
Q: Why doesn’t the <option> element have a name attribute?  Every other form element does.
So, we only really need one name for the entire menu, and that is already specified in the <select> element.
Keep in mind that when the form is submitted, only the value of the currently selected option is sent along with this name to the server.
Q: Didn’t you say that the name for each form element needs to be unique? But the radio <input> elements all have the same name.
Think about it: if you push one button in, the rest pop out.
So, for the browser to know the radio buttons belong together, you use the same name.
They’re all colors, and only one color can be selected at a time, so a single name for the set makes sense.
Q: What about checkboxes? Do they work like radio buttons?
A: Yes; the only difference is that you are allowed to select more than one choice with a checkbox.
When the browser sends the form data to the server, it combines all the checkbox values into one value and sends them along with the checkbox name.
Q: Geez, do I really need to know all this stuff about how data gets to the server?
A: All you need to know is the names and types of the form elements your Web application is expecting.
Check out the additions below, and then make the changes in your “form.html”
We’re going to start by putting everything inside a <p> element.
You can only nest block elements directly inside a form.
Here are all the <input> elements: one for each text input in the “Ship to” section of the form.
We’ve added a label for each input so the user knows what goes in the text input.
That’s also why you need to nest them all inside a paragraph.
Finally, don’t forget that users need a submit button to submit the form.
So add a submit button by inserting an <input> at the bottom with a type of “submit”
Also add a value of “Order Now”, which will change the text of the button from “Submit” to “Order Now”
After you’ve made all these changes, save your “form.html” file and let’s give this a whirl.
It looks like the application got what we submitted, but we haven’t given it everything it needs.
Reload the page, fill in the text inputs, and submit the form.
Adding some more input elements to your form It looks like the Web application isn’t going to let us get very far without telling it the beans we want, as well as the bean type (ground or whole)
Let’s add the bean selection first by adding a <select> element to the form.
Remember that the <select> element contains a list of  options, each of  which becomes a choice in a drop-down menu.
Also, associated with each choice is a value; when the form is submitted, the value of  the chosen menu option is sent to the server.
Notice the change in the URL of your address bar after you submit the form (you’ll see the URL in the action attribute in the address bar)
Inside we put each <option> element, one per choice of coffee.
When the browser packages up the names and values of the form elements, it uses the name of the <select> element along with the value of the chosen option.
In this case, the browser would send the server beans = “House Blend”
The content of the element is used as the label in the drop down menu.
Reload your page and you should have a nice new menu waiting on you.
Choose your favorite coffee, fill in the rest of  the form, and submit your order.
We still haven’t given the Web application everything it needs, but it’s getting everything in the form so far.
How does this affect the results you get back from the Web application?
Give the customer a choice of whole or ground beans The customer needs to be able to choose whole or ground beans for their order.
Radio buttons are like the buttons on old car radios – you can push only one in at a time.
The way they work in XHTML is that you create one <input> of  type “radio” for each button; so, in this case you need two buttons: one for whole beans and one for ground.
There are two radio buttons here: one for whole beans, and one for ground.
We’re using the <input> element for this, with its type set to “radio”
All radio buttons in the same group share the same name.
And here’s the value that will be sent to the Web application.
Only one of these will be sent (the one that is selected when the form is submitted)
Notice that we often label radio buttons on the right-hand side of the element.
Make sure you change the name back to “beans” when you’re done with this exercise.
Punching the radio buttons Take the radio button XHTML on the previous page and insert it into your XHTML just below the paragraph containing the <select> element.
Make sure you reload the page, and then submit it again.
Depending on your browser, you may have noticed that no radio button was pressed when you reloaded the page.
Wow! Starbuzz took our order, and we’re not even done with it yet.
We’ve still got to add the gift options and an area for customer comments.
How could the order work without all the elements being in the form? Well, it all depends on how the Web application is programmed.
In this case, it is programmed to process the order even if the gift wrap and catalog options and the customer comments are not submitted with the rest of the form data.
The only way you can know if a Web application requires certain form elements is to talk to the person who developed it, or to read the documentation.
You’ve just got two sections to add to the form: the “Extras” section with the two checkboxes and the customer comment section.
Since you’re getting the hang of  forms, we’re going to speed up a bit and add them both at the same time.
The extras section consists of two checkboxes, one for gift wrap and another to include a catalog.
It looks like the “include catalog” option should be checked by default.
Like the radio buttons, we’ve put these labels to the right of the checkboxes.
We’re using the checked attribute to specify that the catalog option should be checked by default.
You can add a checked attribute to more than one checkbox.
You know the drill: look over the new XHTML and add it to your “form.html”
The final test drive Save your changes, reload, and check out the new form.
Here’s our brand new checkboxes, with the catalog checkbox already checked.
The Web application has received all the form data on the page and has incorporated it into the response page.
See if you can locate all the form data you submitted.
Be sure and try out all the various combinations of sending this form (with gift wrap, without, with a catalog, without, different coffees, and so on) and see how it all works.
But even if  it’s valid, it doesn’t exactly look normal, does it? Here’s the deal: from the perspective of  XHTML, this is a normal form element name; it doesn’t have any effect on the browser at all if  it has square brackets in the name.
So why did we use them? It turns out that the scripting language that the processorder.php Web application is written in likes a little hint that a form variable may have multiple values in it.
The way you give it this hint is to add.
So, from the perspective of  learning XHTML, you can pretty much forget about all this, but you might just tuck this into the back of  your mind in case you ever write a form that uses a PHP Web application in the future.
Believe it or not, “extras[]” is a perfectly valid name for a form element.
Below, you’ll find an XHTML form, and on the right the data a user entered into the form.
After you’ve done the exercise, look at the end of the chapter to see if you matched up the form names with the values correctly.
Match each piece of form data with its form name and put your answers here.
Now that we’ve got the form finished, can we talk about the method.
There are two primary methods the browser uses: POST and GET.
With POST all the form data is sent as part of the request and is invisible to the user.
With GET, the form data is added to the URL itself, so the user sees the form data.
The user just sees the Web application’s URL in her browser address bar.
The request doesn’t have any of the form data in it.
This is what the user sees in the address bar.
Q: Why is it called “GET” if we’re sending something to the server?
What’s the main job of a browser? To get Web pages from a server.
And, when you are using GET, the browser is just going about getting a Web page in the normal way it always does, except that, in the case of a form, it has appended some more data to the end of the URL.
Other than that, the browser just acts like it’s a normal request.
With POST, on the other hand, the browser actually creates a little data package and sends it to the server.
A: There’s a couple of big differences that really matter.
If you want users to be able to bookmark pages that are the result of submitting a form, then you have to use GET, because there is no way to bookmark a page that has been returned as a result of a POST.
When would you want to do that? Say you have a Web application that returns a list of search results; you might want users to be able to bookmark those results so they can see them again without having to fill out a form.
On the other hand, if you have a Web application that processes orders, then you wouldn’t want users to be able to bookmark the page.
Otherwise, every time they returned to the bookmark, the order would be resubmitted.
A situation when you’d never want to use a GET is when the data in your form is private, like a credit card or a password.
Because the URL is in plain view, the private information is easily found by others if they look through your browser history or if the GET somehow gets bookmarked.
Finally, if you use a <textarea>, you should use POST, because you’re probably sending a lot of data.
Watching GET in action There’s no better way to understand GET than to see it in action.
Open up your “form.html” file and make the following small change:
Save and reload the page; then fill out the form and submit it.
Now you can see every form element name and their values right here in the URL.
The Web application will automatically decode these when it receives them.
For each description, circle either GET or POST depending on which method would be more appropriate.
I’ve been meaning to say, great job on the Bean Machine! This is really going to boost our coffee bean sales.
Given everything you know about XHTML and CSS, how would you approach styling this form?
Tonight’s talk:  Table and CSS spar over how to lay out forms.
What on earth are you doing in this chapter, Table?
What do you mean? I dropped by to help get these forms in shape.
I agree the forms need some fixing up in the.
Yes, and some people consider form elements to be tabular data, you know.
Besides, I’m much better at making forms look good than you are.
I get forms looking nice and neat, with the labels and form elements all aligned properly.
These readers have read the chapter on positioning; they know how to get things “all aligned properly” using CSS.
Anyway, even if  you can align the form elements properly, you certainly can’t do things like add color and padding and change the font family.
Well, I agree I can’t add those little extra touches like you can, but that stuff  doesn’t really matter anyway.
The real trick to making forms user-friendly is getting the labels and elements presented in a way that makes sense, so there’s no confusion about what goes with what.
Forms should match the look and feel of  the rest of  the Web site.
Users will be confused if  they go to fill out a form and it doesn’t look like part of  the site.
But when it comes to laying out a table properly, I’m the way to go.
And all that positioning and messing with margins to get the widths just right...
At least with my table rows and data cells, it’s easier to figure out what’s going to end up where; with your positioning tricks, I never know where stuff  is going to end up.
And I just don’t buy that form elements are tabular data...
But the users are entering data into the form controls, aren’t they?  A form is used for gathering data from the person using the form.
Well, I say if  I can do a job better than you, then, hey, use me to do it.
Tell you what, why don’t we just let the readers decide?
You’re going to find people on both sides of  this issue.
Should you use CSS to layout your forms? Or tables? The harsh reality is that laying out forms with CSS is difficult.
And, if  you’d like to bend space and time to lay out your forms with CSS, we’ll gladly get out of  your way and look on in admiration.
However, many forms are tabular in their layout, so why not use tables to do the layout of  your forms and let CSS do the styling? That way, we get the best of  both worlds.
Check out the sketch below and you’ll see the form fits pretty nicely in a table, and even better, it looks like a form rather than a ragged collection of  input elements.
Also notice that we’ve used a nested table in the “Ship to:” section.
It’s a simple table, with two columns and six rows - one row for each main section of the fo.
We’ve thrown all the input elements into the right-hand column.
The Ship to: section has five text <input> elements, so we’ve grouped them into a nested table.
The nested table has the same basic layout as the main table: two columns and five rows, with one row for each label / element pair.
The labels for each form element go in the left column.
The cell on the left of the submit button is empty.
Notice that we’ve grouped each set of checkboxes and radio buttons into one table data cell.
Getting the form elements into a table Now that you know how to organize the form elements in a table, you need to put your XHTML table writing skills to the test.
Even though it looks complicated, it’s really not that bad.
We’ve added a few annotations below to point out the main parts.
Here’s the <form> element; we don’t need to put this part into the table.
Each section of the form goes into a separate row.
For the bean selection menu, the “beantype” radio buttons, and the “extras” checkbox, we put all the form elements for each menu in one data cell.
But for the shipping data, we are creating a nested table - a.
We did this so we could align t he labels on.
Here’s the end of the nested table for the shipping data.
It looks better, doesn’t it?  All the labels and form elements are aligned, and it looks more professional.
Now, we can use CSS to make it look even better, by tweaking some things here and there.
Let’s take a look at what you might want to change.
Notice how the rows are a little too close together?  We can add space between the cells in the rows so the form is easier to read.
We can align all these labels to the right so they line up nicely against the form elements.
We can also align the labels and the form elements vertically so they both align to the top of the data cells.
Finally, we’ll add just a bit of space on the left side of the body.
We just need to add a few styling rules to the XHTML, and we’ll be done.
Because this form is part of  the Starbuzz site, we’re going to reuse the style in the.
All of  this CSS should be familiar to you now.
We’re not using any rules unique to tables or forms; it’s all just the same stuff  you’ve been using in the last few chapters.
We’re going to rely on the Starbuzz CSS for some of our style, but we’re changing the body font to a sans-serif font, adding the.
Starbuzz background image, and adding a margin to the body.
These font properties will be inherited by all the elements on the page, including the text in the table and the form.
We’re adding a border around the table, and some padding between the table content and the border.
The content of the data cells is already aligned to the left by default, which is what we want, but we have to align them vertically too, to match the table headings.
We’re adding a bit of padding here too, to add space between the rows.
These two rules override some of the other properties we set in the rules for table and td above.
Why?  Because we don’t want the nested table to have a border, and we want the spacing to be tighter, so we’re removing the padding.
We also need to align the form labels in the nested data cells to the right (those aren’t in table headings, like the others are, so they’re not aligned with the th rule above)
Make sure you get the order correct: link the “starbuzz.css” file first, then the “styledform.css”
Once you’ve got the two style sheets linked, save and reload your page.
You should see the snazzy, styled version of  the Starbuzz Bean Machine in your browser.
The labels are aligned with the top of the form elements, and they’re aligned to the right as well.
This alignment makes it easier to see which labels belong with which controls.
The space between the rows makes a big difference and makes the form much easier to read.
The bean machine form now matches the rest of the Starbuzz site.
Notice that the nested table doesn’t have a border, and the spacing is tighter; that’s because of those rules that override the properties set for the main table.
If you want to stretch your XHTML and CSS skills a bit, see if you can add the Starbuzz header and footer to the Bean Machine page and make the Bean Machine look really nice with those elements.
When your forms start getting large, it can be helpful to visually group elements together.
So far you’ve been labeling your form elements with simple text, but XHTML also provides a <label> element.
This element provides further information about the structure of  your page, allows you to style your labels using CSS more easily, and can even help screen readers for the visually impaired correctly identify form elements.
Here’s how the fieldset and legend look in one browser.
Labels don’t look different from just plain text, by default.
However, they can make a big difference when it comes to accessibility.
To use a <label> element, first add an id attribute to your form element.
Then add a <label> and set its “for” attribute to the corresponding id.
You can use a <label> element with any form element.
Here’s a whole new input element we haven’t talked about.
If you need to send an entire file to a Web application, you’ll once again use the <input> element, but this time set its type to.
When you do that, the <input> element creates a control that allows you to select a file and – when the form is submitted.
Remember, your Web application will need to be expecting a file upload, and also note that you must use the POST method to use this element.
This is useful for forms that require you to type in a password, a secret code, or other sensitive information that you may not want other people to see as you type.
Keep in mind, however, that the form data is not sent from the browser to the Web application in a secure way, unless you make it secure.
Here’s what the file input element looks like in a couple of different browsers.
To create a file input element, just set the type of the <input> element to “file”
Just add the attribute multiple with a value of “multiple” to turn a single selection menu into a multiple selection menu.
With multiple selection, you can choose more than one option at a time.
The <form> element  n defines the form, and all form input elements are nested inside it.
The action attribute contains the URL of the  n Web Application.
The method attribute contains the method of  n sending the form data: either POST or GET.
A POST packages form data and sends it as  n part of the request.
A GET packages form data and appends it to  n the URL.
The <input> element can act as many different  n input controls on the Web page, depending on the value of its “type” attribute.
A type of “text” creates a single line text input.
All  n radio buttons with the same name make up a group of mutually exclusive buttons.
You can create a set of choices by giving multiple checkboxes the same name.
A <textarea> element  creates a multi-line text  n input area.
If you put text into the content of a <textarea>  n element, it will become the default text in a text area control on the Web page.
The value attribute in the text <input> element  n can be used to give a single-line text input an initial value.
Setting the value attribute on a submit button  n changes the text of the button.
When a Web form is submitted, the form data  n values are paired with their corresponding names, and all names and values are sent to the server.
Tables are often used to layout forms, given  n that forms have a tabular structure.
Once laid out, CSS should be used to style forms to provide the presentation, including color, font styles, etc.
The <label> element can be used to attach  n labels to form elements in a way that aids accessibility.
Markup Magnets Solution Your job is to take the form element magnets and lay them on top of the corresponding controls in the sketch.
You won’t need all the magnets below to complete the job; some will be left over.
For each description, circle either GET or POST depending on which method would be more appropriate.
And here’s the new attribute that selects the “Ground” radio button.
If you add an attribute checked with a value of “checked” into your radio input element, then that element will be selected by default when the form is displayed by the browser.
Add the checked attribute to the “ground” radio input element and give the page a test.
Wouldn’t it be dreamy if this were the end of the book? If there were no bullet points.
We covered a lot of  ground, and you’re almost finished with this book.
We’ll miss you, but before we let you go, we wouldn’t feel right about sending you out into the world without a little more preparation.
Actually, we did originally include everything you need to know about XHTML and.
While you’ve already learned the most common selectors, here are a few more you might want to know about...
Pseudo-elements You know all about pseudo-classes, and pseudo-elements are similar.
For example, the first-letter pseudo-element can be used to select the first letter of  the text in a block element, allowing you to create effects like initial caps and drop caps.
There’s one other pseudo-element called first-line, which you can use to select the first line of  a paragraph.
Here’s how you’d use both to select the first letter and line of  a <p> element:
Here we’re making the first letter of the paragraph large, and the first line italics.
Attribute selectors Attribute selectors are not currently well supported in current browsers; however, they could be more widely supported in the future.
Attribute selectors are exactly what they sound like: selectors that allow you to select elements based on attribute values.
This selector selects all images that have an alt attribute that includes the word “flowers”
Selecting by Siblings You can also select elements based on their preceding sibling.
For example, say you want to select only paragraphs that have an <h1> element preceding them, then you’d use this selector:
This selector selects all paragraphs that come immediately after an <h1> element.
Combining Selectors You’ve already seen examples of  how selectors can be combined in this book.
For instance, you can take a class selector and use it as part of  a descendant selector, like this:
There’s a pattern here that you can use to construct quite complex selectors.
Start by defining the context for the element you want to select, like this:
That’s a quite complex selector! Feel free to construct your own selectors using this same method.
Write the preceding element, a “+” sign, and then the sibling element.
You may have noticed pages with frames that allow you to visit a third party page while leaving the header and navigation of  the original site intact.
These days frames are, for the most part, considered “old school” because they cause navigation and usability problems, and they are not recommended by the W3C.
However, you will still find them in use in some situations.
Each frame specifies a name for the frame and the source HTML file that goes in the frame.
You can also target individual names with your <a> elements by specifying the frame’s name in the target of  the link, like this:
Finally, you should know that to use frames you’ll need to use a DOCTYPE in the page that contains the frameset.
The frameset DOCTYPEs are considered to be transitional, so you can’t have frames and be strict.
You can also specify framesets as columns of frames, or as rows and columns.
Multimedia & Flash Browsers can play sounds and display videos or even interactive content like Flash applications in a Web page.
If  you’d like to include multimedia in your own pages, we encourage you to visit the Web site of  the author of  your media type and make sure you use their recommended settings.
While embedding multimedia is more complicated than it needs to be, don’t let that scare you off – given how much you know about HTML, it won’t take you long to get your sounds, animations, and movies into your pages.
Here’s a simple example of  embedding a Quicktime movie using an <object> element:
As you can see, it requires a lot of specialized tags and attributes to specify the correct viewer to embed in the page.
You can nest object elements to provide a set of choices.
The legacy <embed> element is nested for support of old browsers.
Embedding multimedia content into your pages can help to create a compelling and more immersive experience for your users, but specifying <object> elements can be a tricky business, so make sure you consult the viewer manufacturer’s documentation on how to embed their viewers into your pages.
Now that you know XHTML and CSS you’re in a good position to decide if  tools like Dreamweaver, GoLive, and FrontPage are for you.
We’re sure you know enough about XHTML and browser support to know that this goal, while worthwhile, also comes up short from time to time.
But, that said, these tools also provide some very handy features, even if  you’re writing a lot of  the XHTML yourself:
A “code” window for entering XHTML and CSS with syntax  n checking to catch common mistakes and suggest common names and attributes as you type.
A preview and publish functionality that allows you to test pages  n before making them “live” on the Web.
A site manager that allows you to organize your site, and also  n keeps your local changes in synch with your Web site on the server.
Note that this usually takes care of  all the FTP work for you.
Often these tools lag behind standards in terms of  support,  n so to keep your XHTML and CSS current – you’ll need to write the XHTML yourself.
Often these tools don’t enforce strict standards, and may  n allow you to get sloppy with your XHTML and CSS, so don’t forget to validate (some tools help you validate as well)
Keep in mind you can use a combination of  simple editors along with these more sophisticated tools; one solution doesn’t have to fit all your needs.
So use a page creation tool when it makes sense.
You create executable content by writing programs or scripts using a scripting language.
While there are a quite a few scripting languages that work with browsers, JavaScript is the reigning king.
Here’s a little taste of  what it means to put executable content into your pages.
Here’s a new HTML element, <script>, which allows you to write code right inside of HTML.
And here’s a bit of JavaScript script that checks a user’s bid to make sure it’s not zero dollars or less.
Then in XHTML, you can create a form that uses this script to check the bid before the form is submitted.
If the bid is more than zero, the form gets submitted.
Here’s a new attribute in the form called onsubmit that invokes a script when the submit button is pressed.
What else can scripting do? As you see above, form input validation is a common and useful task that is often done with JavaScript (and the types of  validation you can do go far beyond this example)
But that’s just the beginning of  what you can do with JavaScript.
JavaScript actually has access to the entire document tree of  elements (the same element tree you worked with in Chapter 3) and can programatically change values and elements in the tree.
What does that mean? It means you can have a script change various aspects of  your Web page based on a user’s actions.
Here are a few things you might do with JavaScript:
Dynamically change images as the user passes their  n mouse over the image.
Set local information in the user’s browser so you can  n remember them next time they visit.
Server-side Scripting Many Web pages aren’t created by hand, but are generated by Web applications running on a server.
For example, think about an online order system where a server is generating pages as you step through the order process.
Or, an online forum, where there’s a server generating pages based on forum messages that are stored in a database somewhere.
We used a Web application to process the form you created in Chapter 14 for the Starbuzz Bean Machine.
Many hosting companies will let you create your own Web applications by writing server-side scripts and programs.
Here’s a few things server-side scripting will allow you to do:
Build an online store complete with products, a shopping cart, and an order system.
Personalize your pages for each user based on their preferences.
Allow your users to help build the content of  your site.
To create Web applications, you’ll need to know a server-side scripting or programming language.
There are a lot of  competing languages for Web development and you’re likely to get differing opinions on which language is best depending on who you ask.
In fact, Web languages are a little like automobiles: you can drive anything from a Yugo to a Hummer, and each has its own strengths and weaknesses (cost, ease of  use, size, economy, and so on)
If  you’re new to programming, PHP may be the easiest language to start with, and there are millions of  PHP-driven Web pages, so you’d be in good company.
If  you have some programming experience, you may want to try JSPs.
If  you’re more aligned with the Microsoft technologies, then you’ll want to look at VB.NET and ASP.NET as a server-side solution.
Here are a few books that can get you started:
In some cases you may not want your site to be listed in the search engine rankings, and you can use XHTML to request that they not be listed.
But, in other cases, you’ll want to do everything you can to tune your site so it appears high in the rankings when particular terms are searched for.
Here are some general tips for improving the search engine results for your pages.
But keep in mind that every search engine works differently and each considers different factors when deciding the order of  its rankings.
Improving your rankings Search engines use a combination of  the words and phrases in your pages in their search rankings.
A keyword is a simple word or two that describes your site, like “coffee” or “travel journal”
Many search engines treat the words in your headings and the alt and title attributes with more weight than the rest of  your text, so be sure to write concise and meaningful text in these elements and attributes.
Finally, many search engines factor in the number of  links to your site from other sites; the more sites that link to you, the more important your site must be.
So, anything you can do to encourage others to link to your site can improve your search engine rankings.
How do I keep my site from being listed? You can request that search engines ignore your pages, but there is no guarantee that all of  them will.
The only way to truly prevent others from finding your site is to make it private (discuss that with your hosting company)
But if  you want to request that your site not be listed, which works with most of  the major search engines, just put a <meta> tag in the head of  your XHTML, like this:
This meta tag tells search engines to ignore this page, and any other pages on the same site that this page happens to link to.
If  you specify a value of  “print” in the media attribute of  a style sheet, then that style sheet is used when your page is printed.
Here’s how you use the <link> element to do that:
The media attribute on the link element tells the browser that it should use this style sheet when it prints the Web page.
This won’t be used when your Web page is viewed on a monitor; it will only be used when you use the browser to print your Web page.
Then, as you’ve already seen, when a user visits your page and selects the browser’s print function, the browser applies the “forprint.css” style sheet before the page is printed.
This allows you to style your pages so they are more appropriate for the printed page.
Here are a few considerations to keep in mind when developing styles for print:
Change your background color to white for areas of  printed text to make the  n text easier to read on the printed page.
You can specify font sizes in points rather than pixels, percentages, or ems  n in your print style sheet.
While sans-serif  fonts are easier to read on the screen, serif  fonts are  n considered easier to read on the printed page.
You can use your print style sheet to change the font-family too.
If  you have navigation menus, sidebars, or other content around the main  n content of  the page, you can hide those elements for the printed version of  the page if  they are not essential for understanding the main content.
This can be done by setting the display property on any element to “none”
If  you have positioned elements in your Web page, you may want to consider  n removing the positioning properties so your page prints the content in a topdown manner that makes the most sense when reading the content.
If  you have set specific widths for elements in your Web page, you might have  n to change those to flexible widths using margins or other methods.
If  your Web page has a specific width, then it may not fit properly on the printed page.
The key to making good print style sheets is to look at the primary content of  the page, and make sure that this content prints clearly, fits on the printed page, and is easy to read.
The best way to know if  your Web page will look good when it’s printed out is to test your print style sheet by printing the page.
Pages for Mobile Devices Do you want your Web pages to be usable on mobile devices, like cell phones and personal digital assistants (PDAs)?  If  you do, then you need to keep some things in mind when creating your pages.
While mobile devices are getting more sophisticated, their support for XHTML and CSS still varies widely among the various devices.
Some support CSS, some don’t; some display XHTML really well, others make a mess of  it.
The best thing you can do is anticipate potential problems and plan for the future when support will be better.
First, remember that you can write a “handheld” specific style sheet by using the media attribute of  the <link> element.
And while support may currently be limited, if  you get in the habit now of  writing alternative style sheets for the “handheld” media type, you’ll be well prepared for the future when there’s more support for them.
Remember that many mobile services still charge by the amount of  data  n transmitted to the device.
This is a good reason to write simple, correct XHTML and use CSS to style your Web pages.
That means you should use text links  n and avoid special scripting effects that require a mouse and keyboard to use.
If  you have a handheld style sheet,  n use it to reduce your font sizes, margins and padding as much as possible.
Keep in mind that your multi-column layouts will often be ignored on small  n devices, so pay careful attention to the ordering of  elements in your XHTML.
Many mobile devices lack support for frames and pop-up windows, so avoid  n these.
Finally, the best solution is always to test your Web pages on as many devices  n as you can to know how they truly perform on small devices.
Unfortunately, support for the “handheld” style sheet media type is still limited, so even if  you’ve got a handheld style sheet link in your Web page, that doesn’t mean the browser on your phone will actually use it.
So, you need to keep some general design techniques in mind so your Web page looks good on both computer monitors and small devices:
To create a style sheet for mobile devices, use the media attribute with a value of “handheld”
Weblogs –  or “blogs” as they are commonly known – are like personal Web pages, except they are written in journal style, like Tony’s Web journal.
Many people who create blogs use online services that take care of  the details of  managing the blog entries.
These services also provide pre-made templates that allow you to pick from a variety of  looks for your blog.
They offer different background colors, font styles, and even background images you can use.
But they also allow you to customize your blog template and create your own unique look for your blog, with, you guessed it – XHTML and CSS.
Here’s a snippet of  XHTML and CSS from the blog template of  a popular online blogging service, Blogger.com.
As you can see, they’re using all the same elements and properties you’ve learned about in this book.
And they’re even on top of  the new standards: their templates use XHTML 1.0 Strict, so it’s a good thing you’ve learned how to write strict XHTML, right?  Let’s take a closer look...
These <$...$>s are template variables; they are filled in with the name of your blog and other content when you create your blog, and whenever you add a new post.
You should leave these variables like they are, as they’re needed to correctly display your blog content.
Here’s the top of the style sheet that gives your blog its look.
This template is removing the margins and padding from t he.
Each style rule controls things like the font used for your blog entries, the headings, the colors,...
The XHTML contains all the parts you need for your blog: headings, entries, dates, etc.
Each content area will also have a <$...$> variable for plugging in the content from your post.
