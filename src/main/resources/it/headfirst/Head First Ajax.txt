Ajax is more than just revisiting existing technologies, making some small changes to your web application and then declaring it Ajax-enabled.
The author does an excellent job teaching the various aspects of  Ajax, bringing back previous lessons without being repetitive and introducing common problems in a way that helps readers discover the problems themselves.
Behind the Ajax eight ball? Get out of  the shadows with this book.
Wouldn’t it be dreamy if there was a book on web.
O’Reilly Media books may be purchased for educational, business, or sales promotional use.
Many of  the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks.
Where those designations appear in this book, and O’Reilly Media, Inc., was aware of  a trademark claim, the designations have been printed in caps or initial caps.
While every precaution has been taken in the preparation of  this book, the publisher and the authors assume no responsibility for errors or omissions, or for damages resulting from the use of  the information contained herein.
No web pages were harmed in the creation of  this book, although several were bent significantly out of  shape.
Several browser-server communications were interrogated, but only after their rights were carefully presented.
Riordan has earned an international reputation for designing and implementing computer systems that are technically sound, reliable, and effectively meet her clients’ needs.
Rebecca has also authored several database books and served as a senior technical support engineer for Microsoft’s database products.
As a Microsoft employee in Australia, Rebecca was the Senior technical support engineer for Microsoft’s database products.
Here you are trying to learn something, while here your brain is doing you a favor by making sure the learning doesn’t stick.
And how do you do that? With Ajax, your ticket to.
So skip your nap; it’s time to put some polish on your web apps.
The server always does some processing and sends back data...
The server responds, and the browser runs your callback function.
Our JavaScript can use the server’s data to update just part of the page.
Ajax pages only talk to the server when they have to...
Some parts of  your Ajax designs will be the same...
Let’s create CSS classes for each state of  the processing...
So you’ve built your first Ajax app, and you’re already thinking about how to change all your web apps to make requests asynchronously.
It’s up to you to help your users avoid making.
When you enter a username, this in progress graphic should be displayed.
Sometimes you need your code to react to other things going on in your web application...
An event is something that happens on your page, in the browser, or even on a web.
By creating code, and registering it as an event handler, you can get the browser.
Beginner This is where you should start if you’re new to yoga.
Intermediate When the beginner course isn’t a challenge, try this one.
Level 2 methods to assign multiple handler functions to a single event.
The <a> object has properties: an id, title, an href, and an onmouseover.
You’ll find out what asynchronous really means, learn how to use multiple.
Like before, you make a request to Rufus to GET you a cola.
Except this time, you tell him he’s an asynchronous dog.
By the time Rufus gets back, you’re on the 17th green.
The difference is that you weren’t completely stuck while you were waiting for it.
And that means you can do whatever you want while he’s getting the cola.
You’re not stuck like you were when he was synchronous.
It’s time to take things into your own hands and start writing code that updates your web pages on the fly.
Object Model, your pages can take on new life, responding to users’ actions, and you can.
The style and even the code attached to your structure is also represented in the DOM.
My wish is your command7 Sometimes you just need a little mind control.
It’s great to know that web browsers turn your XHTML into DOM trees.
And you can do a lot by moving around within those trees.
But real power is taking control of a DOM tree.
You can do all of that and more with the DOM, and along the way, banish that.
The game starts out by creating a 4-by-4 grid of letters.
Players can click letters to “build” words in this word pane.
Players can submit the word to see if it’s valid...
A tile can only be used a single time in each word.
Once the tile’s used, it shouldn’t be selectable until a new word is started.
With XML, the extensible markup language, your data can describe.
That means your scripts won’t be filled with ifs, elses, and switches.
Each item will have one or more URLs to find out more about the item.
So how do your web apps respond to those mistakes?
You’ve got to validate your users’ input and react when that input has problems.
Always check to make sure your request data was RECEIVED.
The server opens up the POST request and decodes the request data...
The server finally passes the data on to the original program requested in the URL.
Since this is a POST request, there’s no data in the actual request URL.
The server takes the data from the request and turns it into something a server-side program can use.
Inside these pages, you’ll get all those functions in one place, ready to put into.
We can barely stand to let you go, but before you do, there’s still a few things left to.
We can’t possibly fit everything about Ajax into one 600-page book.
I can’t believe they put that in a web programming.
If  you can answer “yes” to any one of  these:
Do you want to learn, understand, and remember Ajax, with a goal of developing responsive and usable web applications?
Do you prefer stimulating dinner party conversation to dry, dull, academic lectures?
If not, go get a copy of Head First HTML and CSS, today, and then come back and get this book.
Are you a kick-butt Ajax or web developer looking for a reference book?
Are you afraid to try something different? Would you rather have a root canal than mix stripes with plaid? Do you believe that a technical book can’t be serious if servers and web browsers are anthropomorphized?
It was built that way, and it helps you stay alive.
So what does your brain do with all the routine, ordinary, normal things you encounter? Everything it can to stop them from interfering with the brain’s real job—recording things that matter.
It doesn’t bother saving the boring things; they never make it past the “this is obviously not important” filter.
How does your brain know what’s important? Suppose you’re out for a day hike and a tiger jumps in front of  you, what happens inside your head and body?
This must be important! Don’t forget it! But imagine you’re at home, or in a library.
Or trying to learn some tough technical topic your boss thinks will take a week, ten days at the most.
It’s trying to make sure that this obviously non-important content doesn’t clutter up scarce resources.
Resources that are better spent storing the really big things.
Like how you should never have posted those “party” photos on your Facebook page.
And there’s no simple way to tell your brain, “Hey brain, thank you very much, but no matter how dull this book is, and how little I’m registering on the emotional Richter scale right now, I really do want you to keep this stuff  around.”
We think of a “Head First” reade r as a learner.
This time, your page’s code creates a special request object that the browser sends to the server.
If  you really want to learn, and you want to learn more quickly and more deeply, pay attention to how you pay attention.
Most of  us didn’t take courses on metacognition or learning theory when we were growing up.
We were expected to learn, but rarely taught to learn.
But we assume that if  you’re holding this book, you really want to learn Ajax and web programming.
And you probably don’t want to spend a lot of  time.
If you want to use what you read in this book, you need to remember what you read.
To get the most from this book, or any book or learning experience, take responsibility for your brain.
The trick is to get your brain to see the new material you’re learning as Really Important.
Otherwise, you’re in for a constant battle, with your brain doing its best to keep the new content from sticking.
So just how DO you get your brain to treat web programming like it was a hungry tiger? There’s the slow, tedious way, or the faster, more effective way.
You obviously know that you are able to learn and remember even the dullest of  topics if  you keep pounding the same thing into your brain.
With enough repetition, your brain says, “This doesn’t feel important to him, but he keeps looking at the same thing over and over and over, so I suppose it must be.”
The faster way is to do anything that increases brain activity, especially different types of  brain activity.
The things on the previous page are a big part of  the solution, and they’re all things that have been proven to help your brain work in your favor.
For example, studies show that putting words within the pictures they describe (as opposed to somewhere else in the page, like a caption or in the body text) causes your brain to try to makes sense of  how the words and picture relate, and this causes more neurons to fire.
More neurons firing = more chances for your brain to get that this is something worth paying attention to, and possibly recording.
A conversational style helps because people tend to pay more attention when they perceive that they’re in a conversation, since they’re expected to follow along and hold up their end.
The amazing thing is, your brain doesn’t necessarily care that the “conversation” is between you and a book! On the other hand, if  the writing style is formal and dry, your brain perceives it the same way you experience being lectured to while sitting in a roomful of  passive attendees.
Here’s what WE did: We used pictures, because your brain is tuned for visuals, not text.
As far as your brain’s concerned, a picture really is worth a thousand words.
And when text and pictures work together, we embedded the text in the pictures because your brain works more effectively when the text is within the thing the text refers to, as opposed to in a caption or buried in the text somewhere.
We used redundancy, saying the same thing in different ways and with different media types, and multiple senses, to increase the chance that the content gets coded into more than one area of  your brain.
We used concepts and pictures in unexpected ways because your brain is tuned for novelty, and we used pictures and ideas with at least some emotional content, because your brain is tuned to pay attention to the biochemistry of  emotions.
That which causes you to feel something is more likely to be remembered, even if  that feeling is nothing more than a little humor, surprise, or interest.
We used a personalized, conversational style, because your brain is tuned to pay more attention when it believes you’re in a conversation than if  it thinks you’re passively listening to a presentation.
We included more than 80 activities, because your brain is tuned to learn and remember more when you do things than when you read about things.
We used multiple learning styles, because you might prefer step-by-step procedures, while someone else wants to understand the big picture first, and someone else just wants to see an example.
But regardless of  your own learning preference, everyone benefits from seeing the same content represented in multiple ways.
We include content for both sides of  your brain, because the more of  your brain you engage, the more likely you are to learn and remember, and the longer you can stay focused.
Since working one side of  the brain often means giving the other side a chance to rest, you can be more productive at learning for a longer period of  time.
And we included stories and exercises that present more than one point of  view, because your brain is tuned to learn more deeply when it’s forced to make evaluations and judgments.
We included challenges, with exercises, and by asking questions that don’t always have a straight answer, because your brain is tuned to learn and remember when it has to work at something.
Think about it—you can’t get your body in shape just by watching people at the gym.
But we did our best to make sure that when you’re working hard, it’s on the right things.
That you’re not spending one extra dendrite processing a hard-to-understand example, or parsing difficult, jargon-laden, or overly terse text.
In stories, examples, pictures, etc., because, well, because you’re a person.
And your brain pays more attention to people than it does to things.
These tips are a starting point; listen to your brain and figure out what works for you and what doesn’t.
Your brain works best in a nice bath of  fluid.
Dehydration (which can happen before you ever feel thirsty) decreases cognitive function.
Practice writing web applications! There’s only one way to truly master web programming: program web applications.
And that’s what you’re going to do throughout this book.
Using Ajax is a skill, and the only way to get good at it is to practice.
We’re going to give you a lot of practice: every chapter has apps that we’ll build.
Don’t just skip over them—a lot of  the learning happens when you build these apps yourself.
And definitely make sure you understand what’s going on before you move on to the next part of  the book.
Groaning over a bad joke is still better than feeling nothing at all.
If  you find yourself  starting to skim the surface or forget what you just read, it’s time for a break.
Once you go past a certain point, you won’t learn faster by trying to shove more in, and you might even hurt the process.
If  you’re trying to understand something, or increase your chance of  remembering it later, say it out loud.
Better still, try to explain it out loud to someone else.
You’ll learn more quickly, and you might uncover ideas you hadn’t known were there when you were reading about it.
Part of  the learning (especially the transfer to long-term memory) happens after you put the book down.
Your brain needs time on its own, to do more processing.
If  you put in something new during that processing time, some of  what you just learned will be lost.
They’re not optional sidebars—they’re part of  the core content! Don’t skip them.
The more you understand, the less you have to memorize.
When the book asks you a question, don’t just skip to the answer.
The more deeply you force your brain to think, the better chance you have of learning and remembering.
Here’s what YOU can do to bend your brain into submission.
We put them in, but if  we did them for you, that would be like having someone else do your workouts for you.
There’s plenty of evidence that physical activity while learning can increase the learning.
We encourage you to use more than one browser with this book.
Bear Bibeault is a Web Applications Architect responsible for an enterprise financial application used by the accountants that many of  the Fortune 500 companies keep in their dungeons.
He also delights clients with web applications he creates on the side (Ajax-powered, of  course), and serves as a sheriff  (senior moderator) at JavaRanch.com.
Elaine Nelson has been designing websites for nearly 10 years.
As she tells her mother, an English degree comes in handy everywhere.
Elaine’s current musings and obsessions can be found at elainenelson.org.
The greatest gift any editor can give a writer is to say, “This isn’t working, this is why, and this is what I think you should do about it.” Brett McLaughlin came through every damn time, and for that I will always be grateful.
I’d also like to thank Laurie Petrycki for being the voice of  reason in the always-insane world of technical publishing, and both Louise Barr and Sanders Kleinfeld for fielding even the wildest InDesign questions with patience and grace.
Even beyond the fantastic technical reviewers, this book wouldn’t have seen the light of  day were it not for my own little technical support team.
Stephen Jeffries, developer extraordinaire, helped out with the server-side code and reviewed all the samples before submission.
And John Hardesty provided the basic algorithms for several of  the games you’ll be building.
He’s also my brother, which I’ve always thought was pretty cool.
And how do you do that? With Ajax, your ticket to.
So skip your nap; it’s time to put some polish on your web apps.
I’ll just take a little nap while I’m waiting for my web app to respond...
Web pages: the old-fashioned approach With traditional web pages and applications, every time a user clicks on something, the browser sends a request to the server, and the server responds with a whole new page.
Even if  your user’s web browser is smart about caching things like images and cascading style sheets, that’s a lot of  traffic going back and forth between their browser and your server...
The server sends back a whole new page, with all the changed information.The user clicks.
Most of the time, only a single line or image is changing...
This time, your page’s code creates a special request object that the browser sends to the server.
Using Ajax, your pages and applications only ask the server for what they really need—just the parts of  a page that need to change, and just the parts that the server has to provide.
That means less traffic, smaller updates, and less time sitting around waiting for page refreshes.
With Ajax, the browser only sends and receives the parts of a page that need to change.
Sometimes the browser doesn’t have to talk to the server at all.
The script tells the browser how to update the page...
The script can update the image without the server-side program at all!
Okay, I get that Ajax makes web pages respond faster, but what exactly is it?
Ajax isn’t a whole new technology that you have to learn, like CSS or JavaScript, or a set of  graphics techniques you’ll need to crack open PhotoShop to accomplish.
Ajax is just a new way of  thinking about how to do what you’re already doing, using technologies you probably already know.
The browser sends requests and gets responses from a web server.
Your page can use images, Flash animations, Silverlight, or anything else you want or need.
Most web programmers and designers are already using some, or even all, of these technologies.
So what makes a page “Ajax” ? Ajax is a way of  designing and building web pages that are as interactive and responsive as desktop applications.
So what does that mean for you? You handle things at the client’s browser whenever you can.
Your pages make asynchronous requests that allow the user to keep working instead of  waiting for a response.
You only update the things on your pages that actually change.
And best of  all, an Ajax page is built using standard Internet technologies, things you probably already know how to use, like:
Since lots of pages that are considered “Ajax” don’t use JavaScript or XML, it’s more useful to define Ajax as a way of building web pages that are as responsive and interactive as desktop applications, and not worry too much about the exact technologies involved.
Q: What exactly does “asynchronous” mean? A: In Ajax, you can make requests to the server without making your user wait around for a response.
That’s called an asynchronous request, and it’s the core of what Ajax is all about.
Q: But aren’t all web pages asynchronous? Like when a browser loads an image while I’m already looking at the page?
A: Browsers are asynchronous, but the standard web page isn’t.
Usually when a web page needs information from a server-side program, everything comes to a complete stop until the server responds...
Q: But all Ajax pages use that XMLHttpRequest object, right?
Lots do, and we’ll spend a couple of chapters mastering XMLHttpRequest, but it’s not a requirement.
In fact, lots of apps that are considered Ajax are more about user interactivity and design than any particular coding technique.
Ajax applications also use a few things that have been around for a while but may be new to you, like:
We’ll look at all of these in detail before we’re through.
An asynchronous request is a request that occurs behind the scenes.
Your users can keep working while the request is taking place.
He’s put all his savings into an online rock n’ roll memorabilia store.
The site looks great, but he’s still been getting tons of  complaints.
Customers are clicking on the thumbnail images on the inventory page, but the customers’ browsers are taking forever before they show information about the selected item.
Some of Rob’s users are hanging around, but most have just stopped coming to Rob’s online shop altogether.
This pane contains thumbnails of the items Rob has for sale.
When the user clicks an item, a bigger picture of the image is displayed here...
Ajax pages only talk to the server when they have to...
The problem with Rob’s site isn’t that his server is too slow, but that his pages are sending requests to the server all the time...
The browser sends the selected item’s ID to the server.
The server sends back a new page, with the selected item’s information.
The browser sends the new item’s ID to the server.
The server sends back another whole new page.The user gets.
How would Ajax change this diagram? Write down what you think should happen on Rob’s site.
The function also changes the image to match the selected item.
The function creates a request object that asks the server for a description of the item.
The browser sends the request object to the server, asynchronously, behind the scenes.
Only the part of the page that actually changed is updated...
Asynchronous requests allow more than one thing to happen at the same time.
Only the part of a web page that needs to change gets updated.
The page isn’t frozen while the server is returning data to the browser.
Your job was to think about how Ajax could help save Rob’s site...
With Ajax, we can completely remove all the page refreshes on his inventory page.
The server returns the new image and a response to the request to the user’s browser.
Put a checkmark next to the benefits that you think Ajax can provide to your web applications.
The browser can request multiple things from the server at the same time.
Only the parts of the page that actually change are updated.
Only the parts of the page that actually change are updated.
In fact, some pages wouldn’t benefit from Ajax at all.
Which of the benefits that you checked off above do you think Rob’s page will see?
Remember, not every page is going to see all these benefits...
The browser can request multiple things from the server at the same time.
Only the parts of the page that actually change are updated.
Only the parts of the page that actually change are updated.
The speed of a request and response depends on what the server is returning.
And it’s possible to build Ajax pages that are slower than traditional pages.
Color rendering is dictated by the user’s monitor, not your app.
Because Ajax pages rely on technologies in addition to XHTML, compatibility issues can actually be a bigger problem with Ajax.
Test, test, test your apps on the browsers your users have installed.
If you use Ajax in a way that helps your apps, the boss will love you.
It’s possible to make smaller, more focused requests with Ajax.
Sometimes you want a user to wait on the server’s response, but that doesn’t mean you can’t still use Ajax.
Handling things at the browser can make your web application feel more like a desktop application.
Yes, this is the second time this shows up in the list.
With asynchronous requests, you can make sure the browser works behind the scenes, and avoid interrupting your users with full-page refreshes.
Well, yes, dear, unless everyone decided they’d try the same approach.
Now look at the mess we’re in! What a jam.
A: Sometimes it’s both! Ajax is one way to make requests, get responses, and build responsive web apps.
But you’ve still got to be smart when deciding whether an asynchronous request or a regular synchronous request would be a better idea.
Q: How do I know when to use Ajax and asynchronous requests, and when not to?
A: Think about it like this: if you want something to go on while your user’s still working, you probably want an asynchronous request.
But if your user needs information or a response from your app before they continue, then you want to make them wait.
Q: So for Rob’s online store, since we want users to keep browsing while we’re loading product images and descriptions, we’d want an asynchronous request.
That particular part of Rob’s app—checking out different items—shouldn’t require the user to wait every time they select a new item.
So that’s a great place to use Ajax and make an asynchronous request.
Turn the page, and let’s get down to actually using Ajax to fix up Rob’s online store.
We’ll need to make some changes to the existing XHTML page, code some JavaScript, and then reference the script in our XHTML.
When we’re done, the page won’t need to reload at all, and only the things that need to change will get updated when users click on the thumbnail images.
Modify the XHTML web page We need to include the JavaScript file we’re going to write and add some divs and ids, so our JavaScript can find and work with different parts of  the web page.
Write a function to initialize the page When the inventory page first loads, we’ll need to run some JavaScript to set up the images, get a request object ready, and make sure the page is ready to use.
This tells the browser to run the initPage() function as soon as the page loads up.
We’ll write code in initPage() to initialize all the thumbnail images, and set up onClick event handlers for each image.
We’ll group the thumbnails into a <div>, so our JavaScript can locate them on the page easily.
Write a function to create a request object We need a way to talk to the server and get details about each piece of memorabilia in Rob’s inventory.
We’ll write a function to create a request object to let our code talk to the server; let’s call it createRequest()
We can use that function whenever a thumbnail is clicked to get a new request started.
Get an item’s details from the server We’ll send a request to Rob’s server in getDetails(), telling the browser what to do when the server responds.
Display the item’s details We can change the image to display in getDetails()
Then, we need another function, displayDetails(), to update the item’s description when the server responds to our requests.
All we need to do to update the image is change that image’s src property.
The request object has information about what code should run when the server responds.
Step 1: Modify the XHTML Let’s start with the easy part, the XHTML and CSS that create the page.
Here’s Rob’s current version of  the inventory page with a few additions we’ll need:
Now open the inventory.html file in a text editor, and make the changes shown above.
This <div> is where details about each item should go.
We’ll use the id values on the <div> elements to style the page, and also later in our JavaScript code.
Start out with no item detail and a blank area for the item’s description to go in when something’s selected.
Step 2: Initialize the JavaScript We need to create the thumbnails.js file, and add a JavaScript function to set up the initial event handlers for each thumbnail image in the inventory.
Let’s call that function initPage(), and set it to run as soon as the user’s window loads the inventory page.
The initPage() function should get called as soon as the browser creates all the objects on the page.
To set up the onclick behavior for the thumbnails, the initPage() function has to do two things:
Find the thumbnails on the page The thumbnails are contained in a div called “thumbnailPane,” so we can find that div, and then find each image within it.
Build the onclick event handler for each thumbnail Each item’s full-size image is named with the title of  the thumbnail image plus “-detail”
That lets us work out the name of  the image in our JavaScript.
Once you’ve done that, the browser will automatically display the new image using the name you supplied.
Code Magnets The code for the initPage function is all scrambled up on the fridge.
Can you put back the pieces that fell off? Remember to set an event handler to run the initPage() function when the user’s window loads, too.
In an event handler, like onclick, you can get a reference to the object the event occurred on with the “this” keyword.
All these “get...” functions use the DOM to look up something on the XHTML page.
JavaScript lets you define functions without giving them an explicit name.
Don’t forget all the closing brackets, or your JavaScript won’t run.
This sets initPage() up to run once the user’s browser loads the page.
These are the same ids we used in the CSS to style the page.
This function is run whenever a thumbnail image is clicked.
When an image is clicked, that image’s title is used to figure out.
Test Drive Create thumbnails.js, add the initPage() function, and give the inventory page a whirl.
Add the code shown on page 18, and then load inventory.html in your browser.
You can check another item off the To Do list for Rob’s inventory page.
The item’s details won’t show up yet, but the right image should appear.
Step 3: Create a request object When users click on an item’s image, we also need to send a request to the server asking for that item’s detailed information.
But before we can send a request, we need to create the request object.
The bad news is that this is a bit tricky because different browsers create request objects in different ways.
The good news is that we can create a function that handles all the browser-specific bits.
Go ahead and create a new function in thumbnails.js called createRequest(), and add this code:
This line tries to create a new request object, but it won’t work for every browser type.
Return a null so that the calling code will know there was a problem.
This either returns a request object, or “null” if nothing worked.
Ready Bake code is code that you can just type in and use...
Q: Am I supposed to understand all of this? A: No, you’re not.
For now, just try to get a general idea of how all this looks and the way the pieces fit together.
Focus on the big picture, and then we’ll start to fill in the gaps in later chapters.
Q: So what’s an XMLHttpRequest? A: XMLHttpRequest is what most browsers call the request object that you can send to the server and get responses from without reloading an entire page.
There are two different versions, and different browsers support each.
That’s why there are two different code blocks, each trying to create a different version of ActiveXObject.
Q: And the request object is called XMLHTTP in a Microsoft browser?
A: That’s the type of the object, but you can call your variable anything you’d like; we’ve been using request.
Once you have the createRequest() function working, you never have to worry about these different types again.
Just call createRequest(), and then assign the returned value to a variable.
Q: So my users don’t need to be using a specific browser? A: Right.
As long as their browsers have JavaScript enabled, your users can be running any browser they want.
So users who have JavaScript disabled aren’t going to be able to use your Ajax applications.The good news is that JavaScript is usually enabled by default, so anyone who has disabled JavaScript probably knows what they’re doing, and could turn JavaScript support back on if they wanted to use your Ajax app.
May I have an XMLHTTP object from the Msxml2 library?
May I have an XMLHTTP object from the Microsoft library?
Step 4: Get the item’s details Once a user clicks on an item in the inventory, we need to send a request to the server and ask for the description and details for that item.
We’ve got a request object, so here is where we can use that.
And it turns out that no matter what data you need from the server, the basic process for making an Ajax request always follows the same pattern:
Get a request object We’ve already done the work here.
We just need to call createRequest() to get an instance of  the request object and assign it to a variable.
The createRequest() function returns a request object that our code in getDetails() can use to talk to the server.
Configure the request object’s properties The request object has several properties you’ll need to set.
You can tell it what URL to connect to, whether to use GET or POST, and a lot more...
You can tell your request object where to make its request, include details the server will need to respond, and even indicate that the request should be GET or POST.
Tell the request object what to do when the server responds So what happens when the server responds? The browser looks at another property of  the request object, called onreadystatechange.
This lets us assign a callback function that should run when the server responds to our request.
The property’s value should be the name of a function to run once the server’s given an answer to our request.
Now we’re ready to send the request off  to the server and get a response.
Let’s write the code for requesting an item’s details Once we know what our function needs to do, it’s pretty easy to write the code.
Here’s how the steps map to actual JavaScript in thumbnails.js:
The onclick handler for each inventory image calls this function and passes in the clicked img element’s title attribute, which is the name of the item the image represents.
We’ve got to check to make sure the request object isn’t null...
Always make sure you have a request object before working with it The first thing getDetails() does is call createRequest() to get a request object.
But you’ve still got to make sure that object was actually created, even though the details of  that creation are abstracted away in the createRequest() function:
If the browser doesn’t support XMLHttpRequest objects, createRequest() returns a null.
This line asks for an instance of the request object and assigns it to the variable “request.”
So if we wind up in this bit of code, we know something’s gone wrong.
We’ll display an error to the user and exit the function.
We’re still working on getting the details for an item.
The request object is just an object A request object is just a “normal” JavaScript object, and that means you can set properties on it and call methods.
We can talk to the server by putting information in the request object.
This is the url for the serverside script that will respond to the request.
That is, the code in the browser should continue to execute while it’s waiting for the server to respond.
These parameters tell the request object how we want it to connect to the server.
This line tells the request object the URL to call.
We send along the name of the item, so the server knows which details to send.
Q: Are there other properties of the request object? A: Sure.
For now, though, we just need the open() method and onreadystatechange.
One of  the most important is the onreadystatechange property, which we’re setting to the name of  a function.
This function, referred to as a callback, tells the browser what code to call when the server sends back information.
The getDetails() function sends the request object to the server.
This is the line that tells the browser what code to call when the server responds to the request.
But when the server responds, the browser calls displayDetails(), not getDetails()
The server runs whatever program was indicated by the request object’s URL.
This is a reference to a function, not a function call.
So make sure you don’t include any parentheses at the end of the function name.
Use send() to send your request All that’s left to do is actually send the request, and that’s easy...
Aren’t you forgetting something? We don’t want to send null; we want to send the item name.
The request object allows us to send all kinds of  data in a variety of  ways.
In getDetails(), the item name is part of  the URL string:
Asynchronous apps make requests using a JavaScript object, not a form submit.
That sounds obvious, but lots of  times, you don’t have to (or even get to) write the code your web application is talking to.
Instead, you work with an existing program, where you know the inputs and outputs, or tell another group what you need.
Not only that, but you might also have one server-side program that’s written in PHP, and another in ASP.NET...
Even if this part of things is your responsibility, it’s totally separate from your Ajax front-end code.
All you really need to know about the server is the script’s name and what your request object sends and gets from the server.
The server usually returns data to Ajax requests In a traditional web app, the server always responds to a request from the browser by sending back a new page.
The browser throws away anything that’s already displayed (including any fields the user has filled in) when that new page arrives.
The browser sends a request to a url, possibly sending along some request data.
Traditional server-side interactions The server may do some processing, or may just load and send some text, but it always returns a full web page.
The server always does some processing and sends back data...
In an Ajax app, the server can return a whole page, part of  a page, or just some information that will be formatted and displayed on a web page.
The browser only does what your JavaScript tells it to do.
The server responds, and the browser runs your callback function.
Our JavaScript can use the server’s data to update just part of the page.
Ajax is server-agnostic Ajax doesn’t require any particular server technology.
You can use Active Server Pages (ASP), PHP, or whatever you need and have access to.
In fact, there’s no need to get into the details of  the serverside technology because it doesn’t change how you build your Ajax apps.
What parameter and response do we need for the interaction with the server for Rob’s memorabilia page?
What happens? What’s wrong with the page? What do you need to do to fix the problem?
Test Drive Code getDetails(), and fire up your web browser.
Make sure you’ve got getDetails() coded in your thumbnails.js file.
Load up Rob’s memorabilia page, and try clicking on one of  the inventory images.
Below on the left are several properties of  the request object.
Can you match each property to what it does, or what information it contains?
Q: Can you explain what a callback function is again?
A: A callback function is a function that is executed when something else finishes.
In Ajax, it’s the function that’s called when the server responds to a request object.
The browser “calls back” that function at a certain time.
Q: So a callback executes when the server’s finished with a request?
A: No, it’s actually called by the browser every time the server responds to the request, even if the server’s not totally done with the request.
Most servers respond more than once to say that they’ve received the request, that they’re working on the request, and then, again, when they’ve finished processing the request.
Every time the server responds to a request, it sets the readyState property of the request object to a different value.
So we’ll need to pay close attention to that property to figure out exactly when the server’s done with the request we send it.
A number that represents the current state of  the request object.
Contains information sent back by the server in XML format.
A status code returned by the server indicating, for example, success or that a requested resource is missing.
The status code message returned by the server, for example, “OK” for status 202.readyState.
Below on the left are several properties of  the request object.
Your job was to match each property to what it does, or what information it contains.
This one indicates that a request is finished, and it’s now okay to process the server’s results.
This is empty unless the server sends back data in XML format.
This is empty unless the server sends back data as text (and not XML)
A number that represents the current state of  the request object.
Contains information sent back by the server in XML format.
A status code returned by the server indicating, for example, success or that a requested resource is missing.
Use a callback function to work with data the server returns How do we show the textual description for each item? Let’s assume the server will send the details about an item as pre-formatted text in the responseText property of  the request object.
So we just need to get that data and display it.
Our callback function, displayDetails(), needs to find the XHTML element that will contain the detail information, and then set its innerHTML property to the value returned by the server.
The server returns the details in the responseText property of the request object.
Q: So the server calls displayDetails() when it’s finished with the request? A: No, the browser actually does that.
All the server does is update the readystate property of the request object.
Every time that property changes, the browser calls the function named in the onreadystatechange property.
Don’t worry, though, we’ll talk about this in a lot more detail in the next chapter.
Get the server’s response from the request object’s responseText property The data we want is in the request object.
Now we just need to get that data and use it.
This line gets a reference to the XHTML element we’ll put the item details in.
This line puts the XHTML returned by the server into that element.
Q: What’s that readyState property? A: That’s a number that indicates where the server is in its processing.
Q: So that first statement just checks to see if the server’s finished with the request?
Q: Why do we have to check that every time?
A: Because the browser will run your callback every time the ready state changes.
Since a server might set this value to 1 when.
You want to make sure it’s 200 before doing anything with your request object.
We’ll talk about that in the next chapter, but can you think of how a request could be complete and still have a status code that indicates a problem?
Q: Isn’t innerHTML a bad thing to use? A: It is, but sometimes it’s also very effective.
We’ll look at better ways to change a page when we get more into the DOM in later chapters.
For now, though, it works, and that’s the most important thing.
Q: Am I supposed to be getting all this? There’s sure a lot going on in that callback function...
A: For now, just make sure you know that the callback is where you can use the server’s response.
It’s okay if all of this isn’t completely clear to you.
We’ll look at ready states and status codes in a lot more detail in the next chapter.
Test Drive Code your callback, and test out the inventory page.
You should also make sure that the server-side program with the inputs and outputs detailed on page 30 is running, and that the URL in your getDetails() method is pointing to that program.
Then fire up the inventory page and click on an item.
When you click on an item, you should see both a larger image of the item, and details about it..
Flip to Appendix I for some help on getting things working on the server.
There are also some helpful server-side resources for the book online at http://www.headfirstlabs.com.
Rob’s page is working more smoothly now, customers are coming back in droves, and you’ve helped pair vintage leather with the next-generation web.
Almost all traditional web apps have these problems in some form or fashion.
AjaxAcrostic Take some time to sit back and give your right brain something to do.
Answer the questions in the top, then use the letters to fill in the secret message.
This is the language you use to script Ajax pages.
This type of function gets called when a process completes.
This request object property tells us when the server has finished processing.
If something goes wrong at the server, this property will tell us what.
The browser will put text that the server returns in this property.
If there’s a problem, we can get a description of it in this property.
What parameter and response do we need to implement Rob’s page?
We’ll send the server the name of the item, which is stored in the title attribute of that item’s image in the XHTML.
AjaxAcrostic Solution Take some time to sit back and give your right brain something to do.
Answer the questions in the top, then use the letters to fill in the secret message.
This is the language you use to script Ajax pages.
This type of function get called when a process completes.
This request object property tells us when the server has finished processing.
If something goes wrong at the server, this property will tell us what.
The browser will put text that the server returns in this property.
If there’s a problem, we can get a description of it in this property.
So you’ve built your first Ajax app, and you’re already thinking about how to.
It’s up to you to help your users avoid making.
Mike’s traditional web site sucks Mike’s got the hippest movie reviews going, and he’s taking his popular opinions online.
Users visit his site, select a username, type in a few other details, and submit their information to get access to the review site.
The problem is that if  the username’s taken, the server responds with the initial page again, an error message...
Worse, users are annoyed that after waiting for a new page, they get nothing back but an error message.
Right now the user fills out the form and clicks the “Register” button...
Note from HR: Can we use a less offensive term? How about “consistently annoys every one of Mike’s users”?
This is how everyone else handles signups, but I’m getting flooded with complaints.
Mike’s got real problems, but with one Ajax app under your belt, you should probably have some ideas about what Mike needs.
Take a look at the diagram of what happens with Mike’s app now, and make notes about what you think should happen.
Then, answer the questions at the bottom of the page about what you’d do to help Mike out.
Everything the user entered is gone… the fields are all empty.
What do you think is the single biggest problem with Mike’s site?
Let’s use Ajax to send registration requests ASYNCHRONOUSLY Ajax is exactly the tool you need to solve the problem with Mike’s page.
Right now the biggest problem is that users have to wait for a full page refresh to find out their requested username is already taken.
Even worse, if  they need to select a different username, they’ve got to re-type all their other information again.
We’ll still need to talk to the server to find out whether a username has been taken, but why wait until users finish filling out the entire form? As soon as they enter a username, we can send an asynchronous request to the server, check the username, and report any problems directly on the pageall without any page reloads, and without losing the user’s other details.
Let’s check the requested username as soon as the user leaves the field.
The user can fill out the rest of the form while the server is checking the username.
You already know how to send an asynchronous request to the server.
The callback displays an error only if there’s a problem.
The server lets our callback function know if the username is taken or okay to use.
Did you write down something similar to this as Mike’s biggest problem?
It’s okay if you didn’t think about sending the request as soon as the user types in their username...
All this just so some movie buff doesn’t have to retype their name and email address? Doesn’t this seem like a bit of overkill?
If  you don’t tell your users about a problem right away, or if  you ever make them re-do something, you’re probably going to lose them forever.
Mike’s site may not be a big moneymaker (yet), or even seem that important to you...
One day a user you’re helping him not annoy may land him a six-figure income writing movie reviews for the New York Times.
But Mike won’t ever know if  his site is hacking his users off.
Don't annoy your users If there’s a problem with your web app, let your users know about it as quickly and clearly as possible.
But with Ajax apps, especially asynchronous requests, lots of things can go wrong.
Part of your job as a good Ajax programmer is to protect your users from all those things, or at least let them know what’s going on if and when they do happen.
Below are 5 steps that you’ll need to execute to get his site working, but the details about each step are missing, and the ordering is a mess.
Put the steps in order, and write a sentence or two about exactly what should happen on each step.
Set up event handlers for the web form’s field s??
After you’ve got your steps in order, take a look at the two diagrams below that describe some of the interactions in an Ajax version of Mike’s app.
See if you can fill in the blanks so that the diagrams are complete and the annotations are accurate.
The            function updates the page to show success or failure without.
We can show a little iconic checkmark to give the user some visual feedback.
Update the registration page’s XHTML and CSS We’ll need to add <script> elements to the registration form to reference the JavaScript code we’ll be writing.
Create and configure a new request object We can use the same createRequest() function from Chapter 1 to create the request, and then we’ll add the user’s requested username to the URL string to get that over to the server.
Verify the requested username Once we’ve created a request object, we need to send it off  to the server to make sure that the requested username hasn’t been taken by someone else.
We can do this asynchronously, so the user can keep filling in the page while the server’s checking on their username.
Report any problems with the requested username When the request object returns, the callback function can update the page to show whether the username check succeeded or failed.
Set up event handlers for the web form’s fields We’ll need some initiational code to set up an onblur event for the username field on the page.
So when the user leaves that field, we’ll start the request process.
Your job was to order the steps to build an Ajax-version of Mike’s movie review site, and fill in the missing descriptions of each step.
You also should have filled in the missing words in the diagrams.
Technically you can write the code for these steps in any order, but this is the flow that the app will follow and that we’ll use to update Mike’s app in this chapter.
The server  returns a value indicating whether the  username has been accepted.
The callback  function updates the page to show success or failure without losing any of the user’s information.
We skimmed this function in the last chapter, but we’ll look at it in detail in this chapter.
The basic structure of  Mike’s registration page is already in place, so let’s go ahead and add a <script> tag to load the JavaScript we’ll write.
Then, we can set up the username field on the web form to call a JavaScript function to make a request to the server.
Just like in the last chapter, we’ll write validation.js as we go through the chapter.
Q: What’s the big deal? This is all just like the rock and roll site from last chapter, isn’t it?
But most Ajax apps start with a few <script> tags and some external JavaScript files.
Q: But we’re still just sending a request and getting a response, right?
In fact, almost all Ajax apps can be described that simply.
But as you’ll see as we get into the registration page, there are actually two interactions possible: the one we’re building to check a username, and the Submit button the user will press when they’ve filled out the form.
Q: What’s the big deal about that? A: What do you think? Can you see any problems with having two ways of making two different requests to a web server?
We could call the JavaScript directly from the XHTML by, for example, putting an onblur event in the username form field.
But that’s mixing the content of  our page with its behavior.
The XHTML describes the content and structure of  the page: what data is on the page, like the user’s name and a description of  the movie review site, and how it’s organized.
But how a page reacts to the user doing something is that page’s behavior.
And the CSS defines the presentation of  your page: how it looks.
Keeping content, behavior, and presentation separate is a good idea, even when you’re building a relatively simple page all by yourself.
And when you’re working on complex applications that involve a lot of  people, it’s one of  the best ways to avoid accidentally messing up somebody else’s work.
Whenever possible, try to keep your page’s content (the XHTML)
Your sites will be more flexible and easier to maintain and update.
How do you think separating the content of a site from its presentation and behavior makes it easier to change?
You’ll hear some people refer to this principle as unobtrusive JavaScript.
We’ve got some really interesting questions for you this week.
Head First: Actually, there’s this one question that everyone’s been asking.
Head First: Well, we had JavaScript calling in, swearing he could call you.
Head First: So you’re saying that you don’t have to just assign event handlers from an XHTML page?
But how do you get your JavaScript to run in the first place to assign an event handler?
How can you get an initial piece of JavaScript to run without referencing a function in your XHTML page?
First, a user points their browser at Mike’s registration page.
Then, the browser starts parsing the page, asking for other files as they’re referenced.
I wonder if Juno is all it’s cracked up to be...
The browser asks for each file referenced in the XHTML...
And we can do that programmatically by setting the onload property of  the window object.
But how do we do that? Let’s look at exactly what happens when the registration page is requested by a user visiting Mike’s movie review site:
If the file is a script, the browser parses the script, creates objects, and executes any statements not in a function.
Finally, after all referenced files are loaded and parsed, the browser triggers the window.onload event and calls any function that’s registered to handle that event.
Statements in functions aren’t run until the function is called.
Everything on the XHTML page, like an image, is represented by an object.
These assignments are outside of any function, so they’re run when the JavaScript is first parsed.
We want to set an event handler up to run as soon as a user loads the registration page.
So we need to assign a function to the onload property of  the window object.
And to make sure this event handler is assigned as soon as the page loads, we just put the assignment code outside of  any functions in validation.js.
That way, before users can do anything on the page, the assignment happens.
This line tells the browser to call the initPage function as soon as the elements on the page have been loaded.
This tells the browser to call the checkUsername() function when the user leaves the username field on the form.
This is the function that will create and send the request object.
This will update the page after the browser gets a response from the server.
For now, you only need to understand that it returns an element in the XHTML page with the specified id.
Code in your JavaScript outside of functions runs when the script is read.
Create a new file called validation.js in a text editor, and add the function declarations shown above.
Remember to assign the initPage() function to the window object’s onload property!
Here’s another case where we’re assigning an event handler programmatically.
When the browser loads the XHTML file, the <script> tag tells it to load a JavaScript file.
Any code that’s outside of  a function in that script file will be executed immediately, and the browser’s JavaScript interpreter will create the functions, although the code inside those functions won’t run yet.
The window.onload statement isn’t in a function, so it will be executed as soon as the browser loads the validation.js script file.
The window.onload statement assigns the initPage() function as an event handler.
That function will be called as soon as all the files the XHTML refers to have been loaded but before users can use the web page.
It finds the field with an id of  “username.” Then, it assigns the checkUsername() function to the onblur event of  that field.
But our way is cleaner because it separates the code (the JavaScript function) from the structure and content (the XHTML)
Let’s go through it to make sure everything’s happening exactly when we want it to.
Even though these happen in sequence, ALL of this occurs before users can interact with the web page.
Both the window.onload assignment and the initPage() function are in validation.js.
We’re going to send the user’s requested username to the server.
The server will return “okay” if the username is available, or “denied” if the name has already been taken.
Before we can test out all our work on Mike’s registration page, we need to check out the server.
What does the server need to get from our request? What can we expect from the server?
Q: What’s that window object again? A: The window object represents the user’s browser window.
Q: So window.onload runs as soon as the user requests a page?
First, the browser parses the XHTML and any files referenced in the XHTML, like CSS or JavaScript.
So code in your scripts outside of functions is run before the function specified in the window.onload event.
Q: And that’s why I can assign a function to window.onload in my script file?
Any scripts referenced in your XHTML page are read before the onload event triggers.
Then, after onload triggers, users can actually use your page.
Q: I thought you had to call JavaScript code to get it to run.
You have to call code in JavaScript functions to get it to run.
But any code that’s not in a function gets run as soon as the browser parses that line of code.
Q: But we should probably test this and make sure it works, right?
Always test your application designs before you assume they’re working.
If you have code that doesn’t produce a visible result, you may want to resort to the trusty alert() function...
It doesn’t matter if the server’s running PHP, ASP, or something else, as long as it responds to our requests in the same way.
Test Drive Take the new registration page for a spin.
The initPage() function doesn’t do anything visible, and checkUsername() function doesn’t do anything at all yet...
It’s a bit of  a hack, but let’s add some alert() statements to our code to make sure the functions we’ve written are actually getting called:
Some parts of your Ajax designs will be the same...
Next up is creating a request object that works the same for the registration page as it did for Rob’s rock and roll site.
In fact, lots of  things in Ajax apps are the same.
Part of  your job, though, is to build code so you don’t have to write those same bits of  code over and over again.
Let’s see how creating and using a request object looks in Mike’s movie review site:
Good application designers look for similarities and find ways to reuse code from other designs and applications.
The request object is configured with application data and sent to the server.
The server returns a response to the browser using the request object.
Remember, we have to keep trying until we find a syntax that the browser understands.
This line sends the request back to the calling code.
Q: So what is this request object thing really called? A: Most people call it an XMLHttpRequest, but that’s a real mouthful.
It’s really easier to simply refer to it as a request object, and avoid being too browserspecific.
That’s how most everyone thinks about it anyway: as a request.
We need a function to create a request object in almost every Ajax application...
It’s the createRequest() function you saw back in Chapter 1, in fact.
Let’s take a closer look at how this function creates a request in all types of  situations, with all types of  client browsers.
This handles lots of browsers and, therefore, lots of different users.
If it’s exactly the same code as before, why can’t we just copy and paste?
And copying that code from the script you wrote in Chapter 1 into your new validation.js is a bad idea.
If  you need to make a change, you’ll now have to make it in two places.
And what do you think will happen when you’ve got ten or twenty Ajax apps floating around?
So for createRequest(), we can pull it out of  validation.js in the movie site and create a new script.
Let’s call it utils.js and start putting anything that’s common to our apps into it.
Separate what's the same across applications, and turn that code into a reusable set of functions.
Add the createRequest() function from the last chapter, or from page 61, into the script, and save your changes.
Getting into habits like this will give all your code a familiar, organized feel.
If  you’ve already added createRequest() to validation.js, be sure to remove that function.
So it’s best to make sure the browser parses your utility code before it parses any code that might call those utilities.
Q: But I still don’t understand how createRequest() actually works.
We’ve identified createRequest() as reusable and moved it into a utility script.
That’s a good thing, but we’ve still got to figure out what all that code is actually doing.
Make each of these changes to your own code, and check off the boxes as you go.
Let’s walk through exactly what each piece of  createRequest() does, step by step.
Create the function Start by building a function that any other code can call when it needs a request object.
Try to create an XMLHttpRequest for non-Microsoft browsers Define a variable called request, and try to assign to it a new instance of  the XMLHttpRequest object type.
This will work on almost all browsers except Microsoft Internet Explorer.
Try to create an ActiveXObject for Microsoft browsers In the catch block, we try to create a request object using the syntax that’s specific to Microsoft browsers.
But there are two different versions of  the Microsoft object libraries, so we’ll have to try both of  them.
This function can be called from anywhere in our application.
No matter what syntax we use to get it, the request object will behave the same once we have an instance of it.
If all else fails, return null We’ve tried three different ways of  obtaining a request object.
If  the parser reaches this request block, that means they’ve all failed.
So declare request as null, and then let the calling code decide what to do about it.
Remember, null is the object you have when you don’t have an object.
We could generate an error here, but we’ll let the calling code decide what to do if we can’t get a request object.
Different browsers use different syntax to obtain a request object.
Your code should account for each type of syntax, so your app works in multiple browsers.
No matter what syntax you use to get an instance of the request object, the object itself always behaves the same way.
Returning a null if you can’t get an instance of the request object lets the calling code decide what to do.
No matter what, something’s returned even if it’s just a null value.
Put it together, and return request All that’s left is to return request.
If  things went okay, request points to a request object.
Ajax app design involves both the web page AND the server-side program Even though there was already a web form for Mike’s registration page, we’ve got to interact with that form to get the user’s username, and later on, to update the page with an error message if  the selected username’s taken.
And even though we’re letting someone else worry about writing the serverside code, we’ve still got to know what to send to that code...
Take a look at the steps we need to perform to check a username for validity.
Most of  these steps are about interacting with either the web form or a server-side program:
Show an alert if the browser can’t create the request22
Tell the browser how to send the request to the server77
Remember, createRequest() doesn’t handle errors, so we’ll need to do that ourselves.
These have to do with getting the username to the server.
This is the “callback.” We’ll write it in a few pages.
Now we’re through until the request returns, and the browser gives it to the callback.
Make sure the username doesn’t contain problematic characters for an HTTP request.
You've got to interact with your users via a web page, and your business logic via server-side programs.
Tell the browser what function to call when the server responds to the request.
Code Magnets Most of the code for the checkUsername() function is scrambled up on the fridge.
Can you reassemble it? The curly braces fell on the floor, and they were too small to pick up.
Feel free to add as many of those as you need.
First, we call our utility function in utils.js to get the request object.
This is the callback that the browser will send the request object to when the server answers the request.
We’re using the “GET” form method and sending it to the url contained in the url variable.
And “true” means it’s going asynchronously-the user can keep filling out the form while the server checks their username.send() actually sends the.
The null means we’re not sending any other information along with it.
Code Magnet Solutions Most of the code for the checkUserName() function is scrambled up on the fridge.
Your job was to reassemble the code into a working function.
For right now, all you need to understand is that it returns a JavaScript object that represents an XHTML element on a web page.
Q: And “value”? What’s that? A: The getElementById() function returns a JavaScript object that represents an XHTML element.
Like all JavaScript objects, the object the function returns has properties and methods.
The value property contains the text that the element contains, in this case, whatever the user entered into the username field.
The JavaScript gets and sends the request object via createRequest() in utils.js.
The request object tells the server what username the user chose.
Now we’ve got everything ready to make a request to the server when a new username is entered in.
Now we’re just about ready to actually have the server respond to our request: The server returns a value indicating.
The callback function updates the page to show success or.
Test Drive Let’s make sure everything’s working before moving on...
The JavaScript still doesn’t update the page in any way, but we can use a few more alerts to check that our checkUsername() function’s working the way we want.
Open validation.js in your editor, and add the code inside the checkUserName() function that’s shown below.
It’s the same as the magnet exercise you just did, but there are a few more alerts added to help track what the browser’s doing.
Once you’ve entered the code, save the file, and load the page in your browser.
Enter anything you’d like in the username field, and you should see all these alerts displayed.
You should see an alert indicating the request is created, configured, and sent.
Asynchronous apps behave differently than traditional web apps, and your debugging has to account for that.
Asynchronous applications don’t make you wait for a server’s reply, and you don’t get an entire page back from the server.
In fact, most of  the interactions between a web page and a server in asynchronous apps are completely invisible to a user.
If  the user’s web browser runs into a problem when it executes some JavaScript, most of  the time it will just stop, and you’ll have no idea what happened.
Alerts are a good way to track down problems the browser doesn’t tell you about.
They let you know what’s going on in the background while your users are happily typing away.
You can't usually rely on a server to tell you there's a problem in asynchronous apps.
It's YOUR job to figure out if there's a problem, and respond to it in a useful manner.
The request object connects your code to the web browser All we have left to do is write the code that the browser will call when the server responds to the request.
It lets us tell the browser what to do, and we can use it to ask the browser to make a request to the server and give us the result.
But how does that actually happen? Remember, the request object is just an ordinary JavaScript object.
So it can have properties, and those properties can have values.
Which do you think we’ll need in our callback function?
The browser makes the server’s response available to your code through the properties of the request object.
If the server is sending back data as XML, responseXML will contain the XML tree that contains the server’s response.
This is usually text, but it might also be XML data.
The server will respond to your request several times while it’s working on it.
The browser uses the readyState property to tell you where your request is in its processing lifecycle.
You talk to the browser, not the server Although it’s easy to talk about your code “sending a request object to the server,” that’s not exactly what happens.
In fact, you talk to the web browser, not the server, and the browser talks to the server.
The browser sends your request object to the server, and the browser translates the server’s response before giving that response data back to your web page.
The browser communicates with the server using the HTTP protocol.
The createRequest() function obtains an instance of the request object from the browser.
The checkUsername() function uses the send() method of the request object to ask the browser to pass the request on to the server.
You’ll use the readyState property to check how far along the server is in responding to a request.
The browser uses the readystate property of  the request object to tell your callback function where a request is in its lifecycle.
This is the request object’s ready state, stored in the readyState property.
When the user leaves the username field, the checkUserName() functio.
After this statement is executed, the request object knows how to connect, and what to connect to.
The server responds with a readyState of 2 while it’s working on the request.
Response headers, which provide information about the response, are available along with a status code.
At this stage, data is downloading into the request object, but the response data’s not quite ready to be used.
Now the server’s finished with the request, and the data is ready to be used.
The server sends responses back at several points during the process.
This is the function name we used for the onreadystatechange property.
If the name doesn’t match exactly, the function won’t be called.
This if statement makes sure that none of the rest of the code runs unless the readystate is “4,” meaning the server is finished.
The server sends a status of “200” if everything is okay.
The browser calls back your function with the server’s response Every time the response object’s readyState property changes, the browser has to do something.
And what does it do? It runs the function assigned to the request object’s onreadystatechange property:
In your callback function, you need to make sure that the response is actually ready for you to use.
You can check the readyState property and the server status, and then take action based on the server’s response:
Every time the ready state of the response changes - which is every time the server updates the browser on the request its processing - the browser calls this function.
Try entering any username except “bill” or “ted.” Your browser should display all the alerts we added to test the initPage() and checkUsername() functions.
Once you’re sure everything’s working, go ahead and remove all those alert statements in checkUsername() that you added to test the code.
This message should be displayed if you enter “bill” or “ted,” and then leave the username field.
If you enter a valid username, you’ll get the alerts from your debugging code, but none indicate an error.
But when you give all your code to Mike, and he goes live with the new improved registration page, there are still some problems:
I tried to enter my information just like I did before, and the same thing happened.
What happened? Did all the work you put into the registration page get lost? Ignored?
The web form has TWO ways to send requests to the server now Suppose a user does just what you expect: they enter a username, and while an asynchronous request is going to the server and getting handled by the browser, your callback is running, and the user’s filling out other information on the form.
But suppose the user’s so eager to get to Mike’s review of  Iron Man that they put in their username, ignore everything else on the form, and click “Register.” What happens then?
When the user leaves the username field, our code sends a request object to the server.
Before the server responds to the verification request, the user clicks Register, and the entire web form is sent to the server.
The server doesn’t care that our asynchronous request hasn’t caused the user to change their username.
An entire new page is returned with none of the user’s information filled in, but with an error about the username being taken...
Even the alert box saying the username was taken has gone missing!
But we never thought about users ignoring all of the other fields.
Frank: Well, we can’t keep users from skipping over fields, but maybe we can keep them from getting ahead of  our request.
Jill: You mean validating the username? Yeah, that’s perfect, but how do we do that?
Frank: How about we just disable the Register button until the server responds to the username validation request.
Jill: That would solve this problem, but it seems like we need something more.
Frank: Like what? They’re submitting the form too soon, so if  we prevent the submission, the problem’s solved.
Jill: Well, don’t you think we need to give the user some idea about what’s going on?
Frank: They’ll know what’s going on when we enable the button.
Until then, they should be filling out the form, not trying to click ‘Register.’
Jill: But don’t you think that might be confusing? If  the user finishes filling out the form, or doesn’t want to fill it all out, then they’re just going to be sitting there, stuck, and they won’t know why.
Frank: Well, we need to let them know the application is doing something.
Jill: Another alert? That’s just going to annoy them in a different way.
How about a graphic? We could display an image when we send the request to the browser...
Jill: Hey, and if  we used an image to show whether the username is okay or not, we could get rid of  the alert when there’s a problem with the username, too.
You can never assume your users will do things exactly the way you do...
What do you think about this approach? Does it follow the principle of separating content from presentation? Would you change anything?
Display an “In Progress” graphic during verification requests When we send a request to the server to verify a username, we’ll display a graphic next to the username field, telling the user what’s going on.
That way, they’ll know exactly what’s happening as they work through the form.
It lets you access an element on an XHTML page.
Display a status message upon verification Once the request object returns, we can display another graphic in our callback function.
If  the username is okay, the graphic indicates that; otherwise, we’ll show an error icon.
This graphic is displayed if the server says the username is okay.
We can ditch the alert popup in favor of a nicer graphical icon.
Make each of these changes to your own code, and check off the boxes as you go.
If we’re changing the image in our JavaScript, aren’t we mixing in our.
Try and keep your presentation in your CSS, and your behavior in your JavaScript.
Your CSS should handle presentation, like images, colors, and font styles.
And your JavaScript should be about what your page does: the page’s behavior.
Mixing those means that a designer won’t be able to change an image because it’s in your code.
Or a programmer will have to mess with a page author’s structure.
It’s not always possible, but when you can, keep your presentation in your CSS, and use JavaScript to interact with the CSS rather than affecting the presentation of  a page directly.
Let’s create CSS classes for each state of the processing...
Instead of  changing an image directly, let’s put all the image details in our CSS.
This first class just sets up the location for the process icons...
Instead, we just need to know the three CSS classes that represent each stage of  processing.
This time we’ll just change the CSS class instead of directly changing an image:
You can change the CSS class using the className property of an element.
Remember to remove the lines that changed the image directly.
I’m going to use a single image for the process indicator.
Then, in the CSS, I’ll just set the different classes to show different parts of the image.
Sound good? Do whatever you need to do to your code to get this to work, okay?
Now there’s just one image being moved around with the CSS.
Changes? We don’t need no stinkin’ changes! Mike’s web designer made lots of  changes...
That means that all your JavaScript still works, with no updates! When you separate your content from your presentation, and separate both from your behavior, your web application gets a lot easier to change.
In fact, the CSS can change anytime, and we don’t even need to know about it.
As long as those CSS class names stay the same, our code will happily keep on working.
Good separation of content, presentation, and behavior makes your application a lot more flexible.
By setting the disabled property to true, the user can fill in the fields, but they can’t press the submit button until we’re ready.
If the username’s taken, make sure the Register button stays disabled.
Disable the Register button When a user first loads the page, the username hasn’t been checked.
So we can disable the Register button right away in our initialization code.
But if  there’s a problem with the username, they need to try again, so we should keep the Register button disabled.
And just to make things easier for the user, let’s move them back to the username field if  their username is rejected:
Only allow registration when it’s appropriate With process indicators in place, all that’s left is to disable the Register button when the page loads, and then enable the button once a username’s okay.
Make sure you’ve updated validation.js and mpovies.css, and load up Mike’s registration page.
Try it out to make sure everything’s behaving like it should.
When you enter a username, this in progress graphic should be displayed.
The image files referenced in your CSS are in the download folder from Head First Labs.
I’ll avoid that one and save twenty bucks on tickets.
Word Search Take some time to sit back and give your right brain something to do.
It’s your standard word search; all of the solution words are from this chapter.
Label Magnets All the labels describing what’s going on in the new-andimproved registration page fell to the ground.
Can you place the labels in the right place on the diagram?
When the user leaves a field, an event function creates a request object.
By the time this statement is executed, the request object knows how to connect and what to connect to.
At this stage, data is downloading into the request object, but it’s not quite ready to be used yet.
The server sends responses back at several points during the process.
When readyState = 4, the callback function uses the server response to update the page.
The server responds with a readyState of 2 while it’s working on the problem.
The request object has been created, but has no data and no information in its various properties.
The server sends responses back at several points during the process.
When readyState = 4, the callback function uses the server response to update the page.
Label Magnets Solution All the labels describing what’s going on in the new-andimproved registration page fell to the ground.
Can you place the labels in the right place on the diagram?
When the user leaves a field, an event function creates a request object.
By the time this statement is executed, the request object knows how to connect and what to connect to.
At this stage, data is downloading into the request object, but it’s not quite ready to be used yet.
The server responds with a readyState of 2 while it’s working on the problem.
The request object has been created, but has no data and no information in its various properties.
So he said, “Hey,” and then I said, “Ho,” and then he said, “Hey” again, and then I said...
Sometimes you need your code to react to other things going on in your web application...
An event is something that happens on your page, in the browser, or even on a web.
By creating code, and registering it as an event handler, you can get the browser.
Sometimes you need your code to react to other things going on in your web application...
An event is something that happens on your page, in the browser, or even on a web.
By creating code, and registering it as an event handler, you can get the browser.
Beginner This is where you should start if you’re new to yoga.
Intermediate When the beginner course isn’t a challenge, try this one.
Marcy’s just opened up a new yoga studio that caters to programmers and techies.
She wants a website that shows the different levels of  classes she offers, the times they’re available, and provides new customers a way to enroll in a class...
But she doesn’t have a clue how to build that kind of  site....
To give you an idea of  what she’s looking for, Marcy worked up a quick sketch of what a page on her site needs to show her customers:
Marcy knows her customers, but doesn’t know how to build a site that caters to them...
Customers can enroll online.Marcy’s got a program from the studio she teaches at to handle the back-end logic for this.
Customers should be able to see the schedule for each class...
Have you met any programmers? They’re not exactly patient people...
I’ve got this little sketch I did, but I need it turned into a high-tech, super-responsive site.
Marcy has a description of each class, so customers will know what to expect...
Design Magnets It’s time to turn Marcy’s rough design into something you’d like to see in your own web browser (you’re a programmer too, remember?)
At the bottom of the page are lots of magnets representing parts of a potential web page.
It’s your job to arrange these on the web browser in a way that looks great.
Also, see if you can design the site so when a customer clicks on a class level, the description and a picture of just the selected class is displayed.
In the rest of this chapter, you’ll build this site, so think about what Ajax lets you do: change parts of the page in real-time, talk to the server asynchronously, etc.
Just getting off the Twinkie diet? This is the class for you.
Just getting off the Twinkie diet? This is the class for you.
These images will display a description of the class when the user rolls the mouse over them.
When the schedule is displayed, clicking the Enroll button will take the user to a new page.
Design Magnet Solution Your job was to arrange the design magnets onto the web browser in a way that looks great.
Also, you should have designed the site so that when a customer clicks on a class level, the schedule, description, and a picture of just the selected class is displayed.
It’s okay if you came up with someth ing a.
This chapter will be working off the design shown here, but feel free to change things up and implement your design instead...
I love it, especially those images and the tabs! Build it just like that.
Just getting off the Twinkie diet? This is the class for you.
In the space below, make notes about what should happen when customers click on different buttons, and what interactions you think you’ll need between Marcy’s web page and the server.
The studio Marcy teaches at has server-side programmers that can build whatever we need...
The studio Marcy teaches at has server-side programmers that can build whatever we need...
Just getting off the Twinkie diet? This is the class for you.
We need a program that takes a class name, and brings up some sort of enrollment form.
It sounds like Marcy’s got the form, so when users click a button, we send a request to the server for enrollment in the selected class.
And what about the different class pages? We might need to request those from the server.
Your job was to make notes about what should happen when customers click on different buttons, and what interactions you think you’ll need between Marcy’s web page and the server.
When users click on a tab, it shows the description and schedule for that class.
Do we need to talk to the server for this?
Should they change the content to the selected class, too?
We can always ask Marcy questions and figure some things out as we go.
Q: I came up with something totally different for my solution.
A: It is as long as you figured out that you need to make a request to the server to enroll for each different yoga class, and realized that each tab should bring up a class schedule and description.
What do those buttons on the left do? And do we need an asynchronous request to get information about each class?
Q: Are those tabs along the top of that drawing? A: They sure are.
Tabs are a great way to let users not only see different options, but easily click on each option to find out more.
Do we have to buy a third-party tool or something?
A: No, we’ll do it all using graphics, some nifty client-side JavaScript, and a request object to fetch the schedule from the server.
Q: But there are some toolkits that do that stuff for you, right? Why don’t we just use one of those?
In this chapter, you’ll build a simple tabbed control on your own...
And of course, when the toolkit you’re using doesn’t do just what you want, you’ll be able to change it or write your own controls.
Although in that case, there was a lot less interactivity on the web page.
Users signed up, and the page and your code did everything else.
On this site, we’ve got a lot more going on: dealing with several different button presses, figuring out which button was pressed...
That’s what most of this chapter focuses on, in fact: events and interactivity.
Try not to rely on any toolkit unless you understand the code behind that toolkit.
That way, when things don’t work the way you want, you can fix the problems yourself.
Ajax IS mostly JavaScript, events, and lots of boring scripting! Most apps that use asynchronous requests have a lot more code that deals with web pages, objects on that page, and doing basic JavaScript tasks.
The actual request object code may only be a callback function and a few lines in an event handler.
But you really can’t break an application up into “JavaScript” and “Ajax” and “CSS.” It all works together.
So even though you’ll be spending a lot of  time in this chapter working with XHTML and CSS and event handlers, you’re really building Ajaxian applications: responsive, user-friendly, modern web apps.
I thought we were supposed to be learning about Ajax, not a bunch of events and boring scripting.
The more you know about JavaScript, XHTML, and CSS, the more effective and usable your Ajax apps will be.
Just getting off the Twinkie diet? This is the class for you.
Sending the request to the server involves a JavaScript event handler, as well as a request object.Most of the event han dling on the.
We’ll get that XHTML with an asynchronous request, but the response from the server is just more XHTML.
Ajax apps are more than the sum of their parts Ajax apps are really just a combination of  lots of  pretty simple technologies: XHTML, CSS, JavaScript, and things like the DOM, which you’ll get to in a few chapters.
In fact, if  you take a close look at Marcy’s app, most of  the work is not Ajax-specific.
Go ahead and download this page, along with the rest of the Chapter 3 examples, from the Head First Labs web site.
We’ll be adding a few new functions to utils.js in this chapter.
The working section of the page is wrapped in the “schedulePane” div.
This div contains the images on the left side of the page.
This div contains the four graphics that represent the “tabs.”
Here’s where we need to update the class information and display a schedule for each class.
Download the examples for Chapter 3 from the Head First Labs web site.
Go ahead and open up classes.html, and see what Marcy’s page looks like.
There’s no interactivity yet, and you may get a message letting you know that schedule.js can’t be found.
Now we just have to figure out the interactivity part.
Events are the key to interactivity Marcy’s page needs to react to her customers.
She wants a different schedule and description to appear when a customer clicks on a class, and we could even highlight a menu item by using context-specific graphics.
In programming terms, “interactive” means that your page responds to specific events.
Those things can be triggered by the user, your code, the browser, or even a server:
Lots of things trigger events, and you can register handlers in your code that respond to those events.
Context-specific graphics is just a fancy term for changing a graphic when the customer moves their mouse over a menu option.
Use me when you want to scroll in on a portion of  an image when a user clicks a certain spot of  the image.
The names of  most events give you a pretty good idea what they do.
Can you match the events to what they might be used for?
Use me when you want to let a user know about the input format for a selected text field.
Use me when you want to validate a particular field every time data is entered into that field.
Use me when you want to give the user popup instructions for a form before they start using the form.
Use me when you want to change the color of a menu item when a user hovers over the item.
Use me when you want to hide a submenu when the user moves away from a menu item.
Use me when you want to validate a form before its contents are processed by a serverside program.
Use me when you want to let users know that increasing the width of  the browser window could reduce their viewing experience.
Use me when you want to provide audio feedback when a user has images disabled.
You want to scroll in on a portion of  an image when a user clicks a certain spot of  the image.
The names of  most events give you a pretty good idea what they do.
Your job was to match the events to what they might be used for.
You want to let a user know about the input format for a selected text field.
You want to validate a particular field every time data is entered into that field.
You want to give the user popup instructions for a form before they start using the form.
You want to change the color of  a menu item when a user hovers over the item.
You want to validate a form before its contents are processed by a server-side program.
You want to let users know that increasing the width of  the browser window could reduce their viewing experience.
You want to provide audio feedback when an image can’t be loaded.
Connect events on your web page to event handlers in your JavaScript You’ve already used the window.onload event to trigger lots of  setup work on web pages, and the onclick event to handle users clicking on an image.
We can use these events, as well as the onmouseover event, to connect different parts of  Marcy’s yoga page to JavaScript functions we’ll write.
The functions you assign to events are called event handlers.
The window.onload event lets us set up a page and assign other event handlers before the user begins working with the page.
Since each tab is an image, we can simulate selecting a tab by attaching an event handler to each tab image’s onclick event.
On Marcy’s page, let’s show a helpful message, or hint, when users move their mouse over a class icon on the left.
All of these functions will go in our schedule.js script...
Because we want to keep our behavior and content separate, right? We don’t.
Use the window.onload event to initialize the rest of the interactivity on a web page You’ve already used window.onload twice to initialize a page.
We need to do the same thing in Marcy’s yoga page because...
The event occurs, or fires, once the XHTML page has been read by the browser and all the files that XHTML references have been loaded.
Q: So when window.onload fires, the browser runs that event’s handler function?
Q: How does the browser know what function to call?
A: The browser will call the function that you assign to the onload property of the window object.
You set that property just like any other JavaScript property: with an equals sign.
Just be sure you leave any parentheses off the name of the function: window.onload = initPage;
A: The browser will run any code that isn’t inside a function as soon as it encounters that code.
So just put the window.onload assignment at the top of your JavaScript, outside of any function, and the assignment will happen before the user can interact with your page.
Then, the browser will fire onload and run the function you just assigned.
That’s your chance to set up the web page’s other events.
Assigning event handlers programmatically is one more way to separate content from behavior.
Anytime you can keep your JavaScript separate from your XHTML, you should.
The same goes for XHTML and CSS: keep them separate.
The best way to assign event handlers is by using properties of  the elements in your XHTML page, and doing that assignment in a function that runs before the user gets control of  a page.
Each left-side image and tab should display information about the rolled-over class.
Additionally, clicking on a tab should select the class that’s clicked.
See if you can use the magnets below to build initPage(), as well as placeholders for the other functions referenced.
The images on the left side should show a hint when the user rolls a mouse over them, but they shouldn’t do anything else.
JavaScript Magnet Solution Using the steps on page 16 and what you’ve learned about how events work in JavaScript, can you re-create the initialization code for Marcy’s page?
This line sets the initPage() function to be called once the XHTML page has been completely loaded.
Loop over every single <img> element, and attach events to each.
You just need the declarations to avoid a JavaScript error.
These events will happen when the user moves the mouse over one of the class thumbnails or a tab.
When a mouse rolls over an image, show a hint...
Right now Marcy only wants the tab images to be clickable.
Test Drive Create schedule.js, and add the functions shown on the last page.
Don’t forget to assign initPage to the window.onload event, too.
You should see an alert for showHint(), and then hideHint()
Do you get a showTab() alert? What about clicking on an image on the left? Nothing should happen there right now.
How do you like this user interface? Is there anything you would change?
Look, you can say what you want, but I still think those images over on the left look like buttons.
If a web page is confusing to YOU, it will almost certainly be confusing to your users.
When you design and implement a site, you know how the site is supposed to act.
If  the site’s confusing to you, then users—without the benefit of  the information you havewill probably be even more confused.
Even when you don’t get to control the design of  a site, like with Marcy’s yoga page, you should still try and make the site as unconfusing as possible.
If  that means turning some images into buttons to avoid users clicking on those images endlessly, then do it!
But isn’t that confusing, too? If the images are clickable, then you’ve got two forms of navigation: tabs and images.
Sometimes you have to make a choice between okay and better.
If  you’re not in control of  a site’s design, you’re often stuck making the best decisions based on an existing layout.
With Marcy’s site, she liked the design with tabs and images.
Your job, then, is to make the best decisions based on what you’ve got.
In this case, that means two forms of  navigation to avoid userconfusion.
Otherwise, non-clickable images on the left might be construed as buttons.
This can even happen when you design a site that a customer loves.
Change those left-side images to be clickable It’s a piece of  cake to make the images on the lefthand side of  Marcy’s page clickable.
In fact, all we need to do is remove code:
And if part of a site is confusing to you, the web programmer, it’s probably even more confusing to a user.
Use your XHTML’s content and structure showHint() is called when a user rolls their mouse over a tab or image.
But how do we know which tab or image is being rolled over? For that, we need to take another look at Marcy’s XHTML:
The title attribute becomes a property of the JavaScript object that represents the <img> element.
Each image has a title attribute that identifies the class level.
Every XHTML element is accessible in your JavaScript code as an object You’ve been using getElementById() to access the images in Marcy’s XHTML page.
That works because each element in the XHTML is represented by the browser as an object you can manipulate in your JavaScript.
Even better, all the attributes on an element are stored as properties on the JavaScript object that represents that element.
Since Marcy’s images have titles, we can use those titles to figure out which image or tab was selected and show the right hint.
But the hint should only appear if the welcome tab is selected; if one of the classes is selected, hints are disabled.
Your job is to complete the code for showHint() that’s started below.
It should indicate if the welcome pane is showing, which is the only time we want to show hints.
Your job was to complete the showHint function to display a hint based on the title of the image.
Make sure this variable is declared outside of initPage(), showHint(), or any other function.
If we’re not on the welcome page, don’t do anything.
It’s always good practice to have a default in your switch statements.
Add a welcomePaneShowing variable, and update the showHint() and hideHint() functions.
Add the code for hideHint(), too The code for hideHint() is simple once showHint() is done.
You just need to grab the content pane, and set the hint text back to the default:
The function grabs the content <div> and sets the text to the default message.
Tabs: an optical (and graphical) illusion Marcy likes the look and feel of  tabs on her yoga page.
While there are lots of  fancy toolkits that let you create tabs, a simple graphical trick is all we need.
On the yoga page, we’ve got a main content pane that’s dark green.
The Welcome tab starts out that color, and the other tabs are a lighter color, the “inactive” color: These tabs are inactive...
The active color matches the color of the main content pane.
To make a tab active, we need to change the tab’s background to the “active” color All we need to do to make a different tab active is change it to the active color.
Then, we can make the old active tab inactive by changing it to the inactive color.
So suppose we’ve got two graphics for each tab: one with the tab against an active background, and another with the tab against an inactive background:
So the first thing that function should do is change the tab image for the clicked-on tab.
We need to do something similar in showTab(): figure out which tab should be active, and change that tab to the active image.
For all the other tabs, we just want the inactive image.
You’re kidding, right? What happened to all that business about.
But what would you do to fix the problem? Think about how you would separate content, presentation, and behavior before you turn the page.
While there are lots of  fancy toolkits that let you create tabs, a simple graphical trick is all we need.
For each tab, there are two possible states: active, which is the darker color that matches the content pane, and inactive, which is the lighter, unselected color.
So we can build two CSS classes for each tab: one active, and one inactive.
Open up yoga.css in your app’s css/ directory, and add these lines:
Each tab has an active class with the active image...
But then, the CSS indicates it’s styling <a> tags, with ids of  “welcome,” “beginners,” and so on.
Now we can indicate which tabs are active, and which are inactive.
We don’t want the tabs to take the user anywhere else, although later we’ll write code so that clicking on a tab shows the selected class’s schedule.
Q: If we’re not taking the user anywhere, why use <a> elements?
They link to each class schedule, even if it’s in a slightly non-traditional way.
So the best XHTML element for a link is <a>
On the other hand, there are usually at least two or three ways to do something on the Web.
As long as you can attach event handlers to the element, you’re good to go.
This broke our JavaScript, too, didn’t it? We’ve got a nice, clean XHTML page and some CSS that truly controls the presentation of  the page.
But now all that JavaScript that depended on <img> elements isn’t going to work.
That’s okay, though, because even though it worked before, it mixed images in with behavior...
Let’s fix up our script, and separate all that presentation from the behavior of  the yoga page.
We need a new block here because iterating over images won’t get the tabs...
This code looks awfully similar to the code up above, and we already.
Test Drive You’ve got a lot of changes to make.
Wow, so it takes a lot of work to separate content from presentation and behavior, especially if you don’t do things that way from the beginning.
The earlier you separate your content from your presentation and behavior, the easier that separation will be.
With Marcy’s site, we didn’t really think about content or presentation early on, and it’s only when we were a few functions into our behavior (the JavaScript) that we saw problems.
If  we’d planned from the start to keep images out of  our code, and let our CSS handle all the presentation, we’d have fewer changes to make to our JavaScript.
Still, even if  you find problems late in the process, it’s almost always better to do the work to really separate out content, presentation, and behavior.
Your app will be a lot better for the work you put into it.
Q: So should I never have images in my XHTML? That’s basically what we did with the tabs, right? Pulled the <img> elements out of the XHTML?
But more importantly, we used CSS to control whether or not a button was active.
What a button looks like when it changes from active to inactive is presentation, so that belongs in the CSS.
It’s okay to have images in your XHTML; just make sure that if those images are tied to behavior, you get your CSS and code involved, and keep those details out of your XHTML.
That’s a mouthful, so if you’re still unsure about the CSS, you might want to pick up a copy of Head First HTML with CSS & XHTML to help you out.
We’ll come back to that, but anytime you notice things that seem out of place, jot down a note to yourself.
It might be something worth looking at in more detail.
Q: When I click a button on the left, the tab also changes.
A: What do you think? When you select the “advanced” button, do you think the.
How should we store the details and schedule for each class? In an HTML file? In the JavaScript? Why did you choose the format you did?
How would you replace the main content pane with the schedule and details for a selected class?
Your page can interact with server-side programs, elements within itself, and even other pages.
We’ve gotten a lot done, but showTab() is still incomplete.
We’ve got to show the schedule for a selected class when a tab is clicked on.
Assume the schedule is an HTML description and a table that shows the days of the week that the selected class is available.
Like, just the elements and text for the actual schedule and class description.
Jill: Yeah, because there’s no way we want all that content in our JavaScript.
And if  we use XHTML, we can use the same CSS styles as in the main page.
Maybe we put the fragments in the href attributes instead of  those # symbols?
Jill: What if  we use a request object to get the XHTML fragment, and just set the content pane’s innerHTML to the returned page?
Jill: Why not? Instead of  requesting a server-side program, we’ll just request the XHTML fragment we want.
Joe: And we can do it asynchronously, so there’s no waiting or page refreshing!
If the schedule and description is HTML, we should store that as an HTML page.
Use a request object to fetch the class details from the server The server doesn’t need to do any processing for Marcy’s page, but we can still use a request object to grab the XHTML fragments for each class.
This is a request to the server, but it’s just for a page rather than a program.
Still, the details are the same as you’ve already seen.
We’ll build the code the same way we always do, using the createRequest() function from utils.js and a callback to display the results in the content pane.
This is the part of the showTab() function that you’ve already written.
The showSchedule() callback function is called when the request returns.
We can display the XHTML using the innerHTML property of the content page.
This is the same request creation code we’ve been using for talking to server-side programs.
Make these changes to schedule.js, and try out the improved web page.
Be careful when you have two functions changing the same part of a web page There’s a bug! Class schedules show up okay, but mousing over another tab or button image hides the class schedule and replaces the content pane with hint text.
Clicking a button or tab works great: the class schedule is retrieved and dropped into the content pane.
But then mousing over a button or tab replaces the schedule with a hint.
The class schedule and details load perfectly from XHTML fragments.
They should be in the same directory as your main page, classes.html.
You need to change the JavaScript so that hints only show when the welcome tab is active.
Mark up, cross out, and add to the code below to finish up schedule.js.
To help you out, we’ve only shown the parts of the script that you need to change or add to, and parts that are relevant to those changes.
Your job was to finish up the code so that tabs selected classes and turned off hints.
Hints should only appear when the Welcome tab is active.
If it’s not, we don’t want to show any hints.
We’ve already got a check in showHint() for the welcome pane...
First, we need to see if the selected tab is the Welcome tab.
If any other tab is selected, update welcomePaneShowing to false.
Now no hints will show because of the if statement in showHint()
If the welcome pane is selected, we need to overwrite any class schedule with the welcome message...
Q: What if I didn’t catch the bit about changing the content pane back to the welcome message when the Welcome tab is selected?
Make sure you add that code to your copy of schedule.js, though.
One way you can avoid missing things like that in the future is to always test your code.
Load up the yoga class page, and click and move the mouse around...
Load up Marcy’s web page, and give it a spin.
It’s perfect! Wow, it’s just like the drawing you did.
Clicking on a tab or button selects the right class schedule and description...
Marcy wants the images on the left to change when users roll their mouse over the image It’s too bad Marcy didn’t let us know about this earlier, but this still shouldn’t be too hard.
So when the page loads, the images should look one way, but each time a user rolls their mouse over the button, the image should change.
When you need to change images in your script, think “change CSS classes” instead Here’s another case where separation of  presentation and behavior can be a big issue.
Before changing any code, think, “Is this a case where I’m going to have to mix my behavior (my code) and my presentation (like images)?”
So let’s add some new CSS classes for both button states: the normal button and the active button.
Just like with the classes for the tabs, these can go anywhere in your CSS.
These rules apply to all the <a>’s and handle positioning and sizing.
Links in XHTML are represented by a   elements Here’s another place where we can make some improvements to our XHTML.
Currently, the images are represented by <img> tags, but they really are functioning as linking buttons: you can click on one to get a class schedule.
Let’s change each button to an <a>, which better represents something you can click on to get to a different destination, in this case a class schedule and description.
This text will get covered up by the button images.
Q: With the tabs, we had an inactive class and an active class.
But on the buttons, they’re in the XHTML without a class, and then there’s a CSS “active” class description with the active image.
Why don’t we have an inactive CSS class with these buttons, too?
With the tabs, there were two distinct states: active (in the forefront) and inactive (in the background)
The buttons we have, though, really have a normal state, where they sit flat, and an active state, where the button is highlighted.
So it seemed more accurate to have a button (with no class), and then assign that button the “active” class when it’s rolled over.
Uniformity is a good thing, though, so you could probably use inactive and active classes if you felt strongly about it.
We need a function to show an active button and hide a button, too Before we change any of  schedule.js, let’s add two functions we know we’ll need.
First, we need a buttonOver() function to show the active image for a button.
We can do just the opposite for when a user’s mouse rolls out of  the button’s area.
We just need to change back to the default state, which is no CSS class:
When you initialize the page, you need to assign the new event handlers Now we need to assign the new functions to the right events.
That object has a property for each event that can occur on the element that it represents.
We’ve changed the array that was called images to be called buttons.
When the mouse is over a button, make it active.
When the mouse rolls out of a button, go back to the default state.
Roll over a button, and you should get the active version with a new image.
What happened to the hints that were attached to the button’s onmouseover and onmouseout events?
What would YOU do to make sure that Marcy’s customers get cool interactive buttons AND helpful hints?
When you’ve got an idea, turn over to Chapter 4, and let’s see how to take your event handling skills to the next level (literally)
Maybe you’ve got some event-specific actions, as well as some generic.
Level 2 methods to assign multiple handler functions to a single event.
Maybe you’ve got some event-specific actions, as well as some generic.
Level 2 methods to assign multiple handler functions to a single event.
I mean, I’m great at onclick, but without a little.
An event can have only one event handler attached to it (or so it seems) Marcy’s page has a problem.
We’ve assigned two event handlers to the onmouseover property of  her image buttons:
Only the LAST event handler assigned gets run When you assign two event handlers to the same event, only the last event handler that’s assigned gets run.
So on Marcy’s page, mousing over a button triggers onmouseover.
Then, that event runs the last handler assigned to it: buttonOver()
The image is changing when you roll over a button, so buttonOver() is getting called.
Event handlers are just properties When you assign an event handler to an event on an XHTML element, the handler becomes a property of  the element, just like the id or title properties of  an <a> element:
The <a> object has properties: an id, title, an href, and an onmouseover.
A property can have only ONE value If  you assign a value to a property, that property has that single value.
So what happens when you assign another value to that property? The property then has the new value, and the old value is gone:
Then, the onmouseover property is assigned a new value, “buttonOver.” The v alue “buttonOver”
Assign multiple event handlers with addEventListener() So far, we’ve been adding event handlers to elements by setting the event property directly.
We need a way to assign more than one handler to an event, which means we can’t just assign a handler to an event property.
You can call this method on any element you have an object representation for.
For the first argument, use the event name without the “on” in front.
This should be a function in your script, or you can declare the function inline.
In what order do you think the browser will call your handlers? Do you think the ordering in which the handlers are run will affect how you write your code?
It’s a specification that defines how the parts of a web page, like elements and attributes, can be represented as objects that your code can work with.
So it works with the DOM but isn’t really part of it.
For your purposes, though, DOM Level 0 is what your browser uses to come up with basic objects and properties for each element in a web page.
So DOM Level 1 lets you find the parent of an element, or its second child.
Right now, though, you don’t really need to worry too much about what level of the DOM you’re using, except to make sure your browser supports that level.
Q: So I can use addEventListener() to add multiple events, and it will work with all the browsers?
But there’s one major browser that doesn’t support DOM Level 2...
Q: Couldn’t I just assign an array to an event property, and give the property multiple values that way?
A: That’s a good idea, but it’s the browser that connects events to event handlers.
If you assigned an array of handler names to an event property, the web browser wouldn’t know what to do with that array.
That’s why DOM Level 2 was put into place: it provides a standard way for browsers to deal with multiple events.
Ideally, specifications standardize a process and remove any possible guesswork.
That’s just the way the authors of the DOM decided to handle event names.
So if you’re assigning an event property, use onclick or onmouseover.
A: That last parameter indicates whether you want event bubbling (false) or capturing (true)
We’ll talk more about capturing and bubbling in a bit, so don’t worry about this too much.
You can assign as many handlers as you want to an event using addEventListener()
You’ve already seen how addEventListener() adds a handler to an event:
You might think that the browser calls the event handlers in the order they’re added, but that’s not guaranteed.
Make sure that your handlers don’t depend on the order in which they’re called.
The browser runs every handler for an event when that event is triggered When an event is triggered by a mouse movement, the browser looks up the right event.
Then, the browser runs every event handler function registered to that event:
It’s time to make some improvements to Marcy’s yoga page.
Your job is to cross out anything that shouldn’t be in the code, and make any additions you think you need to get the image button mouse events to work.
Your job was to cross out anything that shouldn’t be in the code, and make any additions you thought you’d need to get the image button mouse events to work.
Both the mouseover and mouseout events need two handlers each.
Remember, the event names are the same, but without the “on” before the name.
Test Drive Change your copy of schedule.js, and fire up your web browser.
Moving your mouse over the intermediate image changes the hint text...
Everything works? Are you kidding? Now the hints don’t show up, and the images don’t change.
What’s going on with Marcy’s browser? What do you think is going wrong for Marcy? Why isn’t the yoga app working?
What’s going on with Internet Explorer? The yoga page works great on Firefox, Safari, and a lot of  other browsers...
Internet Explorer uses a totally different event model Remember that addEventListener() only works on browsers that support DOM Level 2? Well, Internet Explorer isn’t one of those browsers.
That’s why Marcy got an error trying the yoga page out on IE.
Fortunately, IE provides a method that does the same thing as addEventListener()
This is the method that adds the event handler in Internet Explorer.
This time you keep the “on” at the beginning of the event name...
You still give the function the name of the handler to run when the event occurs.
So you just need to use the right one for your users’ browsers.
Q: So this is all about which browser is better?
A: No, it’s just that not all browsers were developed the same way.
It wasn’t so long ago that the DOM wasn’t a sure thing, and Microsoft just decided to go in another direction.
A: It’s true that lots of web developers think that IE is hard to deal with.
But look at things the other way: if you’ve been writing code on IE all your life, then it’s really Firefox, Safari and Opera that are a pain.
Either way, you’ve got to write web apps that work on all major browsers, or you’re going to miss out on a ton of users.
Q: Why does attachEvent() add the “on” back to the event name?
A: That’s just the way IE decided to implement that method.
A: You may remember that the last argument to addEventListener() indicated whether you wanted event bubbling (false) or event capturing (true)
We’ll come back to capturing and bubbling once we’ve got Marcy’s app working on all major browsers.
Q: So which one should I use? addEventListener() or attachEvent()?
If you think about it and look back at the createRequest() function, you probably already know the answer...
Like it or not, not all browsers are the same.
Besides, when Microsoft came up with their own event model, it wasn’t that obvious that the DOM Level 2 would take off  like it did.
And no matter how it all happened, you can’t write off  people who use IE...
In IE, event names have “on” in front, for example, “onclick” and “onmouseover.” In Firefox, Safari, and Opera, event names DON’T have “on” in front: “click” and “mouseover.”
Utility Function Magnets Just like with createRequest(), we need our event handling to work on multiple browsers.
Your job is to use the magnets below to build a utility function for adding event handlers to events.
Q: Why didn’t we use a try...catch block this time? A: We could have, but unlike createRequest(), this function doesn’t need an error to know that something went wrong.
Besides, the if...else if block is a lot easier to read.
Utility Function Magnets Solutions Your job was to figure out a way to get our event handling to run on multiple browsers.
You should have built a utility function for adding event handlers to events.
This function takes in the object that this event applies to...
Wouldn’t it be dreamy if I never had to worry about adding multiple event handlers again? If only I could take my addEventHandler() utility function with me all the time...
It will work for all our apps and in any browser.
So go ahead and add your new code to utils.js, so we can reuse it in later web apps we build.
Anytime you build cross-browser utility functions, store those methods in scripts that you can easily reuse in your other web applications.
Just like createRequest(), addEventHandler() is useful in all our apps.
Let’s update initPage() to use our new utility function Now we need to change initPage(), in schedule.js, to use addEventHandler() instead of  addEventListener()
Go ahead and make the following changes to your copy of  schedule.js:
Remove all the addEventListener() calls, as they only work on DOM Level 2 browsers.
Test Drive You should have addEventHandler() in utils.js and an updated version of initPage() in schedule.js.
Once you’ve made those changes, try out the yoga page in Internet Explorer and a DOM Level 2 browser, like Firefox or Safari.
That means our addEventHandler() utility function does the right thing for those browsers.
Use an alert() to troubleshoot Without any error messages, it’s hard to know exactly what’s going on with Internet Explorer.
Try putting in a few alert() statements in the event handlers, though, and you’ll see they’re getting called correctly.
So what else could be going wrong? The event handlers are getting called, so that means that addEventHandler() is working like it should.
And we’ve already seen that the code in the handlers worked before we added the rollovers.
What do you think the problem could be? Can you figure out why the code.
The this keyword in JavaScript always refers to the owner of  the function that’s executing.
So if  the method bark() was called by an object called Dog, then this in bark() would refer to the Dog object.
When you assign an event handler using DOM Level 0, the element with the event is the owner.
So if  you did tab.onclick = showTab;, then in showTab(), this would refer to the tab element.
That’s why showHint() and hideHint() worked great in the last chapter.
We know the CSS works, and there’s hardly anything else in those showHint() and hideHint() functions.
So it’s got to be the this reference that’s a problem, right?
The this keyword refers to the owner of the function that’s running...
That’s why our handlers still work with DOM Level 2 browsers.
In a web environment, the browser calls all the functions, but objects representing elements on the page are the owners of those functions.
So in IE, the event framework owns the handler functions, not the object on the XHTML page that was activated with a click or mouse over.
In other words, this in showTab() refers to the IE event framework, not to a tab element on Marcy’s yoga web page.
In IE, this in an event handler that refers to an object in the event handling framework.
You can’t get back to the object on the page that the event was triggered on using this in IE.
Q: What object does this refer to in the IE framework, then?
A: this always refers to the owner of the function that’s currently running.
So in an event handler under IE’s event framework, this points at one of the framework’s objects.
It really doesn’t matter what that object is because it’s not all that useful.
What we need is a way to get information about the element that the event occurred on.
Q: But if this is how IE handles events, how did our code work back in Chapter 3 on Internet Explorer?
A: Our code worked in IE because we were just using DOM Level 0 syntax.
That’s not DOM Level 0, and now this doesn’t mean the same thing as it did in that earlier code.
A: Well, take a moment to think about what exactly you need.
It’s not so much the this keyword that’s important, but the information that keyword let us access.
What exactly do we need to know about in our event handler functions?
Framework just means a set of objects or code that performs some task, like handling events on a web page.
So even if  your function declaration is showTab(), you can pass arguments to showTab() when you call it.
Your handlers can then use this object to figure out what object on a page was activated by an event, and which actual event was triggered.
There are two properties in particular that are really helpful to know about.
The first is type, which gives the name of  the event that was triggered, like “mouseover” or “click.” The second is target, which gives you the target of  the event: the object on the page that was activated.
This is the object the event occurred on, like a tab or an image on a web page.
Even though there aren’t any objects listed here, showTab() could still be getting additional information when it’s called.
The bad thing about that is sometimes you miss out on arguments that are passed to your function.
Event objects know what object triggered them and what type of event they are.
We’ve got to replace “this” with something that points to the object on the web page that triggered this event.
So we need to get access to the Event object in our handler functions.
We need to name the Event argument, so our handlers can work with it You don’t have to list all the arguments a JavaScript function gets.
But if you want to actually use those arguments in the function, you do need to list the arguments.
First, we need to get access to the Event object in our handlers, so we can figure out what object on a page triggered a call to our handler.
Then, we need to list the argument for that Event object:
All of the event handlers in schedule.js should now take an extra argument.
With DOM Level 2 browsers, you can use either this or the Event object passed into an event handler to find out what element was activated.
Do you think one approach is better than the other? Why?
We’ll need to change most of our handler functions to use the Event object instead of “this.”
The good news is that both IE and DOM Level 2 browsers make the object that triggered an event available.
The bad news is that DOM Level 2 and IE use different versions of  the Event object, each with different properties.
In some cases, the Event object properties refer to the same thing, but the property names are different.
And to make matters worse, modern versions of IE pass in an Event object, but earlier versions of  IE make the Event object available as a property of  the window object.
Browsers that support DOM Level 2, like Firefox, Safari, and Opera, pass an Event object to event handlers.
The Event object has a property named “target” that refers to the object that triggered the event.
Internet Explorer 7 passes an Event object to event handlers.
The Event object has a property named “srcElement” that refers to the object that triggered the event.
Earlier versions of Internet Explorer provide the object that triggered an event in a property named “srcElement,” available on the window object.
So you think you really know your browsers? Here’s a quiz to help you check your knowledge out for real.
For each property, method, or behavior on the left, check off  all the boxes for the browsers that support that thing.
So you think you really know your browsers? Here’s a quiz to help you check your knowledge out for real.
For each property, method, or behavior on the left, you were to check off  all the boxes for the browsers that support that thing.
All versions of IE have this property, but on different objects.
This is our utility function, so it works on all browsers.
Old versions of IE expose srcElement as a property of the window object.
Q: So “this” always refers to the function that called my function?
A: No, this refers to the owner of the function.
Sometimes that’s another bit of code, but it also might be an object, like a tab on a form that got clicked.
A: this still refers to the owner of a function in IE.
The difference is that when you use attachEvent(), the owner of your function is an object in IE’s event handling framework and not an object on your web page.
Q: So we shouldn’t ever use “this” in Internet Explorer?
A: Actually, this is still a very useful part of JavaScript, whether you’re using IE or a DOM Level 2 browser.
But if you’re writing an event handler function, you’re probably better off avoiding this.
If you’re writing an event handler that’s going to be called using the IE event handling framework, via attachEvent(), then you’ve got to avoid using this.
Q: I’m still a little fuzzy on all this DOM stuff.
A: DOM, or the Document Object Model, is how a browser represents your page as objects.
JavaScript uses the DOM to work with a web page.
So every time you change an element’s property or get an element with getElementById(), you’re using the DOM.
That’s all you really need to know right now, but we’re going to dig into the DOM a lot more in just a few chapters.
Q: As long as I use addEventHandler(), I don’t have to worry about all this DOM stuff, though, right?
A: Well, you don’t have to worry about whether you should use attachEvent() or addEventListener()
But as you’ll see in Chapter 6, there’s still a lot of DOM work you’ll end up doing.
Q: And that’s why it’s in utils.js, right? Because it’s a utility function?
So it’s best put into a reusable script, like utils.js.
Q: But even if we use addEventHandler(), we’ve still got these issues with target and srcElement, right?
Older versions of IE make that same object available through the window.
Q: I’ve heard that object called an “activated object” before.
An activated object just means an object that represents an element on a web page that an event occurred on.
So if an image is clicked, the JavaScript object that represents that image is the activated object.
Q: Since addEventHandler() took care of adding events on all browsers, why don’t we just build another utility function to deal with all this target/srcElement stuff?
The DOM provides an object-based model of your web page that your code can work with.
So how do we actually GET the object that triggered the event? The best way to deal with differences in how IE and DOM Level 2 browsers handle events is another utility function.
Our handler functions are now getting Event objects, but what we really need is the activated object: the object representation of  the element on the page that the event occurred on.
So let’s build a utility function to take the event argument we get from those browsers, and figure out and return the activated object:
This function goes in utils.js along with createRequest() and addEventHandler()
Our handlers get an Event object, so let’s pass that ob.
You’ll also need to change the rest of those methods to use the object returned from that function instead of this.
There are a few other changes you should already have made, too.
Use addEventHandler() instead of addEventListener() Use the generic addEventHandler() to abstract out DOM Level 2 and IE event handling differences.
You’ll need to make other changes to get those functions working as well.
When you think you’re done, try things out for yourself.
Then, turn the page to see how we updated the code in schedule.js and utils.js.
Your job was to complete the changes to schedule.js so that all the event handlers would take an Event argument, and use the getObject() utility function from utils.js to figure out the activated object.
You should have also removed all references to this in your event handler functions.
Make sure you add the extra argument to all your event handler functions, so you can work with the object sent to those handlers.
All the multiple event handling situations should now be setup with addEventHandler()
Since these events have just a single handler, DOM Level 0 is fine.
It’s common to call the object returned from getObject() “me.”
The “me” variable stands in for “this.” The code stays almost exactly the same.
Test Drive It’s been a long journey, but you’re finally ready to test out Marcy’s yoga page one more time.
See if everything works in both IE browsers AND DOM Level 2 browsers.
Yes! IE is working now, using its own event handling.
This is great! I’m already getting more people enrolling in my classes.
Use this function to register an event in Internet Explorer.
EventAcrostic Take some time to sit back and give your right brain something to do.
Answer the questions in the top, then use the letters to fill in the secret message where the numbers match.
Use this function to register an event in Internet Explorer.
EventAcrostic Did you figure out the secret message? Do you agree with it?
You’ll find out what asynchronous really means, learn how to use multiple.
You’ll find out what asynchronous really means, learn how to use multiple.
Well I’m not going to sit around waiting any longer.
What does asynchronous really mean? An asynchronous request means that you don’t have to wait around while a web server is responding to that request.
That means you’re not stuck: you can go on doing what you want, and have the server let you know when it’s finished with your request.
Let’s take a view of  this from 10,000 feet by first looking at what a synchronous request is, and then comparing it to an asynchronous request:
I’m really craving a Head First cola...Hey, Rufus, will you go GET me a Head First cola from the store?
This is your request: you’re asking your trusty dog Rufus to go GET you a cola.
Like before, you make a request to Rufus to GET you a cola.
Except this time, you tell him he’s an asynchronous dog.
Finally Rufus is on his way back with your cola...
Good boy, Rufus! But I gotta make you an asynchronous dog...
By the time Rufus gets back, you’re on the 17th green.
The difference is that you weren’t completely stuck while you were waiting for it.
And that means you can do whatever you want while he’s getting the cola.
You’re not stuck like you were when he was synchronous.
When a user types in their username and leaves that field, that value gets sent to the server right away for validation.
But the user can fill out the rest of  the form while that validation is happening.
That’s because we made the request to the server asynchronous.
This callback runs every time the server responds with new data.
All of the server processing, AND the callback, happens while the user is still filling out the form...
When you built Mike’s Movies, you probably barely noticed the asynchrony.
Requests to and from a server—especially when you’re developing, and there’s not a lot of  network traffic—hardly take any time at all.
As soon as a user types in a username and leaves the field, checkUsername() gets called.
Not much time for typing or golf here! The server responds almost immediately.
You probably see the “okay” image right away, before you have time to type anything else.
The response time on a live site will almost always be slower than on a test site.
The only way to know for sure is to TEST your app on the live site.
But the response time on a live site is almost always going to be slower.
There are more people competing for server resources, and user machines and connections may not be as powerful and fast as your development machine.
And that doesn’t even take into account how long it takes a server to respond.
If  the server’s querying a huge database, or has to do lots of  server-side processing, that slows the request and response cycle down, too.
Mike loves the page you built him and has some more ideas.
His site’s become popular, but some folks have been posting fake reviews under other peoples’ usernames.
Mike needs you to add a password field to the registration form, verify the username and password asynchronously, and keep unwanted users out of  his system for good.
Mike’s got a server-side program that checks a password to make sure it’s at least 6 characters long and contains at least one letter.
The first password value will get sent to the server for validation.
Since we can’t let users in until they are registered, Mike’s got an idea: while the form is being submitted and processed, he wants images from his collection of  movies and posters to scroll by and whet the user’s appetite for reviews on those items.
Mike wants to add password verification to the registration page.
Below, we’ve given you a screenshot of what Mike’s final app should look like.
It’s up to you to make notes about the interactions that need to happen to add all the behavior Mike’s asking for.
Don’t forget about the server-side requirements! You’ll need two different server-side processes for this version of Mike’s app.
Label the arrows below to indicate what you’re sending to the server, and what you think it should send back in response.
Mike wants images of his reviewed movies at the bottom of the page.
What should be happening between the page and your JavaScript, and your JavaScript and the server?
Mike also lays out his password requirements in red text.
Your job was to figure out the interactions that have to occur to get all this behavior working like it should.
Were you able to figure out what our JavaScript needed to send to Mike’s server, and what the server-side programs should send back?
We also need to send the password to Mike’s server for validation.
We want to keep everything we’ve already got, so entering a username.
When the user enters a password, we need to call a JavaScript function...
If the password’s not valid, make the user reenter the password.
We can use JavaScript to ensure that both password fields match before the user can submit the form.
Once the user clicks the Register button, we need to animate these images...
Then, we’ve got to figure out a way to submit his form and animate those images at the bottom.
Here’s how we’re going to take on the improved version of  Mike’s Movies in this chapter:
Update the XHTML page We need to add two more password fields: one for entering a password, and one for verifying that password.
We’ll also need a section for putting in those movie images.
Validate the user’s passwords Then, we need to handle the user’s password.
We’ve got to build a handler function that takes a password, sends it to the server, and sets up a callback that checks to see if  the password was valid.
Then we can use the same icons we used on the username field to let the user know if their password is valid.
Submit the form Finally, we’ve got to build code to submit the form, and animate the images along the bottom.
We can attach that code to the Register button’s click event instead of  letting the form submit through a normal XHTML Submit button.
Somewhere in here we should make sure both password fields match, too.
We need code to submit the form since we’ve got to animate the images at the same time.
We need two password fields and a  div for the cover images We’ve got to add a couple of  password fields to the form, and then we also need a <div> at the bottom to hold all those cover images.
We need two fields: one for the initial password, and one to verify the password.
Make the type of these “password” so nobody can see what users are typing.
This label lays out Mike’s password requirements, and the CSS styles it to be red.
Q: Why are you using style attributes on those cover images? Isn’t mixing style into the XHTML a really bad idea?
But the only other option is to have a different class for each image in that <div>
It’s good to try and separate content from presentation, but if it makes your XHTML and CSS a real mess, then you sometimes have to break a rule to make your XHTML and CSS manageable.
Make sure that all the cover images show up, and that there are two password fields.
You should also check that the username field still sends a request to the server for validation, and that the Register button is disabled when the page first loads.
You should be able to type in a username, get an In Progress icon, and then either a check mark or an X.
Also make sure that only asterisks appear when you type in these fields.
Procedure Magnets By now, you should be pretty comfortable figuring out how to tie an event on a page to a request for a server-side program to process some data.
Order doesn’t matter in most cases, so just match the magnet to what that magnet helps you accomplish.
Write event handlers for each event you want to perform behavior on.
Trigger the event registration function before the user can work with the web page.
With the XHTML done, we can move on to validating passwords.
Procedure Magnet Solution Your job was to build a process for connecting an event on a web page to a server-side program.
Write event handlers for each event you want to perform behavior on.
Create a callback function that will be called when the server responds to the request.
Trigger the event registration function before the user can work with the web page.
Obtain a reference to an object, and then either assign the handler to its event property or use addEventHandler() to register the handler to an event on that object.
You just have to have all four things in place before your code will work.
This should take the server’s response and do something with that response.
If you need new behavior, you probably need a new event handler function We’ve got to validate a password once a user enters something in the password form fields.
So we need a new event handler to validate passwords.
We also need to register an onblur event handler for the right password field.
All we need to do is assign another event handler, this time to the password2 field.
Q: Why didn’t you use addEventHandler() to register the checkPassword() handler?
A: Because we’re only assigning one handler to the password2 field.
If we needed multiple handlers for that field, then you would need DOM Level 2 or IE’s attachEvent()
We need to check the passwords against each other before sending them to the server for validation.
So we can’t do anything until the user’s entered a password for both password fields.
When there’s a value for the first password field, we could send a request to the server...
We really need to check and see if both fields match first, and then send the password to the server for validation.
Hints: There’s a CSS class called “thinking” that you can set either password field to in order to get an “in progress” icon.
The “approved” class shows a check mark, and the “denied” class shows an X.
The program on the server that validates passwords is at the URL “checkPass.php”
The program takes a password and returns “okay” if the password is valid, and “denied” if it’s not.
A callback runs when the server returns a response to your request.
An event handler runs when a certain event on your page occurs.
Since we’ll use these field elements a lot, it makes sense to put them both into variables.
Then, we need to compare the values of the two fields.
If the non-empty passwords don’t match, show an error and stop processing.
Get a request object, and make sure it’s good to use.
Make sure this function name exactly matches the value of the onreadystatechange property of the request object.
If we get a response of “okay”, show the check mark icon for the password1 field.
Q: Should we be sending a password as part of a GET request? Is that safe?
For now, just focus on the details of asynchrony, and we’ll look at securing Mike’s users’ passwords a bit better later on.
Q: I tried this out, and I think there are some problems...
A: Really? What were they? What do you think caused them? Try out our code, and see what you get.
Are there things you would change or improve? Try entering in just a username, or just valid passwords.
Test Drive How does Mike’s page look and behave? Make the changes to validation.js that we did, or use your own version (as long as it does the same basic things)
What’s happening? Do you think our code works, or are there problems?
What exactly does that mean? Is it totally clear to users? We may have to come back to that a little later.
Finally, tab out of the second password field to trigger the checkPassword() event handler.
Does anything strange happen? What’s going on? What do you think might be causing the problem?
Finally, tab out of the second password field to trigger the checkPassword() event handler.
Once both passwords are in, the password field moves to “In Progress.” That’s good, too.
The password status changes to okay or denied, so that’s okay, but...
The username request never returns! The field still shows the “In Progress” icon.
It’s time to figure out what’s going on with our asynchronous requests.
Below is the request variable named “request”, as well as the server.
In JavaScript, two objects that share the same name share everything, including property values.
What order are these being called in? How does that affect the request object?
With ONE request object, you can safely send and receive ONE asynchronous request Both checkUsername() and checkPassword() use the same request object.
Because both use the variable name request, it’s just a single object being used by both.
Take a close look at what happens when you’re just making a single request, and there’s no password validation involved:
The browser calls the function specified in the request object’s onreadystatechange property.
The username gets validated and the right icon shows up.
That means that you could have two totally different server responses being handled by the same callback...
But before the username request is handled, checkPassword() is called...
We have no way of knowing which response is for what request!What if the server response for username is “denied” and.
If you’re making TWO separate requests, use TWO separate request objects The problem is that we’re using a single request object to make two aynchronous requests.
And what does asynchrony mean? That those requests won’t wait on a browser or server to get moving.
So we end up overwriting one request’s data with data from another request.
But what if  we have two asynchronous requests? The two requests won’t wait on each other, or make the user wait around, but each request object will have its own data instead of  having to share.
The requests are separate, so the browser knows where each response should go.
You should be ready to update your code to use two request objects.
You’ll have to change code in validation.js in several different places.
When you think you’ve got them all, turn the page.
Q: What does any of this have to do with asynchrony?
A: Well, think about this: what if the request to validate usernames was not asynchronous? Then there’d be no way that the password request could get sent before the username request completed.
Q: Wouldn’t it be easier to just make the username request synchronous?
A: It would be easier, but would that be the best application? Then users would have to wait for their username to get processed.
Then, and only then, could they move on to the password field.
Sometimes the easiest technical solution is actually the worst usability solution.
Q: Why do the two request variables share property values? Isn’t each declared locally within separate functions?
A: It looks that way, but request is actually first defined in the createRequest() function.
Not only that, but request is defined in createRequest() without the var keyword.
Any variable declared in JavaScript inside a function, but without the var keyword, becomes a global variable.
Q: So why not just use the var keyword in createRequest() to fix all of this? Wouldn’t that make request local?
A: Good question, but that would cause a different set of problems.
If request is local, then how would a callback function get access to the request object? The callbacks need request to be global, so they can access the variable and its property values.
Q: So how does assigning request to two other variable names help?
A: You may want to pick up a good JavaScript book, like Head First JavaScript or JavaScript: The Definitive Guide, for more on variable scope and assignment in JavaScript.
Or you may want to just follow along, and pick up what you’re a little unsure about as you go.
JavaScript considers any variable outside a function, or a variable declared without the var keyword, to be GLOBAL.
We’re using usernameRequest for the request object related to username checks.
Set properties and send the request just like you did before.
Here’s why you needed usernameRequest to be global: this callback also has to access the same object.
Just like with the other request variable, do not use the var keyword.
Now this code has no chance of overwriting properties of the username request object.
Once I enter a valid username, I can click Register...
Verification is making sure that a certain piece of  data is okay for your system to accept.
Restriction is not allowing a user to do something until that verification is complete.
When we wrote the first version of  Mike’s page, we disabled the Register button in the initPage() function, and re-enabled it once the server validated the user’s username.
So we verified the username and restricted the Register button.
But now there’s another level of  validation: we have to make sure the user’s password is okay.
While that verification is occurring, you have to restrict the user from doing things that depend upon verification.
Q: How is enabling the Register button part of restriction? That doesn’t make sense...
A: Restriction is the process of not letting a user do something until verification is complete.
So part of the restriction process is enabling a button or activating a form.
In fact, the end of every restriction process is the lifting of that restriction.
Both of these callbacks enable the Register button only when their verification successfully completes.
Asynchrony means you can’t count on the ORDERING of your requests and responses When you send asynchronous requests, you can’t be sure of  the order that the server will respond to those requests.
Suppose that a request to verify a username is sent to the server.
Then, another request is sent, this time to verify a password.
Which one will return first? There’s no way of  knowing!
Never count on the ORDER or SEQUENCE of requests and responses in asynchronous applications.
Can you figure out at least one sequence of requests and responses that would result in the Register button being enabled when either the username or the password is invalid? Draw or list the steps that would have to occur for that to happen.
Here are two different sequences where the Register button ended up enabled when it shouldn’t be.
Did you come up with one of these? Or something similar?
The Register button always starts out disabled.The user enters a valid username.11
The username callback gets an “okay” response and sets the username field to show the “approved” check mark...
If the two passwords don’t match, there’s no request to the server...
The server returns its response after the passwords have already been denied.
The end result is a valid username, invalid password, and enabled Register button.
The username callback gets a “denied” response and sets the username field to show the “denied” X mark.
The user enters two matching passwords, and the password is valid by Mike’s security standards.
The password callback gets an “okay” response and sets the password1 field to show the “approved” check mark...
This time, you get an invalid username, a valid password, and an enabled Register button.
This request and response were fielded before the password request started.
So what do we do now? Go back to synchronous requests? What a pain...
No matter how you cut it, building an application that’s highly usable is hard work.
In this case, we added asynchrony to make Mike’s registration page more usable.
Users can keep typing in their information while the server’s validating their username and password.
What we need is a way to know when both the username and password are valid.
We need a way to monitor the status of each field and make sure something happens only when both fields are approved.
That’s a function that monitors certain variables or parts of  an application, and then takes action based on the things it’s monitoring.
It watches what’s going on with the rest of the application.
Because checkFormStatus() isn’t a callback or directly involved in requests and responses, it can see what’s going on with both requests and responses.
Can you figure out what a checkFormStatus() monitor function should do? You’ll also need to call that function.
Where in your code should that happen? If you’re not sure, think about it for a while...
You call a monitor function when action MIGHT need to be taken Monitor functions are usually used to update a part of  an application or page that depends on several variables.
So you call the monitor when you think it might be time to update a page...
But neither of those functions really have all the information they need to update that button.
So instead of  directly changing the button status, we can change our callback functions to run the monitor function.
That way, it’s not up to either callback to figure out what status the Register button should be in.
Remove the lines in both callbacks that updated the status of the Register button.
The monitor function can check the username and password fields, and make the right decision about what status the Register button should be set to.
This function gets called every time a username or password is accepted.
Status variables let monitors know what’s going on We’re ready to write a monitor function to set the status of  the Register button’s disabled property, and now both callbacks call that monitor.
All that’s left is to have those callbacks set some status variables, indicating whether the username and password are valid.
The monitor function can use those variables to figure out what to do when it’s called.
Here’s the complete code for Mike’s app, with a new monitor function:
We don’t want to change the status of the Register button in either of the if/else branches.
We need to update usernameValid for both possible server responses.
This is easy to forget about, but if the passwords don’t match, we need to update the passwordValid status variable.
Believe it or not, we’re still working on getting the password functionality right.
We’re using var, but we’re declaring these outside of any function.
None of our code should set the status of the Register button except for the monitor.
All this function has to do is check the two status variables...
Explicitly set the button to disabled, in c ase there.
Test Drive Finally! But does it all work? Make sure your version of  validation.js matches the version shown on the last two pages.
You should have two new global variables, an updated version of  checkPassword(), two updated callback functions, and a new monitor function, checkFormStatus()
Do they still break the page? If  not, you’ve solved Mike’s asynchrony problems!
With a valid username and invalid password, Register is disabled.
Q: Can you explain what a monitor function is again?
A monitor function is just a function that monitors your application.
So for Mike’s registration page, the monitor function is monitoring the state of the username and password variables, and it’s changing the form to match the current status.
Q: I thought monitor functions usually ran automatically, like at set intervals.
In systems where you have a lot more threading capability—the ability to run a process in the background—it’s common to have a monitor function execute periodically.
Then, you don’t have to explicitly call the monitor, which is what we do in the username and password callbacks.
Q: Why didn’t you declare usernameValid and passwordValid in initPage()?
But if you do declare the variables inside initPage(), be sure not to use the var keyword.
Variables declared outside of any function (with or without var) are global.
Variables declared inside a function, but without var, are also global.
And variables declared inside a function, with var, are local.
In fact, that’s why they’re left outside of any function: it makes it a little clearer that those two variables are global, and not local to any particular function.
Q: So then why aren’t usernameRequest and passwordRequest declared there also?
A: That’s actually a good idea, and you might want to make that change.
In our code, we left them in checkUsername() and checkPassword() because that’s where those variables were originally created (back when they were both called request)
Q: Couldn’t I set the status of the username and password1 fields in my monitor function, too?
That would mean that there’d be less CSS class-changing happening all over the code.
Most of that display logic would be handled by the monitor, which.
Anytime you can consolidate (or refactor) code without a lot of ill consequences, it’s a good idea.
Q: Just adding in a password field sure made things complicated.
A: In asynchronous apps, adding an additional asynchronous request is usually pretty tricky.
The thing that added a lot of complexity to Mike’s app wasn’t the additional password fields, but the additional request we needed to make to deal with those fields.
Q: And this is all just so users can keep typing instead of waiting?
Typing in a username, waiting for the username to get validated, typing in a password, and then also waiting for the password to get validated...
It’s even worse that after all that waiting, the user still has to fill out the rest of the form.
Saving a couple of seconds here and there really adds up on the Web.
In fact, it might be the difference between keeping a customer and losing them.
Q: So what about form submits? There’s going to be waiting there, too, right?
A: Now you’re getting ahead! But that’s exactly what Mike was thinking when he asked for scrolling images...
Refactoring code is pulling out common parts and putting those parts into a single, easilymaintainable function or method.
When users click the Register button, the images along the bottom should begin to scroll while the form is processing.
This gives the user something interesting to watch while they’re waiting on Mike’s registration logic.
Here’s what we need to do to put this into action:
Instead of letting the form submit via a “submit” button, let’s assign a click handler to the Register button.
Submit the form 3And now we know the Register button works right.
Let’s create a new function, registerUser(), to call scrollImages() and submit the form.
We can abstract the code for animating the images into another function, scrollImages(), and call that when we need to scroll the images.
Do you think the request to submit the form to Mike’s server should be synchronous or asynchronous?
Does your choice above have any affect on the scrolling of the images along the bottom of the page?
The answers to these questions are spread out over the rest of the chapter, so you’ll have to keep reading to find out if you got these right.
Synchronous requests block ALL YOUR CODE from doing anything When you send an entire form off  to be processed, you usually want that request to be synchronous.
That’s because you don’t want users to change that data while the server is working with it.
But Mike wants scrolling images while the user is waiting on the server.
That means you need your code to run while the server is working on a response.
So even though the request would ideally be synchronous, you need it to be an asynchronous request to fulfill image-loving Mike’s needs.
This isn’t a perfect solution, but lots of  times you’ve got to make this sort of choice: satisfying the client’s needs even when the result is a little less than ideal.
Mike’s willing to let users mess around with the form, if  they really want to, while their request is being processed.
He figures they won’t do that, though, because of  the scrolling images.
They’ll be too busy thinking about which movie review they want to check out when they’re logged in.
First, we no longer need a “submit” button A “submit” button in XHTML submits a form.
And since we no longer need the Register button to submit the form, we can make it a normal button.
We need a regular button now, not a submit button.
Second, we need to register a new event handler for the button’s onclick event Now we need to attach an event handler to that button.
We’ll call the function we want to run registerUser(), and we can make the assignment in initPage():
Third, we need to send an ASYNCHRONOUS request to the server Finally, we need a new event handler function.
This function needs to get a new request object, and send it to the server.
And this should be an asynchronous request, so we can animate and scroll those images while the user is waiting.
Assign the new callback we’ll write to the Register button’s onclick event.
Let’s change the text on the button to provide a little information to the user.
It’s tempting to make this synchronous, but that would block the image scrolling we’re going to add in a few pages.
Sometimes clients do things that don’t make sense to you.
That’s why they’re paying the bills, and you’re collecting the checks.
You can suggest alternatives to your client, but at the end of  the day, you’re going to be a lot happier if  you just build the client what they ask for.
In Mike’s case, he wants to entice users with reviews available on his site, so he wants images to scroll while users are waiting on their registration request.
Now, instead of  waiting on a response, users can actually type over their entries.
That could create some confusion about what information Mike’s system actually registered for that user.
Then again, Mike will probably just call you later when he realizes that for himself...
We’ve worked all this time to make the form super-usable, and now we’re throwing it all away just so Mike can scroll little movie covers across the screen? You’ve got to be kidding!
You can suggest alternative ideas to your clients, but ultimately, you should almost ALWAYS build what the client asked for...
Q: Could I disable all the fields while the images are scrolling?
A: That’s a great idea! Why don’t you take some time now to do that.
Mike will love that he gets scrolling, and you’ll still keep the nice usability you’ve built into the registration page so far.
We won’t show that code, though, so consider it a little extra-credit project.
Use setInterval() to let JavaScript run your process, instead of your own code setInterval() is a handy method that lets you pass in a function, and have the JavaScript interpreter run your code over and over, every so often.
Since it’s the interpreter running your code, the function you send setInterval() will run even while your code is busy doing other things like, say, registering a user.
To use setInterval(), you pass it a function to execute and the interval at which the function should be called, in milliseconds.
The method returns a token, which you can use to modify or cancel the process.
This is the token that you can use to cancel the interval.
The first argument to setInterval() is the statement to be evaluated.
In this case, we want it to call the function called scrollImages.
You leave off the parentheses so that JavaScript will actually reference the function, not just run it once.
We’ve chosen 40 milliseconds, which is a good average rate to scroll something.
You can use any valid JavaScript here, including an anonymous function.
Q: Is the function you pass to setInterval() a callback?
Every time the interval you set passes, the function you pass in here will be called back by the browser.
Q: So do you write that function just like the callback for a request object?
A: Well, there isn’t a request object involved, and so you don’t need to check any readyState or status properties.
So you just need a JavaScript function that does something every time it’s called.
Q: So I can do anything inside a setInterval() callback that I can do in JavaScript?
There’s no limitation on what you can do inside the function.
Q: Why do you use the parentheses when you specify the function?
A: Because you’re not setting a property, like you do when you assign an event handler.
The interpreter will then execute that code every time the interval elapses.
You can pass any JavaScript function to setInterval(), and have it run automatically at predetermined intervals.
Some programming languages, like C# and JavaScript, allow you to specify that a function be executed on a separate thread.
If  the computer has more than one CPU, two different threads might actually execute simultaneously.
On most computers, the operating system executes one thread for a short time, then switches to another thread, then back.
It’s sort of  like driving and talking on a cell phone, without the risk of  plowing into the guy in the big SUV to your left.
In our case, the JavaScript interpreter is able to do two things more or less at once: keep executing scrollImages() every few seconds, and deal with the asynchronous request from our code to Mike’s web server.
There are just a few things left to do to finish up Mike’s registration page...
Here’s your list of things to take care of before turning the page:
Add the following Ready-Bake Code for scrolling the cover images to validation.js.
For each image, figure out what its current position is using the “left” attribute of its style property...
Add a line to the Register button’s event handler callback that tells the JavaScript interpreter to run scrollImages() every 50 milliseconds.
When the callback gets a response from the server, it should replace the.
You can assume the server returns an XHTML fragment suitable for display.
Make sure you’ve got the CSS from the Chapter 5 examples.
The earlier version of Mike’s CSS doesn’t have styles for the cover images.
Did you figure everything out? Here’s how we finished up the page.
This is the Ready Bake Code from the last page.
It gets a response and replaces the content of main <div> on the page with that response.
It’s been a long, fast ride since all Mike cared about was validating usernames.
The images scroll to the left as the user waits...
I love it! I even like that when you get the links from the server, the images keep scrolling.
The images keep scrolling, too, since we haven’t cancelled the timer or changed pages.
Take some time to sit back and give your right brain something to do.
See if you can find the key words below in the letter scramble.
I’m a busy guy, you know? And I don’t let anything get in the way of  paying attention to the user I’m serving.
Sometimes it’s much better to take care of  one thing at a time, and then move on to the next job.
Just because I don’t let people interrupt me while I’m workingOne-track mind? I just make sure I finish what I start.
I’ve seen fads like you come and go a million times.
Every time I call you, I get a busy signal.
But what about all your other users? They’re just left waiting around?
Hey, I can listen and talk, all at the same time.
Yeah, well, I’d love to sit around like this all day, but my users don’t like to wait on me.
I bet you thought U2 was a one-hit wonder, too.
I’m not going anywhere—except to make the Web a hip place again.
Now, Son, you’ll be a man soon, so its time to have a little talk about.
It’s time to take things into your own hands and start writing code that updates your web pages on the fly.
Object Model, your pages can take on new life, responding to users’ actions, and you can.
It’s time to take things into your own hands and start writing code that updates your web pages on the fly.
Object Model, your pages can take on new life, responding to users’ actions, and you can.
So far, most of  the apps we’ve built have sent requests, gotten a response, and then used that response to update part of  a page’s content.
In this app, we changed the contents of this <div>
The structure of this page didn’t change, even though the content did.
Here’s another case where we changed the innerHTML property of a <div>
That’s the content changing, not the structure of the page.
You can’t change the structure of a page, duh! Why would anyone bother writing XHTML in the first place if someone could just move things around?
But what about the browser? You’d think it would be okay if the browser.
The structure of  your page is defined in your XHTML, and people viewing your pages definitely can’t mess around with that structure.
Otherwise, all the work you’d put into your pages would be a total waste of  time.
The browser CAN change your web page’s structure You’ve already seen that the browser lets you interact with a server-side program, grab elements from a page, and even change properties of  those elements.
In fact, think about it like this: in a lot of  ways, the structure of  your page is just a property of the page itself.
And you already know how to change an object’s properties...
Browsers use the Document Object Model to represent your page The browser doesn’t see your XHTML as a text file with a bunch of  letters and angle brackets.
It sees your page as a set of  objects, using something called the Document Object Model, or DOM.
And everything in the DOM begins with the document object.
That object represents the very “top level” of  your page:
The document object is just an OBJECT You’ve actually used the DOM, and in particular the document object, several times.
Every time you look up an element, you use document:
The document object contains the structure of your page, which is defined in your XHTML.
The style and even the code attached to your structure is also represented in the DOM.
In fact, every time you treat an element on a page like an object and set properties of  that object, you’re working with the DOM.
That’s because the browser uses the DOM to represent every part of  your web page.
The document object getElementById() is a method of the document object.
It’s the DOM that lets browsers work with parts of a page as JavaScript objects with propertie.
Up Close Everything in the web browser’s model of your web page can be accessed using the JavaScript document object.
You can grab the <html> root element from an XHTM L.
You can use various create… methods on the document object to add elements and text to your page:
This returns an array, so you’ll need to loop through the array to get a particular element:
When you’re creating a web page, you write XHTML to represent the structure and content of  your page.
Then you give that XHTML to the browser, and the browser figures out how to represent the XHTML on the screen.
But if  you want to change your web page using JavaScript, you need to know exactly how the browser sees your XHTML.
All the bolded tags define the structure of your document.
The text between the tags is the content of your document.
So the browser turns your XHTML page into a tree of  objects:
How would YOU order and relate these different parts of the DOM tree?
The browser organizes your page into a tree structure, with a root and branches.
When a browser loads an XHTML page, it starts out with the <html> element.
Since this is at the “root” of  the page, <html> is called the root element.
These branch out from the <html> element, and they have a whole set of  elements and text of  their own.
Of  course, the elements in each branch can have branches and children of their own…until an entire page is represented.
These pieces of  markup with nothing under them are called leaves.
So your entire page ends up being one big tree to the web browser.
So let’s look at that tree structure again, but this time, with some lines added to make the connections between the markup a little clearer.
Each bit of markup can have any number of children.
Eventually, the tree ends in leaves, which often are just pieces of text in the HTML.
Q: Do I need to use a request object to write JavaScript code that uses the DOM?
The browser handles creation of the DOM tree and exposes all the methods of the document object automatically.
In fact, even when you’re not writing JavaScript at all, browsers still use the DOM to represent your page.
Q: So if the DOM doesn’t use a request object, is it really part of Ajax?
Ajax is really just a way of thinking about web pages, and a whole slew of other technologies, that helps you achieve interactive pages in really usable ways.
You’ll use the DOM a lot in the next couple of chapters to build interactive and usable apps.
A: All modern browsers are compatible with the World Wide Web Consortium’s (W3C) DOM specification, but the specification leaves some decisions up to the browser designer.
The designers of IE made a different decision about how to build the DOM tree than a lot of the designers of other major browsers.
But it’s not a big problem, and with a few more utility functions, your code will work on all major browsers, including Internet Explorer.
Q: It looks like you called some parts of the markup “children.” So an element can have “child elements”?
When the browser organizes your XHTML into a tree, it begins with the root element, the element that surrounds everything else.
Those can be called nested elements, but in DOM, they’re called child elements.
In fact, you can think of the DOM tree as a family tree, with family terms applying everywhere.
How am I supposed to keep up with all of this?
Just keep the idea of a family tree in mind, and you shouldn’t have any trouble.
You’ve been using terms like root, branch, and leaf for years.
As for parent and child, anytime you move away from the root, you’re moving towards a child.
The only term that may be totally new to you is “node,” and we’re just about to take a look at that…
Write Your Own Web Dictionary What good is looking at a bunch of definitions? This is Head First, and we want your brain working, not just your eyes.
Below are several entries from a Web Dictionary, with some of the words in each definition removed.
Your job is to complete each entry by filling in the blanks.
Here are the words you should use to fill in the blanks.
So the “body” branch is all the elements and text              the <body> element in the tree.
Your job is to figure out how a web browser organizes this markup into a tree structure.
On the right is the tree, ready for you to fill in its branches and the relationships between each piece.
To get you started, we’ve provided spaces for each piece of markup; be sure you’ve filled each space with an element or text from the XHTML markup before showing off your DOM tree to anyone else!
Write Your Own Web Dictionary Below are several entries from a Web Dictionary, with some of the words in each definition removed.
Your job was to complete each entry by filling in the blanks.
So the “body” branch is all the elements and text              the <body> element in the tree.
You also should have drawn in the connections between the different elements and text.
Even text as small as a period gets represented in a DOM tree.
Every element or piece of text has only a single parent.
Let’s use the DOM to build a dynamic app Now that we know a bit about the DOM, we can use that knowledge to make our apps do even more interesting things.
Let’s take on a project for the Webville Puzzle Company.
They’ve been working on a bunch of  new web-based games, and they need help with their online Fifteen Puzzle.
We want to let users move these numbered “tiles” around within the puzzle.
We’re not replacing content, we’re moving it In a Fifteen Puzzle, you can move a tile into the empty space, which then creates a new empty space.
Then you can move another tile into that new empty space, and so on.
There’s always one empty space, and the goal is to get all the numbers lined up in sequential order, like this:
The empty space can be anywhere, as long as the numbers are in order.
What gives? And what does any of this have to do with Ajax?
We don’t want to just change the content of  a table, or replace some text on a button or in a <p>
Instead, we need to move around the images that represent a tile.
Webville Puzzles is using a table with four rows and four columns to represent their board.
So we might need to move an image in the third row, fourth column to the empty space in the third row, third column.
What we need is a way to actually grab an <img>, and move it within the overall table.
And, as you’ll soon see, this is exactly the sort of  thing that Ajax apps have to do all the time: dynamically change a page.
What specific steps do you think you’ll have to take to move an <img> from one cell of a table to a different cell?
The DOM lets you CHANGE a page without reloading that page.
To really understand how the DOM helps out, let’s take a look at Webville Puzzles’ XHTML, and see what the browser does with that XHTML.
Then we can figure out how to use the DOM to make the page do what we want.
Go ahead and add a reference to fifteen.js, which we’ll build throughout this chapter.
Each tile is a single <img> within a single table cell.
Q: There isn’t any request being made in this puzzle, is there?
Q: So this isn’t Ajax at all, is it? A: Well, that gets back to the “What is Ajax?” question.
If you think Ajax apps are only ones that make requests using XMLHttpRequest, then this isn’t an Ajax app.
But if you think of Ajax apps more as responsive, JavaScript-driven apps that are very usable, then you might decide otherwise.
Either way, this app is really all about controlling the DOM...
This time, though, you don’t have to put the root element at the base of the tree.
You can put it anywhere you want: the top, the bottom, or to one side.
Although this doesn’t look much like a tree anymore, you can still see the root, branches, and leaves...
Order is still preserved, as elements and text appear in exactly the same order as they do in the XHTML markup.
All these objects are element nodes because they represent XHTML elements.
The exercises just keep coming! This time, you’ve got to swap two particular nodes in the DOM tree structure below.
Your job is to write out exactly what steps you’d take.
Don’t worry about method names, just write out what you’d do.
Your job is to figure out what to do to switch this tile...
Assume you know which table cell was clicked on, and you also know the destination table cell.
You can write things like “Get the first child of the current element” or “Find all the elements named ‘img’.”
Your job was to write out exactly what steps you’d take.
Assume you know which table cell was clicked on, and you also know the destination table cell.
So we can use the DOM to get that child element.
We know the table cell that was clicked on, so that’s our starting point.
We just need to get the child of the destination <td>
Add the clicked on <img> as a child of the new destination table cell.
We need to move the <img> in the selected cell to the destination cell.
Add the <img> in the destination cell as a child of the originally clicked-on table cell.
Hey, I’ve got a much better way, and I don’t need any of this DOMDOM stuff to do it! You just...
All you need is a temporary string, and you’re done.
Do you want to CHANGE an element or MOVE an element? There’s a big difference.
This code swaps the textual src property of two images.
The alt, width, and height are properties of this image, just like its src attribute.
What you need to do is swap the entire <img> objects.
The image doesn’t change, but the location of  that <img> in the DOM tree (and on the visual representation of  the page) does.
JavaScript & DOM Magnets You’ve already figured out what needs to happen to swap two tiles.
Now it’s time to turn those general steps into actual code.
But all the pieces of code have fallen to the ground...
Your job was to put the pieces of code into a working function.
What about all that parent stuff? Is there not a parent property for each element, or node, or whatever? We could set the parent property of selectedImage to destinationCell, and vice versa for the destinationImage.
Every node in a DOM tree—that’s elements, text, even attributes—has a property called parentNode.
That property gives you the parent of  the current node.
So you can get the parent of  a node, but you can’t set the parent.
This gets a reference to the two images to swap...
Every node has a set of children, ranging from zero to who knows how many.
So even though you can’t change the parentNode property directly, you can move a node, and let the DOM and your browser handle changing the property for you.
Q: So I can use all the DOM methods from my JavaScript automatically?
There are a few exceptions that we’ll look at soon, but for the most part, the DOM is yours to use from any JavaScript code you’re writing.
Q: And a DOM tree is made up of nodes, like elements and text, right?
A node is pretty much anything that can appear on a page, but the most common nodes are elements, attributes, and text.
A: All nodes have parents, but not all nodes have children.
Text and attribute nodes have no children, and an empty element with no content has no children.
That’s why you can use the document object to find anything in your web page.
Q: Are there other methods to add child nodes like appendChild()?
We’ll be looking at lots of those in the next chapter.
Q: Why is this better than changing out the src property of an <img>?
A: Because you don’t want to modify the image displayed; you want to move that image to a new cell.
If you wanted an image to stay the same, with its alt tag and height and title, you’d change the src property.
But we want to move the image, so we use the DOM.
You use getElementById() to find a specific node anywhere in the tree, using the node’s id.
This gets a single element based on its unique id value.
This gets zero or more elements based on the tag name of those elements.
Go ahead and write the code for an initPage() function.
You need to make sure that every time a table cell is clicked on, an event handler called tileClick() gets run.
We’ll write the code for tileClick() later, but you may want to build a test version with an alert() statement to make sure your code works before turning the page.
Here are a few questions to get your left brain into gear.
Should the event handler for moving a tile be on the table cell or the image within that cell?
How can we figure out if an empty tile was clicked on?
How can we figure out the destination cell for a tile?
Your job was to write an initPage() function that set up the event handlers for the Fifteen Puzzle.
What did you come up with? Here’s what we did:
We built a simple event handler to test things out.
Remember to assign the initPage() function to the window.onload event.
First, we locate the <div> with the table and cells we want to attach handlers to.
Test Drive Add initPage(), tileClick(), and swapTiles() to a script called fifteen.
Be sure you reference the file in your XHTML, and try out the Fifteen Puzzle with the event handlers on each table cell.
A: DOM Level 2 browsers and Internet Explorer handle tables, and CSS styles applied to those tables, pretty differently.
We could have put an id on the <table>, too, but it’s not really necessary.
The only thing in the puzzleGrid <div> is the table we want, along with all those clickable cells.
Head First: So I hear you’re a new parent, <td>?
Head First: Nothing to worry about? That sounds pretty serious...
Do you think our audience really understands what you’re talking about?
Hopefully we’ll make some sense of  all this, and get back to you soon, faithful listeners.
Can I move the clicked tile? Now that the basic structure is in place, it’s time to get the puzzle working.
Since a tile can only be moved to the empty square, the first thing we need to figure out is, “Where’s the empty square?”
For any clicked-on tile, there are six different possibilities for where the empty tile is.
Suppose the user clicked the “10” tile on the board below:
In this case, the tile to the left has an “8” in it.
There are two more possible situations related to the position of the empty tile.
Well, first of all, I think we should put the event handler on the table cell, not on the image itself.
Joe: Why? The user’s clicking on “7,” not the second tile on the third row.
Frank: Well, they’re clicking on the table cell that image is in, too.
Jill: So suppose we put the handler on the image.
Joe: ...we swap that image out with the empty square...
But the handler’s attached to the image, not the table cell.
So every time an image gets moved, the event handler moves with it.
Frank: Well, we’re going to use the DOM to figure out where the empty square is in relation to the clicked-on image, right?
What’s that got to do with the handler on the image?
Frank: If  the handler’s on the image, we’ll constantly have to be getting the image’s parent.
If  the handler’s on the cell, we can avoid that extra step.
We can just check the cells around the clicked-on cell.
Jill: Exactly! We don’t need to move to the image’s parent cell in our handler.
Joe: So all this is to avoid one line of  code? Just asking the image for its parent?
I’m not even that clear on how we’d find the empty square in the first place...
Here are a few questions to get your left brain into gear.
Should the event handler for moving a tile be on the table cell or the image within that cell?
How can we figure out if an empty tile was clicked on?
How can we figure out the destination cell for a tile?
A DOM tree is all connected, and you can use the family-type properties of  the DOM to move around in the tree.
This gets a reference to the <div> with an id of “puzzleGrid,” and then gets that element’s first child.
You can chain these properties to go as deep as you need.
Careful! If your code uses lots of these double- and triple-nestings, it gets pretty hard to read.
You can get a node’s parent, but you can’t change that parent directly.
There’s also a previousSibling property for moving the other direction in the tree.
In the JavaScript, each letter is a variable that represents the matching node in the DOM tree.
Can you figure out which node each statement refers to?
In the JavaScript, each letter is a variable that represents the matching node in the DOM tree.
Can you figure out which node each statement refers to?
Remember that the order of elements in the DOM tree reflects the order they’re declared in the XHTML.
Since there is no sibling below c, JavaScript returns a null.
Why in the world would you name your nodes with just letters?
Use descriptive names for your elements and your id attributes.
When you’re writing XHTML, the element names are already pretty clear.
But you should still use descriptive ids like “background” or “puzzleGrid.” You never know when those ids will show up in your code, and make your code easier to understand...
The clearer your element names and ids, the clearer your code will be to you and other programmers.
Only tiles next to an empty square can be swapped.
There were two more possibilities for where an empty tile could be on a puzzle grid.
We’ve got to make sure a tile isn’t surrounded by other non-empty tiles.
In this case, the tile to the left has an “8” in it.
It’s time to get busy building the rest of the Fifteen Puzzle Code.
Given a node representing a <td>, figure out if  the image in that cell is the empty image.
To help you out, here’s the XHTML for the empty cell:
Look for an empty cell in the tileClick() event handler.
Let’s start building tileClick(), the event handler we attached to each table cell.
If  the clicked-on cell was empty, let’s show a message indicating the user needs to click on a different tile.
Here’s the XHTML for a couple  of  cells in the puzzle:
Given this (and the rest of  the XHTML, on page 246), can you figure out how to get the row and column of  the clicked on tile?
Hint: you’ll need to use JavaScript’s charAt(int position) function at least once.
Once we’ve made sure that the empty tile wasn’t clicked, and gotten the current row and column, you have everything you need.
Your job is to handle the 5 remaining possible situations for where the empty square is, and then if  possible, swap the selected tile with the empty square.
To get you started, here’s the code to check above the selected tile:
The id of the cell above is “cell,” and then (currentRow -1), and then the current column number.
Refer back to the different possibilities you have to handle from page 265, and good luck!
JavaScript automatically turns these numbers into strings when they’re added together with another string.
Your job was to build the cellIsEmpty() function, and then complete the clickTile() event handler.
The first child of each table cell is its <img>
Be sure to return if the empty tile was clicked on.
Each of these cases-below, left, and right-follow the same pattern.
Get the cell one row down, in the same column.
Find the cell one column over, in the same row.
If we got here, the clicked-on tile isn’t empty, and it’s not next to an empty square.
Let’s give the user some feedback, so they know what to do.
A: It is a lot of code, but if you walk through things step by step, it should all make sense to you.
There’s not a lot of new stuff in there, but there’s definitely more DOM and positioning than you’ve done up to this point.
Q: And all of this is DOM code? A: Well, there’s really no such thing as DOM code.
It’s all JavaScript, and lots of it does use the DOM.
Q: So which parts use the DOM? A: Anytime you use a property that moves around the tree, you’re using the DOM in some form.
But code that uses getElementById() is also using the DOM because that’s a property on the document object.
Q: Is it safe to assume the id of a table cell has the row and column in it?
A: If you have control of the XHTML, like we do, it’s safe.
Since the Webville Puzzles company set up their XHTML so that table cells had those handy ids, we were able to figure out a cell’s position by its id.
If you had a different setup, you might need to figure out the cell’s position relative to other cells and rows.
Q: We could do that with the DOM, too, right?
You’d probably be using some sort of counter, as well as previousSibling to figure out how many <td>’s over you are.
And you’d need parentNode and similar properties to see which row you were on.
Q: So this DOM stuff can get pretty complex, can’t it?
Although lots of times, you’ll only need to get as complex as we had to for the Fifteen Puzzle.
In fact, with just the properties you’ve already learned, you’re halfway to being a DOM master!
Q: Halfway? What’s the other half? A: So far, we’ve only moved around nodes in the DOM.
In the next chapter, we’ll look at creating new nodes and adding those to the tree on the fly.
A: That’s the way cellIsEmpty() is written right now, yes.
Can you think of a case where an image would not be the first child of a table cell?
Q: If an image isn’t the first child of a table cell, that screws things up, doesn’t it?
Q: Well, didn’t we do the same thing in swapTiles(), back on page 254? We assume the image is the firstChild there, too, right?
A: Maybe we should actually test out the fifteen puzzle, and see what happens.
The DOM is great for code that involves positioning and moving nodes around on a page.
Test Drive Open your copy of fifteen.js, and add the code for cellIsEmpty() and tileClick()
No matter what tile you click, you get this alert message.
In Internet Explorer, you can usually click one tile before you get this message.
Here’s the XHTML for each table cell in the fifteen puzzle web page:
Is there any difference between that XHTML and this fragment:
Do you see a problem related to the difference in the two XHTML fragments shown above?
Instead, your page is full of  spaces, tabs, and returns (sometimes called “end-of-lines”):
Never assume a browser will always ignore, or always represent, whitespace.
You’ve got returns, or end-of-lines, to split up the page and make it easier to read.
Those spaces are nodes, too Even though those spaces are invisible to you, the browser tries to figure out what to do with them.
Usually they get represented by text nodes in your DOM tree.
The bad news is that not all browsers do things the same way.
So sometimes you get empty text nodes, and sometimes you don’t.
It’s up to you to account for these text nodes, but you can’t assume they’ll always be there.
One browser might create a DOM tree for your page that looks like this:
Another browser might create a different DOM tree for the same XHTML:
There’s no whitespace, just table rows and cells, and the images in those cells.
There are spaces before the <tr>, so there’s a text node here.
Element nodes have a nodeName that’s the same as their tag name.
This will only work if the first child is an <img> element.
We’ve got to deal with browsers that are creating whitespace nodes in their DOM trees.
See if you can fill in the blanks to fix up the swapTiles() and cellIsEmpty() functions below:
Q: If the nodeName of a text node is always “#text”, how can I get the text in that node?
A: Text nodes store the text they represent in a property called nodeValue.
Q: Shouldn’t we be checking to see if text nodes have a nodeValue of whitespace, then?
A: In the table cells in the fifteen puzzle, there’s no need to check the nodeValue.
Since we only care about <img> nodes, we don’t care about anything else.
So we can skip over any node that’s a text node.
Were you able to figure out how to skip over the whitespace text nodes in cellIsEmpty() and swapTiles()?
All three of these cases use the same basic pattern: as long as the current node is text, go to the next node.
We can find out if we’ve got a text node by comparing the nodeName to “#text”
If we’ve got a text node, move to the next sibling and try again.
Make sure you’ve got open-quote, then the # symbol, then text, then close quote.
Whitespace or not, browsers get to the image, and skip over whitespace nodes.
Did I win? Did I win? All that’s left is to figure out when a player’s won.
Then, every time two tiles are swapped, we can check this function to see if  the board is in order.
Here’s a puzzleIsComplete() function that uses the names of  each image to see if  all the tiles are in order:
First, we get all the <img> tags in the grid.
Since the two characters returned by substr() for the empty image are “ty”, check for that and ignore it.
If it’s not the empty image, add the number (as a str ing) to our hash string.
A: A negative number means start at the end of the string, and count back.
Q: What in the world is that weird number you’re comparing the hash string to?
Since the hash represents the orders of the tiles, we’re comparing them to a string that represents the tiles in order.
Q: But what about the empty tile? A: It doesn’t matter where the empty tile is as long as the numbers are in order.
That’s why we drop the empty tile from being part of the hash string.
The class is called “win,” and when the puzzle is solved, you can set the <div> with an id of.
That means we just need to check if  the puzzle is solved every time we swap tiles.
If the puzzle’s solved, change the CSS class for the puzzleGrid <div>
Test Drive You need to add the puzzleIsComplete() function to your JavaScript, and update swapTiles()
But you’ve got to solve the puzzle to see the winning animation...
The DOM is just a tool, and you won’t use it all the time...
You’ll rarely write an application that is mostly DOM-related code.
But when you’re writing your JavaScript, and you really need that next table cell, or the containing element of  an image, then the DOM is the perfect tool.
And, even more importantly, without the DOM, there’s really no way to get around a page, especially if  every element on your page doesn’t have an id attribute.
The DOM is just one more tool you can use to take control of  your web pages.
In the next chapter, you’re going to see how the DOM lets you do more than just move things around...
I don’t think this DOM stuff is really all that hard...
The DOM is a great tool for getting around within a web page.
It also makes it easy to find elements that DON’T have an id attribute.
This method returns a specific element based on its ID.
DOMAcrostic Take some time to sit back and give your right brain something to do.
Answer the questions up top, and then use the answer letters to fill in the secret message.
This method returns a specific element based on its ID.
DOMAcrostic Your job was to answer the questions up top, and then use the answer letters to fill in the secret message.
The document object contains everything else in the DOM tree.
It’s great to know that web browsers turn your XHTML into DOM trees.
But real power is taking control of a DOM tree.
You can do all of that and more with the DOM, and along the way, banish that.
It’s great to know that web browsers turn your XHTML into DOM trees.
But real power is taking control of a DOM tree.
You can do all of that and more with the DOM, and along the way, banish that.
The company’s been making so much on subscription fees that they want a new puzzle...
This time, the company wants something a little more educational: Woggle, an online word generation game.
They’ve already built the XHTML, and even know exactly how they want the puzzle to work.
The game starts out by creating a 4-by-4 grid of letters.
Players can click letters to “build” words in this word pane.
Players can submit the word to see if it’s valid...
A tile can only be used a single time in each word.
Once the tile’s used, it shouldn’t be selectable until a new word is started.
There’s a lot to build to get Woggle working, and of course the company wants their new app working immediately.
Before you dig into the XHTML and CSS, think about what tasks are involved, and what JavaScript each one will need.Try and list each basic task for which you’ll need to write code, and then make notes about what tools and techniques you might use for that task.
Your job was to figure out the basic tasks we’d need to take care of to get Woggle working.
You might have some differences in your details, but make sure you got these same core ideas down in some form or fashion.
Task 1:  Set up the game board with random tiles Notes:   We need a way to come up with a random set of letters.
Then we’ve got to display the right image for each letter on the.
We can name these images something related to the letter they represent...
As usual, we’ll need an initPage() to set up event handlers and the basic page.
Let’s build a function, randomizeTiles(), to handle creating the tile grid.
Task 2:  Clicking on a tile adds the letter to the current word.
Notes:   When a user clicks “Submit Word,” the current word is sent to the server-side program.
Notes:   When the server responds, we’ve got to update the score, and add a valid word to the “used words” box.
Each time a word’s accepted, all the tiles are enabled for a new word.
Woggle doesn’t use table cells for the tiles Now that we’ve got a plan, let’s look at the XHTML for the Woggle game.
The designers at Woggle have heard some bad things about tables, so the page is structured a bit differently.
Each tile is represented by an <a> element this time, instead of  being in a table cell.
Better for them, but that might mean a little more work for us.
So this is the first column in the second row.
This CSS sets the position for each individual <a> that represents a tile.
Q: CSS-positioned? I’m not sure I know what that means.
A: CSS-positioned just means that instead of relying on the structure of your XHTML to position something on a page, CSS is used instead.
So if you want to CSS-position an <a> element, you give that element a class or id, and then in your CSS, set its left, right, top, and/or bottom properties, or use the position and float CSS attributes.
Q: Is that better than using tables? A: A lot of people think so, especially web designers.
By using CSS, you’re relying on your CSS to handle presentation and positioning, rather than the way cells in a table line up.
That’s a more flexible approach to getting your page to look like you want.
A: Well, you really can’t go wrong with CSS-positioning, because it’s the easiest approach to getting things to look the same across browsers.
But more importantly, you should be able to write code that works with tables or CSS positioning.
You can’t always control the pages you write code for, so you need to be able to work with lots of different structures and types of pages.
Q: I don’t understand how the CSS positioning actually worked, though.
Each tile is represented by an <a> in the XHTML.
And each <a> has a class attribute, and actually has two classes: the general class, “tile,” and a specific class representing that tile, like.
Both of those selectors get applied to a tile with a class of “tile t32.” The general rule handles common properties for all tiles, like height and width and look.
The specific selector handles that tile’s position on the page.
Q: Why are <a>’s used for the tiles? They’re not links, right?
That’s just what Webville Puzzles used (maybe they’ve been checking out the tabs on Marcy’s yoga site)
It really doesn’t matter what you use, as long as there’s one element per tile, and you can position that element in the CSS.
There are a few considerations that using an <a> brings up for our event handlers, though, and we’ll look at those a bit later.
Q: I don’t see a button for “Submit Word.” There’s just a <div>
A: You don’t have to have an actual form button to make something look like a button.
In this case, the Webville Puzzle designers are using a <div> with a background image that looks like a button for the “Submit Word” button.
As long as we attach an event handler to that <div> to capture clicks, we can treat it like a button in our code, too.
You should be able to write code to work with ALL TYPES of pages...
An event handler attached to an <a> element usually returns either true or false.
What do you think the browser uses that return value for?
First, you need to build an initPage() and randomizeTiles() function.
You need to represent that table as an array in your JavaScript.
There should be 100 entries, where each entry is a single letter.
Randomly choosing a letter from the frequency table is like choosing a letter based on the frequency in which it appears in a word.
Try to complete both initPage() and randomizeTiles() before you turn the page.
They’ve decided they don’t want totally random letters for the board after all.
Instead, they want letters to appear according to a letter frequency chart they’re faxing over...
Your job was to use the information on page 291 to write code for initPage() and randomizeTiles()
You also may have come up with some other JavaScript outside of those functions...
Did you remember this line? We’ve got to call initPage() to get anything working.
Each letter appears in the array the number of times out of 100 it shows up in the frequency table Webville Puzzles faxed us.
All initPage() does right now is call randomizeTiles() to set up the puzzle grid.
Our presentation is ALL in our CSS By using class names instead of  directly inserting <img>’s into the XHTML, we’ve kept our JavaScript behavior totally separate from the presentation, content, and structure of  the page.
The fifth entry in frequencyTable is “a”, so that tile should be an “a.” But instead of  having our code insert the “a” image directly, and deal with image URLs, it just adds to the class of  that tile:
Now we use the CSS to say how that letter is displayed:
Now the designers have options Since all the presentation is in the CSS, the designers of  the page can do whatever they want to show the tiles.
They might use a different background image for each letter.
In the case of  Woggle, though, the designers have used a single image for all tiles, tiles.png.
That image is set as the background image in the selector for the a.tile class.
Then, in each letter-specific class, like a.la or a.lw, they’ve adjusted the position of  the image so the right portion of  that single image displays.
And the designers can change the CSS anytime they want a new look...
These look right: lots of N’s and H’s, not so many Q’s and Y’s.
We need a new event handler for handling tile clicks Next up, we need to assign an event handler to the tiles on the grid.
All our handler will know about is the <a> element on the page that was clicked.
From that, we’ve got to figure out which letter is shown on the tile that the clicked-upon <a> represents.
Once we know what letter was selected, we’ve got to add that letter to the current word box in the “currentWord” <div>
We’ve also got to keep the tile that was clicked from being clicked again.
There are actually a couple of things missing from the list above...
We can assign an event handler in our randomizeTiles() function Now let’s go ahead and hook up our handler to each tile.
We’re already iterating over all the tiles in randomizeTiles(), so that seems like a good place to assign our event handler:
Start building the event handler for each tile click The best way to write a big chunk of  code is to take things one step at a time.
That’s just a function block with a name, so we can hook everything up and test out code as we go.
Add this function to woggle.js: We’ll fill in each p iece of.
The best way to write a large piece of code is to take things one step at a time.
Get each piece of code working BEFORE moving on to the next piece of code.
Property values are just strings in JavaScript So far, we’ve mostly used the className property of  an object to change a CSS class.
So we’ve got a className property that has the letter of  the tile that’s represented...
What code would you write to get the letter represented by the clicked-on tile?
What code would you write to get the letter represented by the clicked-on tile?
Split the classes from each other using the space character.
The letter class is the third class, so that’s index 2 using a zero-based index.
Add the code above to your addLetter() function, and also add an alert() statement to display the value of  tileLetter at the end of the function.
Clicking a tile should trigger addLetter(), which figures out which letter was clicked.
Now you’ve got to take the clicked-on letter, and add it into the currentWord <div>
How would you do that? Oh, and by the way...
What’s so wrong with it? It sure seems to be pretty handy...
Anytime you set the innerHTML property on an element, you’re directly inputting XHTML into a page.
For example, in Marcy’s yoga page, here’s where we inserted XHTML directly into a <div> with JavaScript:
Anytime you directly type XHTML into your code, you’re introducing all sorts of  potential for typos and little mistakes (like forgetting a closing tag for a <p>)
In addition to that, different browsers sometimes treat innerHTML in different ways.
If  at all possible, you should never change content or presentation directly from your code.
Instead, rely on CSS classes to change presentation, and ...
Use the DOM to change a page’s structure You already know that using code like this isn’t that great of  an idea:
We need to add content AND structure to the “currentWord”   div When a player clicks on a letter, that letter should be added to the current word.
So what we really want is something more like this:
But there’s a way to work with the structure of  a page without using innerHTML: the DOM.
You’ve already used the DOM to get around on a page, but you can use the DOM to change a page, too.
From the browser’s point of  view, here’s the part of  the DOM tree representing the currentWord <div>:
Besides this being a hotbed for typos, what do you do afterward to get the existing current word and append to it?
We need to create something that looks more like this:
The DOM sees the <div> as an element node named div with an id attribute having a value of “currentWord.”
Update scoreSubmit wordSet up board Handle tile clickscontent and structure.
Use createElement() to create a DOM element Remember the document object? We’re going to use it again.
Just give the createElement() method the name of  the element to create, like “p” or “img”:
You pass the name of the element to the method.
The createElement() method is part of the document element, which contains everything else in the browser’s DOM tree.
Where do you think the new element is added in the DOM tree?
It’s a child of the document element at the top of the DOM tree.
It’s a leaf node at the bottom of the DOM tree.
The createElement() method is part of the document element, which contains everything else in the browser’s DOM tree.
Where do you think the new element is added in the DOM tree?
It’s a child of the document element at the top of the DOM tree.
It’s a leaf node at the bottom of the DOM tree.
You have to TELL the browser where to put any new DOM nodes you create Web browsers are good at following directions, but they’re not so great at figuring things out on their own.
When you create a new node, the browser has no idea where that node should go.
So it just holds on to it until you tell the browser where the node goes.
That works out pretty well, too, because you already know how to add a new child node to an element: with appendChild()
So we can create a new element, and then append it to an existing element as a new child:
This gets the <div> we’ll want to use as a parent.
So can we do the same thing with a text node? Just.
You can create elements, text, attributes, and a lot more.
The document object has all sorts of  helpful create methods.
Each method returns a new node, and you can insert that node anywhere into your DOM tree you want.
Just remember, until you insert the node into the DOM tree, it won’t appear on your page.
See if you can complete the code for adding a letter to the currentWord <div>
Add your code into the addLetter() event handler, and try things out.
Your job was to finish up adding letters to the currentWord <div>
Were you able to finish the code up? Were there any problems?
But it only works the first time! Click a letter, and it appears in the currentWord box.
Update scoreSubmit wordSet up board Handle tile clickstwice is not nice.
Q: When I call appendChild(), where exactly is the node I pass into that method added?
A: appendChild() adds a node as the last child of the parent element.
Q: What if I don’t want the new node to be the last child?
You pass insertBefore() two nodes: the node to add, and an existing node that the new node should precede.
Q: Didn’t we use appendChild() to move elements in the last chapter?
Whatever node is passed to appendChild(), or insertBefore(), is added as a new child node to the parent you call appendChild() on.
The browser moves the node if it’s already in the DOM tree, or adds the node into the DOM tree if it’s not part of the tree already.
Q: What happens when you append or insert a node that already has children of its own?
A: The browser inserts the element you insert and all of its children into the DOM tree.
So when you move a node, you’re moving that node and everything underneath that node in the DOM tree.
Q: Can you just remove a node from a DOM tree?
A: Yes, you can use the removeNode() methods to remove a node completely from a DOM tree.
Use the DOM magnets below to build the DOM tree under the currentWord <div> for:
Use the DOM magnets below to build the DOM tree under the currentWord <div> for:
We’re actually adding a new <p> and a new text node each time.
But we need to change the existing text node, right?
Some nodes have a nodeName, others have a nodeValue, and still others have both.
The first time addLetter() gets called, we create a new text node.
But on future calls, we need addLetter() to change the text in that node.
We can do that using the text node’s nodeValue property.
Every DOM node has two basic properties: nodeName and nodeValue.
For an element, the nodeName is the name of  the element.
For an attribute, nodeName is the attribute name, and nodeValue is the attribute value.
And for a text node, the nodeValue is the text in the node.
Attribute value or text for a text nodeEve ry DOM node.
The nodeName of a node is the same as its tag element.
You’re ready to finish up the section of addLetter() that gets a letter from a clicked-on tile, and adds the clicked-on letter to the currentWord <div>
See if you can write the rest of the function now...
Hint: node.childNodes returns an array of a node’s children, and node.
Using what you learned about the DOM in the last two chapters, were you able to finish up this section of addLetter()? You should have come up with something like this:
Now this code only runs when the currentWord <div> has no child nodes.
The first thing we need to do is see if the currentWord <div> has any children already.
It returns an array of all of a node’s children, or null if there aren’t any children for that node.
And since it’s an array, it has a length property that tells you how many nodes are in the array.
Q: Can’t I just keep up with whether or not addLetter() has been called, and use that as my conditional?
It’s true that the first time addLetter() is called, you need to create a <p> and text node.
But if the player submits a word, and the board is reset, addLetter() would again need to create a new <p> and text node.
So just checking to see how many times addLetter() has run won’t be enough.
There are usually at least two or three different ways to solve a problem.
But you need to be sure that your code always works...
If both of those things are true, then feel free to use your own version of addLetter()
Update scoreSubmit wordSet up board Handle tile clicksadd a letter.
Hey, what about text nodes full of whitespace, like we ran into last chapter.
When you control the DOM structure, nothing happens that you don’t specify.
When the browser creates a DOM tree based on an XHTML text file, the browser is in control.
It’s doing what it thinks is best to represent that XHTML - and sometimes, that means interpreting line endings or extra tabs and spaces as text nodes filled with whitespace.
But when you’re making changes to a DOM tree, you’re the one in control.
The browser won’t insert anything unless you tell it to.
So when you’re working with the DOM nodes you inserted into the currentWord <div>, you don’t have to worry about extra whitespace text nodes.
Each time you click a tile, it should add another letter to the current word box.
There are a few things we still need to do related to clicking on tiles, though...
Once a player’s clicked on a tile, they can’t re-click on that tile.
So we need to disable each tile once it’s been clicked.
With Woggle, even though we can disable the look of  a tile, that doesn’t mean clicking on the tile doesn’t do anything.
Clicking on a tileeven if  it’s got the disabled class—will still trigger the addLetter() event handler.
That means a letter can be clicked on an infinite number of times...
So we need to take another step at the end of  addLetter()
We need to remove the addLetter() event handler for the clicked-on tile.
Clicking on a tile should change the look of that tile.
This is presentation, so you probably already know what to do, don’t you? In addLetter(), we need to add another CSS class to the clicked-on tile.
There’s a class in puzzle.css called “disabled” that’s perfect for the job.
We need to add this class to the existing tile classes, not just replace those classes.
Now, once addLetter() runs, the clicked-on tile fades, and then looks like it can’t be clicked anymore.
Make sure there’s a space to separate the CSS classes from each other.
Update scoreSubmit wordSet up board Handle tile clickschange css classes at will.
Now clicking on a tile adds a letter to the current word box...
Submitting a word is just (another) request addLetter() was all about using the DOM, and submitting a word to the server is all about request objects.
Woggle’s already got a program on their server that takes in a word and returns a score for that word...
Our JavaScript can send the word to the server-side program.
The server responds with -1 if the word isn’t valid, or with the score for the word if the word is valid.
The server-side program at Woggle requests a dictionary program on a different server to see if the word is valid.
The dictionary web service indicates if the submitted word is valid English.
Our JavaScript doesn’t care how the server figures out its response to our request With Woggle, it really doesn’t matter that the server-side program we’re calling makes another request to another program.
In fact, it wouldn’t matter even if  lookup-word.php called a PHP program, then made a SOAP request to a Java web service, and then sent a message to a cell phone using an SMS gateway.
All that does matter is that we send the server-side program the right information, and it returns to us the right response.
Your JavaScript only needs to worry about sending requests and handling responses...
You’ve built and sent a lot of request objects by now.
Using what you’ve learned, can you write the submitWord() function?
In all the earlier chapters, we made asynchronous requests, so users weren’t stuck waiting on a password to get checked or a page to get loaded.
But in Woggle, we really want users to wait on the server before doing anything else.
So when a word is sent to the server for scoring, we need to use a synchronous request.
There are some other advantages to using a synchronous request for submitting a word to the server in Woggle.
Update scoreSet up board Handle tile clicks Submit wordsynchrony is still useful.
So if we’re using a synchronous request, do we need a callback function? If the program waits on the server, why not just write the code to handle the server’s response right in our submitWord() function?
When a request is asynchronous, the browser keeps running your code.
That’s usually the end of  the function because we want users to be able to keep working with a web page.
Then, when the server responds, a callback gets run that can update the page or respond to what the server said.
But with a synchronous request, the browser waits on the server.
No more code is run until the server comes back with a response.
So in that case, we really don’t need a callback.
We can just continue on with the sending function, and know that the request object will have the server’s response data in it!
Go back to the code you wrote on page 313, and make a few changes.
First, make sure your request is synchronous, and not asynchronous.
Then, remove a reference to a callback; we don’t need one! Finally, at the end of the function, display the response from the server using an alert box.
Make sure you’ve got utils.js referenced in your XHTML page.
The code won’t get here until the server responds, so it’s safe to use the responseText property.
Then, we get the firstChild of that, which is a text node.
And finally, we get the nodeValue of that, which is the text in the node—the word the user entered.
A: You don’t have to, but it’s actually a bit faster than breaking things into lots of individual lines.
Since this entire statement is parsed at one time, and there’s only one variable created, JavaScript will execute this line a bit faster than if you’d broken it into several pieces.
Q: Didn’t you forget to check the readyState and status codes of the request object?
A: When you’re making a synchronous request, there’s no need to check the readyState of the request object.
The browser won’t start running your code again until the server’s finished with its response, so the readyState would always be 4 by the time your code could check it.
You could check the status to make sure your request got handled without an error.
But since you’ll be able to tell that from the actual response, it’s often easier to just go right to the responseText.
With a synchronous request, there’s no need to check readyState and status in your callback.
Update scoreSet up board Handle tile clicks Submit wordchain statements.
Usability check: WHEN can submitWord() get called? Did you try and test out your new submitWord() function? If  you did, you probably realized that the function isn’t connected to anything.
In fact, “Submit Word” is an <a> element, and not a button at all!
Since the browser created this part of the DOM, we should make sure we don’t have a whitespace text node.
You can’t submit a word if there’s no word to submit So where do you think this code goes? In initPage()? But that doesn’t make sense...
The first time there’s a word to submit is the first time there’s a letter in the current word box.
That’s also the first time that a tile is clicked, which turns out to be the first time addLetter() is called for a new word.
So we just need to add the code above to that part of the addLetter() event handler:
Go on, get it! Have you made all the additions you need to addLetter()? Once you have, fire up Woggle, and build some words.
Even though clicking “Submit Word” doesn’t call submitWord() until at least one letter’s entered, “Submit Word” still looks like a button.
Can you write code to let users know what they should do if they click “Submit Word” too early?
Update scoreSet up board Handle tile clicks Submit wordtest drive.
You want the table cell just to the left of the table cell you’re in.
Match the DOM properties and methods on the left to the tasks you’d use those properties and methods to accomplish on the right.
You want to get rid of  all the <br> elements on a page.
You want to exchange an <img> element with some descriptive text.
You want to print out a name, which is in the <div> with an id of  “name.”
You need to add the numeric values of  two form fields.
Well, this isn’t a DOM method, but you never know when you’ll need it.
You want the table cell just to the left of the table cell you’re in.
Match the DOM properties and methods on the left to the tasks you’d use those properties and methods to accomplish on the right.
You want to get rid of  all the <br> elements on a page.
You want to exchange an <img> element with some descriptive text.
You want to print out a name, which is in the <div> with an id of  “name.”
You need to add the numeric values of  two form fields.
When you’re replacing one node with a different node, use replaceNode()
Text in a node is represented by the nodeValue property on a text node.
It’s time to put everything you’ve learned so far to use: DOM manipulation, creating DOM nodes, JavaScript string functions, handling the request from a server...
Follow the directions below, and tick off the boxes as you complete each step.
If the server accepts the submitted word, add the accepted word to the box of accepted words just below the “Submit Word” button.
Get the current score, and add the score that the server returns for the justaccepted word.
Using this new score, update the “Score: 0” text on the screen.
Whether the server accepts or rejects the word, remove the current word from the current word box.
Enable all the tiles on the playing board, and reset the “Submit Word” button to its original state.
Below is the DOM tree for the sections of the page you’re working with, as the browser initially creates the tree.
Draw what the DOM tree will look like after your code has run for two accepted words (the specific two words don’t matter, as long as the server accepted both of them)
Now it not only submits a word, but updates the score on the page.
If the server rejects the submitted word, let the player know.
The server returns -1 if the submitted word is invalid.
Add the accepted word to the box of accepted words.
You can split “Score: 0” into two parts using split(“ ”)
We want the second part, and we want it as an int.
Add the server’s response, and then update the text node.
We built a utility function for enabling all the tiles.
A tile that has 4 classes has the “disabled” class at the end.
We use the first three existing classes, but drop the fourth.Remember to reset the event handler to addLetter.
Remember to reset the “Submit Word” button to an alert() function for the event handler.
Below is the DOM tree for the sections of the page you’re working with, as the browser initially creates the tree.
Draw what the DOM tree will look like after your code has run for two accepted words (the specific two words don’t matter, as long as the server accepted both of them)
For each accepted word, there will be a <p> and a text node, with the word as the value of the text node.
The score text node will have an updated number as its nodeValue.
Update scoreSet up board Handle tile clicks Submit wordwe told you, it’s long.
Each word adds to the word list, and to the score.
We want to see you put your DOM, JavaScript, and Ajax skills to work.
We’ll be giving away cool prizes for the best entries in the coming months.
What if there was a timer that gave you 60 seconds to enter as many words as you could think of?
And besides all that, how do YOU think Woggle could be improved?
What if you could choose a lettered tile, and then only choose tiles next to the last selected tile?
What if once you used letters to make a valid word, those tiles were replaced by new random tiles?
This is the name of the game we built in this chapter:
DOMAcrostic Take some time to sit back and give your right brain something to do.
Answer the questions in the top, then use the letters to fill in the secret message.
This is the name of the game we built in this chapter:
DOMAcrostic Take some time to sit back and give your right brain something to do.
Answer the questions in the top, then use the letters to fill in the secret message.
Smith may think I’m just following his instructions, but wait until he sees this memo about Christmas bonuses going up 20%
That’ll teach him to give me a lousy kitchen apron for Secretary’s Day!
There are a LOT of options for frameworks that let you work with Ajax in different (and sometimes easier) ways.
If  you Google the Internet for “JavaScript framework” or “Ajax library,” you’ll get a whole slew of  links to different toolkits.
Some are great for providing slick screen effects, like drag-and-drop, fades, and transitions.
Others are good at sending and receiving Ajax requests in just a line or two of  code.
In fact, you’ve been using a framework of  sorts every time you reference a function from utils.js.
All that script does is provide common functionality in a reusable package.
Of  course, most frameworks have a lot more functionality, but the principle is still the same.
Finally! This is where you show me jQuery and mooTools and Prototype, and all those other cool Ajax frameworks, right? And I can quit writing all these stupid request.send() and request.
Deciding to use a JavaScript framework for writing your code is a big deal.
Below, write down three reasons that you think it would be a good idea to use a framework...
Reasons to use a framework Reasons NOT to use a framework.
A: A framework is just a JavaScript file—or set of files—that has functions, objects, and methods that you can use in your code.
Think of a framework like a bigger, more complete version of the utils.js file we’ve been using.
Just think about reasons you might like to try out a framework, and what advantages that framework might have over doing things the way you’ve been doing them so far.
Then, think about what you like about how you’ve been writing code so far...
Q: Is there a difference between a framework and a toolkit?
Framework and toolkit are used pretty interchangeably in the JavaScript world.
Some people will tell you a framework is a structure for how you write all your code, while a toolkit is a collection of utility functions.
But that’s a distinction that not every framework or toolkit makes, so it’s not worth getting hung up on.
Tonight’s talk: Ajax Framework and Do-It-Myself JavaScript go head-to-head on utility functions, toolkits, and the pros and cons of do-it-yourself thinking.
Ajax Framework: Wow, I thought you guys were never going to have me on.
What is this, like page 332 or something, and I’m just now making an appearance?
So what’s your problem with me? I’d think a guy like you would love me.
I take all those routine, boring, annoying tasks and wrap them up into userfriendly function and method calls.
And? What’s the problem with that? I don’t even see the difference...
So how is my JavaScript .js file any different than yours?
Hey, we figured you’d show up when you were needed.
And lookie here, seven chapters down, and you’re just now getting involved.
In fact, I’m a big fan of  abstracting common code into utility methods, not writing duplicate code, and even having different .js files for different sets of  functionality.
Just open another script, and you know exactly what’s going on.
Sometimes you just need to get some little visual effect done...
That’s no time to be digging around on the Internet for some code a junior high dropout posted to his blog three years ago.
Have you ever looked at yourself ? Maybe in a mirror, or in the reflection from one of  those bright shiny widgets you’re so proud of ?
You’re impossible to figure out! There’s like a thousand lines of  code to wade through.
What if  I want to do something just a bit differently than you’re set up for? What then?
Why in the world would I want to? Who wants to figure out what the eighth parameter to a method is? Since when is that helpful?
If  that’s what it takes to actually understand what’s going on, you bet I do!
Your job was to think of some good reasons to use a framework, and some not-so-good reasons that come with using a framework.
Reasons to use a framework Reasons NOT to use a framework.
You don’t have to write code for functions that someone else has already figured out.
Frameworks have functions you might not have time to write yourself but would use if those functions were available.
The code in frameworks is tested more because more people are using the framework.
So there’s less chance of bugs, and less need for testing.
The framework might not have all the options you want or need.
So you might end up changing your code to accommodate the framework.
Sometimes a framework hides important concepts that would be helpful to know.
So you might not learn as much using a framework.
Are there certain categories of functionality that you think would be better suited for a framework? What about things you don’t want a framework doing for you?
Frameworks usually take care of cross-browser issues for you, so you don’t have to worry about IE, or Firefox, or Opera.
We only asked for three, but we couldn’t resist adding this one.
So what frameworks ARE there? There are several popular frameworks out there...
How often do these things change? Are frameworks releasing new versions very often? Is that something we should be worried about?
Frameworks usually change FASTER than the underlying JavaScript syntax does.
Frameworks are controlled by the people who write them, and so a framework might release a new version every few months...
But the core JavaScript syntax and objects, like XMLHttpRequest and the DOM, are controlled by big, slow-moving standards groups.
At the most, you’ll see something change every few years.
It provides lots of low-level JavaScript utilities, including support for Ajax.
Every framework uses a different syntax to do things Each framework uses a different syntax to get things done.
For example, here’s how you’d make a request and specify what to do with the server’s response in Prototype:
This is the Ajax object for making requests in Prototype.
The onFailure function runs if there’s a problem with the request or response.
The first part of both bits of code gets a value from the page.
We haven’t been providing an error message if the status code isn’t 200, or if other problems occur.
But take a look at the equivalent JavaScript from an early version of  Mike’s Movies registration page:
JavaScript and Ajax frameworks are just new and different ways to do what you’ve already been doing.
When you boil it all down to code, an asynchronous request is an asynchronous request is an asynchronous request.
In other words, under the hood, your JavaScript code still has to create a request object, set up code to run based on what the server returns, and then send that request.
No matter how the syntax changes, the basic process stays the same.
Using a framework might make parts of  setting up and sending that request easier, but a framework won’t fundamentally change what you’ve been doing.
And yes, you’ll definitely need to learn some new syntax to use any framework effectively.
Frameworks offer a lot of nice features “for free.” Most frameworks come with a lot of convenience methods and cool visual effects.
And the syntax isn’t really that hard to pick up if  you’re already familiar with basic JavaScript and Ajax concepts and principles.
And one of  the best features of  frameworks is that a lot of  them handle situations where users don’t have JavaScript enabled in their browsers.
But I’ll bet there are some pretty big advantages, too, right? Like cool visual effects, and maybe some more robust error handling?
Q: You didn’t mention my favorite framework, [insert your framework name here]
A: Well, there are a lot of frameworks out there, and more are showing up every day.
The frameworks on page 335 are some of the most popular right now, but your framework might show up on that list in a few months.
In any case, the main thing is that a framework doesn’t provide fundamentally different functionality than the code you’ve been writing.
It just makes that functionality more convenient, or it takes less time to write, or it adds visuals...
Q: Do all frameworks make working with elements on a page so easy?
Since those are such common operations, most frameworks provide syntax to make that easier, like $("username") to get an element with an id of “username.”
Q: So what’s the framework using to get the element, then?
A: The same DOM methods you’d use without the framework.
Additionally, the returned object has its normal DOM methods available, as well as additional methods the framework might provide.
A: Well, some people use frameworks because they don’t want to take the time to learn the underlying concepts.
That’s not a good thing because those folks don’t really know what’s going on in their code.
If you use a framework, though, you do know the concepts and code underneath.
That means you’ll probably be more effective as a programmer, and be able to hunt down problems a little more effectively, too.
Q: So a framework just does what we’ve already been doing ourselves?
A: Well, frameworks often do a little more than we’ve been doing.
They typically provide more options, and they also tend to have a more robust error handling setup than just showing an alert() box.
But they’re still making requests and handling responses and grabbing elements on a page using the DOM, just like the code you’ve been writing.
Q: So we shouldn’t use frameworks since we already know how to write all that request and response and DOM code, right?
A: Well, frameworks do offer a lot of convenience functions, and those screen effects are pretty cool...
There’s a certain amount of control you lose with a framework because it might not do just what you want it to in a certain situation.
Sometimes it’s best to take complete control, and just write the code you need without putting a framework in the mix.
Q: So which is it? Use a framework, or don’t use one?
A: That’s the question, isn’t it? Turn the page, and let’s try and figure that out.
It’s up to YOU to UNDERSTAND your code, whether or not you use a framework to make that code easier to write.
To framework or not to framework? There are a lot of  good reasons to use a framework...
Some people go back and forth between projects where they use a framework and projects where they don’t.
It really depends on the situation and your personal preferences.
I’m just learning JavaScript, so I stick with pure request object calls...
I’m learning a lot more that way, and that’s what I want.
I can do tons of cool screen effects with that toolkit.
We have lots of weird requests that interact with our server programs and the data...
I avoid toolkits because I want complete control of how my requests are configured and sent.
I use a toolkit to handle errors, deal with weird mobile browsers, and let my team focus on functionality, not the browser wars.
I think mooTools looks pretty cool, but I want to get a better handle on requests and callbacks.
I’ll probably use a toolkit at some point, but just not yet.
Is it important for you to really control every aspect of  your code? Do you go crazy wondering how efficient every function you use in your JavaScript really is? Can you not stand the thought of  missing out on.
Don’t care so much about every internal line of  code? If  you’re a productivity nut, and want great apps with a.
We think it’s pretty important to know what’s going on under the hood, whether you use a framework or not, so the rest of  this book will stick with plain old JavaScript instead of  going with any particular framework.
But everything you’ll learn still is useful, even if  you later use a framework to hide away the details of  what’s going on.
With XML, the extensible markup language, your data can describe.
That means your scripts won’t be filled with ifs, elses, and switches.
With XML, the extensible markup language, your data can describe.
That means your scripts won’t be filled with ifs, elses, and switches.
I love it when you describe yourself with angle brackets, and tell me all about your attributes.
As a special bonus, we’re bringing back the DOM in this chapter...
Classic rock gets a 21st century makeover Rob’s Rock and Roll Memorabilia has hit the big time.
Since going online with the site you built for Rob, he’s selling collectible gear to rich customers around the world.
In fact, Rob’s gotten lots of  good feedback on the site, and he’s making some improvements.
He wants to include a price for each item, in addition to the description, and he also wants to be able to include a list of  related URLs so customers can find out more about each item.
Each item will have one or more URLs to find out more about the item.
Server Response Magnets Below are diagrams of the interactions between several of the apps you’ve built and programs on the server that those apps use.
Can you place the right server response magnets on each diagram?
How are the server responses from the apps you’ve built so far different from what Mike wants his server to respond with in the new version of his rock and roll site?
If you don’t remember, flip back to these earlier chapters, or check your own code.
Server Response Magnet Solutions Below are diagrams of the interactions between several of the apps you’ve built and programs on the server that those apps use.
Can you place the right server response magnets on each diagram?
The Yoga app requested XHTML page fragments from the server, but didn’t call any server-side programs.
Mike’s server-side script returns “okay” or “denied” for a username and password.
The server returns a word score for Woggle, or -1 if the word is invalid.
How are the server responses from the apps you’ve built so far different from what Mike wants his server to respond with in the new version of his rock and roll site?
How should a server send a MULTI-valued response? So far, all the server-side programs we’ve worked with have sent back a single piece of  data, like -1 or “okay.” But now Mike wants to send back several pieces of  data at one time:
All the servers so far sent out a single response...
Mike’s server is going to send back more than one piece of data.
A list of  URLs with related information about the item.33
What would you do? There are lots of  ways to handle getting more than one value back from the server, and this time, the choice is up to you.
The server can format its response as XHTML, and we can stick with the.
We’re going to follow Frank, Jim, and Joe and see which one comes up with the best solution.
Who do you think will solve Rob’s site problems and win the Les Paul?
Item ID: itemCowbell Description: Remember the famous “more cowbell” skit from Saturday Night Live? Well this is the actual cowbell.
In this space, write what you think the XML for this item would look like.
Item ID: itemCowbell Description: Remember the famous “more cowbell” skit from Saturday Night Live? Well this is the actual cowbell.
We grouped the URLs with a resources element, and then put each URL in a url element.
These solutions are just ONE way to represent the item data as XML, CSV, and XHTML.
You might have come up with something a little different.
As long as you got the right values in the right format, you’re all set.
Each item in a CSV string is separated by a comma.
This is the XHTML exactly as it ne eds to.
That’s a lot of  formatting for the server-side guys to keep up with.
Joe: But they’ve got all the data about the item, right?
That’s the whole reason a lot of  these folks move over to the serverside in the first place...
Joe: But the CSS doesn’t change that much, so the XHTML won’t change that often.
Only if  we need to add a tag, or maybe an ID for CSS...
You’re not going to be able to get serverside guys to write XHTML, and then change it all the time on top of  that.
So here’s what we need to get going on the server...
Joe, still working on innerHTML and an XHTML server response.J.
You just get an XHTML response from the server, and drop it into a web page with an element’s innerHTML property.
The problem is that the server has to do a lot of  extra work.
Not only does the server have to get the right information for your app’s request, it has to format that response in a way that’s specific to your application.
In fact, that format is specific to one individual page on your site!
It’s a specific format, but any app that reads XML can use this.
This response only works for a very specific XHTML page.
For another page, you’d need a totally different XHTML response.
Look, this CSV thing is gonna get me that Les Paul, and quick.
I just called the server-side guys; they said sending a response as CSV was no problem.
Jim: What do you mean? Here, look at my code to take the server’s response in my callback, and update the item detail for the page.
It’s a little long, but it’s all pretty basic stuff:
This code removes any elements added by previous calls to displayDetails()
This creates a new <p> with the description of the item in it.
Let’s display the URLs as list items in an unordered list.
All of this code goes into thumbnails.js, replacing the old version of displayDetails()
Why do you think the loop deleting any preexisting elements from the details <div> counts down, instead of counting up?
If you’re stumped, try reversing the loop and see what happens.
The downloads for Chapter 9 include a server-side script that returns CSV instead of plain text.
What do you think Frank meant on the last page about CSV being inflexible? Are there problems with the server’s response being in CSV that adding new types of items might cause?
It just means that several values are put together into a single string, with commas separating each individual value.
The idea is the same, but tabs are used instead of commas.
Q: Why do you need to use an uncommon character to separate values?
A: If you use something common, like a period or letter, that same character might show up in your data.
Then, your JavaScript might split the data incorrectly, giving you problems when you display or interpret that data.
In fact, CSV is a bit dangerous because an item description might have a comma in it.
In that case, you’d end up splitting the description on the comma, and having all sorts of problems.
Frank, Jim, and Joe are still debating the merits of CSV, but you could always swap out those commas for something else, and change your client code to split on that new character instead of commas.
As for whether or not you should use CSV, you may want to keep reading...
The method takes two arguments: the name of the attribute and its value.
If there’s no attribute with the supplied name, a new attribute is created.
If there’s already an attribute with the supplied name, that attribute’s value is replaced with the one you supplied to setAttribute()
The property returns an array of all the child nodes for that node.
So you can get an element’s children, for example, and iterate over them or delete them.
Q: So why did you iterate backwards over the childNodes array?
Here’s a hint to get you thinking in the right direction: when you call removeChild(), the node you supply to that method is removed from its parent immediately.
That also means that all references to that now-removed node—say in an array full of an element’s child nodes—have to be updated.
Without a child to point to, all the child nodes that come after the removed node have to be moved up in the array.
So if you iterated over an array like childNodes from front to back, removing nodes as you went, what would happen?
Listen, can I get an item’s details in XML from the server? I’m already behind, but I still think there’s a problem with that CSV solution.
I want to get my XML-based version of the app working ASAP.
The server-side guys shouldn’t have any problem with that at all.
Frank: You know XHTML is just a flavor of  XML, right?
Jill: Sure, but lots of  people and apps can use XML.
Well, I’ve got to rewrite my callback, but let me know when the XML response is ready, okay?
If you respond in XML, LOTS of different applications can work with that XML response.
Q: What do you mean, “XHTML is just a flavor of XML”? A: A flavor of XML is like a specific implementation of XML, with certain elements and attributes defined.
So XHTML uses elements like html and p and div, and then those elements are used along with attributes and text values.
You can’t make up new elements, but instead you just use the ones already defined.
With XML, you can define flavors like this—sometimes called XML vocabulariesand extend XML for whatever your needs are.
That’s why XML is so flexible: it can change to match the data it represents.
Frank’s asked Jill for some advice from a server-side perspective.
You use the DOM to work with XML, just like you did with XHTML Since XHTML is really a particular implementation of  XML, it makes sense that you can use the DOM to work with XML, too.
In fact, the DOM is really designed to work with XML from the ground up.
Even better, the request object you’ve been using to talk to the server has a property that returns a DOM tree version of  the server’s response.
That property is called responseXML, and you use it like this:
Draw a DOM tree for the XML response the server will send to Rob’s app (the response is shown below)
Write a version of the displayDetails() callback in thumbnails.js that will use the DOM to get the various parts of the server’s response, and update the item’s details on Rob’s web page.
The server can send an unlimited number of URLs for each item.
There will always be a single description and price element.
This id will match the id you send the server in your request.
Draw a DOM tree for the XML response the server will send to Rob’s app (the response is shown below)
This is structured just like an XHTML tree, with everything coming off of the root element.
Write a version of the displayDetails() callback in thumbnails.js that will use the DOM to get the various parts of the server’s response, and update the item’s details on Rob’s web page.
First, we get the response in the form of an XML DOM tree.
We can get the <description> element, and then get its first child: a text node.
Getting the price is the same pattern: grab the element, get its text, and get that text node’s value.
The big difference is in how we handle the response from the server.
We can get all the <url> elements and loop through each one.
How does the XML version of  Rob’s online shop look?
This looks just like the CSV version, but it’s using XML and the DOM.
For example, you can read an XML DOM tree and update an HTML DOM tree, all at the same time.
That CSV deal was quick! But I’ve got one more change before I declare a winner...
So for rock memorabilia, I might have an artist name and band name, and for instruments I might have a manufacturer and year.
If  you ask the server for details about a guitar, you’ll get a manufacturer and year.
And for bands, you’ll get a band name, and possibly the name of  the individual in the band that the item belonged to or is associated with.
How would you handle a changing response from the server? And who’s better equipped to handle this new requirement? Frank, with his XML, or Jim, with his CSV?
You can’t always know in advance what the data structure you get from the server will look like.
This sucks! I’m going to have to rewrite my callback now.
I built everything based on a description, price, and list of URLs.
Frank: Yeah, I’ve got a lot of  changes to make, too.
Jim, how are you going to handle a changing response with your CSV?
You know I’ve been doing some researchJim: So I think what I can do is assume that every other value is a category, like “Description” or “Price.” And the values after each category are the actual category values, like the textual description, or 399.99, or whatever.
Except for cases where there’s more than one value, like for those URLs? Then I think I have to check for maybe a special character before each category to indicate that it’s a multi-value category.
Sounds like this latest change from Rob is really going to be a pain.
Wouldn't it be dreamy if there was actually a data format that described itself? It could tell me what every bit of data was used for.
But suppose we needed a vocabulary for describing items, like at Rob’s online store.
The <category> element contains the label and value for each bit of information we need to display.
The XML can contain as many <category> elements as necessary.
We don’t need to know how many there are or what they are in advance.
We can have multi-valued categories, and even indicate that with an attribute on the <category> element.
Item ID: itemGuitar Manufacturer: Gibson Model: Les Paul Standard Description: Pete Townshend once played this guitar while his own axe was in the shop having bits of drumkit removed from it.
How would you represent this item’s details using the XML format from the last page?
Item ID: itemGuitar Manufacturer: Gibson Model: Les Paul Standard Description: Pete Townshend once played this guitar while his own axe was in the shop having bits of drumkit removed from it.
Most of this is just “fill in the blanks.” You drop in the name of a category and its value, and you’re all set.
The URLs are a list, so we have to set the category type to “list.”
Q: So the big deal about XML is that it describes itself? That can’t be useful all that often...
A: Actually, self-describing data is useful in a number of situations, just like here, with Rob’s online store.
It’s pretty convenient to be able to define elements and structure that’s suited to your business.
Even better, XML is a standard, so tons of people know how to work with it.
That means your vocabulary is usable by lots of programmers, in client-side and server-side programs.
Q: Wouldn’t it be easier to just make up our own data format?
A: It might seem that way at first, but proprietary data formats—ones that you make up for your own use—can really cause a lot of problems.
If you don’t document them, people may forget how they work.
And if anything changes, you need to make sure everything is up-to-date: the client, the server, the database, the documentation… that can be a real headache.
Q: Okay, I get why we should use XML, but doesn’t it become a “proprietary data format” when we start declaring element names?
The server and the client need to be looking for the same element names, but you can often work that out at run-time.
That’s what’s meant by selfdescribing: XML describes itself with its element names and structure.
It’s time for the big finish (at least for now)
Your job is to take what you’ve learned about the DOM, server-side responses in XML, and the format from the last few pages, and put it all together.
That script is in with the other downloads for this chapter from Head First Labs.
Rewrite the displayDetails() callback to work with the XML vocabulary we’ve been looking at.
Test everything out! Once you’ve got everything working, turn the page to claim your Les Paul (at least, that’s what we hope)!
It’s time for the big finish (at least for now)
Your job was to take what you’ve learned about the DOM, server-side responses in XML, and the format from the last few pages, and complete an updated version of the displayDetails() callback.
We can check the type to see if it’s a list.
This gets categories with no type attribute, or a type with a value other than “list.”
Things don’t look like they’re going so well for Jim and his CSV solution.
Add both the list heading and the list itself to the <div>
Test Drive Test out the new, improved, more flexible version of Rob’s page.
Once you’ve got all your code updated, let’s take it for a spin, and show Rob what we’ve come up with.
Be sure to change the URL in your getDetails() request function, too.
This looks fantastic, and I don’t have time to wait on anyone else.
So the Les Paul guitar goes toHold it right there.
We addded a <br> element to the detailDiv to do this:
The browser puts the XML DOM into a property of this object:
This property of the request object contains text returned by the server:
XMLAcrostic Take some time to sit back and give your right brain something to do.
Answer the questions in the top, then use the letters to fill in the secret message.
We addded a <br> element to the detailDiv to do this:
The browser puts the XML DOM into a property of this object:
This property of the request object contains text returned by the server:
XMLAcrostic Take some time to sit back and give your right brain something to do.
Answer the questions in the top, then use the letters to fill in the secret message.
Because the journal is probably structured information, XML might be a good choice, too.
Everything’s in the right place, and he’s already representing you well to everyone else.
So what should we be calling him? Most of the nurses love JSON...
Joe, buddy, I don’t know what you think you’ve got, but my XML solution is perfect.
Joe: I think we might have different definitions of  flawless, man.
Two DOM trees to work with, and dealing with whitespace in the server’s response?
Frank: No, but that’s easy enough to add inJoe: And your code will get even more convoluted.
It’s a way to represent a JavaScript object in plain text.
So the server can send us JSON—which is just text, no XML or DOM issues to deal with—and our JavaScript can work with that response as an object.
Frank: —then you wouldn’t need all this DOM stuff, or even split() and other text manipulation code.
Suppose you had an item’s ID, description, price, and a list of URLs for that item.
What do you think an object representing that information might look like? Draw a circle for the object below, and then add in whatever fields you think the object might have.
The server sent over the text, and our JavaScript had to use string manipulation routines like, split(), to turn the string into individual pieces of  data.
With XML, the server sent text over, too, but that text was selfdescribing.
So we could get a DOM representation of  the text using the request object’s responseXML property.
But then we had to use all those DOM methods to work with the object, instead of  actual property names like description or urls.
But suppose we had a way to get text from the server, and then treat that text as a JavaScript object.
Instead of  using string manipulation or DOM methods, we’d just use code like item.
In other words, we’d have a format that was represented as text for easy network transmission, but an object when we needed to work with the data.
Suppose you had an item’s ID, description, price, and a list of URLs for that item.
Your job was to draw what you thought an object representing that information might look like.
We figured the object might best be called itemDetails, or something similar.
It doesn’t represent an item, but information about the item.
Then, all you need to do is access that object’s fields using dot notation.
Dot notation just means you put the object name, and then a dot, and then a field name, like this:
How do you think you’d access the value of  the description field?
If  you’re looking at your answer, and thinking it’s too simple, then you’ve probably got things just right.
Working with JavaScript objects is about as easy as it gets.
So how do we get JSON data from the server’s response? When a server sends its response as JSON data, that data comes across the network as text.
So you can get that data using the responseText property of  your request object:
Download the examples for Chapter 10, which include a JSONspecific version of the server-side script, as well as a JSON library that script uses.
Get the textual response from the server, and display it using an alert() or some other JavaScript output function.
What did the server respond with? Does it look like a JavaScript object?
Download the examples for Chapter 10, which include a JSONspecific version of the server-side script, as well as a JSON library that script uses.
Get the textual response from the server, and display it using an alert() or some other JavaScript output function.
This is the line we used from getDetails() that requests a response from the JSON server-side script.
Here’s what we got reloading the inventory page, and clicking on the guitar image.
What the heck is this? And what do we DO with it?
JavaScript can evaluate textual data JavaScript is pretty good at turning text into objects, functions, and lots of  other things.
You can give JavaScript some text, and it’s smart enough to figure out what that text represents.
It looks like we’re assigning a textual description of a function to the image’s onclick event.
JavaScript takes this textual function, and creates an actual function in memory.
So when an image is clicked, the function code sitting in memory is executed.
That all happens behind the scenes, though, and isn’t something you need to worry about.
But what about when you have text, and you need to TELL JavaScript to turn it into something more than text?
This response from the server looks like it’s a bunch of property names and values...
So if  you passed the text describing a statement to eval(), JavaScript would actually run that statement, and give you the result:
Evaluating JSON data returns an object representation of that data So how does this apply to JSON data? Well, when you run eval() on text that describes a set of  property names and values, then JavaScript returns an object representation of  those properties and values.
JavaScript figures, “Hey, this looks like an object.” So it turns this data into an actual object, and returns that object:
Each name/value gets turned into a property of a new object.
The urls array gets turned into a property with an array holding its values.But there’s one catch...
It looks like the object JavaScript creates from a JSON response is perfect for Rob’s rock inventory page.
You need to make sure that the overall JSON response string is seen as a single object.
So when you call eval(), wrap the whole response in parentheses, like this:
Enclosing the entire text in parentheses says to JavaScript: “Treat this all as ONE THING.”
You’ve got a script that returns JSON data, and now you know how to convert that response into an object.
All that’s left to do is use that object in your callback.
Open up thumbnails.js, and see if you can rewrite displayDetails() to convert the JSON data from the server into an object, and then use that object to update Rob’s inventory page.
Q: Do I need any special libraries to read JSON data?
Q: Why should I mess with eval()? Couldn’t I just parse the raw text from the server?
A: You could, but why bother? eval() turns all that text into a very simple object, and you can avoid counting characters and messing with split()
Q: What are those curly braces around everything in the server’s response?
Q: And each name/value pair in the text becomes a property of the object and a value for that property?
Q: What about the urls property? That looks sort of weird.
So the property name is “urls,” and the value is an array, indicated by those opening and closing square brackets ([ and ])
You’ve got a script that returns JSON data, and now you know how to convert that response into an object.
Your job was to use that object in your callback.
Here’s where we ask JavaScript to convert the server’s response into an object.
There’s no need for using DOM to get values from the server with JSON.
Getting the details about each item is really simple now.
This code is a bit shorter than the XML version, and only uses one DOM.
Do you think this version is better or worse than the XML version?
Q: This is all just about a data format, right? A: That’s right.
Any time you send information between your web page and a server, you’re going to need some way to format that information.
So far, we’ve used plain text to send requests, and text and XML to retrieve responses.
Q: If we’ve already got XML and text as options, why do we need JSON?
A: Since JSON is JavaScript, it’s often a lot easier for both JavaScript programmers and browsers to work with.
Also, because JSON creates a standard JavaScript object, it winds up looking more like a “business object” that combines data and functionality, instead of an untyped XML DOM tree.
You can create similar objects from an XML response, but it requires a lot of additional work, with schemas and databinding tools.
Q: So JSON does things XML can’t do? A: It’s not so much that it does more; JSON actually does fewer things than XML.
But what JSON does, it does simply and elegantly, without a lot of the overhead that XML requires to do all the bazillion things a more fully-featured markup language was designed to handle.
Q: Can we go back to syntax? I’m still a little fuzzy on the textual representation of an item.
The opening brace indicates that there is an unordered set of elements in the object.
You access the elements of the array using the name of the array and the index for the element that you want.
Values in curly braces are accessed by their property name, after the object name.
Test Drive But does JSON actually impress Rob? The code looks a bit simpler, and there’s one less DOM to work with.
Be sure you have JSON.php along with the JSON serverside script.
The server-side scripts for this chapter require JSON.php, which comes with this chapter’s downloads.
Be sure you have all those files before going on.
JSON.php is used by the server-side script in this chapter.
It handles some PHP-specific issues that make dealing with JSON easier on the server.
What would a JavaScript object that had to change based on the specifics of an item look like?
Frank: You’re right! His JSON code doesn’t really help much in that case.
His code depends on knowing the names of  the object’s properties.
And there’s no way it works with dynamic item descriptions, where the property names change.
You know, I was able to solve that problem with XML.
You’ve always read the name of  properties from your element’s tag names.
His code has the property names as part of  the code...
Frank, who thought he had the Les Paul guitar in the bag.
There’s got to be a way to handle dynamic properties...
So once your program’s running, you’re stuck with the definitions that are compiled into bytecode.
In other words, a Car object can’t suddenly have a new manufacturer property without recompilation.
That lets everyone who’s using the Car object know what to expect.
Not only that, but the objects the server sends are created at runtime, using eval()
So whatever’s sent to our JavaScript, that’s what we get in the itemDetails object.
This object has a new color property and a new “worn by” property with an array of values.
This version of itemDetails has two new properties: manufacturer and model.
We don’t need to change our object at all! We just need to know how to figure out what’s IN the object.
You just have to ask it, using the for/in syntax.
Suppose you’ve got an object called itemDetails, and you want to know what properties itemDetails has.
Pretty simple, right? So the variable property would have values like id, description, price, and urls.
But we don’t want just the property names; we also want the values for each property.
That’s okay, though, because JavaScript lets you access an object’s properties as if  the object were an array.
These lines of code return the values of the matching properties in the itemDetails object.
Update your version of the inventory page to work with dynamic data from the server.
If the argument isn’t an object, it’s not an array.
All arrays have a constructor with the word “array” in that constructor.
I got the single-valued properties working, but how am I supposed to deal with arrays? How do I know if a property value, like urls, holds an array?
JavaScript does NOT give you a built-in way to see if a value is an array.
But what about itemDetails[proper tyName]? Is the value for that property an array or a single value, like a string?
Unfortunately, JavaScript doesn’t give you a simple way to check and see if  a value is an array.
You can use the typeof operator, but even for arrays, typeof returns.
To help you out, here’s a little Ready Bake Code that will tell you if  a value is an array or not.
Add this function to the end of  thumbnails.js, and then see if  you can finish up your exercise from the last page.
Update your version of the inventory page to work with dynamic data from the server.
We can cycle through each property of the returned object.
Start by getting the property’s value and seeing if that value is an array.
For multi-valued properties, we have to iterate through the array of property values.
For each value in the array, create a new <li> and add the value to it.
Remember to add isArray() to your code, or this JavaScript won’t work.
Test Drive JSON testing, part deux Now our code handles dynamic objects, values that might be strings or arrays, and should run like a dream.
Do you think isArray() belongs in thumbnails.js or utils.js? Put the function where you think it really belongs, and make any needed changes to the rest of your code now.
What’s that “id: itemHat” thing? And why are the labels all lowercase?
Take a close look at the property names for an item’s description:
We’ve been printing out the property name and then the value for that property.
But those property names look more like code than “human speak.”
Not only that, but the ID of  each item is showing, too.
That could wind up being a real security bug down the line.
Frank: Do you really think that’s a good idea? Just running code that someone else gave you?
Jim: Someone’s getting cranky that their JSON solution isn’t so easy...
Frank: Whether JSON’s easy or not, you can’t just evaluate that code blindly.
What if  it’s malicious code, like a script that hacks the user’s browser or something? Or it redirects their browser to a porn site?
Joe: Are you kidding me? It’s Rob’s server, for crying out loud!
Frank: What if  it’s not correct JSON? What if  there’s an error? Evaluating code with an error in it is going to generate errors for the users?
Joe: You’re both just annoyed that I was gonna win that guitar.
I’m telling you, you can’t go around using eval() on code that you don’t have any control over.
Ajax request objects can only make requests to programs on the same server that the JavaScript creating the request was served from.
Does that reduce, increase, or change the dangers of using eval() on a server’s response text?
You need to PARSE the server’s response, not just EVALUATE it Calling eval() initiates a simple process: take a bit of  text, and evaluate that text.
Suppose we could take a bit of  text, and make sure it’s actually JSON-formatted data.
Then, we could reasonably assume it’s safe to evaluate that data, and turn it into a JavaScript object.
That extra step—parsing the data and making sure the data is JSONprotects us from two important potential problems:
You still need to assign the result of calling the parse() function to a variable.
This JSON object is created when json2.js is first loaded by the web browser.
We’ll know that the data is safe to evaluate, and not a malicious script or program.
We can be sure that not only is the data JSON, but it’s correctly formatted JSON and won’t cause our users any errors.
You can download a script from json.org called json2.js, and then use this command to parse JSON-formatted data:
JavaScript code, or other scripts, won’t pass a simple, “Is this JSON?” test.
A parser can catch errors and report them, instead of just giving up and creating an error.
Add a reference to this new script in inventory.html, and update your version of  thumbnails.js to use JSON.parse() instead of  eval()
Can you make Rob’s inventory page even cooler using JSON? Build your best version of Rob’s page, and submit your URL in the Head First Labs “Head First Ajax” forum.
We’ll be giving away cool prizes for the best entries in the coming months.
Visit us here, tell us about your entry, and give us a URL to check out what you’ve done (and how)
And besides all that, how do YOU think Rob’s inventory page could be improved?
Don’t forget to use a JSON parser, instead of eval()!
How could you avoid showing the ID of an item when a user clicks on that item?
What about those labels? Can you figure out a way to show better, more- readable labels?
What about those URLs? Can you figure out a way to format URLs as links (using <a> elements) so they’re clickable?
Q: So I shouldn’t ever use eval()? A: eval() is an important part of JavaScript.
If you need to pass textual data to another function for evaluation, or even between scripts, eval() is really helpful.
However, eval() can be a problem when you’re evaluating data that you can’t control, like from someone else’s program or server.
In those cases, you won’t know ahead of time exactly what you’re evaluating.
So in situations where you’re not in control of all the data, stick to a parser or some other approach other than eval()
Q: But a JSON parser keeps my code safe, right?
A: A JSON parser keeps your code safer than eval(), but that doesn’t mean you can completely relax.
When you’re writing web code, security is always an issue.
In the case of JSON data, JSON.parse() will ensure you’ve got valid JSON data, but you still don’t know what that data actually is.
So you may still need additional checks before using the data in the rest of your scripts.
Q: We didn’t do any checks like that for Rob’s page.
When you’re reworking the app to help out Joe, think about the data you’re getting.
Could it be used maliciously? Do you think you need additional security checks?
Q: What about that json2.js script? Can I trust and rely on that code?
A: Now you’re thinking like a web programmer! Anytime you use code from another source, like from http://www.
We’ve done that testing here at Head First Labs, and json2.js is safe to use.
Q: Is it free, too? Do I have to pay anyone anything to use json2.js?
You can actually read through the source code at http://www.json.
Q: So what about XML versus JSON? Which is better? And who won the guitar?
You’ve seen a lot of JSON and XML code now...
Security is ALWAYS a concern when you’re programming for the web.
Always thorougly test any code that you don’t have complete control over.
Joe: I know about lots of  things I don’t like.
Frank: I just don’t see what you really gain by using JSON.
Maybe it’s a little easier for you to use, but it’s a pretty big pain when you get to dynamic data.
I got really confused dealing with 2 DOMs at once.
Joe: I still think JSON lets me think in JavaScript, not some other language.
Obvious to whom? I still think XML is the clear winner.
It’s a standard, and I don’t have to download any libraries to get things working.
What do YOU think? Below are two columns: one for XML, and one for JSON.
Under each heading, write why you think that format is better.
Tonight’s talk: XML and JSON go head-to-head on data formats and standardization.
I’m big because I can handle anything: product memorabilia, HTML, purchase orders...
You think a little pipsqueak can handle all those different types of  data? I don’t think so.
I can do all sorts of  things, like represent a math equation or a book.
But can someone transform you into something else? Like with XSLT? Or what about web services...
Tonight, the world is gonna see that you’ve lost a step, especially when it comes to JavaScript and asynchronous applications.
You’re only at the top because people think that there’s nothing else available.
I know lots of  people that can’t stand you, XML...
Yeah, well, most of  my users aren’t too interested in sending math equations across the network.
Hello? We’ve got a whole group of  DOM experts out there these days, writing killer user interfaces.
Did you see that Fifteen Puzzle? That was pretty cool, and it was only about 100 lines of code.
Anyone that knows the DOM is ready to use XML, today!
What are all the servers going to think about this? You know, PHP and ASP.Net and Java...
I don’t see them lining up to throw their support to you and your “lightweight data format” spiel.
Libraries? If  they’ve got to use a library, why not use a standard like the Document Object Model?
But here I am, being used right now, because I’m already a standard.
At the end of  the day, you’re just one more proprietary data format.
Maybe you’ve got a few more fans than comma-separated values, but I’ll put an end to that.
I just care about getting information from a web page to a server and back, without a bunch of  extra work...
Look, all developers really need is a lightweight data format that’s easy to work with in JavaScript.
What do YOU think? Below are two columns: one for XML, and one for JSON.
Under each heading, write why you think that format is better.
It’s up to you to decide between JSON and XML, based on the factors that are important to you.
Remember me? Oh, that’s right, I’ve only met you in my dreams.
You think that’s valid with me? Better try again, buddy...
She’s got some of  Silicon Valley’s highest-end clientele signing up daily.
She’s even added online enrollment, so once a potential client finds the perfect class, they can sign up right away:
Marcy also wants to know how long the client has been practicing yoga.
Below are a few entries from Marcy’s ever-growing customer database.
Gerry MacGregor isn’t old enough to have been practicing yoga for 99 years.
Below are a few entries from Marcy’s ever-growing customer database.
Jane Jones entered in a website URL, not an email address.
Gerry MacGregor couldn’t have been practicing yoga for 99 years.
Based on the data that Marcy’s trying to gather, what sorts of things would you do to ensure she isn’t having the sorts of problems you saw on the last couple of pages?
For each field below, write down what you think you need to check.
Based on the data that Marcy’s trying to gather, what sorts of things would you do to ensure she isn’t having the sorts of problems you saw on the last couple of pages?
We also need to make sure it’s formatted like an e-mail.
This should be a number, and be less than the years the.
Do we allow initials? That might mean we can allow periods.
I’ve decided not to require the years they’ve been practicing, their birthdate, or a bio.
So if someone doesn’t want to give that information, they can still sign up.
But I’ve definitely got to have a good first name, last name, and e-mail address.
The owner of the page knows their requirements better than you do.
No matter how good of  a programmer you are, you’re not an expert in your customer’s business.
So you probably won’t always make good assumptions about things like required fields, the types of  data that can be entered, or the format of  that data.
It’s best to come up with some basic ideas about validation, and then confirm and expand those ideas by talking to whomever actually owns the site or business that the site represents.
The best way to build a site your customer loves is to build.
For Marcy’s site, Marcy is the customer, and you’re the programmer.
Q: Is this gonna be another one of those, “Not really Ajax” chapters?
We’ll be spending most of the chapter working on validation, not asynchronous requests.
But figuring out how to actually get accurate requirements and validating data for those requirements applies to all software development, not just Ajax apps.
Validation should work from the web page BACK to the server Validation is usually a multi-step process.
Some things you can catch by using certain controls on your web page, like a select box instead of  a text field.
You can catch other things with your client-side JavaScript, like the format of  an email field.
And still other things might need to go to the server to get validated, like seeing if  a username’s already taken.
The most effective way to handle multi-layered validation like this is to always validate as much as you can on the web page.
Then, move to JavaScript, and validate as much as you can there.
Web page JavaScript Server The server has access to the business data of your app.
So it can check data consistency or perform other business logic that requires interaction with other data in the system.
Your client-side JavaScript can check data formats, ensure data’s entered into fields, and prevent submissions until a group of fields have data in them.
A web page can constrain data through specific controls, like length-limited text boxes and select boxes with only a few appropriate options.
Do as much as you can here to constrain data.
Don’t check for things in your JavaScript that you can restrict with form controls.
Try and never send the server data that’s not formatted correctly.
Below is the XHTML for Marcy’s current version of the enrollment form.
What changes would you make, based on the things you wrote down on page 412, along with Marcy’s comments?
Go ahead and mark your changes directly on the XHTML.
Your job was to add constraints to the data Marcy collects from her customers by changing her XHTML.
What did you come up with? Here’s what we did.
There are a fixed number of values for birthday, so let’s not use a text box, which allows bad entries.
Instead, we can use a select box for the month, and list the 12 possible month values...
Marcy told us she didn’t want a birth year, so we didn’t need to worry about that.
We can group the years of experience into useful ranges, and simplify things here, too.
Test Drive See how many errors we can catch now...
We’ve already knocked out a few of  the problems Marcy was having:
Birthday is now a set of select boxes, one for month and one for day.
Years of experience is also a select box with some predefined choices.
A: It can definitely be a little boring to dig into XHTML if you’d rather be writing JavaScript and asynchronous requests.
Then again, your coding gets a lot easier if you’ve got a good web page doing its job.
Q: So I should use select boxes whenever possible? A: When it comes to data entry, that’s a good principle.
The more invalid or poorly formatted data that comes to your JavaScript, the more work your JavaScript has to do.
Q: What’s the big deal with doing all of this in my JavaScript, and not messing with the XHTML web page?
It’s often easy for you to code validation in your scripts, but customers don’t like error messages.
If you can make sure they enter data by using good controls, customers are less likely to need error messages from your validation code.
That makes for a happier user experience, and that’s always a good thing.
Q: Why did you disable the Enroll button in the HTML? Haven’t we usually been doing that in an initPage() function, and calling initPage() from window.onload?
A: In earlier chapters, we’ve used initPage() to disable buttons, yes.
You can certainly do the same thing here, or you can set the button to disabled in the XHTML.
One slight advantage to disabling the Enroll button in your XHTML, though, is that the XHTML now really does represent the initial state of the page.
In other words, initPage() doesn’t change the form as soon as it loads.
That makes the XHTML a more accurate represention of the form at load-time.
Still, it’s not a big deal if you’d rather disable the button in an initPage() function.
You can validate the FORMAT of data, and you can validate the CONTENT of data We’ve been using the term validation pretty loosely.
At the user’s browser, we might make sure that the user enters their first name and birthday.
At the server, we might make sure that the user’s username isn’t already taken.
You might make sure that a username is at least six characters long, or that there’s a value for the first name field, or that an email address has an @ sign and a .com or .org in it.
When you’re validating a data format, you’re usually working with client-side code.
By using client-side code to validate data formats, you can let users know of problems quickly, without waiting on a server response.
You’ll need your app’s business logic to see if the content of user data is acceptable.
Use server-side programs to let users know of problems with what they’ve entered.
Sometimes you’ve got to do more than just see how many characters a string is, or make sure an entry is really a month of  the year.
You may need to check data against your database to prevent duplicate entries, or run a computation that involves other programs on your network.
In those cases, you’re validating the content of  user data.
And that’s not something you can usually do at the client.
You’ll need to send the data to your server, and let programs on the server check out the data for validity.
Well-designed applications validate both the FORMAT and the CONTENT of user data.
You need BOTH types of validation to keep bad data out of your apps and databases.
Marcy said we don’t need to require a birthday, bio, or the years they’ve been practicing yoga.
We’ve got birthday in a consistent format by using XHTML select boxes.This isn’t a.
We need to validate the FORMAT of the data from Marcy’s enrollment page Let’s take another look at what we need to do to validate Marcy’s page.
For each field, we’re actually just validating the format of  the data.
That means we should be able to do pretty much everything we need using JavaScript:
We can use JavaScript to validate the format of all of these fields, but what exactly would you do next?
Then we just register each event handler to the right field, and boom, we’re good to go.
Aren’t we doing the same checks on several different fields?
Jim: You mean like making sure a field has a non-empty value? Yeah, that’s...
But aren’t we going to be repeating code in each one of  those event handlers if  we’re doing the same checks for different fields?
So maybe we need to have utility functions, like fieldIsFilled(), and we can call those from each event handler.
So checkFirstname() and checkLastname() could just call fieldIsFilled() to see if those fields are empty.
Why do we even need a checkFirstname() function? Jim: Well, duh, that’s got to call all the utility functions.
What if  we built the utilities to take in a field, and do their check?
Jim: But you’d still need something to call all the checks for each field.
Joe: But can’t you assign multiple handlers to a single field?
Frank: That’s it! So you could just assign each validation function to the field it applies to.
So I’ve been looking through these validation requirements, and I don’t think this should be too hard.
We just need to build a bunch of event handlers, one for each field on the page.
Don’t Repeat Yourself: DRY One of  the core principles in software design is called DRY: don’t repeat yourself.
In other words, if  you write a piece of  code once, in one place, try to avoid writing that piece of  code again in some other place.
Let’s write one utility function, and then use that function over and over again:
It can be applied as an event handler to any field.
If the same code exists in two places, it’s easy.
By only writing code once, your app will be easier to maintain, as well as more modular.
Now you can assign this handler to several fields, for instance in an initPage() function:
Because fieldIsFilled() isn’t tied to a particular field, it can be used as a handler for multiple fields.
Can you figure out what it is, and fix it?
Hint: You might need another JavaScript file to correct the problems with fieldIsFilled()
We need to get the activated object since “this” isn’t reliable with multiple handlers registered to the same field.
We’ll get an event object when our utility function, addEventHandler(), is used.
Jim: What do you mean? I tried it out, everything works great.
Frank: But you’re only assigning a single event handler to each field, right?
And we’ve got our utility function, addEventHandler(), ready for when we need to add more handlers.
So I’m all ready to handle multiple browsers and that whole addEventListener/ attachEvent thing.
This looks good, Jim, but I think there might be problems down the line, especially when you start assigning multiple handlers like this to the same object on a page.
Q: Why do we need to use multiple event handlers again?
A: Because we’re building a handler for each type of validation function, like checking to see if a field’s value is empty or if a value is in an email format.
So for a single field, there might be several of those utility functions that should be assigned.
For example, the firstname field shouldn’t be empty, but it also should only contain alphabetic characters.
Q: So since we’re using more than one event handler, we can’t use this?
Beceause we need multiple event handlers on some fields, we’ll need to use the addEventHandler() utility method we wrote in utils.js earlier.
And since we’re using that approach to register handlers, we can’t use this in those handlers.
Q: Wouldn’t it be easier to use a shell function for each field, like checkFirstname(), and then call each individual validation function from that?
In addition to the validation functions, we’d need a wrapper for each field that just connected the field to all of its handlers.
So if you’re checking a field for an empty value, you should have that code in one place, and other pieces of code that need that functionality then call that single bit of code.
If you follow DRY, you never have to change one piece of code in more than one place in your scripts.
That means your code ends up being easier to change, maintain, and debug.
You can check out Head First ObjectOriented Analysis and Design for a lot more on DRY and other design principles.
A: Well, each of our validation functions is a single bit of code, in a single function.
If we put that code into individual handlers, we might have duplicate code.
So checkFirstname() might have code that checks for an empty field, but checkLastname() might have the same code.
If you found a better way to do that bit of functionality, you’d have to make a change in two places—and that violates DRY.
A: Every once in a while you’ll have to violate DRY, but it’s pretty rare.
As a general rule, if you work really hard to follow DRY, you’ll have better designed code.
If you’ve tried but can’t manage it, then don’t worry too much.
The point is to try your best to not repeat code, as that makes you design and write better code in the long run.
Code that doesn’t repeat itself is easier to change, maintain, and debug.
Let’s build some more event handlers fieldIsFilled() was pretty simple.
Let’s go ahead and write code for the other event handlers we’ll need.
We’ll work out what code we need for when there are errors and when there aren’t any problems in just a little bit.
This is the regular expression for checking email formats from Head First JavaScript.
This handler checks a field to see if it only contains letters: from a-z, case-insensitive.
It represents all characters that are NOT between a to z, or A to Z.
If any of these non-alphabetic characters are in the field’s value, the value isn’t all letters.
Now that you’ve got event handlers, can you write initPage() for Marcy’s app? Create a new script and save it as enroll.js.
Add the event handlers above and your version of initPage()
Your job was to build an initPage() function for Marcy’s yoga page, and use the handlers on the last two pages to validate user entry.
That little popup brings everything on the page to a crashing halt.
Earlier, we used some icons to let the user know what’s going on.
But there was a problem with that approach, especially if  you try and apply it to what we’re doing with Marcy’s page.
Why doesn’t a simple approved or denied icon work for Marcy’s page? What would you do differently?
You said to test these, but how? Right now, we just have comments for when there’s a problem...
So for each error, we can just display a message related to that error.
Those functions don’t know about which field they’re testing, so they won’t know what error message to display.
We need some way to have a set of  error messages associated with each field.
And then figure out a way to look up the right error message.
Joe: What about the activated object? We’ve got that in our handlers, so what if  we use the object to look up an error message?
Can we just have some sort of  name/value thing, where there’s a name of  a field, and the value for that field is an error message?
So we lookup the error based on the name of  the field, which we’ve got from the activated object.
Joe: But aren’t there multiple problems that can occur for each field? We need more than one error message per field.
So we need a key for each field, and then a set of  errors and corresponding messages for that.
Jim: How the heck do we do that in JavaScript?
I think we need to tell users what the problem is with their entries.
There’s a big difference between not entering anything into a field,and not using the right format, like for an email.
But JSON isn’t just for the server-side! Anytime you need to represent name-to-value mappings, JSON is a great solution:
The value of a property can be another JavaScript object You’ve already seen properties have string values, integer values, and array values.
But a property can also have another object as its value, again represented in JSON:
This time, the value of the urls property is another JSON-represented object.
There’s a toplevel mapping for each field that we have validation on.
There’s a specific error message for each field, and for each warning for that field.
Let’s warn Marcy’s customers when there’s a problem with their entry With a warnings object full of  useful messages, we can add warnings to Marcy’s page.
Here’s what we’ve got in each event handler validation function:
Based on that information, here’s what we need to do in our warning:
The field, via an activated object, that we need to validate.11
A specific type of  problem that occurred (for example, we know whether a field was empty or invalidly formatted)
Figure out the parent node of  the field that there’s a problem with.
Here’s a warn() function that handles this for Marcy’s form:
Look up the right warning, and add that warning as text to the new <p>, which will cause the browser to display the warning on the form..
This evaluates the string that matches the field and warning type.
This check is to see if there’s already a <p> that we can add the warning to.
If not, create a new <p> and text node with the right warning.
We’ve done a lot over the last few pages, and before you test everything out, there are several steps you need to make sure you’ve taken.
Add the warnings variable from page 432 into your enroll.js script.
You can put the variable anywhere outside of your functions, at the same.
Add the warn() function from page 433 into enroll.js, as well.
Update each of your validation functions, like fieldIsFilled() and fieldIsLetters(), to call warn() when there’s a problem.
You should pass the warn() function the activated object, and a string, like “required” or.
Q: How does warn() know what field it’s adding a warning message to?
So when the handler function calls warn(), that function passes the activated object on to warn()
Q: And what about the warning type? Where does that come from?
A: The warning type is specific to the event handler function.
Each handler should pass on a warning type that matches one of the pre-defined values from the warnings variable, like “required” or.
Q: What’s all that parentNode stuff? A: We want to add the warning just under the actual input box.
If we get the parent of the input box (the field), then we can add another child of that same node with the warning.
The result is that the warning message becomes a sibling of the input field itself...
Q: And the warning message is from the warnings variable?
We put that message in a <p>, as a child of the field’s parent node.
Q: What’s going on with that eval() line? That’s a little confusing to me...
A: First, look at what’s being evaluated: 'warnings.' + field + '.' + warningType.
Each of those maps to an error message, which is what we want.
The result is the matching error message, which we can then show on the enrollment form.
Make sure you’ve done everything on the checklist on page 434, and then reload Marcy’s enrollment page.
Try out several "bad" combinations of  data: skip entering a value for a few fields, enter in a bad email address, try numbers in the name fields.
This first name has numbers, and can only have letters.
This email address isn’t an email, it’s a domain name.
How can we figure out when all fields are valid, and it’s safe to allow users to click "Enroll"?
And now we’re using it again? Haven’t you been paying attention?
In Chapter 10, we were evaluating data from a serverside program.
We didn’t write that program, and weren’t even able to look at the source code.
We just weren’t sure that the code would be valid JSON, and would be safe to run on a user’s browser.
But with the warnings variable, we created the code we’re evaluating.
In fact, we can test things out, and if  there is a problem, we just make a change to warnings.
So it’s perfectly safe to run eval() on code you’re in control of.
If you don’t warn(), you have to unwarn() There’s one big problem with Marcy’s enrollment page: how do we get rid of  those error messages when there’s not a problem? Here’s what our error handlers look like right now:
The warn() function takes care of displaying errors on the form.
If there’s not a problem, we need to remove any error messages.
The first part is pretty simple: for the field that’s passed in, we just need to see if  there’s a warning.
If  there’s not a warning, we don’t need to do anything:
We only need to remove a warning if there’s at least one <p> with a warning already in place.
The function still needs to figure out if the Enroll button should be enabled or disabled.
Can you write code that figures out if there are any warnings being displayed? If so, Enroll should be disabled; otherwise, users can click Enroll to submit the form.
Figure out which warning type we’re unwarning for.We only remove a warning if it matches the warningType passed in to unwarn()
The function still need to figure out if the Enroll button should be enabled or disabled.
Your job was to write code that figures out if there are any warnings being displayed? If so, Enroll should be disabled; otherwise, users can click Enroll to submit the form.
This is equivalent to seeing if there are any warnings since each warning is in a <p>
The Enroll button is enabled now that all the data’s valid.
Getting data right on a form is often boring, and takes a long time to get right.
Take Marcy: without good data, she can’t enroll people in classes, she can’t send out mailings, and she can’t get new business.
Multiply that by all the web apps that you’re getting paid to develop, and validation becomes critical.
And while Marcy’s enrollment form isn’t making asynchronous requests, it’s still a web application that’s typical of  the things you’ll have to work on as a web developer.
Not many programmers can make a living only working on asynchronous requests.
So take the time to get validation on your pages right.
Your customers will love you and their businesses will flourish...
Are you kidding me? All this for a little validation on the client-side? This is a little ridiculous, isn’t it? Besides, where the heck is the Ajax?
Next to each problem, make a note about whether your changes to the enrollment form have fixed that problem yet.
Jane Jones entered in a website URL, not an email address.
Gerry MacGregor couldn’t have been practicing yoga for 99 years.
Jane Jones entered in a website URL, not an email address.
Gerry MacGregor couldn’t have been practicing yoga for 99 years.
Our formatting requirements for names and emails take care of this.
The XHTML changes to the page keep these from occurring.
Between Marcy’s updated requirements and our validation, this is no longer a problem.
Duplicate data is a SERVER problem The only problem we’ve got left is when someone enters in their information twice, like Susan Smith on the last page.
But it’s going to take a server-side program to handle that sort of  problem...
The only way to ensure data consistency is to check the current entries before adding a new one.You could do this with an asynchronous request...
Suppose we build a server-side program to take a user’s information, and check Marcy’s customer database to see if  that user already existed.
We could request that program using an asynchronous request in our JavaScript.
Then, once the server returned a response, we could let the user know that their data’s been accepted.
We’re probably using at least their first name, last name, and email to check against the database, so at most, a user could keep entering in their birthdate and bio.
It’s really better to let the server check the user’s information when the user tries to enroll, and issue an error then.
Since duplicate users aren’t a huge problem right now, you’re better off  saving a ton of  extra code, and simply letting the server handle reporting a problem to the user.
Sometimes, it’s best to let the server handle problems synchronously.
I’ve been getting twice as many signups every week since going online, and I’m not getting any weird data problems.
We’ve handled all of  Marcy’s validation problems, and she’s going to have her server-side guys take a look at preventing duplicate data.
In fact, let’s see how Marcy likes her new enrollment page...
Another web programming success story to add to your portfolio.
There’s a villain in the movies Just when we thought that we’d solved all of  the web world’s problems, it looks like one of  our earlier customers is back...
It doesn’t seem like his customers getting spammed is really related to the registration form we built for Mike, but since we built that form, he’s blaming us.
So what do you think is going on? Is it possible that spammers are getting Mike’s customer email addresses because of  something we did—or didn’t do—on the enrollment form?
What’s going on with Mike’s registration page? Do we have anything to do with his customers getting spammed?
Your job is to draw all the interactions between them.
Be sure to include what’s passing between the web page and the server.
Do you think we have anything to do with the problems that Mike’s customers are complaining about?
Just write what fields and data is being sent back and forth.
Your job was to draw all the interactions between Mike’s page and server.
Be sure to include what’s passing between the web page and the server.
Do you think we have anything to do with the problems that Mike’s customers are complaining about?
Here’s where we tell the request object to use a GET method for sending the request.
In other words, anyone listening to your network can pick up that text.
It’s just plain old text flying between your page and the server.
That way, people can’t snoop around and find Mike’s customers’ email addresses.
That should take care of  his spam problem once and for all.
They send their request data in a different way than GET does.
In a GET request, data for the server is sent as part of the request URL.
In an actual request, lots of the special characters in this URL would be encoded by the JavaScript escape() function.
We’ve left it unencoded, though, to make it a little easier to understand.
My name is John Jenkins, my email address is jj@mac.com, and I love action flicks.
The server-side script reads the data from the request parameters and adds the customer to Mike’s customer database.
Anyone with a cheap network sniffer can get this information from a customer’s request.
The server gets the request and unencodes the POST data.
Data sent with a POST request isn’t part of the request URL.
In a POST request, data that has to be sent to the server is kept separate from the URL.
So there’s no lengthy URL with data in it, and no clear text customer data is sent over the network.
The server-side script adds the customer’s data to Mike’s database.
Once a web server gets a POST request, it figures out what type of  data it has received, and then passes that information on to the program in the request URL.
The data in a POST request is ENCODED until it reaches the server.
The server opens up the POST request and decodes the request data...
The server finally passes the data on to the original program requested in the URL.
Since this is a POST request, there’s no data in the actual request URL.
The server takes the data from the request and turns it into something a server-side program can use.
There’s one additional step that goes into packaging up POST data: the data is encoded in the browser and decoded on the server.
Determined hackers can unencode your POST data, although it takes a lot more work than grabbing request parameters from the URL of a GET request.
If you really want to secure your request, you’ll have to use a secure network connection, like SSL.
But that’s a little beyond what we’re covering in this book.
Q: So if POST is still insecure, how will that help Mike’s customers?
A: Most spammers are looking for the easiest targets possible.
Most of the time, a single bit of trouble—like unencoding POST data—is all it takes to send spammers and hackers looking for an easier target.
With Mike’s site, moving to POST takes a little bit of effort, but will probably protect his site from the majority of malicious attacks.
Q: So are you saying that POST is safe and GET is unsafe? A: Not really.
But sending data to the server using POST takes an extra step to protect that data.
Sometimes that one step is the difference between your users getting your monthly newsletter, and those same users getting a spammer’s porn mail.
Q: So why not send every request using POST? A: There’s really no need to.
For one thing, encoding and unencoding data takes a bit of processing time.
Besides that, GET is fine for sending shorter, non-private data.
Also, if you use POST for everything, your users won’t benefit from tools like Google Accelerator, and some search engine spiders might not pick up your links.
Q: And to send a POST request, all we have to do is put the request data in the send() method instead of the URL?
You can pass name/value pairs to the request object’s send() method, almost exactly like you did when you were sending a GET request.
Q: That’s it? There’s nothing else to do? A: Well, let’s try it out on Mike’s page and see what happens...
A little bit of security on the Internet goes a long way.
Encoding your request data will cause most hackers to look for an easier target somewhere OTHER than on your web site.
But since request data isn’t sent as part of  the URL for a POST request, you can put all the data directly into the send() method of  yor request object:
The request URL is just the name of the program on the server.
The request data is sent as a string and passed to the send() method of the request object.
Instead of adding this data to the request URL, let’s store it in a string variable.
You don’t need to precede yor request data with a question mark (?) in a POST request.
Q: Why don’t I need a question mark? A: The question mark (?) separated a server-side program name, like register.php, from the request data name/value pairs.
Since you’re not appending the request data to the program name, you don’t need that question mark anymore.
That tells the server where one name/value pair ends, and where the next one starts.
Then reload Mike’s registration page, and enter in some data.
Would any of the other requests on the registration page be good candidates for POST requests?
Always check to make sure your request data was RECEIVED.
It seems like we’re sending a valid POST request, and we know that the request data’s right from when we built Mike’s registration page using GET.
But we really don’t know for sure that our request is getting handled.
In cases like this, where you don’t get direct feedback from a server, you need to check that your request data got sent to the server and was properly received.
Otherwise, you could find out there’s a problem much later.
Why don’t I jsut ask the guys to add a few lines to register.php? It’s probably a good idea to let Mike’s new customer know what they submitted, anyway.
The server-side programs that verified usernames and passwords gave you direct feedback.
That made it easy to confirm that your request data was received.
In fact, most server-side programs respond to your request data and give you some sort of  feedback.
But a few programs—like Mike’s server-side registration page—don’t let you know what data they’ve received.
Often, it’s easy to add a few lines and at least echo back what request data was received.
Then, you can ensure the data you sent is the data that those programs received.
If  you haven’t already, download the example files for Chapter 12 from Head First Labs.
Update the request URL in registerUser(), in validation.js, to use this new script.
Jim: Are you sure? I’ll bet someone forgot to change the script to accept POST parameters.
Come on, that’s got to be it! Fix the thing, and we can get on with it...
All the data’s in the send() method of my request object...
So I know the data’s getting to the web server.
Look at the output page! There’s nothing for username, firstname, or lastname, or anything.
Jill: ...and the script’s asking the server for the data and getting nothing...
We did everything right on our end, so it’s got to be a server problem.
Our script is sending a request to the server with the right request data.
But the server has to know how to unencode that data...
The server has no idea what type of data is in this POST request...
Since the server doesn’t know what kind of data it has, it doesn’t know how to pass that information on to the server-s.
We need to TELL the server what we’re sending We need to let the server know exactly what type of  data we’re sending it.
But that information can’t be part of  the request data itself, so we need another way to tell the server.
Anytime you need to talk to the server about a request, you use a request header.
A request header is information that’s sent along with the request and the server can read right away.
The server can also send back response headers, which are pieces of information about that server’s response:
This is what the server sends back to the browser.
We need to tell the server, in a request header, what type of data we’re sending.
The server sends back a response header and status code.
You can send a lot more than plain text in a POST request.
When a server receives your POST request, it won’t know what kind of  data it’s dealing with unless you tell the server what to expect.
Once the server knows what kind of  data you’re sending, it can decode the POST data and handle it properly.
For Mike’s registration page, we need to tell the server we’re sending it name/value pairs.
We can do this by setting a request header called Content-Type.
You need to set the CONTENT-TYPE request header for your data.
This time, the request includes a content type along with the request URL and POST data.
In a GET request, the data is part of the request URL, so it has to be just text.
But in a POST request, we have to explicitly tell the server what to expect.
I’m sending them over as name/value pairs via POST, OK?
Set a request header using setRequestHeader() on your request object Once you know what request header to set, it’s easy to do.
Just call setRequestHeader() on your request object, and pass in the name of  the request header and the value for that header.
For name/value pairs, we want to set the Content-Type request header.
That’s a bit of  a strange string, but it just tells the server we’re sending it name/value pairs, like a web form would send:
Q: So a request header is sent to the server along with the request?
In fact, the browser sets some request headers automatically, so you’re really just adding a request header to the existing ones.
Q: Have we been getting response headers all along, too? A: Yup.
You only have to worry about them if there’s information you need to work with, like setting the content type or retrieving a status from a response header.
Q: So “Content-Type” is used to tell the server what kind of POST data we’re sending?
To find out about the rest of them, try searching for “HTTP Content-Type” in your favorite search engine.
Suppose you wanted to send XML data to a server-side program.
What do you think you’d need to do in order for the web server to unencode that data properly?
Test Drive (one more time) Did it work? Did it work? Update your request to include a Content-Type request header, and try Mike’s registration page again.
The server unencoded our request data and passed it on to the server-side program.
What other secure data does Mike pass between his registration page and the server? Should the username request be POST? What about the password request?
It’s up to you to figure out which requests are best sent as POSTs, and which ones are fine as GET requests.
Go ahead and update Mike’s page to make it safer.
When you’re done, flip the page for a few more exercises.
Logging in usually involves a username and password-you want to secure that sort of information.
There’s no need to use POST for a simple item request.
Are there user credentials being sent? Is the entry public or private?
Sending credit card info requires POST and something more secure, like SSL.
We can barely stand to let you go, but before you do, there’s still a few things left.
We can’t possibly fit everything about Ajax into one 600-page book.
So we threw out everything you didn’t really need to know.
We can barely stand to let you go, but before you do, there’s still a few things left.
We can’t possibly fit everything about Ajax into one 600-page book.
So we threw out everything you didn’t really need to know.
Inspecting the DOM By now, you’re a pro at using the Document Object Model to update your web pages on the fly.
But once you’ve used the DOM to make changes to your page, how can you see exactly what the web browser sees? The answer is to use a DOM inspector:
You have to request that the DOM inspector be installed on Windows.
That will get the DOM inspector running on Windows machines.
How to use it: Download and install the .EXE for IEInspector.
You can then launch the tool and view a page, its markup, and its DOM tree all in a single window.
Inspecting the DOM in Internet Explorer You’ll need to download and install a separate tool for inspecting the DOM on Windows, using Internet Explorer.
Each node in the DOM can be selected below, and that node gets highlighted on the screen.
This pane displays the DOM tree for the current state of the page.
Once you’ve downloaded WebKit, drag it into your Applications folder.
Then you’ll need to run the following command in a terminal window:
This pane shows you the current state of the browser’s DOM tree.
Graceful degradation One of  the thorniest issues in Ajax is graceful degradation: how do you ensure that your app works for browsers without JavaScript enabled (or with a really old version of  JavaScript)
Since this is such a tricky topic, and lots of  folks are designing apps targeted specifically at modern browsers, we’ve had to leave the topic for an appendix.
Still, if  you’re interested in creating a user experience for every possible visitor, here’s what you’ll need to do:
You can’t start with an Ajaxian site and then create code to “fall back” to a non-Ajax site; there’s no code that runs on a non-JavaScript browser.
So you’ve got to create a site that works well without any JavaScript.
This isn’t a great way to please a really wide customer-base, but we can understand why most people go that route.
When you’re stripped of onBlur and onClick, the only markup you can use to trigger action is an <a> element (a link) and a form submit button.
You should use those elements a lot since they’re the only way to initiate server-side processing from a non-JavaScript page.
Here’s another reason to use <a> elements for any sort of links in your page.
Writing a server-side program that responds to an asynchronous request isn’t fundamentally different from writing a program that responds to a form submit.
The big difference, though, is in what that server-side program returns.
The response to a validation request from an Ajax page might be “okay”; but how can a non-JavaScript page interpret “okay”?
Instead, your server-side programs usually need to figure out, based on request parameters, what’s making a request.
Then, based on that, your programs will need to return different data.
So for an Ajax request, your program might return a short response; for a non-Ajax request, the response might be a new XHTML page or redirect.
Even if  you build a non-JavaScript version of  your page and use the right elements and server-side programs, you’ve got to test your pages on every browser you can think of.
In particular, once you’ve added in an Ajax version of  the page, test on those non-JavaScript browsers a few more times.
You never know what’s crept in as you’ve added interactivity.
All of  them are focused on making it easy to build nice, user-friendly, and sometimes visually amazing user interfaces.
These libraries are usually just JavaScript files you can download and then reference in your XHTML pages, whether the page is connected to asynchronous JavaScript or not.
Here, we’re dragging an item from the top of the list to a lower position...
Each script does one thing: dragand-drop, or DOM, or event handling.
Where to get it: It’s included with PHP 5.2.0 and later.
Using JSON libraries in your PHP code You’ve already seen how JSON can help you send and receive complex objects in your Java apps.
But for PHP scripts, you’re going to need a library if  you don’t want to type in your JSON-formatted data manually.
That’s a pain, so having a JSON library is a big deal for server-side JSON interaction.
Here’s how you can use JSON in your PHP scripts, without getting into lots of JSON-specific syntax in your PHP:
You can create arrays and variables just as you normally would in your PHP code.
How to use it: Call json_encode() and pass in your PHP variables and data.
How to use it: Create a new Services_JSON object, and pass your PHP data to the encode() method on that object.
In that case, you’ll need to download a library to get PHP working with JSON on your server.
This library is robust, easy to use, and packaged up through PEAR for easy access.
You’ll need to require() or require_once() the downloaded library, since it’s not included as part of PHP automatically.
Finally, call encode() on your data, using the Services_JSON object you created earlier.
Ajax and ASP.NET If  you’re frequently working with Microsoft technologies, you may want to look into ASP.NET Ajax.
ASP.NET Ajax is Microsoft’s free, proprietary version of  Ajax that hooks into Visual Studio 2008 and the rest of  the Microsoft technology stack.
Because ASP.NET Ajax is built to work with Microsoft’s visual products, it’s more of  a drag-and-drop set of  front end controls, along with the ability to build code to “back” those controls.
You can find out all you ever wanted to know about ASP.NET Ajax at http://www.asp.net/ajax.
ASP.NET Ajax is more about a visual front-end for controls that interact with a server asynchronously than a new technology approach.
And if  you’re already building apps using Visual Studio, then ASP.NET Ajax will drop right in with what you’re already doing.
But if  you’re just building web apps that you want to work on Internet Explorer—as well as other browsers like Firefox and Safari—then you don’t need ASP.NET Ajax.
You can use the techniques you’ve already learned, along with the DOM and request creation utility methods, to get your apps working on all major browsers.
But why stop here? You should add your own functions into utils.js.
Need a handy reusable function for getting the text out of  a node? Put that function in utils.js.
We moved isArray() into utils.js because it’s a general function, not specific to a particular app.
This checks the constructor of the supplied object for the string “array,” regardless of case.
If the constructor contains array, criteria won’t be null, and this will return true.
We return null, so the calling program can figure out how to report or handle an error.
You need to let the function caller decide how to handle problems.
This takes an Event object and returns the object that triggered that event.
Early IE stores the activated object in the window object.
Modern versions of IE use the srcElement property on the Event object.
Non-Microsoft browsers like Firefox, Opera, and Safari store the activated object in the target property of the Event object.
We need to register an event handler, but do it in a browserindependent manner.
